import {
  require_react
} from "./chunk-ZGRSIX2Q.js";
import {
  __commonJS,
  __toESM
} from "./chunk-ROME4SDB.js";

// node_modules/events/events.js
var require_events = __commonJS({
  "node_modules/events/events.js"(exports, module) {
    "use strict";
    var R = typeof Reflect === "object" ? Reflect : null;
    var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply2(target, receiver, args) {
      return Function.prototype.apply.call(target, receiver, args);
    };
    var ReflectOwnKeys;
    if (R && typeof R.ownKeys === "function") {
      ReflectOwnKeys = R.ownKeys;
    } else if (Object.getOwnPropertySymbols) {
      ReflectOwnKeys = function ReflectOwnKeys2(target) {
        return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
      };
    } else {
      ReflectOwnKeys = function ReflectOwnKeys2(target) {
        return Object.getOwnPropertyNames(target);
      };
    }
    function ProcessEmitWarning(warning) {
      if (console && console.warn)
        console.warn(warning);
    }
    var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {
      return value !== value;
    };
    function EventEmitter2() {
      EventEmitter2.init.call(this);
    }
    module.exports = EventEmitter2;
    module.exports.once = once;
    EventEmitter2.EventEmitter = EventEmitter2;
    EventEmitter2.prototype._events = void 0;
    EventEmitter2.prototype._eventsCount = 0;
    EventEmitter2.prototype._maxListeners = void 0;
    var defaultMaxListeners = 10;
    function checkListener(listener) {
      if (typeof listener !== "function") {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }
    }
    Object.defineProperty(EventEmitter2, "defaultMaxListeners", {
      enumerable: true,
      get: function() {
        return defaultMaxListeners;
      },
      set: function(arg) {
        if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) {
          throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
        }
        defaultMaxListeners = arg;
      }
    });
    EventEmitter2.init = function() {
      if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
      }
      this._maxListeners = this._maxListeners || void 0;
    };
    EventEmitter2.prototype.setMaxListeners = function setMaxListeners(n) {
      if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) {
        throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
      }
      this._maxListeners = n;
      return this;
    };
    function _getMaxListeners(that) {
      if (that._maxListeners === void 0)
        return EventEmitter2.defaultMaxListeners;
      return that._maxListeners;
    }
    EventEmitter2.prototype.getMaxListeners = function getMaxListeners() {
      return _getMaxListeners(this);
    };
    EventEmitter2.prototype.emit = function emit(type) {
      var args = [];
      for (var i = 1; i < arguments.length; i++)
        args.push(arguments[i]);
      var doError = type === "error";
      var events2 = this._events;
      if (events2 !== void 0)
        doError = doError && events2.error === void 0;
      else if (!doError)
        return false;
      if (doError) {
        var er;
        if (args.length > 0)
          er = args[0];
        if (er instanceof Error) {
          throw er;
        }
        var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
        err.context = er;
        throw err;
      }
      var handler = events2[type];
      if (handler === void 0)
        return false;
      if (typeof handler === "function") {
        ReflectApply(handler, this, args);
      } else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          ReflectApply(listeners[i], this, args);
      }
      return true;
    };
    function _addListener(target, type, listener, prepend) {
      var m;
      var events2;
      var existing;
      checkListener(listener);
      events2 = target._events;
      if (events2 === void 0) {
        events2 = target._events = /* @__PURE__ */ Object.create(null);
        target._eventsCount = 0;
      } else {
        if (events2.newListener !== void 0) {
          target.emit(
            "newListener",
            type,
            listener.listener ? listener.listener : listener
          );
          events2 = target._events;
        }
        existing = events2[type];
      }
      if (existing === void 0) {
        existing = events2[type] = listener;
        ++target._eventsCount;
      } else {
        if (typeof existing === "function") {
          existing = events2[type] = prepend ? [listener, existing] : [existing, listener];
        } else if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }
        m = _getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
          existing.warned = true;
          var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners added. Use emitter.setMaxListeners() to increase limit");
          w.name = "MaxListenersExceededWarning";
          w.emitter = target;
          w.type = type;
          w.count = existing.length;
          ProcessEmitWarning(w);
        }
      }
      return target;
    }
    EventEmitter2.prototype.addListener = function addListener(type, listener) {
      return _addListener(this, type, listener, false);
    };
    EventEmitter2.prototype.on = EventEmitter2.prototype.addListener;
    EventEmitter2.prototype.prependListener = function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };
    function onceWrapper() {
      if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0)
          return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
      }
    }
    function _onceWrap(target, type, listener) {
      var state = { fired: false, wrapFn: void 0, target, type, listener };
      var wrapped = onceWrapper.bind(state);
      wrapped.listener = listener;
      state.wrapFn = wrapped;
      return wrapped;
    }
    EventEmitter2.prototype.once = function once2(type, listener) {
      checkListener(listener);
      this.on(type, _onceWrap(this, type, listener));
      return this;
    };
    EventEmitter2.prototype.prependOnceListener = function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };
    EventEmitter2.prototype.removeListener = function removeListener(type, listener) {
      var list, events2, position, i, originalListener;
      checkListener(listener);
      events2 = this._events;
      if (events2 === void 0)
        return this;
      list = events2[type];
      if (list === void 0)
        return this;
      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = /* @__PURE__ */ Object.create(null);
        else {
          delete events2[type];
          if (events2.removeListener)
            this.emit("removeListener", type, list.listener || listener);
        }
      } else if (typeof list !== "function") {
        position = -1;
        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }
        if (position < 0)
          return this;
        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }
        if (list.length === 1)
          events2[type] = list[0];
        if (events2.removeListener !== void 0)
          this.emit("removeListener", type, originalListener || listener);
      }
      return this;
    };
    EventEmitter2.prototype.off = EventEmitter2.prototype.removeListener;
    EventEmitter2.prototype.removeAllListeners = function removeAllListeners(type) {
      var listeners, events2, i;
      events2 = this._events;
      if (events2 === void 0)
        return this;
      if (events2.removeListener === void 0) {
        if (arguments.length === 0) {
          this._events = /* @__PURE__ */ Object.create(null);
          this._eventsCount = 0;
        } else if (events2[type] !== void 0) {
          if (--this._eventsCount === 0)
            this._events = /* @__PURE__ */ Object.create(null);
          else
            delete events2[type];
        }
        return this;
      }
      if (arguments.length === 0) {
        var keys = Object.keys(events2);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === "removeListener")
            continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
        return this;
      }
      listeners = events2[type];
      if (typeof listeners === "function") {
        this.removeListener(type, listeners);
      } else if (listeners !== void 0) {
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }
      return this;
    };
    function _listeners(target, type, unwrap) {
      var events2 = target._events;
      if (events2 === void 0)
        return [];
      var evlistener = events2[type];
      if (evlistener === void 0)
        return [];
      if (typeof evlistener === "function")
        return unwrap ? [evlistener.listener || evlistener] : [evlistener];
      return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
    }
    EventEmitter2.prototype.listeners = function listeners(type) {
      return _listeners(this, type, true);
    };
    EventEmitter2.prototype.rawListeners = function rawListeners(type) {
      return _listeners(this, type, false);
    };
    EventEmitter2.listenerCount = function(emitter, type) {
      if (typeof emitter.listenerCount === "function") {
        return emitter.listenerCount(type);
      } else {
        return listenerCount.call(emitter, type);
      }
    };
    EventEmitter2.prototype.listenerCount = listenerCount;
    function listenerCount(type) {
      var events2 = this._events;
      if (events2 !== void 0) {
        var evlistener = events2[type];
        if (typeof evlistener === "function") {
          return 1;
        } else if (evlistener !== void 0) {
          return evlistener.length;
        }
      }
      return 0;
    }
    EventEmitter2.prototype.eventNames = function eventNames() {
      return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
    };
    function arrayClone(arr, n) {
      var copy = new Array(n);
      for (var i = 0; i < n; ++i)
        copy[i] = arr[i];
      return copy;
    }
    function spliceOne(list, index) {
      for (; index + 1 < list.length; index++)
        list[index] = list[index + 1];
      list.pop();
    }
    function unwrapListeners(arr) {
      var ret = new Array(arr.length);
      for (var i = 0; i < ret.length; ++i) {
        ret[i] = arr[i].listener || arr[i];
      }
      return ret;
    }
    function once(emitter, name) {
      return new Promise(function(resolve, reject) {
        function errorListener(err) {
          emitter.removeListener(name, resolver);
          reject(err);
        }
        function resolver() {
          if (typeof emitter.removeListener === "function") {
            emitter.removeListener("error", errorListener);
          }
          resolve([].slice.call(arguments));
        }
        ;
        eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
        if (name !== "error") {
          addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
        }
      });
    }
    function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
      if (typeof emitter.on === "function") {
        eventTargetAgnosticAddListener(emitter, "error", handler, flags);
      }
    }
    function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
      if (typeof emitter.on === "function") {
        if (flags.once) {
          emitter.once(name, listener);
        } else {
          emitter.on(name, listener);
        }
      } else if (typeof emitter.addEventListener === "function") {
        emitter.addEventListener(name, function wrapListener(arg) {
          if (flags.once) {
            emitter.removeEventListener(name, wrapListener);
          }
          listener(arg);
        });
      } else {
        throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
      }
    }
  }
});

// node_modules/@videosdk.live/js-sdk/videosdk.js
var require_videosdk = __commonJS({
  "node_modules/@videosdk.live/js-sdk/videosdk.js"(exports, module) {
    !function(e, t) {
      if ("object" == typeof exports && "object" == typeof module)
        module.exports = t();
      else if ("function" == typeof define && define.amd)
        define([], t);
      else {
        var r = t();
        for (var n in r)
          ("object" == typeof exports ? exports : e)[n] = r[n];
      }
    }(
      self,
      () => (() => {
        var e = {
          7757: (e2, t2, r2) => {
            e2.exports = r2(5666);
          },
          4180: (e2) => {
            self, e2.exports = (() => {
              var e3 = {
                43: function(e4, t3, r3) {
                  var n2, a;
                  !function(i, s) {
                    "use strict";
                    n2 = function() {
                      var e5 = function() {
                      }, t4 = "undefined", r4 = typeof window !== t4 && typeof window.navigator !== t4 && /Trident\/|MSIE /.test(window.navigator.userAgent), n3 = ["trace", "debug", "info", "warn", "error"];
                      function a2(e6, t5) {
                        var r5 = e6[t5];
                        if ("function" == typeof r5.bind)
                          return r5.bind(e6);
                        try {
                          return Function.prototype.bind.call(r5, e6);
                        } catch (t6) {
                          return function() {
                            return Function.prototype.apply.apply(r5, [
                              e6,
                              arguments
                            ]);
                          };
                        }
                      }
                      function i2() {
                        console.log && (console.log.apply ? console.log.apply(console, arguments) : Function.prototype.apply.apply(console.log, [
                          console,
                          arguments
                        ])), console.trace && console.trace();
                      }
                      function s2(n4) {
                        return "debug" === n4 && (n4 = "log"), typeof console !== t4 && ("trace" === n4 && r4 ? i2 : void 0 !== console[n4] ? a2(console, n4) : void 0 !== console.log ? a2(console, "log") : e5);
                      }
                      function o(t5, r5) {
                        for (var a3 = 0; a3 < n3.length; a3++) {
                          var i3 = n3[a3];
                          this[i3] = a3 < t5 ? e5 : this.methodFactory(i3, t5, r5);
                        }
                        this.log = this.debug;
                      }
                      function c(e6, r5, n4) {
                        return function() {
                          typeof console !== t4 && (o.call(this, r5, n4), this[e6].apply(this, arguments));
                        };
                      }
                      function d(e6, t5, r5) {
                        return s2(e6) || c.apply(this, arguments);
                      }
                      function p(e6, r5, a3) {
                        var i3, s3 = this, c2 = "loglevel";
                        function p2() {
                          var e7;
                          if (typeof window !== t4 && c2) {
                            try {
                              e7 = window.localStorage[c2];
                            } catch (e8) {
                            }
                            if (typeof e7 === t4)
                              try {
                                var r6 = window.document.cookie, n4 = r6.indexOf(encodeURIComponent(c2) + "=");
                                -1 !== n4 && (e7 = /^([^;]+)/.exec(r6.slice(n4))[1]);
                              } catch (e8) {
                              }
                            return void 0 === s3.levels[e7] && (e7 = void 0), e7;
                          }
                        }
                        "string" == typeof e6 ? c2 += ":" + e6 : "symbol" == typeof e6 && (c2 = void 0), s3.name = e6, s3.levels = {
                          TRACE: 0,
                          DEBUG: 1,
                          INFO: 2,
                          WARN: 3,
                          ERROR: 4,
                          SILENT: 5
                        }, s3.methodFactory = a3 || d, s3.getLevel = function() {
                          return i3;
                        }, s3.setLevel = function(r6, a4) {
                          if ("string" == typeof r6 && void 0 !== s3.levels[r6.toUpperCase()] && (r6 = s3.levels[r6.toUpperCase()]), !("number" == typeof r6 && r6 >= 0 && r6 <= s3.levels.SILENT))
                            throw "log.setLevel() called with invalid level: " + r6;
                          if (i3 = r6, false !== a4 && function(e7) {
                            var r7 = (n3[e7] || "silent").toUpperCase();
                            if (typeof window !== t4 && c2) {
                              try {
                                return void (window.localStorage[c2] = r7);
                              } catch (e8) {
                              }
                              try {
                                window.document.cookie = encodeURIComponent(c2) + "=" + r7 + ";";
                              } catch (e8) {
                              }
                            }
                          }(r6), o.call(s3, r6, e6), typeof console === t4 && r6 < s3.levels.SILENT)
                            return "No console available for logging";
                        }, s3.setDefaultLevel = function(e7) {
                          p2() || s3.setLevel(e7, false);
                        }, s3.enableAll = function(e7) {
                          s3.setLevel(s3.levels.TRACE, e7);
                        }, s3.disableAll = function(e7) {
                          s3.setLevel(s3.levels.SILENT, e7);
                        };
                        var l2 = p2();
                        null == l2 && (l2 = null == r5 ? "WARN" : r5), s3.setLevel(l2, false);
                      }
                      var l = new p(), u = {};
                      l.getLogger = function(e6) {
                        if ("symbol" != typeof e6 && "string" != typeof e6 || "" === e6)
                          throw new TypeError(
                            "You must supply a name when creating a logger."
                          );
                        var t5 = u[e6];
                        return t5 || (t5 = u[e6] = new p(e6, l.getLevel(), l.methodFactory)), t5;
                      };
                      var h = typeof window !== t4 ? window.log : void 0;
                      return l.noConflict = function() {
                        return typeof window !== t4 && window.log === l && (window.log = h), l;
                      }, l.getLoggers = function() {
                        return u;
                      }, l.default = l, l;
                    }, void 0 === (a = n2.call(t3, r3, t3, e4)) || (e4.exports = a);
                  }();
                }
              }, t2 = {};
              function r2(n2) {
                var a = t2[n2];
                if (void 0 !== a)
                  return a.exports;
                var i = t2[n2] = { exports: {} };
                return e3[n2].call(i.exports, i, i.exports, r2), i.exports;
              }
              r2.d = (e4, t3) => {
                for (var n2 in t3)
                  r2.o(t3, n2) && !r2.o(e4, n2) && Object.defineProperty(e4, n2, { enumerable: true, get: t3[n2] });
              }, r2.o = (e4, t3) => Object.prototype.hasOwnProperty.call(e4, t3), r2.r = (e4) => {
                "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e4, Symbol.toStringTag, {
                  value: "Module"
                }), Object.defineProperty(e4, "__esModule", { value: true });
              };
              var n = {};
              return (() => {
                "use strict";
                r2.r(n), r2.d(n, { VideoSDKMetrics: () => ae });
                const e4 = "inbound", t3 = "outbound", a = {
                  codec_id_in: "",
                  codec_in: {
                    mime_type: null,
                    clock_rate: null,
                    sdp_fmtp_line: null
                  },
                  delta_jitter_ms_in: 0,
                  delta_rtt_ms_out: null,
                  percent_packets_lost_in: 0,
                  delta_packets_in: 0,
                  delta_packets_lost_in: 0,
                  total_packets_in: 0,
                  total_packets_lost_in: 0,
                  total_KBytes_in: 0,
                  delta_KBytes_in: 0,
                  delta_kbs_in: 0,
                  timestamp_in: null,
                  ssrc: "",
                  total_concealment_events: 0,
                  delta_concealment_events: 0,
                  total_inserted_samples_for_decelaration: 0,
                  delta_inserted_samples_for_decelaration: 0,
                  total_removed_samples_for_accelaration: 0,
                  delta_removed_samples_for_accelaration: 0,
                  direction: e4
                }, i = {
                  codec_id_out: "",
                  codec_out: {
                    mime_type: null,
                    clock_rate: null,
                    sdp_fmtp_line: null
                  },
                  delta_jitter_ms_out: 0,
                  delta_rtt_ms_out: null,
                  percent_packets_lost_out: 0,
                  delta_packets_out: 0,
                  delta_packets_lost_out: 0,
                  total_packets_out: 0,
                  total_packets_lost_out: 0,
                  total_KBytes_out: 0,
                  delta_KBytes_out: 0,
                  delta_kbs_out: 0,
                  timestamp_out: null,
                  ssrc: "",
                  direction: t3
                }, s = {
                  codec_id_in: "",
                  size_in: { width: null, height: null, framerate: null },
                  codec_in: { mime_type: null, clock_rate: null },
                  delta_jitter_ms_in: 0,
                  percent_packets_lost_in: 0,
                  delta_packets_in: 0,
                  delta_packets_lost_in: 0,
                  total_packets_in: 0,
                  total_packets_lost_in: 0,
                  total_KBytes_in: 0,
                  delta_KBytes_in: 0,
                  delta_kbs_in: 0,
                  ssrc: "",
                  direction: e4
                }, o = {
                  codec_id_out: "",
                  size_out: { width: null, height: null, framerate: null },
                  codec_out: { mime_type: null, clock_rate: null },
                  delta_jitter_ms_out: 0,
                  delta_rtt_ms_out: null,
                  percent_packets_lost_out: 0,
                  delta_packets_out: 0,
                  delta_packets_lost_out: 0,
                  total_packets_out: 0,
                  total_packets_lost_out: 0,
                  total_KBytes_out: 0,
                  delta_KBytes_out: 0,
                  delta_kbs_out: 0,
                  limitation_out: {
                    reason: null,
                    durations: null,
                    resolutionChanges: 0
                  },
                  timestamp_out: null,
                  ssrc: "",
                  direction: t3
                }, c = "inbound-rtp", d = "bytesReceived", p = "bytesSent", l = "currentRoundTripTime", u = "roundTripTime", h = "fractionLost", m = "frameHeight", f = "frameWidth", _ = "qualityLimitationReason", g = "qualityLimitationDurations", v = "qualityLimitationResolutionChanges", y = "jitter", b = "packetsLost", S = "packetsReceived", w = "packetsSent", T = "responsesReceived", E = "selected", R = "totalRoundTripTime", P = "roundTripTimeMeasurements", C = "framesDecoded", k = "framesEncoded", O = "totalDecodeTime", x = "totalEncodeTime", D = "pliCount", I = "nackCount", L = "audio", M = "video", A = {
                  0: "ETHERNET",
                  2: "CELLULAR_5G",
                  3: "WIFI",
                  5: "CELLULAR_4G",
                  10: "CELLULAR"
                }, N = "audio", j = "video", F = "network", B = "data";
                var U = r2(43);
                const Z = () => `${(/* @__PURE__ */ new Date()).toISOString()} | metrics`, H = (e5, t4, r3) => `${e5} | ${t4} | ${r3}`;
                U.setDefaultLevel(U.levels.TRACE);
                const z = (e5, t4, r3) => {
                  r3 ? U.debug(H(Z(), e5, t4), r3) : U.debug(H(Z(), e5, t4));
                }, V = (e5, t4) => {
                  U.warn(H(Z(), e5, t4));
                }, W = (e5, t4) => {
                  U.error(H(Z(), e5, t4));
                }, G = "extractor   ", q = (t4, r3, n2) => {
                  if (!r3)
                    return null;
                  const c2 = {};
                  let d2 = r3.audio[t4];
                  d2 || (d2 = n2 === e4 ? { ...a } : { ...i }), c2.audio = d2;
                  let p2 = r3.video[t4];
                  return p2 || (p2 = n2 === e4 ? { ...s } : { ...o }), c2.video = p2, c2;
                }, K = (e5, t4, r3, n2) => {
                  let a2 = false;
                  const i2 = n2[t4].total_rtt_ms_out, s2 = n2[t4].total_rtt_measure_out, o2 = r3 ? r3[t4].total_rtt_ms_out : 0, c2 = r3 ? r3[t4].total_rtt_measure_out : 0, d2 = { rtt: null, totalRTT: i2, totalRTTMeasurements: s2 };
                  if (e5.timestamp === n2[t4].timestamp_out)
                    return d2;
                  if (!Object.prototype.hasOwnProperty.call(e5, u))
                    return d2;
                  if (Object.prototype.hasOwnProperty.call(e5, P) && (a2 = true, 0 === Number(e5.roundTripTimeMeasurements) || Number(e5.roundTripTimeMeasurements) - c2 === s2))
                    return d2;
                  const p2 = Number(1e3) * Number(e5.roundTripTime);
                  let l2 = i2 + p2, h2 = s2 + 1;
                  return a2 && (l2 = Number(1e3) * Number(e5.totalRoundTripTime) - o2, h2 = Number(e5.roundTripTimeMeasurements) - c2), { rtt: p2, totalRTT: l2, totalRTTMeasurements: h2 };
                }, $ = (e5, t4, r3) => e5.timestamp === r3[t4].timestamp_out ? null : Object.prototype.hasOwnProperty.call(e5, y) ? Number(1e3) * (Number(e5.jitter) || 0) : null, X = (e5, t4, r3, n2) => {
                  if (!Object.prototype.hasOwnProperty.call(e5, w) || !Object.prototype.hasOwnProperty.call(e5, p))
                    return {
                      packetsSent: r3[t4].total_packets_out,
                      packetsLost: r3[t4].total_packets_lost_out,
                      bytesSent: r3[t4].total_KBytes_out
                    };
                  const a2 = Number(e5.packetsSent) || 0 - (n2 ? n2[t4].total_packets_out : 0), i2 = a2 - r3[t4].total_packets_out, s2 = Number(e5.bytesSent) / 1024 - (n2 ? n2[t4].total_KBytes_out : 0), o2 = s2 - r3[t4].total_KBytes_out, c2 = e5.timestamp || Date.now(), d2 = n2 ? n2.timestamp : null;
                  let l2 = r3.timestamp;
                  !l2 && d2 && (l2 = d2);
                  const u2 = l2 ? c2 - l2 : 0;
                  return {
                    packetsSent: a2,
                    deltaPacketsSent: i2,
                    KBytesSent: s2,
                    deltaKBytesSent: o2,
                    kbsSent: u2 > 0 ? 8e-3 * o2 * 1024 / u2 * 1e3 : 0
                  };
                }, J = (e5, t4, r3, n2) => {
                  let a2 = r3[t4].total_packets_lost_out, i2 = 0, s2 = 0;
                  return Object.prototype.hasOwnProperty.call(e5, b) && (a2 = Number(e5.packetsLost) || 0 - (n2 ? n2[t4].total_packets_lost_out : 0), i2 = a2 - r3[t4].total_packets_lost_out), Object.prototype.hasOwnProperty.call(e5, h) && (s2 = Number(100 * e5.fractionLost)), { packetsLost: a2, deltaPacketsLost: i2, fractionLost: s2 };
                }, Q = (e5, t4, r3, n2) => {
                  if (!Object.prototype.hasOwnProperty.call(e5, S) || !Object.prototype.hasOwnProperty.call(e5, b) || !Object.prototype.hasOwnProperty.call(e5, d))
                    return {
                      percent_packets_lost: r3[t4].percent_packets_lost_in,
                      packetsReceived: r3[t4].total_packets_in,
                      packetsLost: r3[t4].total_packets_lost_in,
                      bytesReceived: r3[t4].total_KBytes_in
                    };
                  const a2 = (Number(e5.packetsReceived) || 0) - (n2 ? n2[t4].total_packets_in : 0), i2 = (Number(e5.packetsLost) || 0) - (n2 ? n2[t4].total_packets_lost_in : 0), s2 = i2 - r3[t4].total_packets_lost_in, o2 = a2 - r3[t4].total_packets_in, c2 = a2 !== r3[t4].total_packets_in ? 100 * s2 / (s2 + o2) : 0, p2 = Number(e5.bytesReceived) / 1024 - (n2 ? n2[t4].total_KBytes_in : 0), l2 = p2 - r3[t4].total_KBytes_in, u2 = e5.timestamp || Date.now(), h2 = n2 ? n2.timestamp : null;
                  let m2 = r3.timestamp;
                  !m2 && h2 && (m2 = h2);
                  const f2 = m2 ? u2 - m2 : 0;
                  return {
                    percentPacketsLost: c2,
                    packetsReceived: a2,
                    deltaPacketsReceived: o2,
                    packetsLost: i2,
                    deltaPacketsLost: s2,
                    KBytesReceived: p2,
                    deltaKBytesReceived: l2,
                    kbsReceived: f2 > 0 ? 8e-3 * l2 * 1024 / f2 * 1e3 : 0
                  };
                }, Y = (e5) => "relay" !== e5.candidateType ? "" : e5.relayProtocol || "", ee = (e5) => Object.prototype.hasOwnProperty.call(e5, m) && Object.prototype.hasOwnProperty.call(e5, f) ? {
                  width: e5.frameWidth || null,
                  height: e5.frameHeight || null,
                  framerate: e5.framesPerSecond
                } : { width: null, height: null, framerate: null };
                class te {
                  constructor(e5, t4) {
                    this._callbacks = { onStatsCollected: null }, this._id = `collector-${t4}`, this._moduleName = this._id, this._probeId = t4, this._config = e5, this._state = "idle", this._statsReports = [];
                  }
                  registerCallback(e5, t4, r3) {
                    e5 in this._callbacks ? (this._callbacks[e5] = { callback: t4, context: r3 }, z(this._moduleName, `registered callback '${e5}'`)) : W(
                      this._moduleName,
                      `can't register callback for '${e5}' - not found`
                    );
                  }
                  unregisterCallback(e5) {
                    e5 in this._callbacks ? (this._callbacks[e5] = null, delete this._callbacks[e5], z(this._moduleName, `unregistered callback '${e5}'`)) : W(
                      this._moduleName,
                      `can't unregister callback for '${e5}' - not found`
                    );
                  }
                  analyze(r3, n2) {
                    const d2 = ((e5) => {
                      const t4 = {
                        name: "",
                        meetingId: "",
                        peerId: "",
                        timestamp: null,
                        count: 0,
                        audio: {},
                        video: {},
                        network: { infrastructure: 3 },
                        data: {
                          delta_kbs_bandwidth_in: 0,
                          delta_kbs_bandwidth_out: 0,
                          delta_rtt_connectivity_ms: null,
                          total_rtt_connectivity_ms: 0
                        }
                      };
                      if (e5) {
                        const t5 = {
                          ...e5,
                          audio: {},
                          video: {},
                          data: { ...e5.data },
                          network: { ...e5.network }
                        };
                        return Object.keys(e5.audio).forEach((r4) => {
                          t5.audio[r4] = { ...e5.audio[r4] };
                        }), Object.keys(e5.video).forEach((r4) => {
                          t5.video[r4] = { ...e5.video[r4] };
                        }), t5;
                      }
                      return {
                        ...t4,
                        audio: {},
                        video: {},
                        data: { ...t4.data },
                        network: { ...t4.network }
                      };
                    })(n2);
                    d2.name = this._config.name, d2.meetingId = this._config.meetingId, d2.peerId = this._config.peerId, d2.count = n2 ? n2.count + 1 : 1;
                    let p2 = null;
                    return r3.forEach((r4) => {
                      !p2 && r4.timestamp && (p2 = r4.timestamp), ((r5, n3, a2, i2) => {
                        if (!r5)
                          return [];
                        switch (r5.type) {
                          case "candidate-pair":
                            let s2 = false;
                            if (r5.nominated && "succeeded" === r5.state && (s2 = true, z(
                              G,
                              `analyze() - got stats ${r5.type} for ${a2}`,
                              r5
                            ), E in r5 && !r5.selected && (s2 = false)), s2) {
                              r5.localCandidateId, r5.remoteCandidateId;
                              const e5 = ((e6, t5, r6) => {
                                const n4 = (e6.bytesReceived || 0) / 1024 - (r6 ? r6.data.total_KBytes_in : 0), a3 = (e6.bytesSent || 0) / 1024 - (r6 ? r6.data.total_KBytes_out : 0), i3 = e6.timestamp || Date.now(), s3 = n4 - t5.data.total_KBytes_in, o3 = a3 - t5.data.total_KBytes_out, c2 = r6 ? r6.timestamp : null;
                                let d3 = t5.timestamp;
                                !d3 && c2 && (d3 = c2);
                                const p3 = d3 ? i3 - d3 : 0;
                                return {
                                  total_KBytes_received: n4,
                                  total_KBytes_sent: a3,
                                  delta_KBytes_received: s3,
                                  delta_KBytes_sent: o3,
                                  kbs_speed_received: p3 > 0 ? 8e-3 * s3 * 1024 / p3 * 1e3 : 0,
                                  kbs_speed_sent: p3 > 0 ? 8e-3 * o3 * 1024 / p3 * 1e3 : 0
                                };
                              })(r5, n3, i2), t4 = (((e6) => {
                                e6.availableIncomingBitrate, e6.availableOutgoingBitrate;
                              })(r5), ((e6, t5, r6, n4) => {
                                if (!Object.prototype.hasOwnProperty.call(
                                  e6,
                                  l
                                ))
                                  return {
                                    rtt: null,
                                    totalRTT: n4.data.total_rtt_connectivity_ms,
                                    totalRTTMeasurements: n4.data.total_rtt_connectivity_measure
                                  };
                                const a3 = Number(1e3) * Number(e6.currentRoundTripTime);
                                let i3 = n4.data.total_rtt_connectivity_ms + a3, s3 = n4.data.total_rtt_connectivity_measure + 1;
                                return Object.prototype.hasOwnProperty.call(
                                  e6,
                                  R
                                ) && (i3 = Number(1e3) * Number(e6.totalRoundTripTime) - (r6 ? r6.data.total_rtt_connectivity_ms : 0)), Object.prototype.hasOwnProperty.call(
                                  e6,
                                  T
                                ) && (s3 = Number(e6.responsesReceived) - (r6 ? r6.data.total_rtt_connectivity_measure : 0)), {
                                  rtt: a3,
                                  totalRTT: i3,
                                  totalRTTMeasurements: s3
                                };
                              })(r5, 0, i2, n3));
                              return [
                                {
                                  type: B,
                                  value: {
                                    total_KBytes_in: e5.total_KBytes_received
                                  }
                                },
                                {
                                  type: B,
                                  value: {
                                    total_KBytes_out: e5.total_KBytes_sent
                                  }
                                },
                                {
                                  type: B,
                                  value: {
                                    delta_KBytes_in: e5.delta_KBytes_received
                                  }
                                },
                                {
                                  type: B,
                                  value: {
                                    delta_KBytes_out: e5.delta_KBytes_sent
                                  }
                                },
                                {
                                  type: B,
                                  value: {
                                    delta_kbs_in: e5.kbs_speed_received
                                  }
                                },
                                {
                                  type: B,
                                  value: {
                                    delta_kbs_out: e5.kbs_speed_sent
                                  }
                                },
                                {
                                  type: B,
                                  value: {
                                    delta_rtt_connectivity_ms: t4.rtt
                                  }
                                }
                              ];
                            }
                            break;
                          case "local-candidate":
                            if (r5.id === n3.network.local_candidate_id)
                              return [
                                {
                                  type: F,
                                  value: {
                                    infrastructure: r5.networkType
                                  }
                                },
                                {
                                  type: F,
                                  value: {
                                    local_candidate_protocol: r5.protocol || ""
                                  }
                                },
                                {
                                  type: F,
                                  value: {
                                    local_candidate_relay_protocol: Y(r5)
                                  }
                                }
                              ];
                            break;
                          case c: {
                            z(
                              G,
                              `analyze() - got stats ${r5.type} for ${a2}`,
                              r5
                            );
                            const t4 = r5.ssrc, s3 = q(t4, n3, e4);
                            s3 && (s3.timestamp = n3.timestamp);
                            const o3 = q(t4, i2, e4);
                            if (o3 && (o3.timestamp = i2.timestamp), r5.mediaType === L) {
                              const e5 = Q(r5, L, s3, o3), n4 = $(r5, L, s3), a3 = r5.codecId || "", i3 = ((e6, t5, r6, n5) => {
                                const a4 = Number(e6.concealmentEvents) || 0, i4 = a4 - (r6.audio.total_concealment_events || 0), s4 = Number(
                                  e6.insertedSamplesForDeceleration
                                ) || 0, o4 = s4 - (r6.audio.total_inserted_samples_for_decelaration || 0), c2 = Number(
                                  e6.removedSamplesForAcceleration
                                ) || 0;
                                return {
                                  totalConcealmentEvents: a4,
                                  deltaConcealmentEvents: i4,
                                  totalInsertedSamplesForDecelaration: s4,
                                  deltaInsertedSamplesForDecelaration: o4,
                                  totalRemovedSamplesForAccelaration: c2,
                                  deltaRemovedSampleForAccelaration: c2 - (r6.audio.total_removed_samples_for_accelaration || 0)
                                };
                              })(r5, 0, s3);
                              return [
                                {
                                  ssrc: t4,
                                  type: N,
                                  value: { codec_id_in: a3 }
                                },
                                {
                                  ssrc: t4,
                                  type: N,
                                  value: {
                                    total_packets_in: e5.packetsReceived
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: N,
                                  value: {
                                    delta_packets_in: e5.deltaPacketsReceived
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: N,
                                  value: {
                                    total_packets_lost_in: e5.packetsLost
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: N,
                                  value: {
                                    delta_packets_lost_in: e5.deltaPacketsLost
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: N,
                                  value: {
                                    percent_packets_lost_in: e5.percentPacketsLost
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: N,
                                  value: {
                                    total_KBytes_in: e5.KBytesReceived
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: N,
                                  value: {
                                    delta_KBytes_in: e5.deltaKBytesReceived
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: N,
                                  value: { delta_kbs_in: e5.kbsReceived }
                                },
                                {
                                  ssrc: t4,
                                  type: N,
                                  value: { delta_jitter_ms_in: n4 }
                                },
                                {
                                  ssrc: t4,
                                  type: N,
                                  value: {
                                    total_concealment_events: i3.totalConcealmentEvents
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: N,
                                  value: {
                                    delta_concealment_events: i3.deltaConcealmentEvents
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: N,
                                  value: {
                                    total_inserted_samples_for_decelaration: i3.totalInsertedSamplesForDecelaration
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: N,
                                  value: {
                                    delta_inserted_samples_for_decelaration: i3.deltaInsertedSamplesForDecelaration
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: N,
                                  value: {
                                    total_removed_samples_for_accelaration: i3.totalRemovedSamplesForAccelaration
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: N,
                                  value: {
                                    delta_removed_samples_for_accelaration: i3.deltaRemovedSampleForAccelaration
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: N,
                                  value: { track_in: r5.trackId }
                                },
                                {
                                  ssrc: t4,
                                  type: N,
                                  value: {
                                    track_id_in: r5.trackIdentifier
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: N,
                                  value: {
                                    media_source_id: r5.mediaSourceId
                                  }
                                }
                              ];
                            }
                            if (r5.mediaType === M) {
                              ((e6, t5) => {
                                if (!Object.prototype.hasOwnProperty.call(
                                  e6,
                                  C
                                ) || !Object.prototype.hasOwnProperty.call(
                                  e6,
                                  O
                                ))
                                  return {
                                    delta_ms_decode_frame: t5.video.delta_ms_decode_frame_in,
                                    frames_decoded: t5.video.total_frames_decoded_in,
                                    total_decode_time: t5.video.total_time_decoded_in
                                  };
                                e6.framesDecoded, e6.totalDecodeTime, t5.video.total_time_decoded_in, t5.video.total_frames_decoded_in;
                              })(r5, s3);
                              const e5 = Q(r5, M, s3, o3), n4 = $(r5, M, s3), a3 = (r5.decoderImplementation, r5.codecId || null), i3 = ee(r5);
                              return ((e6, t5, r6) => {
                                if (!Object.prototype.hasOwnProperty.call(
                                  e6,
                                  D
                                ) || !Object.prototype.hasOwnProperty.call(
                                  e6,
                                  I
                                ))
                                  return {
                                    pliCount: t5.total_pli_sent_in,
                                    nackCount: t5.total_nack_sent_in,
                                    deltaPliCount: 0,
                                    deltaNackCount: 0
                                  };
                                e6.pliCount, r6 && r6.video.total_pli_sent_in, e6.nackCount, r6 && r6.video.total_nack_sent_in, t5.video.total_pli_sent_in, t5.video.total_nack_sent_in;
                              })(r5, s3, o3), [
                                {
                                  ssrc: t4,
                                  type: j,
                                  value: { codec_id_in: a3 }
                                },
                                {
                                  ssrc: t4,
                                  type: j,
                                  value: {
                                    total_packets_in: e5.packetsReceived
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: j,
                                  value: {
                                    delta_packets_in: e5.deltaPacketsReceived
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: j,
                                  value: {
                                    total_packets_lost_in: e5.packetsLost
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: j,
                                  value: {
                                    delta_packets_lost_in: e5.deltaPacketsLost
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: j,
                                  value: {
                                    percent_packets_lost_in: e5.percentPacketsLost
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: j,
                                  value: {
                                    total_KBytes_in: e5.KBytesReceived
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: j,
                                  value: {
                                    delta_KBytes_in: e5.deltaKBytesReceived
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: j,
                                  value: {
                                    delta_kbs_in: e5.kbsReceived
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: j,
                                  value: { delta_jitter_ms_in: n4 }
                                },
                                {
                                  ssrc: t4,
                                  type: j,
                                  value: { size_in: i3 }
                                },
                                {
                                  ssrc: t4,
                                  type: j,
                                  value: { track_in: r5.trackId }
                                },
                                {
                                  ssrc: t4,
                                  type: j,
                                  value: {
                                    track_id_in: r5.trackIdentifier
                                  }
                                },
                                {
                                  ssrc: t4,
                                  type: j,
                                  value: {
                                    media_source_id: r5.mediaSourceId
                                  }
                                }
                              ];
                            }
                            break;
                          }
                          case "outbound-rtp": {
                            z(
                              G,
                              `analyze() - got stats ${r5.type} for ${a2}`,
                              r5
                            );
                            const e5 = r5.ssrc, s3 = q(e5, n3, t3);
                            s3 && (s3.timestamp = n3.timestamp);
                            const o3 = q(e5, i2, t3);
                            if (o3 && (o3.timestamp = i2.timestamp), r5.mediaType === L) {
                              const t4 = r5.codecId || null, n4 = X(r5, L, s3, o3);
                              return [
                                {
                                  ssrc: e5,
                                  type: N,
                                  value: { codec_id_out: t4 }
                                },
                                {
                                  ssrc: e5,
                                  type: N,
                                  value: {
                                    total_packets_out: n4.packetsSent
                                  }
                                },
                                {
                                  ssrc: e5,
                                  type: N,
                                  value: {
                                    delta_packets_out: n4.deltaPacketsSent
                                  }
                                },
                                {
                                  ssrc: e5,
                                  type: N,
                                  value: {
                                    total_KBytes_out: n4.KBytesSent
                                  }
                                },
                                {
                                  ssrc: e5,
                                  type: N,
                                  value: {
                                    delta_KBytes_out: n4.deltaKBytesSent
                                  }
                                },
                                {
                                  ssrc: e5,
                                  type: N,
                                  value: { delta_kbs_out: n4.kbsSent }
                                },
                                {
                                  ssrc: e5,
                                  type: N,
                                  value: { track_out: r5.trackId }
                                },
                                {
                                  ssrc: e5,
                                  type: N,
                                  value: {
                                    track_id_out: r5.trackIdentifier
                                  }
                                },
                                {
                                  ssrc: e5,
                                  type: N,
                                  value: {
                                    media_source_id: r5.mediaSourceId
                                  }
                                }
                              ];
                            }
                            if (r5.mediaType === M) {
                              r5.encoderImplementation;
                              const t4 = r5.codecId || null, n4 = (((e6, t5) => {
                                if (!Object.prototype.hasOwnProperty.call(
                                  e6,
                                  k
                                ) || !Object.prototype.hasOwnProperty.call(
                                  e6,
                                  x
                                ))
                                  return {
                                    delta_ms_encode_frame: t5.video.delta_ms_encode_frame_out,
                                    frames_encoded: t5.video.total_frames_encoded_out,
                                    total_encode_time: t5.video.total_time_encoded_out
                                  };
                                e6.framesEncoded, e6.totalEncodeTime, t5.video.total_time_encoded_out, t5.video.total_frames_encoded_out;
                              })(r5, s3), ee(r5)), a3 = ((e6) => {
                                const t5 = Object.prototype.hasOwnProperty.call(
                                  e6,
                                  _
                                ) ? e6.qualityLimitationReason : null, r6 = Object.prototype.hasOwnProperty.call(
                                  e6,
                                  v
                                ) ? e6.qualityLimitationResolutionChanges : null, n5 = Object.prototype.hasOwnProperty.call(
                                  e6,
                                  g
                                ) ? e6.qualityLimitationDurations : null;
                                return n5 && Object.keys(n5).forEach((e7) => {
                                  n5[e7] > 1e3 && (n5[e7] = Number(n5[e7] / 1e3));
                                }), {
                                  reason: t5,
                                  durations: n5,
                                  resolutionChanges: r6
                                };
                              })(r5), i3 = (((e6, t5, r6) => {
                                if (!Object.prototype.hasOwnProperty.call(
                                  e6,
                                  D
                                ) || !Object.prototype.hasOwnProperty.call(
                                  e6,
                                  I
                                ))
                                  return {
                                    pliCount: t5.total_pli_received_out,
                                    nackCount: t5.total_nack_received_out,
                                    deltaPliCount: 0,
                                    deltaNackCount: 0
                                  };
                                e6.pliCount, r6 && r6.video.total_pli_received_out, e6.nackCount, r6 && r6.video.total_nack_received_out, t5.video.total_pli_received_out, t5.video.total_nack_received_out;
                              })(r5, s3, o3), X(r5, M, s3, o3));
                              return [
                                {
                                  ssrc: e5,
                                  type: j,
                                  value: { codec_id_out: t4 }
                                },
                                {
                                  ssrc: e5,
                                  type: j,
                                  value: {
                                    total_packets_out: i3.packetsSent
                                  }
                                },
                                {
                                  ssrc: e5,
                                  type: j,
                                  value: {
                                    delta_packets_out: i3.deltaPacketsSent
                                  }
                                },
                                {
                                  ssrc: e5,
                                  type: j,
                                  value: {
                                    total_KBytes_out: i3.KBytesSent
                                  }
                                },
                                {
                                  ssrc: e5,
                                  type: j,
                                  value: {
                                    delta_KBytes_out: i3.deltaKBytesSent
                                  }
                                },
                                {
                                  ssrc: e5,
                                  type: j,
                                  value: { delta_kbs_out: i3.kbsSent }
                                },
                                {
                                  ssrc: e5,
                                  type: j,
                                  value: { size_out: n4 }
                                },
                                {
                                  ssrc: e5,
                                  type: j,
                                  value: { limitation_out: a3 }
                                },
                                {
                                  ssrc: e5,
                                  type: j,
                                  value: { track_out: r5.trackId }
                                },
                                {
                                  ssrc: e5,
                                  type: j,
                                  value: {
                                    track_id_out: r5.trackIdentifier
                                  }
                                },
                                {
                                  ssrc: e5,
                                  type: j,
                                  value: {
                                    media_source_id: r5.mediaSourceId
                                  }
                                }
                              ];
                            }
                            break;
                          }
                          case "media-source": {
                            z(
                              G,
                              `analyze() - got stats ${r5.type} for ${a2}`,
                              r5
                            );
                            const e5 = [];
                            return Object.keys(n3.audio).forEach((t4) => {
                              const i3 = n3.audio[t4];
                              if (i3.media_source_id === r5.id) {
                                z(
                                  G,
                                  `analyze() - got stats ${r5.type} for ${a2}`,
                                  r5
                                );
                                var s3 = r5.trackIdentifier;
                                e5.push({
                                  ssrc: i3.ssrc,
                                  type: N,
                                  value: { track_id_out: s3 }
                                });
                              }
                            }), Object.keys(n3.video).forEach((t4) => {
                              const i3 = n3.video[t4];
                              if (i3.media_source_id === r5.id) {
                                z(
                                  G,
                                  `analyze() - got stats ${r5.type} for ${a2}`,
                                  r5
                                );
                                var s3 = r5.trackIdentifier;
                                e5.push({
                                  ssrc: i3.ssrc,
                                  type: j,
                                  value: { track_id_out: s3 }
                                });
                              }
                            }), e5;
                          }
                          case "track": {
                            z(
                              G,
                              `analyze() - got stats ${r5.type} for ${a2}`,
                              r5
                            );
                            const e5 = [];
                            return Object.keys(n3.audio).forEach((t4) => {
                              const i3 = n3.audio[t4];
                              if (i3.track_in === r5.id || i3.track_out === r5.id) {
                                z(
                                  G,
                                  `analyze() - got stats ${r5.type} for ${a2}`,
                                  r5
                                );
                                var s3 = r5.trackIdentifier;
                                r5.id === i3.track_in ? e5.push({
                                  ssrc: i3.ssrc,
                                  type: N,
                                  value: { track_id_in: s3 }
                                }) : e5.push({
                                  ssrc: i3.ssrc,
                                  type: N,
                                  value: { track_id_out: s3 }
                                });
                              }
                            }), Object.keys(n3.video).forEach((t4) => {
                              const i3 = n3.video[t4];
                              if (i3.track_in === r5.id || i3.track_out === r5.id) {
                                z(
                                  G,
                                  `analyze() - got stats ${r5.type} for ${a2}`,
                                  r5
                                );
                                var s3 = r5.trackIdentifier;
                                r5.id === i3.track_in ? e5.push({
                                  ssrc: i3.ssrc,
                                  type: j,
                                  value: { track_id_in: s3 }
                                }) : e5.push({
                                  ssrc: i3.ssrc,
                                  type: j,
                                  value: { track_id_out: s3 }
                                });
                              }
                            }), e5;
                          }
                          case "codec":
                            const o2 = [];
                            return Object.keys(n3.audio).forEach((e5) => {
                              const t4 = n3.audio[e5];
                              if (t4.codec_id_in === r5.id || t4.codec_id_out === r5.id) {
                                z(
                                  G,
                                  `analyze() - got stats ${r5.type} for ${a2}`,
                                  r5
                                );
                                const e6 = ((e7) => ({
                                  channels: e7.channels || null,
                                  clock_rate: e7.clockRate || null,
                                  mime_type: e7.mimeType || null,
                                  sdp_fmtp_line: e7.sdpFmtpLine || null
                                }))(r5);
                                r5.id === t4.codec_id_in ? o2.push({
                                  ssrc: t4.ssrc,
                                  type: N,
                                  value: { codec_in: e6 }
                                }) : o2.push({
                                  ssrc: t4.ssrc,
                                  type: N,
                                  value: { codec_out: e6 }
                                });
                              }
                            }), Object.keys(n3.video).forEach((e5) => {
                              const t4 = n3.video[e5];
                              if (t4.codec_id_in === r5.id || t4.codec_id_out === r5.id) {
                                z(
                                  G,
                                  `analyze() - got stats ${r5.type} for ${a2}`,
                                  r5
                                );
                                const e6 = ((e7) => ({
                                  clock_rate: e7.clockRate || null,
                                  mime_type: e7.mimeType || null
                                }))(r5);
                                r5.id === t4.codec_id_in ? o2.push({
                                  ssrc: t4.ssrc,
                                  type: j,
                                  value: { codec_in: e6 }
                                }) : o2.push({
                                  ssrc: t4.ssrc,
                                  type: j,
                                  value: { codec_out: e6 }
                                });
                              }
                            }), o2;
                          case "remote-inbound-rtp": {
                            z(
                              G,
                              `analyze() - got stats ${r5.type} for ${a2}`,
                              r5
                            );
                            const e5 = r5.ssrc, s3 = q(e5, n3, t3), o3 = q(e5, i2, t3);
                            if (r5.kind === L) {
                              const t4 = K(r5, L, o3, s3), n4 = $(r5, L, s3), a3 = J(r5, L, s3, o3);
                              return [
                                {
                                  ssrc: e5,
                                  type: N,
                                  value: { delta_rtt_ms_out: t4.rtt }
                                },
                                {
                                  ssrc: e5,
                                  type: N,
                                  value: { delta_jitter_ms_out: n4 }
                                },
                                {
                                  ssrc: e5,
                                  type: N,
                                  value: { timestamp_out: r5.timestamp }
                                },
                                {
                                  ssrc: e5,
                                  type: N,
                                  value: {
                                    total_packets_lost_out: a3.packetsLost
                                  }
                                },
                                {
                                  ssrc: e5,
                                  type: N,
                                  value: {
                                    delta_packets_lost_out: a3.deltaPacketsLost
                                  }
                                },
                                {
                                  ssrc: e5,
                                  type: N,
                                  value: {
                                    percent_packets_lost_out: a3.fractionLost
                                  }
                                }
                              ];
                            }
                            if (r5.kind === M) {
                              const t4 = K(r5, M, o3, s3), n4 = $(r5, M, s3), a3 = J(r5, M, s3, o3);
                              return [
                                {
                                  ssrc: e5,
                                  type: j,
                                  value: { delta_rtt_ms_out: t4.rtt }
                                },
                                {
                                  ssrc: e5,
                                  type: j,
                                  value: { delta_jitter_ms_out: n4 }
                                },
                                {
                                  ssrc: e5,
                                  type: j,
                                  value: { timestamp_out: r5.timestamp }
                                },
                                {
                                  ssrc: e5,
                                  type: j,
                                  value: {
                                    total_packets_lost_out: a3.packetsLost
                                  }
                                },
                                {
                                  ssrc: e5,
                                  type: j,
                                  value: {
                                    delta_packets_lost_out: a3.deltaPacketsLost
                                  }
                                }
                              ];
                            }
                            break;
                          }
                          case "remote-outbound-rtp": {
                            z(
                              G,
                              `analyze() - got stats ${r5.type} for ${a2}`,
                              r5
                            );
                            const e5 = r5.ssrc, s3 = q(e5, n3, t3), o3 = q(e5, i2, t3);
                            if (r5.kind === L) {
                              const t4 = K(r5, L, o3, s3);
                              return [
                                {
                                  ssrc: e5,
                                  type: N,
                                  value: { delta_rtt_ms_in: t4.rtt }
                                },
                                {
                                  ssrc: e5,
                                  type: N,
                                  value: { timestamp_in: r5.timestamp }
                                }
                              ];
                            }
                            break;
                          }
                        }
                        return [];
                      })(r4, d2, d2.name, null).forEach((e5) => {
                        if (e5.value && e5.type)
                          if (e5.ssrc) {
                            let p3 = d2[e5.type][e5.ssrc];
                            p3 || (t4 = e5.type, n3 = r4.type, p3 = t4 === L ? n3 === c ? { ...a } : { ...i } : n3 === c ? { ...s } : { ...o }, p3.ssrc = e5.ssrc, d2[e5.type][e5.ssrc] = p3), Object.keys(e5.value).forEach((t5) => {
                              void 0 !== e5.value[t5] && (p3[t5] = e5.value[t5]);
                            });
                          } else
                            Object.keys(e5.value).forEach((t5) => {
                              void 0 !== e5.value[t5] && (d2[e5.type][t5] = e5.value[t5]);
                            });
                        var t4, n3;
                      });
                    }), d2.timestamp = p2, d2;
                  }
                  async collectStats() {
                    try {
                      const e5 = await this._config.monitoringObject.getStats(), t4 = this.analyze(
                        e5,
                        this._statsReports.slice().pop() || null
                      );
                      return this._statsReports.push(t4), this.fireOnStatsCollected(t4), e5;
                    } catch (e5) {
                      return W(this._moduleName, `got error ${e5}`), null;
                    }
                  }
                  fireOnStatsCollected(r3) {
                    if (this._callbacks.onStatsCollected) {
                      const n2 = {};
                      n2.meetingId = r3.meetingId, n2.peerId = r3.peerId, n2.name = r3.name, n2.audio = [], n2.video = [], Object.values(r3.audio).forEach((a2) => {
                        const i2 = {};
                        i2.network = A[r3.network.infrastructure], i2.timestamp = r3.timestamp, a2.direction == e4 ? (i2.codec = a2.codec_in.mime_type, i2.jitter = a2.delta_jitter_ms_in, i2.bitrate = a2.delta_kbs_in, i2.packetsLost = a2.delta_packets_lost_in, i2.rtt = r3.data.delta_rtt_connectivity_ms || 0, i2.totalPackets = a2.delta_packets_in, i2.concealmentEvents = a2.delta_concealment_events, i2.removedSampleForAccelaration = a2.delta_removed_samples_for_accelaration, i2.insertedSamplesForDecelaration = a2.delta_inserted_samples_for_decelaration, i2.trackId = a2.track_id_in) : a2.direction == t3 && (i2.codec = a2.codec_out.mime_type, i2.jitter = a2.delta_jitter_ms_out, i2.bitrate = a2.delta_kbs_out, i2.packetsLost = a2.delta_packets_lost_out, i2.rtt = r3.data.delta_rtt_connectivity_ms || 0, i2.totalPackets = a2.delta_packets_out, i2.trackId = a2.track_id_out), n2.audio.push(i2);
                      }), Object.values(r3.video).forEach((a2) => {
                        const i2 = {};
                        i2.network = A[r3.network.infrastructure], i2.timestamp = r3.timestamp, a2.direction == e4 ? (i2.codec = a2.codec_in.mime_type, i2.jitter = a2.delta_jitter_ms_in, i2.bitrate = a2.delta_kbs_in, i2.packetsLost = a2.delta_packets_lost_in, i2.rtt = r3.data.delta_rtt_connectivity_ms || 0, i2.totalPackets = a2.delta_packets_in, i2.size = a2.size_in, i2.trackId = a2.track_id_in) : a2.direction == t3 && (i2.codec = a2.codec_out.mime_type, i2.jitter = a2.delta_jitter_ms_out, i2.bitrate = a2.delta_kbs_out, i2.packetsLost = a2.delta_packets_lost_out, i2.rtt = r3.data.delta_rtt_connectivity_ms || 0, i2.totalPackets = a2.delta_packets_out, i2.limitation = a2.limitation_out, i2.size = a2.size_out, i2.trackId = a2.track_id_out), n2.video.push(i2);
                      }), this._callbacks.onStatsCollected.callback(n2);
                    }
                  }
                }
                class re {
                  constructor(e5) {
                    this._id = e5.name && e5.name.substr(0, 12).padEnd(12, " "), this._moduleName = this._id, this._config = e5, this._collector = new te(this._config, this._id);
                  }
                  get id() {
                    return this._id;
                  }
                  start() {
                    this._collectorIntervalId ? V("Probe already started.") : (z(this._moduleName, "Probe Started"), this._collectorIntervalId = setInterval(() => {
                      z(this._moduleName, "Collector collecting stats"), this._collector.collectStats();
                    }, this._config.refreshEvery));
                  }
                  stop() {
                    this._collectorIntervalId ? (clearInterval(this._collectorIntervalId), z(this._moduleName, "Probe Stopped")) : V("Probe not running, Please start first.");
                  }
                  set onStatsCollected(e5) {
                    e5 ? this._collector.registerCallback(
                      "onStatsCollected",
                      e5
                    ) : this._collector.unregisterCallback(
                      "onStatsCollected"
                    );
                  }
                }
                const ne = {
                  refreshEvery: 2e3,
                  startAfter: 0,
                  stopAfter: -1,
                  verbose: false,
                  peerId: "peerId",
                  meetingId: "meetingId",
                  name: "name"
                };
                class ae {
                  constructor(e5) {
                    var t4;
                    this._config = { defaultConfig: ne, ...e5 }, this._probes = [], t4 = this._config.verbose || false, U.setLevel(t4 ? U.levels.TRACE : U.levels.INFO), z("VideoSDKMetrics", "VideoSDKMetrics initialized");
                  }
                  get probes() {
                    return this._probes;
                  }
                  addNewProbe(e5, t4) {
                    if (!e5)
                      throw new Error("undefined monitoring object");
                    const r3 = { monitoringObject: e5, ...t4, ...this._config }, n2 = new re(r3);
                    return this._probes.push(n2), n2;
                  }
                  removeExistingProbe(e5) {
                    if (!e5)
                      throw new Error("undefined probe");
                    e5.stop(), this._probes = this._probes.filter(
                      (t4) => e5.id !== t4.id
                    );
                  }
                  startAllProbes() {
                    this._probes.forEach((e5, t4) => {
                      e5.start();
                    });
                  }
                  stopAllProbes() {
                    this._probes.forEach((e5) => e5.stop());
                  }
                }
              })(), n;
            })();
          },
          7329: function(e2, t2, r2) {
            "use strict";
            var n = this && this.__importDefault || function(e3) {
              return e3 && e3.__esModule ? e3 : { default: e3 };
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Logger = void 0;
            const a = n(r2(2035)), i = "awaitqueue";
            t2.Logger = class {
              constructor(e3) {
                e3 ? (this._debug = (0, a.default)(`awaitqueue:${e3}`), this._warn = (0, a.default)(`awaitqueue:WARN:${e3}`), this._error = (0, a.default)(`awaitqueue:ERROR:${e3}`)) : (this._debug = (0, a.default)(i), this._warn = (0, a.default)("awaitqueue:WARN"), this._error = (0, a.default)("awaitqueue:ERROR")), this._debug.log = console.info.bind(console), this._warn.log = console.warn.bind(console), this._error.log = console.error.bind(console);
              }
              get debug() {
                return this._debug;
              }
              get warn() {
                return this._warn;
              }
              get error() {
                return this._error;
              }
            };
          },
          2186: (e2, t2, r2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.AwaitQueue = t2.AwaitQueueRemovedTaskError = t2.AwaitQueueStoppedError = void 0;
            const n = new (r2(7329)).Logger();
            class a extends Error {
              constructor(e3) {
                super(null != e3 ? e3 : "AwaitQueue stopped"), this.name = "AwaitQueueStoppedError", "function" == typeof Error.captureStackTrace && Error.captureStackTrace(this, a);
              }
            }
            t2.AwaitQueueStoppedError = a;
            class i extends Error {
              constructor(e3) {
                super(null != e3 ? e3 : "AwaitQueue task removed"), this.name = "AwaitQueueRemovedTaskError", "function" == typeof Error.captureStackTrace && Error.captureStackTrace(this, i);
              }
            }
            t2.AwaitQueueRemovedTaskError = i;
            t2.AwaitQueue = class {
              constructor() {
                this.pendingTasks = /* @__PURE__ */ new Map(), this.nextTaskId = 0, this.stopping = false;
              }
              get size() {
                return this.pendingTasks.size;
              }
              async push(e3, t3) {
                if (t3 = null != t3 ? t3 : e3.name, n.debug(`push() [name:${t3}]`), "function" != typeof e3)
                  throw new TypeError("given task is not a function");
                if (t3)
                  try {
                    Object.defineProperty(e3, "name", { value: t3 });
                  } catch (e4) {
                  }
                return new Promise((r3, a2) => {
                  const i2 = {
                    id: this.nextTaskId++,
                    task: e3,
                    name: t3,
                    enqueuedAt: Date.now(),
                    executedAt: void 0,
                    completed: false,
                    resolve: (e4) => {
                      if (i2.completed)
                        return;
                      i2.completed = true, this.pendingTasks.delete(i2.id), n.debug(`resolving task [name:${i2.name}]`), r3(e4);
                      const [t4] = this.pendingTasks.values();
                      t4 && !t4.executedAt && this.execute(t4);
                    },
                    reject: (e4) => {
                      if (!i2.completed && (i2.completed = true, this.pendingTasks.delete(i2.id), n.debug(`rejecting task [name:${i2.name}]: %s`, String(e4)), a2(e4), !this.stopping)) {
                        const [e5] = this.pendingTasks.values();
                        e5 && !e5.executedAt && this.execute(e5);
                      }
                    }
                  };
                  this.pendingTasks.set(i2.id, i2), 1 === this.pendingTasks.size && this.execute(i2);
                });
              }
              stop() {
                n.debug("stop()"), this.stopping = true;
                for (const e3 of this.pendingTasks.values())
                  n.debug(`stop() | stopping task [name:${e3.name}]`), e3.reject(new a());
                this.stopping = false;
              }
              remove(e3) {
                n.debug(`remove() [taskIdx:${e3}]`);
                const t3 = Array.from(this.pendingTasks.values())[e3];
                t3 ? t3.reject(new i()) : n.debug(`stop() | no task with given idx [taskIdx:${e3}]`);
              }
              dump() {
                const e3 = Date.now();
                let t3 = 0;
                return Array.from(this.pendingTasks.values()).map((r3) => ({
                  idx: t3++,
                  task: r3.task,
                  name: r3.name,
                  enqueuedTime: r3.executedAt ? r3.executedAt - r3.enqueuedAt : e3 - r3.enqueuedAt,
                  executionTime: r3.executedAt ? e3 - r3.executedAt : 0
                }));
              }
              async execute(e3) {
                if (n.debug(`execute() [name:${e3.name}]`), e3.executedAt)
                  throw new Error("task already being executed");
                e3.executedAt = Date.now();
                try {
                  const t3 = await e3.task();
                  e3.resolve(t3);
                } catch (t3) {
                  e3.reject(t3);
                }
              }
            };
          },
          2035: (e2, t2, r2) => {
            t2.formatArgs = function(t3) {
              if (t3[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + t3[0] + (this.useColors ? "%c " : " ") + "+" + e2.exports.humanize(this.diff), !this.useColors)
                return;
              const r3 = "color: " + this.color;
              t3.splice(1, 0, r3, "color: inherit");
              let n2 = 0, a = 0;
              t3[0].replace(/%[a-zA-Z%]/g, (e3) => {
                "%%" !== e3 && (n2++, "%c" === e3 && (a = n2));
              }), t3.splice(a, 0, r3);
            }, t2.save = function(e3) {
              try {
                e3 ? t2.storage.setItem("debug", e3) : t2.storage.removeItem("debug");
              } catch (e4) {
              }
            }, t2.load = function() {
              let e3;
              try {
                e3 = t2.storage.getItem("debug");
              } catch (e4) {
              }
              !e3 && "undefined" != typeof process && "env" in process && (e3 = process.env.DEBUG);
              return e3;
            }, t2.useColors = function() {
              if ("undefined" != typeof window && window.process && ("renderer" === window.process.type || window.process.__nwjs))
                return true;
              if ("undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))
                return false;
              return "undefined" != typeof document && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || "undefined" != typeof window && window.console && (window.console.firebug || window.console.exception && window.console.table) || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
            }, t2.storage = function() {
              try {
                return localStorage;
              } catch (e3) {
              }
            }(), t2.destroy = (() => {
              let e3 = false;
              return () => {
                e3 || (e3 = true, console.warn(
                  "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."
                ));
              };
            })(), t2.colors = [
              "#0000CC",
              "#0000FF",
              "#0033CC",
              "#0033FF",
              "#0066CC",
              "#0066FF",
              "#0099CC",
              "#0099FF",
              "#00CC00",
              "#00CC33",
              "#00CC66",
              "#00CC99",
              "#00CCCC",
              "#00CCFF",
              "#3300CC",
              "#3300FF",
              "#3333CC",
              "#3333FF",
              "#3366CC",
              "#3366FF",
              "#3399CC",
              "#3399FF",
              "#33CC00",
              "#33CC33",
              "#33CC66",
              "#33CC99",
              "#33CCCC",
              "#33CCFF",
              "#6600CC",
              "#6600FF",
              "#6633CC",
              "#6633FF",
              "#66CC00",
              "#66CC33",
              "#9900CC",
              "#9900FF",
              "#9933CC",
              "#9933FF",
              "#99CC00",
              "#99CC33",
              "#CC0000",
              "#CC0033",
              "#CC0066",
              "#CC0099",
              "#CC00CC",
              "#CC00FF",
              "#CC3300",
              "#CC3333",
              "#CC3366",
              "#CC3399",
              "#CC33CC",
              "#CC33FF",
              "#CC6600",
              "#CC6633",
              "#CC9900",
              "#CC9933",
              "#CCCC00",
              "#CCCC33",
              "#FF0000",
              "#FF0033",
              "#FF0066",
              "#FF0099",
              "#FF00CC",
              "#FF00FF",
              "#FF3300",
              "#FF3333",
              "#FF3366",
              "#FF3399",
              "#FF33CC",
              "#FF33FF",
              "#FF6600",
              "#FF6633",
              "#FF9900",
              "#FF9933",
              "#FFCC00",
              "#FFCC33"
            ], t2.log = console.debug || console.log || (() => {
            }), e2.exports = r2(1811)(t2);
            const { formatters: n } = e2.exports;
            n.j = function(e3) {
              try {
                return JSON.stringify(e3);
              } catch (e4) {
                return "[UnexpectedJSONParseError]: " + e4.message;
              }
            };
          },
          1811: (e2, t2, r2) => {
            e2.exports = function(e3) {
              function t3(e4) {
                let r3, a2, i, s = null;
                function o(...e5) {
                  if (!o.enabled)
                    return;
                  const n2 = o, a3 = Number(/* @__PURE__ */ new Date()), i2 = a3 - (r3 || a3);
                  n2.diff = i2, n2.prev = r3, n2.curr = a3, r3 = a3, e5[0] = t3.coerce(e5[0]), "string" != typeof e5[0] && e5.unshift("%O");
                  let s2 = 0;
                  e5[0] = e5[0].replace(/%([a-zA-Z%])/g, (r4, a4) => {
                    if ("%%" === r4)
                      return "%";
                    s2++;
                    const i3 = t3.formatters[a4];
                    if ("function" == typeof i3) {
                      const t4 = e5[s2];
                      r4 = i3.call(n2, t4), e5.splice(s2, 1), s2--;
                    }
                    return r4;
                  }), t3.formatArgs.call(n2, e5);
                  (n2.log || t3.log).apply(n2, e5);
                }
                return o.namespace = e4, o.useColors = t3.useColors(), o.color = t3.selectColor(e4), o.extend = n, o.destroy = t3.destroy, Object.defineProperty(o, "enabled", {
                  enumerable: true,
                  configurable: false,
                  get: () => null !== s ? s : (a2 !== t3.namespaces && (a2 = t3.namespaces, i = t3.enabled(e4)), i),
                  set: (e5) => {
                    s = e5;
                  }
                }), "function" == typeof t3.init && t3.init(o), o;
              }
              function n(e4, r3) {
                const n2 = t3(this.namespace + (void 0 === r3 ? ":" : r3) + e4);
                return n2.log = this.log, n2;
              }
              function a(e4) {
                return e4.toString().substring(2, e4.toString().length - 2).replace(/\.\*\?$/, "*");
              }
              return t3.debug = t3, t3.default = t3, t3.coerce = function(e4) {
                if (e4 instanceof Error)
                  return e4.stack || e4.message;
                return e4;
              }, t3.disable = function() {
                const e4 = [
                  ...t3.names.map(a),
                  ...t3.skips.map(a).map((e5) => "-" + e5)
                ].join(",");
                return t3.enable(""), e4;
              }, t3.enable = function(e4) {
                let r3;
                t3.save(e4), t3.namespaces = e4, t3.names = [], t3.skips = [];
                const n2 = ("string" == typeof e4 ? e4 : "").split(/[\s,]+/), a2 = n2.length;
                for (r3 = 0; r3 < a2; r3++)
                  n2[r3] && ("-" === (e4 = n2[r3].replace(/\*/g, ".*?"))[0] ? t3.skips.push(new RegExp("^" + e4.slice(1) + "$")) : t3.names.push(new RegExp("^" + e4 + "$")));
              }, t3.enabled = function(e4) {
                if ("*" === e4[e4.length - 1])
                  return true;
                let r3, n2;
                for (r3 = 0, n2 = t3.skips.length; r3 < n2; r3++)
                  if (t3.skips[r3].test(e4))
                    return false;
                for (r3 = 0, n2 = t3.names.length; r3 < n2; r3++)
                  if (t3.names[r3].test(e4))
                    return true;
                return false;
              }, t3.humanize = r2(7824), t3.destroy = function() {
                console.warn(
                  "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."
                );
              }, Object.keys(e3).forEach((r3) => {
                t3[r3] = e3[r3];
              }), t3.names = [], t3.skips = [], t3.formatters = {}, t3.selectColor = function(e4) {
                let r3 = 0;
                for (let t4 = 0; t4 < e4.length; t4++)
                  r3 = (r3 << 5) - r3 + e4.charCodeAt(t4), r3 |= 0;
                return t3.colors[Math.abs(r3) % t3.colors.length];
              }, t3.enable(t3.load()), t3;
            };
          },
          8962: (e2, t2, r2) => {
            "use strict";
            r2.d(t2, { v: () => n });
            var n = {
              networkPriorities: {
                audio: "high",
                dominatingVideo: "high",
                otherVideos: "medium",
                screenShare: "medium"
              },
              aspectRatios: {
                fourThree: { label: "fourThree", value: 1.333 },
                oneSixNine: { label: "oneSixNine", value: 1.777 }
              },
              audioProfiles: {
                speech_low_quality: {
                  sampleRate: 16e3,
                  bitRate: 24,
                  sampleSize: 16,
                  stereo: false,
                  dtx: true,
                  fec: true,
                  maxPlaybackRate: 16e3,
                  packetTime: 20,
                  autoGainControl: true,
                  echoCancellation: true,
                  noiseSuppression: true,
                  channelCount: 1
                },
                speech_standard: {
                  sampleRate: 32e3,
                  bitRate: 24,
                  sampleSize: 24,
                  stereo: false,
                  dtx: true,
                  fec: true,
                  maxPlaybackRate: 32e3,
                  packetTime: 30,
                  autoGainControl: true,
                  echoCancellation: true,
                  noiseSuppression: true,
                  channelCount: 1
                },
                music_standard: {
                  sampleRate: 48e3,
                  bitRate: 40,
                  sampleSize: 32,
                  stereo: false,
                  dtx: false,
                  fec: true,
                  maxPlaybackRate: 48e3,
                  packetTime: 40,
                  autoGainControl: false,
                  echoCancellation: false,
                  noiseSuppression: false,
                  channelCount: 1
                },
                standard_stereo: {
                  sampleRate: 48e3,
                  sampleSize: 32,
                  bitRate: 64,
                  stereo: true,
                  dtx: false,
                  fec: true,
                  maxPlaybackRate: 48e3,
                  packetTime: 40,
                  autoGainControl: false,
                  echoCancellation: false,
                  noiseSuppression: false,
                  channelCount: 2
                },
                high_quality: {
                  sampleRate: 48e3,
                  sampleSize: 32,
                  bitRate: 128,
                  stereo: false,
                  dtx: false,
                  fec: true,
                  maxPlaybackRate: 48e3,
                  packetTime: 60,
                  autoGainControl: false,
                  echoCancellation: false,
                  noiseSuppression: false,
                  channelCount: 1
                },
                high_quality_stereo: {
                  sampleRate: 48e3,
                  sampleSize: 32,
                  bitRate: 192,
                  stereo: true,
                  dtx: false,
                  fec: true,
                  maxPlaybackRate: 48e3,
                  packetTime: 60,
                  autoGainControl: false,
                  echoCancellation: false,
                  noiseSuppression: false,
                  channelCount: 2
                }
              },
              videoProfiles: {
                h90p_w160p: {
                  width: 160,
                  height: 90,
                  bitRate: 6e4,
                  frameRate: 15,
                  aspectRatio: "oneSixNine"
                },
                h180p_w320p: {
                  width: 320,
                  height: 180,
                  bitRate: 12e4,
                  frameRate: 15,
                  aspectRatio: "oneSixNine"
                },
                h216p_w384p: {
                  width: 384,
                  height: 216,
                  bitRate: 18e4,
                  frameRate: 15,
                  aspectRatio: "oneSixNine"
                },
                h360p_w640p: {
                  width: 640,
                  height: 360,
                  bitRate: 3e5,
                  frameRate: 20,
                  aspectRatio: "oneSixNine"
                },
                h540p_w960p: {
                  width: 960,
                  height: 540,
                  bitRate: 6e5,
                  frameRate: 25,
                  aspectRatio: "oneSixNine"
                },
                h720p_w1280p: {
                  width: 1280,
                  height: 720,
                  bitRate: 2e6,
                  frameRate: 30,
                  aspectRatio: "oneSixNine"
                },
                h1080p_w1920p: {
                  width: 1920,
                  height: 1080,
                  bitRate: 3e6,
                  frameRate: 30,
                  aspectRatio: "oneSixNine"
                },
                h1440p_w2560p: {
                  width: 2560,
                  height: 1440,
                  bitRate: 5e6,
                  frameRate: 30,
                  aspectRatio: "oneSixNine"
                },
                h2160p_w3840p: {
                  width: 3840,
                  height: 2160,
                  bitRate: 8e6,
                  frameRate: 30,
                  aspectRatio: "oneSixNine"
                },
                h120p_w160p: {
                  width: 160,
                  height: 120,
                  bitRate: 8e4,
                  frameRate: 15,
                  aspectRatio: "fourThree"
                },
                h180p_w240p: {
                  width: 240,
                  height: 180,
                  bitRate: 1e5,
                  frameRate: 15,
                  aspectRatio: "fourThree"
                },
                h240p_w320p: {
                  width: 320,
                  height: 240,
                  bitRate: 15e4,
                  frameRate: 15,
                  aspectRatio: "fourThree"
                },
                h360p_w480p: {
                  width: 480,
                  height: 360,
                  bitRate: 225e3,
                  frameRate: 20,
                  aspectRatio: "fourThree"
                },
                h480p_w640p: {
                  width: 640,
                  height: 480,
                  bitRate: 3e5,
                  frameRate: 25,
                  aspectRatio: "fourThree"
                },
                h540p_w720p: {
                  width: 720,
                  height: 540,
                  bitRate: 45e4,
                  frameRate: 30,
                  aspectRatio: "fourThree"
                },
                h720p_w960p: {
                  width: 960,
                  height: 720,
                  bitRate: 15e5,
                  frameRate: 30,
                  aspectRatio: "fourThree"
                },
                h1080p_w1440p: {
                  width: 1440,
                  height: 1080,
                  bitRate: 25e5,
                  frameRate: 30,
                  aspectRatio: "fourThree"
                },
                h1440p_w1920p: {
                  width: 1920,
                  height: 1440,
                  bitRate: 35e5,
                  frameRate: 30,
                  aspectRatio: "fourThree"
                }
              },
              screenShareProfiles: {
                h360p_30fps: {
                  width: 640,
                  height: 360,
                  bitRate: 2e5,
                  frameRate: 3
                },
                h720p_5fps: {
                  width: 1280,
                  height: 720,
                  bitRate: 4e5,
                  frameRate: 5
                },
                h720p_15fps: {
                  width: 1280,
                  height: 720,
                  bitRate: 1e6,
                  frameRate: 15
                },
                h1080p_15fps: {
                  width: 1920,
                  height: 1080,
                  bitRate: 15e5,
                  frameRate: 15
                },
                h1080p_30fps: {
                  width: 1920,
                  height: 1080,
                  bitRate: 1e6,
                  frameRate: 15
                }
              },
              simulcastProfiles: {
                3840: [
                  { scaleResolutionDownBy: 12, maxBitRate: 15e4 },
                  { scaleResolutionDownBy: 6, maxBitRate: 5e5 },
                  { scaleResolutionDownBy: 1, maxBitRate: 1e7 }
                ],
                1920: [
                  { scaleResolutionDownBy: 6, maxBitRate: 15e4 },
                  { scaleResolutionDownBy: 3, maxBitRate: 5e5 },
                  { scaleResolutionDownBy: 1, maxBitRate: 35e5 }
                ],
                1280: [
                  { scaleResolutionDownBy: 4, maxBitRate: 15e4 },
                  { scaleResolutionDownBy: 2, maxBitRate: 5e5 },
                  { scaleResolutionDownBy: 1, maxBitRate: 12e5 }
                ],
                640: [
                  { scaleResolutionDownBy: 2, maxBitRate: 15e4 },
                  { scaleResolutionDownBy: 1, maxBitRate: 5e5 }
                ],
                320: [{ scaleResolutionDownBy: 1, maxBitRate: 15e4 }]
              },
              requestTimeout: 2e4,
              requestRetries: 3,
              transportOptions: { tcp: true },
              videoKSVCEncodings: [{ scalabilityMode: "S3T3_KEY" }],
              videoSVCEncodings: [{ scalabilityMode: "S3T3", dtx: true }]
            };
          },
          6900: (e2, t2, r2) => {
            "use strict";
            r2.d(t2, { H: () => a, R: () => n });
            var n = {
              INVALID_API_KEY: 4001,
              INVALID_TOKEN: 4002,
              INVALID_MEETING_ID: 4003,
              INVALID_PARTICIPANT_ID: 4004,
              DUPLICATE_PARTICIPANT: 4005,
              ACCOUNT_DEACTIVATED: 4006,
              ACCOUNT_DISCONTINUED: 4007,
              INVALID_PERMISSIONS: 4008,
              MAX_PARTCIPANT_REACHED: 4009,
              MAX_SPEAKER_REACHED: 4010,
              START_RECORDING_FAILED: 4011,
              STOP_RECORDING_FAILED: 4012,
              START_LIVESTREAM_FAILED: 4013,
              STOP_LIVESTREAM_FAILED: 4014,
              INVALID_LIVESTREAM_CONFIG: 4015,
              START_HLS_FAILED: 4016,
              STOP_HLS_FAILED: 4017,
              RECORDING_FAILED: 5001,
              LIVESTREAM_FAILED: 5002,
              HLS_FAILED: 5003,
              ERROR_GET_VIDEO_MEDIA: 3011,
              ERROR_GET_AUDIO_MEDIA: 3012,
              ERROR_GET_DISPLAY_MEDIA: 3013,
              ERROR_GET_VIDEO_MEDIA_PERMISSION_DENIED: 3014,
              ERROR_GET_AUDIO_MEDIA_PERMISSION_DENIED: 3015,
              ERROR_GET_DISPLAY_MEDIA_PERMISSION_DENIED: 3016
            }, a = {
              ERROR_GET_VIDEO_MEDIA: {
                code: 3011,
                message: "Your browser/Device does not support Video."
              },
              ERROR_GET_AUDIO_MEDIA: {
                code: 3012,
                message: "Your browser/Device does not support Audio."
              },
              ERROR_GET_DISPLAY_MEDIA: {
                code: 3013,
                message: "Your browser/Device does not support Screen Sharing."
              },
              ERROR_GET_VIDEO_MEDIA_PERMISSION_DENIED: {
                code: 3014,
                message: "Video capture permission denied."
              },
              ERROR_GET_AUDIO_MEDIA_PERMISSION_DENIED: {
                code: 3015,
                message: "Audio capture permission denied."
              },
              ERROR_GET_DISPLAY_MEDIA_PERMISSION_DENIED: {
                code: 3016,
                message: "Screen sharing permission denied."
              }
            };
          },
          6380: (e2, t2, r2) => {
            "use strict";
            r2.d(t2, { o: () => n });
            var n = {
              HLS_STARTING: "HLS_STARTING",
              HLS_STARTED: "HLS_STARTED",
              HLS_PLAYABLE: "HLS_PLAYABLE",
              HLS_STOPPING: "HLS_STOPPING",
              HLS_STOPPED: "HLS_STOPPED"
            };
          },
          3430: (e2, t2, r2) => {
            "use strict";
            r2.d(t2, { S: () => n });
            var n = { CONFERENCE: "CONFERENCE", VIEWER: "VIEWER" };
          },
          710: (e2, t2, r2) => {
            "use strict";
            r2.r(t2), r2.d(t2, { VideoSDK: () => Tt, ZujoSDK: () => Et });
            var n = r2(5861), a = r2(5671), i = r2(3144), s = r2(4942), o = r2(7757), c = r2.n(o), d = r2(1206), p = r2.n(d);
            function l(e3, t3) {
              var r3 = Object.keys(e3);
              if (Object.getOwnPropertySymbols) {
                var n2 = Object.getOwnPropertySymbols(e3);
                t3 && (n2 = n2.filter(function(t4) {
                  return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
                })), r3.push.apply(r3, n2);
              }
              return r3;
            }
            function u(e3) {
              for (var t3 = 1; t3 < arguments.length; t3++) {
                var r3 = null != arguments[t3] ? arguments[t3] : {};
                t3 % 2 ? l(Object(r3), true).forEach(function(t4) {
                  (0, s.Z)(e3, t4, r3[t4]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(
                  e3,
                  Object.getOwnPropertyDescriptors(r3)
                ) : l(Object(r3)).forEach(function(t4) {
                  Object.defineProperty(
                    e3,
                    t4,
                    Object.getOwnPropertyDescriptor(r3, t4)
                  );
                });
              }
              return e3;
            }
            function h(e3) {
              return "Minified Redux error #" + e3 + "; visit https://redux.js.org/Errors?code=" + e3 + " for the full message or use the non-minified dev environment for full errors. ";
            }
            var m = "function" == typeof Symbol && Symbol.observable || "@@observable", f = function() {
              return Math.random().toString(36).substring(7).split("").join(".");
            }, _ = {
              INIT: "@@redux/INIT" + f(),
              REPLACE: "@@redux/REPLACE" + f(),
              PROBE_UNKNOWN_ACTION: function() {
                return "@@redux/PROBE_UNKNOWN_ACTION" + f();
              }
            };
            function g(e3) {
              if ("object" != typeof e3 || null === e3)
                return false;
              for (var t3 = e3; null !== Object.getPrototypeOf(t3); )
                t3 = Object.getPrototypeOf(t3);
              return Object.getPrototypeOf(e3) === t3;
            }
            function v(e3, t3, r3) {
              var n2;
              if ("function" == typeof t3 && "function" == typeof r3 || "function" == typeof r3 && "function" == typeof arguments[3])
                throw new Error(h(0));
              if ("function" == typeof t3 && void 0 === r3 && (r3 = t3, t3 = void 0), void 0 !== r3) {
                if ("function" != typeof r3)
                  throw new Error(h(1));
                return r3(v)(e3, t3);
              }
              if ("function" != typeof e3)
                throw new Error(h(2));
              var a2 = e3, i2 = t3, s2 = [], o2 = s2, c2 = false;
              function d2() {
                o2 === s2 && (o2 = s2.slice());
              }
              function p2() {
                if (c2)
                  throw new Error(h(3));
                return i2;
              }
              function l2(e4) {
                if ("function" != typeof e4)
                  throw new Error(h(4));
                if (c2)
                  throw new Error(h(5));
                var t4 = true;
                return d2(), o2.push(e4), function() {
                  if (t4) {
                    if (c2)
                      throw new Error(h(6));
                    t4 = false, d2();
                    var r4 = o2.indexOf(e4);
                    o2.splice(r4, 1), s2 = null;
                  }
                };
              }
              function u2(e4) {
                if (!g(e4))
                  throw new Error(h(7));
                if (void 0 === e4.type)
                  throw new Error(h(8));
                if (c2)
                  throw new Error(h(9));
                try {
                  c2 = true, i2 = a2(i2, e4);
                } finally {
                  c2 = false;
                }
                for (var t4 = s2 = o2, r4 = 0; r4 < t4.length; r4++) {
                  (0, t4[r4])();
                }
                return e4;
              }
              function f2(e4) {
                if ("function" != typeof e4)
                  throw new Error(h(10));
                a2 = e4, u2({ type: _.REPLACE });
              }
              function y2() {
                var e4, t4 = l2;
                return (e4 = {
                  subscribe: function(e5) {
                    if ("object" != typeof e5 || null === e5)
                      throw new Error(h(11));
                    function r4() {
                      e5.next && e5.next(p2());
                    }
                    return r4(), { unsubscribe: t4(r4) };
                  }
                })[m] = function() {
                  return this;
                }, e4;
              }
              return u2({ type: _.INIT }), (n2 = {
                dispatch: u2,
                subscribe: l2,
                getState: p2,
                replaceReducer: f2
              })[m] = y2, n2;
            }
            function y() {
              for (var e3 = arguments.length, t3 = new Array(e3), r3 = 0; r3 < e3; r3++)
                t3[r3] = arguments[r3];
              return 0 === t3.length ? function(e4) {
                return e4;
              } : 1 === t3.length ? t3[0] : t3.reduce(function(e4, t4) {
                return function() {
                  return e4(t4.apply(void 0, arguments));
                };
              });
            }
            function b() {
              for (var e3 = arguments.length, t3 = new Array(e3), r3 = 0; r3 < e3; r3++)
                t3[r3] = arguments[r3];
              return function(e4) {
                return function() {
                  var r4 = e4.apply(void 0, arguments), n2 = function() {
                    throw new Error(h(15));
                  }, a2 = {
                    getState: r4.getState,
                    dispatch: function() {
                      return n2.apply(void 0, arguments);
                    }
                  }, i2 = t3.map(function(e5) {
                    return e5(a2);
                  });
                  return n2 = y.apply(void 0, i2)(r4.dispatch), u(u({}, r4), {}, { dispatch: n2 });
                };
              };
            }
            function S(e3) {
              return function(t3) {
                var r3 = t3.dispatch, n2 = t3.getState;
                return function(t4) {
                  return function(a2) {
                    return "function" == typeof a2 ? a2(r3, n2, e3) : t4(a2);
                  };
                };
              };
            }
            var w = S();
            w.withExtraArgument = S;
            const T = w;
            var E = r2(3196), R = r2.n(E);
            function P(e3, t3) {
              var r3 = Object.keys(e3);
              if (Object.getOwnPropertySymbols) {
                var n2 = Object.getOwnPropertySymbols(e3);
                t3 && (n2 = n2.filter(function(t4) {
                  return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
                })), r3.push.apply(r3, n2);
              }
              return r3;
            }
            function C(e3) {
              for (var t3 = 1; t3 < arguments.length; t3++) {
                var r3 = null != arguments[t3] ? arguments[t3] : {};
                t3 % 2 ? P(Object(r3), true).forEach(function(t4) {
                  (0, s.Z)(e3, t4, r3[t4]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(
                  e3,
                  Object.getOwnPropertyDescriptors(r3)
                ) : P(Object(r3)).forEach(function(t4) {
                  Object.defineProperty(
                    e3,
                    t4,
                    Object.getOwnPropertyDescriptor(r3, t4)
                  );
                });
              }
              return e3;
            }
            var k = {
              url: null,
              state: "new",
              activeSpeakerId: null,
              statsPeerId: null,
              faceDetection: false
            };
            const O = function() {
              var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : k, t3 = arguments.length > 1 ? arguments[1] : void 0;
              switch (t3.type) {
                case "SET_ROOM_URL":
                  var r3 = t3.payload.url;
                  return C(C({}, e3), {}, { url: r3 });
                case "SET_ROOM_STATE":
                  var n2 = t3.payload.state;
                  return C(
                    C({}, e3),
                    {},
                    "connected" === n2 ? { state: n2 } : { state: n2, activeSpeakerId: null, statsPeerId: null }
                  );
                case "SET_ROOM_ACTIVE_SPEAKER":
                  var a2 = t3.payload.peerId;
                  return C(C({}, e3), {}, { activeSpeakerId: a2 });
                case "SET_ROOM_STATS_PEER_ID":
                  var i2 = t3.payload.peerId;
                  return e3.statsPeerId === i2 ? C(C({}, e3), {}, { statsPeerId: null }) : C(C({}, e3), {}, { statsPeerId: i2 });
                case "SET_FACE_DETECTION":
                  var s2 = t3.payload;
                  return C(C({}, e3), {}, { faceDetection: s2 });
                case "REMOVE_PEER":
                  var o2 = t3.payload.peerId, c2 = C({}, e3);
                  return o2 && o2 === e3.activeSpeakerId && (c2.activeSpeakerId = null), o2 && o2 === e3.statsPeerId && (c2.statsPeerId = null), c2;
                default:
                  return e3;
              }
            };
            function x(e3, t3) {
              var r3 = Object.keys(e3);
              if (Object.getOwnPropertySymbols) {
                var n2 = Object.getOwnPropertySymbols(e3);
                t3 && (n2 = n2.filter(function(t4) {
                  return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
                })), r3.push.apply(r3, n2);
              }
              return r3;
            }
            function D(e3) {
              for (var t3 = 1; t3 < arguments.length; t3++) {
                var r3 = null != arguments[t3] ? arguments[t3] : {};
                t3 % 2 ? x(Object(r3), true).forEach(function(t4) {
                  (0, s.Z)(e3, t4, r3[t4]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(
                  e3,
                  Object.getOwnPropertyDescriptors(r3)
                ) : x(Object(r3)).forEach(function(t4) {
                  Object.defineProperty(
                    e3,
                    t4,
                    Object.getOwnPropertyDescriptor(r3, t4)
                  );
                });
              }
              return e3;
            }
            var I = {
              id: null,
              displayName: null,
              displayNameSet: false,
              device: null,
              canSendMic: false,
              canSendWebcam: false,
              canChangeWebcam: false,
              webcamInProgress: false,
              shareInProgress: false,
              audioOnly: false,
              audioOnlyInProgress: false,
              audioMuted: false,
              restartIceInProgress: false
            };
            const L = function() {
              var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : I, t3 = arguments.length > 1 ? arguments[1] : void 0;
              switch (t3.type) {
                case "SET_ROOM_STATE":
                  var r3 = t3.payload.state;
                  return "closed" === r3 ? D(
                    D({}, e3),
                    {},
                    {
                      webcamInProgress: false,
                      shareInProgress: false,
                      audioOnly: false,
                      audioOnlyInProgress: false,
                      audioMuted: false,
                      restartIceInProgress: false
                    }
                  ) : e3;
                case "SET_ME":
                  var n2 = t3.payload, a2 = n2.peerId, i2 = n2.displayName, s2 = n2.displayNameSet, o2 = n2.device;
                  return D(
                    D({}, e3),
                    {},
                    { id: a2, displayName: i2, displayNameSet: s2, device: o2 }
                  );
                case "SET_MEDIA_CAPABILITIES":
                  var c2 = t3.payload, d2 = c2.canSendMic, p2 = c2.canSendWebcam;
                  return D(D({}, e3), {}, { canSendMic: d2, canSendWebcam: p2 });
                case "SET_CAN_CHANGE_WEBCAM":
                  var l2 = t3.payload;
                  return D(D({}, e3), {}, { canChangeWebcam: l2 });
                case "SET_WEBCAM_IN_PROGRESS":
                  var u2 = t3.payload.flag;
                  return D(D({}, e3), {}, { webcamInProgress: u2 });
                case "SET_SHARE_IN_PROGRESS":
                  var h2 = t3.payload.flag;
                  return D(D({}, e3), {}, { shareInProgress: h2 });
                case "SET_DISPLAY_NAME":
                  var m2 = t3.payload.displayName;
                  return m2 || (m2 = e3.displayName), D(D({}, e3), {}, { displayName: m2, displayNameSet: true });
                case "SET_AUDIO_ONLY_STATE":
                  var f2 = t3.payload.enabled;
                  return D(D({}, e3), {}, { audioOnly: f2 });
                case "SET_AUDIO_ONLY_IN_PROGRESS":
                  var _2 = t3.payload.flag;
                  return D(D({}, e3), {}, { audioOnlyInProgress: _2 });
                case "SET_AUDIO_MUTED_STATE":
                  var g2 = t3.payload.enabled;
                  return D(D({}, e3), {}, { audioMuted: g2 });
                case "SET_RESTART_ICE_IN_PROGRESS":
                  var v2 = t3.payload.flag;
                  return D(D({}, e3), {}, { restartIceInProgress: v2 });
                default:
                  return e3;
              }
            };
            function M(e3, t3) {
              var r3 = Object.keys(e3);
              if (Object.getOwnPropertySymbols) {
                var n2 = Object.getOwnPropertySymbols(e3);
                t3 && (n2 = n2.filter(function(t4) {
                  return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
                })), r3.push.apply(r3, n2);
              }
              return r3;
            }
            function A(e3) {
              for (var t3 = 1; t3 < arguments.length; t3++) {
                var r3 = null != arguments[t3] ? arguments[t3] : {};
                t3 % 2 ? M(Object(r3), true).forEach(function(t4) {
                  (0, s.Z)(e3, t4, r3[t4]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(
                  e3,
                  Object.getOwnPropertyDescriptors(r3)
                ) : M(Object(r3)).forEach(function(t4) {
                  Object.defineProperty(
                    e3,
                    t4,
                    Object.getOwnPropertyDescriptor(r3, t4)
                  );
                });
              }
              return e3;
            }
            var N = {};
            const j = function() {
              var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : N, t3 = arguments.length > 1 ? arguments[1] : void 0;
              switch (t3.type) {
                case "SET_ROOM_STATE":
                  var r3 = t3.payload.state;
                  return "closed" === r3 ? {} : e3;
                case "ADD_PRODUCER":
                  var n2 = t3.payload.producer;
                  return A(A({}, e3), {}, (0, s.Z)({}, n2.id, n2));
                case "REMOVE_PRODUCER":
                  var a2 = t3.payload.producerId, i2 = A({}, e3);
                  return delete i2[a2], i2;
                case "SET_PRODUCER_PAUSED":
                  var o2 = t3.payload.producerId, c2 = e3[o2], d2 = A(A({}, c2), {}, { paused: true });
                  return A(A({}, e3), {}, (0, s.Z)({}, o2, d2));
                case "SET_PRODUCER_RESUMED":
                  var p2 = t3.payload.producerId, l2 = e3[p2], u2 = A(A({}, l2), {}, { paused: false });
                  return A(A({}, e3), {}, (0, s.Z)({}, p2, u2));
                case "SET_PRODUCER_TRACK":
                  var h2 = t3.payload, m2 = h2.producerId, f2 = h2.track, _2 = e3[m2], g2 = A(A({}, _2), {}, { track: f2 });
                  return A(A({}, e3), {}, (0, s.Z)({}, m2, g2));
                case "SET_PRODUCER_SCORE":
                  var v2 = t3.payload, y2 = v2.producerId, b2 = v2.score, S2 = e3[y2];
                  if (!S2)
                    return e3;
                  var w2 = A(A({}, S2), {}, { score: b2 });
                  return A(A({}, e3), {}, (0, s.Z)({}, y2, w2));
                default:
                  return e3;
              }
            };
            function F(e3, t3) {
              var r3 = Object.keys(e3);
              if (Object.getOwnPropertySymbols) {
                var n2 = Object.getOwnPropertySymbols(e3);
                t3 && (n2 = n2.filter(function(t4) {
                  return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
                })), r3.push.apply(r3, n2);
              }
              return r3;
            }
            function B(e3) {
              for (var t3 = 1; t3 < arguments.length; t3++) {
                var r3 = null != arguments[t3] ? arguments[t3] : {};
                t3 % 2 ? F(Object(r3), true).forEach(function(t4) {
                  (0, s.Z)(e3, t4, r3[t4]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(
                  e3,
                  Object.getOwnPropertyDescriptors(r3)
                ) : F(Object(r3)).forEach(function(t4) {
                  Object.defineProperty(
                    e3,
                    t4,
                    Object.getOwnPropertyDescriptor(r3, t4)
                  );
                });
              }
              return e3;
            }
            var U = {};
            const Z = function() {
              var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : U, t3 = arguments.length > 1 ? arguments[1] : void 0;
              switch (t3.type) {
                case "SET_ROOM_STATE":
                  var r3 = t3.payload.state;
                  return "closed" === r3 ? {} : e3;
                case "ADD_DATA_PRODUCER":
                  var n2 = t3.payload.dataProducer;
                  return B(B({}, e3), {}, (0, s.Z)({}, n2.id, n2));
                case "REMOVE_DATA_PRODUCER":
                  var a2 = t3.payload.dataProducerId, i2 = B({}, e3);
                  return delete i2[a2], i2;
                default:
                  return e3;
              }
            };
            var H = r2(907);
            var z = r2(181);
            function V(e3) {
              return function(e4) {
                if (Array.isArray(e4))
                  return (0, H.Z)(e4);
              }(e3) || function(e4) {
                if ("undefined" != typeof Symbol && null != e4[Symbol.iterator] || null != e4["@@iterator"])
                  return Array.from(e4);
              }(e3) || (0, z.Z)(e3) || function() {
                throw new TypeError(
                  "Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
                );
              }();
            }
            function W(e3, t3) {
              var r3 = Object.keys(e3);
              if (Object.getOwnPropertySymbols) {
                var n2 = Object.getOwnPropertySymbols(e3);
                t3 && (n2 = n2.filter(function(t4) {
                  return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
                })), r3.push.apply(r3, n2);
              }
              return r3;
            }
            function G(e3) {
              for (var t3 = 1; t3 < arguments.length; t3++) {
                var r3 = null != arguments[t3] ? arguments[t3] : {};
                t3 % 2 ? W(Object(r3), true).forEach(function(t4) {
                  (0, s.Z)(e3, t4, r3[t4]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(
                  e3,
                  Object.getOwnPropertyDescriptors(r3)
                ) : W(Object(r3)).forEach(function(t4) {
                  Object.defineProperty(
                    e3,
                    t4,
                    Object.getOwnPropertyDescriptor(r3, t4)
                  );
                });
              }
              return e3;
            }
            var q = {};
            function K(e3, t3) {
              var r3 = Object.keys(e3);
              if (Object.getOwnPropertySymbols) {
                var n2 = Object.getOwnPropertySymbols(e3);
                t3 && (n2 = n2.filter(function(t4) {
                  return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
                })), r3.push.apply(r3, n2);
              }
              return r3;
            }
            function $(e3) {
              for (var t3 = 1; t3 < arguments.length; t3++) {
                var r3 = null != arguments[t3] ? arguments[t3] : {};
                t3 % 2 ? K(Object(r3), true).forEach(function(t4) {
                  (0, s.Z)(e3, t4, r3[t4]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(
                  e3,
                  Object.getOwnPropertyDescriptors(r3)
                ) : K(Object(r3)).forEach(function(t4) {
                  Object.defineProperty(
                    e3,
                    t4,
                    Object.getOwnPropertyDescriptor(r3, t4)
                  );
                });
              }
              return e3;
            }
            var X = {};
            function J(e3, t3) {
              var r3 = Object.keys(e3);
              if (Object.getOwnPropertySymbols) {
                var n2 = Object.getOwnPropertySymbols(e3);
                t3 && (n2 = n2.filter(function(t4) {
                  return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
                })), r3.push.apply(r3, n2);
              }
              return r3;
            }
            function Q(e3) {
              for (var t3 = 1; t3 < arguments.length; t3++) {
                var r3 = null != arguments[t3] ? arguments[t3] : {};
                t3 % 2 ? J(Object(r3), true).forEach(function(t4) {
                  (0, s.Z)(e3, t4, r3[t4]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(
                  e3,
                  Object.getOwnPropertyDescriptors(r3)
                ) : J(Object(r3)).forEach(function(t4) {
                  Object.defineProperty(
                    e3,
                    t4,
                    Object.getOwnPropertyDescriptor(r3, t4)
                  );
                });
              }
              return e3;
            }
            var Y = {};
            var ee = [];
            const te = function(e3) {
              for (var t3 = Object.keys(e3), r3 = {}, n2 = 0; n2 < t3.length; n2++) {
                var a2 = t3[n2];
                0, "function" == typeof e3[a2] && (r3[a2] = e3[a2]);
              }
              var i2, s2 = Object.keys(r3);
              try {
                !function(e4) {
                  Object.keys(e4).forEach(function(t4) {
                    var r4 = e4[t4];
                    if (void 0 === r4(void 0, { type: _.INIT }))
                      throw new Error(h(12));
                    if (void 0 === r4(void 0, { type: _.PROBE_UNKNOWN_ACTION() }))
                      throw new Error(h(13));
                  });
                }(r3);
              } catch (e4) {
                i2 = e4;
              }
              return function(e4, t4) {
                if (void 0 === e4 && (e4 = {}), i2)
                  throw i2;
                for (var n3 = false, a3 = {}, o2 = 0; o2 < s2.length; o2++) {
                  var c2 = s2[o2], d2 = r3[c2], p2 = e4[c2], l2 = d2(p2, t4);
                  if (void 0 === l2) {
                    t4 && t4.type;
                    throw new Error(h(14));
                  }
                  a3[c2] = l2, n3 = n3 || l2 !== p2;
                }
                return (n3 = n3 || s2.length !== Object.keys(e4).length) ? a3 : e4;
              };
            }({
              room: O,
              me: L,
              producers: j,
              dataProducers: Z,
              peers: function() {
                var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : q, t3 = arguments.length > 1 ? arguments[1] : void 0;
                switch (t3.type) {
                  case "SET_ROOM_STATE":
                    var r3 = t3.payload.state;
                    return "closed" === r3 ? {} : e3;
                  case "ADD_PEER":
                    var n2 = t3.payload.peer;
                    return G(G({}, e3), {}, (0, s.Z)({}, n2.id, n2));
                  case "REMOVE_PEER":
                    var a2 = t3.payload.peerId, i2 = G({}, e3);
                    return delete i2[a2], i2;
                  case "SET_PEER_DISPLAY_NAME":
                    var o2 = t3.payload, c2 = o2.displayName, d2 = o2.peerId, p2 = e3[d2];
                    if (!p2)
                      throw new Error("no Peer found");
                    var l2 = G(G({}, p2), {}, { displayName: c2 });
                    return G(G({}, e3), {}, (0, s.Z)({}, l2.id, l2));
                  case "ADD_CONSUMER":
                    var u2 = t3.payload, h2 = u2.consumer, m2 = u2.peerId, f2 = e3[m2];
                    if (!f2)
                      throw new Error("no Peer found for new Consumer");
                    var _2 = [].concat(V(f2.consumers), [h2.id]), g2 = G(G({}, f2), {}, { consumers: _2 });
                    return G(G({}, e3), {}, (0, s.Z)({}, g2.id, g2));
                  case "REMOVE_CONSUMER":
                    var v2 = t3.payload, y2 = v2.consumerId, b2 = v2.peerId, S2 = e3[b2];
                    if (!S2)
                      return e3;
                    var w2 = S2.consumers.indexOf(y2);
                    if (-1 === w2)
                      throw new Error("Consumer not found");
                    var T2 = S2.consumers.slice();
                    T2.splice(w2, 1);
                    var E2 = G(G({}, S2), {}, { consumers: T2 });
                    return G(G({}, e3), {}, (0, s.Z)({}, E2.id, E2));
                  case "ADD_DATA_CONSUMER":
                    var R2 = t3.payload, P2 = R2.dataConsumer, C2 = R2.peerId;
                    if (!C2)
                      return e3;
                    var k2 = e3[C2];
                    if (!k2)
                      throw new Error("no Peer found for new DataConsumer");
                    var O2 = [].concat(V(k2.dataConsumers), [P2.id]), x2 = G(G({}, k2), {}, { dataConsumers: O2 });
                    return G(G({}, e3), {}, (0, s.Z)({}, x2.id, x2));
                  case "REMOVE_DATA_CONSUMER":
                    var D2 = t3.payload, I2 = D2.dataConsumerId, L2 = D2.peerId;
                    if (!L2)
                      return e3;
                    var M2 = e3[L2];
                    if (!M2)
                      return e3;
                    var A2 = M2.dataConsumers.indexOf(I2);
                    if (-1 === A2)
                      throw new Error("DataConsumer not found");
                    var N2 = M2.dataConsumers.slice();
                    N2.splice(A2, 1);
                    var j2 = G(G({}, M2), {}, { dataConsumers: N2 });
                    return G(G({}, e3), {}, (0, s.Z)({}, j2.id, j2));
                  default:
                    return e3;
                }
              },
              consumers: function() {
                var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : X, t3 = arguments.length > 1 ? arguments[1] : void 0;
                switch (t3.type) {
                  case "SET_ROOM_STATE":
                    var r3 = t3.payload.state;
                    return "closed" === r3 ? {} : e3;
                  case "ADD_CONSUMER":
                    var n2 = t3.payload.consumer;
                    return $($({}, e3), {}, (0, s.Z)({}, n2.id, n2));
                  case "REMOVE_CONSUMER":
                    var a2 = t3.payload.consumerId, i2 = $({}, e3);
                    return delete i2[a2], i2;
                  case "SET_CONSUMER_PAUSED":
                    var o2, c2 = t3.payload, d2 = c2.consumerId, p2 = c2.originator, l2 = e3[d2];
                    return o2 = $(
                      $({}, l2),
                      {},
                      "local" === p2 ? { locallyPaused: true } : { remotelyPaused: true }
                    ), $($({}, e3), {}, (0, s.Z)({}, d2, o2));
                  case "SET_CONSUMER_RESUMED":
                    var u2, h2 = t3.payload, m2 = h2.consumerId, f2 = h2.originator, _2 = e3[m2];
                    return u2 = $(
                      $({}, _2),
                      {},
                      "local" === f2 ? { locallyPaused: false } : { remotelyPaused: false }
                    ), $($({}, e3), {}, (0, s.Z)({}, m2, u2));
                  case "SET_CONSUMER_CURRENT_LAYERS":
                    var g2 = t3.payload, v2 = g2.consumerId, y2 = g2.spatialLayer, b2 = g2.temporalLayer, S2 = e3[v2], w2 = $(
                      $({}, S2),
                      {},
                      { currentSpatialLayer: y2, currentTemporalLayer: b2 }
                    );
                    return $($({}, e3), {}, (0, s.Z)({}, v2, w2));
                  case "SET_CONSUMER_PREFERRED_LAYERS":
                    var T2 = t3.payload, E2 = T2.consumerId, R2 = T2.spatialLayer, P2 = T2.temporalLayer, C2 = e3[E2], k2 = $(
                      $({}, C2),
                      {},
                      { preferredSpatialLayer: R2, preferredTemporalLayer: P2 }
                    );
                    return $($({}, e3), {}, (0, s.Z)({}, E2, k2));
                  case "SET_CONSUMER_PRIORITY":
                    var O2 = t3.payload, x2 = O2.consumerId, D2 = O2.priority, I2 = e3[x2], L2 = $($({}, I2), {}, { priority: D2 });
                    return $($({}, e3), {}, (0, s.Z)({}, x2, L2));
                  case "SET_CONSUMER_TRACK":
                    var M2 = t3.payload, A2 = M2.consumerId, N2 = M2.track, j2 = e3[A2], F2 = $($({}, j2), {}, { track: N2 });
                    return $($({}, e3), {}, (0, s.Z)({}, A2, F2));
                  case "SET_CONSUMER_SCORE":
                    var B2 = t3.payload, U2 = B2.consumerId, Z2 = B2.score, H2 = e3[U2];
                    if (!H2)
                      return e3;
                    var z2 = $($({}, H2), {}, { score: Z2 });
                    return $($({}, e3), {}, (0, s.Z)({}, U2, z2));
                  default:
                    return e3;
                }
              },
              dataConsumers: function() {
                var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Y, t3 = arguments.length > 1 ? arguments[1] : void 0;
                switch (t3.type) {
                  case "SET_ROOM_STATE":
                    var r3 = t3.payload.state;
                    return "closed" === r3 ? {} : e3;
                  case "ADD_DATA_CONSUMER":
                    var n2 = t3.payload.dataConsumer;
                    return Q(Q({}, e3), {}, (0, s.Z)({}, n2.id, n2));
                  case "REMOVE_DATA_CONSUMER":
                    var a2 = t3.payload.dataConsumerId, i2 = Q({}, e3);
                    return delete i2[a2], i2;
                  default:
                    return e3;
                }
              },
              notifications: function() {
                var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ee, t3 = arguments.length > 1 ? arguments[1] : void 0;
                switch (t3.type) {
                  case "ADD_NOTIFICATION":
                    var r3 = t3.payload.notification;
                    return [].concat(V(e3), [r3]);
                  case "REMOVE_NOTIFICATION":
                    var n2 = t3.payload.notificationId;
                    return e3.filter(function(e4) {
                      return e4.id !== n2;
                    });
                  case "REMOVE_ALL_NOTIFICATIONS":
                    return [];
                  default:
                    return e3;
                }
              }
            });
            var re = r2(8922);
            function ne(e3, t3, r3) {
              if (!t3.has(e3))
                throw new TypeError(
                  "attempted to " + r3 + " private field on non-instance"
                );
              return t3.get(e3);
            }
            function ae(e3, t3) {
              return function(e4, t4) {
                return t4.get ? t4.get.call(e4) : t4.value;
              }(e3, ne(e3, t3, "get"));
            }
            function ie(e3, t3, r3) {
              return function(e4, t4, r4) {
                if (t4.set)
                  t4.set.call(e4, r4);
                else {
                  if (!t4.writable)
                    throw new TypeError(
                      "attempted to set read only private field"
                    );
                  t4.value = r4;
                }
              }(e3, ne(e3, t3, "set"), r3), r3;
            }
            var se = r2(7187), oe = r2(885), ce = (r2(8922).default, (0, i.Z)(function e3() {
              (0, a.Z)(this, e3), this.roomClient = null;
            })), de = new (function() {
              function e3() {
                (0, a.Z)(this, e3), e3.instance || (e3.instance = new ce());
              }
              return (0, i.Z)(e3, [
                {
                  key: "getInstance",
                  value: function() {
                    return e3.instance;
                  }
                }
              ]), e3;
            }())();
            Object.freeze(de);
            var pe = de.getInstance(), le = function() {
              function e3(t3) {
                (0, a.Z)(this, e3), this.id = t3.id, this.kind = t3.track.kind, this.codec = t3.codec, this.track = t3.track, this.producerOrConsumer = t3.instance, t3.appData && true === t3.appData.share && "video" === t3.track.kind && (this.kind = "share"), t3.appData && true === t3.appData.share && "audio" === t3.track.kind && (this.kind = "shareAudio");
              }
              return (0, i.Z)(e3, [
                {
                  key: "pause",
                  value: function() {
                    pe.roomClient._pauseConsumer(this.producerOrConsumer);
                  }
                },
                {
                  key: "resume",
                  value: function() {
                    pe.roomClient._resumeConsumer(this.producerOrConsumer);
                  }
                },
                {
                  key: "paused",
                  get: function() {
                    return this.producerOrConsumer.paused;
                  }
                }
              ]), e3;
            }();
            function ue(e3, t3) {
              var r3 = "undefined" != typeof Symbol && e3[Symbol.iterator] || e3["@@iterator"];
              if (!r3) {
                if (Array.isArray(e3) || (r3 = function(e4, t4) {
                  if (!e4)
                    return;
                  if ("string" == typeof e4)
                    return he(e4, t4);
                  var r4 = Object.prototype.toString.call(e4).slice(8, -1);
                  "Object" === r4 && e4.constructor && (r4 = e4.constructor.name);
                  if ("Map" === r4 || "Set" === r4)
                    return Array.from(e4);
                  if ("Arguments" === r4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r4))
                    return he(e4, t4);
                }(e3)) || t3 && e3 && "number" == typeof e3.length) {
                  r3 && (e3 = r3);
                  var n2 = 0, a2 = function() {
                  };
                  return {
                    s: a2,
                    n: function() {
                      return n2 >= e3.length ? { done: true } : { done: false, value: e3[n2++] };
                    },
                    e: function(e4) {
                      throw e4;
                    },
                    f: a2
                  };
                }
                throw new TypeError(
                  "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
                );
              }
              var i2, s2 = true, o2 = false;
              return {
                s: function() {
                  r3 = r3.call(e3);
                },
                n: function() {
                  var e4 = r3.next();
                  return s2 = e4.done, e4;
                },
                e: function(e4) {
                  o2 = true, i2 = e4;
                },
                f: function() {
                  try {
                    s2 || null == r3.return || r3.return();
                  } finally {
                    if (o2)
                      throw i2;
                  }
                }
              };
            }
            function he(e3, t3) {
              (null == t3 || t3 > e3.length) && (t3 = e3.length);
              for (var r3 = 0, n2 = new Array(t3); r3 < t3; r3++)
                n2[r3] = e3[r3];
              return n2;
            }
            var me = "stream-enabled", fe = "stream-disabled", _e = "media-status-changed", ge = "video-quality-changed", ve = function() {
              function e3(t4) {
                (0, a.Z)(this, e3), this.id = t4.id, this.displayName = t4.displayName, this.streams = /* @__PURE__ */ new Map(), this.quality = "low", this.local = t4.local || false, this.pinState = { cam: false, share: false }, this.webcamOn = false, this.micOn = false, this.mode = t4.mode, this.eventEmitter = new se.EventEmitter();
              }
              var t3, r3, s2, o2;
              return (0, i.Z)(e3, [
                {
                  key: "_setPinState",
                  value: function(e4) {
                    null != e4.cam && (this.pinState.cam = e4.cam), null != e4.share && (this.pinState.share = e4.share);
                  }
                },
                {
                  key: "remove",
                  value: function() {
                    pe.roomClient.removePeer(this.id);
                  }
                },
                {
                  key: "enableMic",
                  value: function() {
                    pe.roomClient.enablePeerMic(this.id);
                  }
                },
                {
                  key: "disableMic",
                  value: function() {
                    pe.roomClient.disablePeerMic(this.id);
                  }
                },
                {
                  key: "enableWebcam",
                  value: function() {
                    pe.roomClient.enablePeerWebcam(this.id);
                  }
                },
                {
                  key: "disableWebcam",
                  value: function() {
                    pe.roomClient.disablePeerWebcam(this.id);
                  }
                },
                {
                  key: "addStream",
                  value: function(e4) {
                    this.streams.set(e4.id, e4), "video" !== e4.kind || this.local || pe.roomClient.setConsumerQuality(e4.id, this.quality), this.eventEmitter.emit(me, e4);
                  }
                },
                {
                  key: "updateStream",
                  value: function(e4) {
                    this.streams.set(e4.id, e4), this.eventEmitter.emit(me, e4);
                  }
                },
                {
                  key: "deleteStream",
                  value: function(e4) {
                    var t4 = this.streams.get(e4);
                    if (null != t4)
                      return this.streams.delete(e4), this.eventEmitter.emit(fe, t4), t4;
                  }
                },
                {
                  key: "updateParticipantMediaState",
                  value: function(e4, t4) {
                    "audio" == e4 ? this.micOn = t4 : "video" == e4 && (this.webcamOn = t4), this.eventEmitter.emit(_e, {
                      peerId: this.id,
                      kind: e4,
                      newStatus: t4
                    });
                  }
                },
                {
                  key: "videoQualityChanged",
                  value: function(e4, t4) {
                    this.eventEmitter.emit(ge, {
                      peerId: this.id,
                      prevQuality: e4,
                      currentQuality: t4
                    });
                  }
                },
                {
                  key: "setQuality",
                  value: function(e4) {
                    this.quality === e4 || this.local || (this.quality = e4, V(this.streams.entries()).forEach(function(t4) {
                      var r4 = t4[1];
                      "video" === r4.kind && pe.roomClient.setConsumerQuality(r4.id, e4);
                    }));
                  }
                },
                {
                  key: "setViewPort",
                  value: function(e4, t4) {
                    V(this.streams.entries()).forEach(function(r4) {
                      var n2 = r4[1];
                      "video" === n2.kind && pe.roomClient.setViewPort(n2.producerOrConsumer, e4, t4);
                    });
                  }
                },
                {
                  key: "pin",
                  value: function(e4) {
                    switch (e4) {
                      case "SHARE_AND_CAM":
                      case void 0:
                        this._setPinState({ cam: true, share: true });
                        break;
                      case "CAM":
                        this._setPinState({ cam: true });
                        break;
                      case "SHARE":
                        this._setPinState({ share: true });
                        break;
                      default:
                        throw new Error("Unknown pin type");
                    }
                    pe.roomClient.pinStateChange({
                      peerId: this.id,
                      state: this.pinState
                    });
                  }
                },
                {
                  key: "unpin",
                  value: function(e4) {
                    switch (e4) {
                      case "SHARE_AND_CAM":
                      case void 0:
                        this._setPinState({ cam: false, share: false });
                        break;
                      case "CAM":
                        this._setPinState({ cam: false });
                        break;
                      case "SHARE":
                        this._setPinState({ share: false });
                        break;
                      default:
                        throw new Error("Unknown unpin type");
                    }
                    pe.roomClient.pinStateChange({
                      peerId: this.id,
                      state: this.pinState
                    });
                  }
                },
                {
                  key: "switchTo",
                  value: (o2 = (0, n.Z)(
                    c().mark(function e4(t4) {
                      var r4, n2, a2;
                      return c().wrap(
                        function(e5) {
                          for (; ; )
                            switch (e5.prev = e5.next) {
                              case 0:
                                return r4 = t4.meetingId, n2 = t4.payload, a2 = t4.token, e5.next = 3, pe.roomClient.switchPeerRoom({
                                  peerId: this.id,
                                  roomId: r4,
                                  payload: n2,
                                  token: a2
                                });
                              case 3:
                              case "end":
                                return e5.stop();
                            }
                        },
                        e4,
                        this
                      );
                    })
                  ), function(e4) {
                    return o2.apply(this, arguments);
                  })
                },
                {
                  key: "getVideoStats",
                  value: (s2 = (0, n.Z)(
                    c().mark(function e4() {
                      var t4, r4, n2, a2, i2;
                      return c().wrap(
                        function(e5) {
                          for (; ; )
                            switch (e5.prev = e5.next) {
                              case 0:
                                if (!this.local) {
                                  e5.next = 6;
                                  break;
                                }
                                return e5.next = 3, pe.roomClient.getVideoRemoteStats();
                              case 3:
                                return e5.abrupt("return", e5.sent);
                              case 6:
                                t4 = V(this.streams.entries()), r4 = ue(t4), e5.prev = 8, r4.s();
                              case 10:
                                if ((n2 = r4.n()).done) {
                                  e5.next = 18;
                                  break;
                                }
                                if (a2 = (0, oe.Z)(n2.value, 2), i2 = a2[0], "video" != a2[1].kind) {
                                  e5.next = 16;
                                  break;
                                }
                                return e5.next = 15, pe.roomClient.getConsumerRemoteStats(i2);
                              case 15:
                                return e5.abrupt("return", e5.sent);
                              case 16:
                                e5.next = 10;
                                break;
                              case 18:
                                e5.next = 23;
                                break;
                              case 20:
                                e5.prev = 20, e5.t0 = e5.catch(8), r4.e(e5.t0);
                              case 23:
                                return e5.prev = 23, r4.f(), e5.finish(23);
                              case 26:
                              case "end":
                                return e5.stop();
                            }
                        },
                        e4,
                        this,
                        [[8, 20, 23, 26]]
                      );
                    })
                  ), function() {
                    return s2.apply(this, arguments);
                  })
                },
                {
                  key: "getShareStats",
                  value: (r3 = (0, n.Z)(
                    c().mark(function e4() {
                      var t4, r4, n2, a2, i2;
                      return c().wrap(
                        function(e5) {
                          for (; ; )
                            switch (e5.prev = e5.next) {
                              case 0:
                                if (!this.local) {
                                  e5.next = 6;
                                  break;
                                }
                                return e5.next = 3, pe.roomClient.getShareRemoteStats();
                              case 3:
                                return e5.abrupt("return", e5.sent);
                              case 6:
                                t4 = V(this.streams.entries()), r4 = ue(t4), e5.prev = 8, r4.s();
                              case 10:
                                if ((n2 = r4.n()).done) {
                                  e5.next = 18;
                                  break;
                                }
                                if (a2 = (0, oe.Z)(n2.value, 2), i2 = a2[0], "share" != a2[1].kind) {
                                  e5.next = 16;
                                  break;
                                }
                                return e5.next = 15, pe.roomClient.getConsumerRemoteStats(i2);
                              case 15:
                                return e5.abrupt("return", e5.sent);
                              case 16:
                                e5.next = 10;
                                break;
                              case 18:
                                e5.next = 23;
                                break;
                              case 20:
                                e5.prev = 20, e5.t0 = e5.catch(8), r4.e(e5.t0);
                              case 23:
                                return e5.prev = 23, r4.f(), e5.finish(23);
                              case 26:
                              case "end":
                                return e5.stop();
                            }
                        },
                        e4,
                        this,
                        [[8, 20, 23, 26]]
                      );
                    })
                  ), function() {
                    return r3.apply(this, arguments);
                  })
                },
                {
                  key: "getAudioStats",
                  value: (t3 = (0, n.Z)(
                    c().mark(function e4() {
                      var t4, r4, n2, a2, i2;
                      return c().wrap(
                        function(e5) {
                          for (; ; )
                            switch (e5.prev = e5.next) {
                              case 0:
                                if (this.micOn) {
                                  e5.next = 2;
                                  break;
                                }
                                return e5.abrupt("return", []);
                              case 2:
                                if (!this.local) {
                                  e5.next = 8;
                                  break;
                                }
                                return e5.next = 5, pe.roomClient.getAudioRemoteStats();
                              case 5:
                                return e5.abrupt("return", e5.sent);
                              case 8:
                                t4 = V(this.streams.entries()), r4 = ue(t4), e5.prev = 10, r4.s();
                              case 12:
                                if ((n2 = r4.n()).done) {
                                  e5.next = 20;
                                  break;
                                }
                                if (a2 = (0, oe.Z)(n2.value, 2), i2 = a2[0], "audio" != a2[1].kind) {
                                  e5.next = 18;
                                  break;
                                }
                                return e5.next = 17, pe.roomClient.getConsumerRemoteStats(i2);
                              case 17:
                                return e5.abrupt("return", e5.sent);
                              case 18:
                                e5.next = 12;
                                break;
                              case 20:
                                e5.next = 25;
                                break;
                              case 22:
                                e5.prev = 22, e5.t0 = e5.catch(10), r4.e(e5.t0);
                              case 25:
                                return e5.prev = 25, r4.f(), e5.finish(25);
                              case 28:
                              case "end":
                                return e5.stop();
                            }
                        },
                        e4,
                        this,
                        [[10, 22, 25, 28]]
                      );
                    })
                  ), function() {
                    return t3.apply(this, arguments);
                  })
                },
                {
                  key: "consumeMicStreams",
                  value: function() {
                    pe.roomClient.consumeMicStreams(this.id);
                  }
                },
                {
                  key: "consumeWebcamStreams",
                  value: function() {
                    pe.roomClient.consumeWebcamStreams(this.id);
                  }
                },
                {
                  key: "stopConsumingWebcamStreams",
                  value: function() {
                    pe.roomClient.stopConsumingWebcamStreams(this.id);
                  }
                },
                {
                  key: "stopConsumingMicStreams",
                  value: function() {
                    pe.roomClient.stopConsumingMicStreams(this.id);
                  }
                },
                {
                  key: "on",
                  value: function(e4, t4) {
                    switch (e4) {
                      case me:
                      case fe:
                      case _e:
                      case ge:
                        this.eventEmitter.on(e4, t4);
                        break;
                      default:
                        throw new Error("Invalid event type");
                    }
                  }
                },
                {
                  key: "off",
                  value: function(e4, t4) {
                    switch (e4) {
                      case me:
                      case fe:
                      case _e:
                      case ge:
                        this.eventEmitter.off(e4, t4);
                        break;
                      default:
                        throw new Error("Invalid event type");
                    }
                  }
                }
              ]), e3;
            }();
            function ye(e3, t3, r3) {
              !function(e4, t4) {
                if (t4.has(e4))
                  throw new TypeError(
                    "Cannot initialize the same private elements twice on an object"
                  );
              }(e3, t3), t3.set(e3, r3);
            }
            var be = /* @__PURE__ */ new WeakMap(), Se = function() {
              function e3(t4, r3) {
                var n2 = t4.id, i2 = t4.displayName;
                (0, a.Z)(this, e3), ye(this, be, { writable: true, value: void 0 }), this.id = n2, this.displayName = i2, ie(this, be, r3);
              }
              var t3;
              return (0, i.Z)(e3, [
                {
                  key: "switchTo",
                  value: (t3 = (0, n.Z)(
                    c().mark(function e4(t4) {
                      var r3, n2, a2;
                      return c().wrap(
                        function(e5) {
                          for (; ; )
                            switch (e5.prev = e5.next) {
                              case 0:
                                return r3 = t4.meetingId, n2 = t4.payload, a2 = t4.token, e5.next = 3, pe.roomClient.connectionSwitchPeerRoom({
                                  roomId: r3,
                                  connectionRoomId: ae(this, be),
                                  payload: n2,
                                  peerId: this.id,
                                  token: a2
                                });
                              case 3:
                              case "end":
                                return e5.stop();
                            }
                        },
                        e4,
                        this
                      );
                    })
                  ), function(e4) {
                    return t3.apply(this, arguments);
                  })
                }
              ]), e3;
            }(), we = "participant-joined", Te = "participant-left", Ee = "chat-message", Re = function() {
              function e3(t4, r3) {
                var n2 = this;
                (0, a.Z)(this, e3), this.eventEmitter = new se.EventEmitter(), this.id = t4, this.participants = /* @__PURE__ */ new Map(), r3.forEach(function(e4) {
                  n2.participants.set(e4.id, new Se(e4, n2.id));
                });
              }
              var t3;
              return (0, i.Z)(e3, [
                {
                  key: "participantJoin",
                  value: function(e4) {
                    var t4 = new Se(e4, this.id);
                    this.participants.set(e4.id, t4), this.eventEmitter.emit(we, t4);
                  }
                },
                {
                  key: "participantLeft",
                  value: function(e4) {
                    this.participants.delete(e4), this.eventEmitter.emit(Te, e4);
                  }
                },
                {
                  key: "sendChatMessage",
                  value: function(e4) {
                    pe.roomClient.connectionSendChatMessage({
                      roomId: this.id,
                      message: e4
                    });
                  }
                },
                {
                  key: "sendChatMessageEvent",
                  value: function(e4) {
                    var t4 = e4.participantId, r3 = e4.message;
                    this.eventEmitter.emit(Ee, {
                      participantId: t4,
                      message: r3
                    });
                  }
                },
                {
                  key: "end",
                  value: (t3 = (0, n.Z)(
                    c().mark(function e4() {
                      return c().wrap(
                        function(e5) {
                          for (; ; )
                            switch (e5.prev = e5.next) {
                              case 0:
                                return e5.next = 2, pe.roomClient.connectionEndMeeting({
                                  roomId: this.id
                                });
                              case 2:
                              case "end":
                                return e5.stop();
                            }
                        },
                        e4,
                        this
                      );
                    })
                  ), function() {
                    return t3.apply(this, arguments);
                  })
                },
                {
                  key: "on",
                  value: function(e4, t4) {
                    switch (e4) {
                      case we:
                      case Te:
                      case Ee:
                        this.eventEmitter.on(e4, t4);
                        break;
                      default:
                        throw new Error("Invalid event type");
                    }
                  }
                },
                {
                  key: "off",
                  value: function(e4, t4) {
                    switch (e4) {
                      case we:
                      case Te:
                      case Ee:
                        this.eventEmitter.off(e4, t4);
                        break;
                      default:
                        throw new Error("Invalid event type");
                    }
                  }
                }
              ]), e3;
            }(), Pe = function() {
              function e3(t3) {
                var r3 = t3.roomId, n2 = t3.peers, i2 = t3.payload;
                (0, a.Z)(this, e3), this.id = r3, this.payload = i2, this.meeting = new Re(r3, n2);
              }
              return (0, i.Z)(e3, [
                {
                  key: "close",
                  value: function() {
                    pe.roomClient.closeConnection(this.id);
                  }
                }
              ]), e3;
            }();
            function Ce(e3, t3) {
              ke(e3, t3), t3.add(e3);
            }
            function ke(e3, t3) {
              if (t3.has(e3))
                throw new TypeError(
                  "Cannot initialize the same private elements twice on an object"
                );
            }
            function Oe(e3, t3, r3) {
              if (!t3.has(e3))
                throw new TypeError(
                  "attempted to get private field on non-instance"
                );
              return r3;
            }
            var xe = "error", De = "meeting-joined", Ie = "meeting-left", Le = "participant-mode-changed", Me = "participant-joined", Ae = "participant-left", Ne = "speaker-changed", je = "presenter-changed", Fe = "main-participant-changed", Be = "chat-message", Ue = "entry-requested", Ze = "entry-responded", He = "recording-state-changed", ze = "recording-started", Ve = "recording-stopped", We = "livestream-state-changed", Ge = "livestream-started", qe = "livestream-stopped", Ke = "hls-state-changed", $e = "hls-started", Xe = "hls-stopped", Je = "whiteboard-started", Qe = "whiteboard-stopped", Ye = "video-state-changed", et = "video-seeked", tt = "mic-requested", rt = "webcam-requested", nt = "stream-enabled", at = "stream-disabled", it = "pin-state-changed", st = "connection-open", ot = "connection-close", ct = "switch-meeting", dt = "meeting-state-changed", pt = /* @__PURE__ */ new WeakMap(), lt = /* @__PURE__ */ new WeakSet(), ut = /* @__PURE__ */ new WeakSet(), ht = function() {
              function e3(t4, r4, i2) {
                var o3, d3, p3, l3, u3, h3, m2 = this;
                (0, a.Z)(this, e3), Ce(this, ut), Ce(this, lt), p3 = { writable: true, value: void 0 }, ke(o3 = this, d3 = pt), d3.set(o3, p3), (0, s.Z)(this, "pubSub", {
                  publish: (h3 = (0, n.Z)(
                    c().mark(function e4(t5, r5, n2) {
                      return c().wrap(function(e5) {
                        for (; ; )
                          switch (e5.prev = e5.next) {
                            case 0:
                              return e5.next = 2, m2.roomClient.pubsubPublish(t5, r5, n2);
                            case 2:
                            case "end":
                              return e5.stop();
                          }
                      }, e4);
                    })
                  ), function(e4, t5, r5) {
                    return h3.apply(this, arguments);
                  }),
                  subscribe: (u3 = (0, n.Z)(
                    c().mark(function e4(t5, r5) {
                      var n2;
                      return c().wrap(function(e5) {
                        for (; ; )
                          switch (e5.prev = e5.next) {
                            case 0:
                              if (!ae(m2, pt).listeners(t5).includes(r5)) {
                                e5.next = 2;
                                break;
                              }
                              return e5.abrupt("return");
                            case 2:
                              return e5.next = 4, m2.roomClient.pubsubSubscribe(t5);
                            case 4:
                              return n2 = e5.sent, ae(m2, pt).on(t5, r5), e5.abrupt("return", n2);
                            case 7:
                            case "end":
                              return e5.stop();
                          }
                      }, e4);
                    })
                  ), function(e4, t5) {
                    return u3.apply(this, arguments);
                  }),
                  unsubscribe: (l3 = (0, n.Z)(
                    c().mark(function e4(t5, r5) {
                      return c().wrap(function(e5) {
                        for (; ; )
                          switch (e5.prev = e5.next) {
                            case 0:
                              if (ae(m2, pt).off(t5, r5), 0 != ae(m2, pt).listeners(t5).length) {
                                e5.next = 4;
                                break;
                              }
                              return e5.next = 4, m2.roomClient.pubsubUnsubscribe(t5);
                            case 4:
                            case "end":
                              return e5.stop();
                          }
                      }, e4);
                    })
                  ), function(e4, t5) {
                    return l3.apply(this, arguments);
                  })
                }), this.id = t4, this.roomClient = i2, this.activeSpeakerId = null, this.activePresenterId = null, this.mainParticipantId = null, this.connections = /* @__PURE__ */ new Map(), this.localParticipant = r4, this.participants = /* @__PURE__ */ new Map(), this.baseUrl = null, this.livestreamState = "LIVESTREAM_STOPPED", this.recordingState = "RECORDING_STOPPED", this.hlsState = "HLS_STOPPED", this.hlsUrls = {
                  downstreamUrl: null,
                  playbackHlsUrl: null,
                  livestreamUrl: null
                }, this.messages = [], this.eventEmitter = new se.EventEmitter(), ie(this, pt, new se.EventEmitter()), this.eventEmitter.setMaxListeners(9999), ae(this, pt).setMaxListeners(9999), this.roomClient.on("ERROR", function(e4) {
                  return m2.handleError(e4);
                }), this.roomClient.on("ADD_PEER", function(e4) {
                  return m2.handlePeerAdd(e4);
                }), this.roomClient.on("REMOVE_PEER", function(e4) {
                  return m2.handlePeerRemove(e4);
                }), this.roomClient.on("ADD_PRODUCER", function(e4) {
                  return m2.handleProducerAdd(e4);
                }), this.roomClient.on("UPDATE_PRODUCER", function(e4) {
                  return m2.handleUpdateProducer(e4);
                }), this.roomClient.on("REMOVE_PRODUCER", function(e4) {
                  return m2.handleProducerRemove(e4);
                }), this.roomClient.on("ADD_CONSUMER", function(e4) {
                  return m2.handleConsumerAdd(e4);
                }), this.roomClient.on("REMOVE_CONSUMER", function(e4) {
                  return m2.handleConsumerRemove(e4);
                }), this.roomClient.on(
                  "PARTICIPANT_MEDIA_STATE_CHANGED",
                  function(e4) {
                    return m2.handleParticipantMediaStateChanged(e4);
                  }
                ), this.roomClient.on("CHAT_MESSAGE", function(e4) {
                  return m2.handleNewChatMessage(e4);
                }), this.roomClient.on("SET_ROOM_ACTIVE_SPEAKER", function(e4) {
                  return m2.handleSpeakerChange(e4);
                }), this.roomClient.on("ENTRY_REQUESTED", function(e4) {
                  return m2.handleEntryRequested(e4);
                }), this.roomClient.on("ENTRY_RESPONDED", function(e4) {
                  return m2.handleEntryResponded(e4);
                }), this.roomClient.on("MEETING_JOINED", function(e4) {
                  return m2.handleMeetingJoined(e4);
                }), this.roomClient.on("MEETING_LEFT", function(e4) {
                  return m2.handleMeetingLeft(e4);
                }), this.roomClient.on("RECORDING_STATE_CHANGED", function(e4) {
                  m2.handleRecordingStateChanged(e4);
                }), this.roomClient.on("RECORDING_STARTED", function(e4) {
                  return m2.handleRecordingStarted(e4);
                }), this.roomClient.on("RECORDING_STOPPED", function(e4) {
                  return m2.handleRecordingStopped(e4);
                }), this.roomClient.on("LIVESTREAM_STATE_CHANGED", function(e4) {
                  m2.handleLivestreamStateChanged(e4);
                }), this.roomClient.on("LIVESTREAM_STARTED", function(e4) {
                  return m2.handleLivestreamStarted(e4);
                }), this.roomClient.on("LIVESTREAM_STOPPED", function(e4) {
                  return m2.handleLivestreamStopped(e4);
                }), this.roomClient.on("HLS_STATE_CHANGED", function(e4) {
                  m2.handleHlsStateChanged(e4);
                }), this.roomClient.on("HLS_STARTED", function(e4) {
                  m2.handleHlsStarted(e4);
                }), this.roomClient.on("HLS_STOPPED", function(e4) {
                  m2.handleHlsStopped(e4);
                }), this.roomClient.on("WHITEBOARD_STARTED", function(e4) {
                  return m2.handleWhiteboardStarted(e4);
                }), this.roomClient.on("WHITEBOARD_STOPPED", function(e4) {
                  return m2.handleWhiteboardStopped(e4);
                }), this.roomClient.on("VIDEO_STATE_CHANGED", function(e4) {
                  return m2.handleVideoStateChanged(e4);
                }), this.roomClient.on("VIDEO_SEEKED", function(e4) {
                  return m2.handleVideoSeeked(e4);
                }), this.roomClient.on("PIN_STATE_CHANGED", function(e4) {
                  m2.handlePinStateChanged(e4);
                }), this.roomClient.on("MIC_REQUESTED", function(e4) {
                  return m2.handleMicRequested(e4);
                }), this.roomClient.on("WEBCAM_REQUESTED", function(e4) {
                  return m2.handleWebcamRequested(e4);
                }), this.roomClient.on("CONNECTION_OPEN", function(e4) {
                  return m2.handleConnectionOpen(e4);
                }), this.roomClient.on("CONNECTION_CLOSE", function(e4) {
                  return m2.handleConnectionClose(e4);
                }), this.roomClient.on(
                  "CONNECTION_PARTICIPANT_JOIN",
                  function(e4) {
                    return m2.handleConnectionParticipantJoin(e4);
                  }
                ), this.roomClient.on("SWITCH_ROOM", function(e4) {
                  return m2.handleSwitchMeeting(e4);
                }), this.roomClient.on("CONNECTION_CHAT_MESSAGE", function(e4) {
                  return m2.handleConnectionChatMessage(e4);
                }), this.roomClient.on(
                  "CONNECTION_PARTICIPANT_LEFT",
                  function(e4) {
                    m2.handleConnectionParticipantLeft(e4);
                  }
                ), this.roomClient.on("PUBSUB_MESSAGE", function(e4) {
                  return Oe(m2, lt, mt).call(m2, e4);
                }), this.roomClient.on("PEER_MODE_CHANGED", function(e4) {
                  return Oe(m2, ut, ft).call(m2, e4);
                }), this.updateMainParticipant(this.localParticipant.id), this.roomClient.on("MEETING_STATE_CHANGED", function(e4) {
                  return m2.handleMeetingStateChanged(e4);
                }), this.roomClient.on("VIDEO_QUALITY_CHANGED", function(e4) {
                  return m2.handleVideoQualityChanged(e4);
                });
              }
              var t3, r3, o2, d2, p2, l2, u2, h2;
              return (0, i.Z)(e3, [
                {
                  key: "handleError",
                  value: function(e4) {
                    this.eventEmitter.emit(xe, e4);
                  }
                },
                {
                  key: "join",
                  value: function() {
                    this.roomClient.join();
                  }
                },
                {
                  key: "changeMode",
                  value: function(e4) {
                    this.roomClient.changeMode(e4);
                  }
                },
                {
                  key: "leave",
                  value: function() {
                    this.roomClient.close({ sendLeft: true });
                  }
                },
                {
                  key: "end",
                  value: function() {
                    this.roomClient.closeRoom();
                  }
                },
                {
                  key: "respondEntry",
                  value: function(e4, t4) {
                    this.roomClient.respondEntry(e4, t4);
                  }
                },
                {
                  key: "pinnedParticipants",
                  get: function() {
                    return this.roomClient._pinnedParticipants;
                  }
                },
                {
                  key: "muteMic",
                  value: function() {
                    this.roomClient.disableMic();
                  }
                },
                {
                  key: "unmuteMic",
                  value: function() {
                    var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0;
                    this.roomClient.enableMic(e4);
                  }
                },
                {
                  key: "publishAudio",
                  value: (h2 = (0, n.Z)(
                    c().mark(function e4() {
                      var t4, r4 = arguments;
                      return c().wrap(
                        function(e5) {
                          for (; ; )
                            switch (e5.prev = e5.next) {
                              case 0:
                                return t4 = r4.length > 0 && void 0 !== r4[0] ? r4[0] : void 0, e5.next = 3, this.roomClient.enableMic(t4);
                              case 3:
                                return e5.abrupt("return");
                              case 4:
                              case "end":
                                return e5.stop();
                            }
                        },
                        e4,
                        this
                      );
                    })
                  ), function() {
                    return h2.apply(this, arguments);
                  })
                },
                {
                  key: "unpublishAudio",
                  value: (u2 = (0, n.Z)(
                    c().mark(function e4() {
                      return c().wrap(
                        function(e5) {
                          for (; ; )
                            switch (e5.prev = e5.next) {
                              case 0:
                                return e5.next = 2, this.roomClient.disableMic();
                              case 2:
                                return e5.abrupt("return");
                              case 3:
                              case "end":
                                return e5.stop();
                            }
                        },
                        e4,
                        this
                      );
                    })
                  ), function() {
                    return u2.apply(this, arguments);
                  })
                },
                {
                  key: "disableWebcam",
                  value: function() {
                    this.roomClient.disableWebcam();
                  }
                },
                {
                  key: "enableWebcam",
                  value: function() {
                    var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0;
                    this.roomClient.enableWebcam(e4);
                  }
                },
                {
                  key: "publishVideo",
                  value: (l2 = (0, n.Z)(
                    c().mark(function e4() {
                      var t4, r4 = arguments;
                      return c().wrap(
                        function(e5) {
                          for (; ; )
                            switch (e5.prev = e5.next) {
                              case 0:
                                return t4 = r4.length > 0 && void 0 !== r4[0] ? r4[0] : void 0, this.roomClient.enableWebcam(t4), e5.abrupt("return");
                              case 3:
                              case "end":
                                return e5.stop();
                            }
                        },
                        e4,
                        this
                      );
                    })
                  ), function() {
                    return l2.apply(this, arguments);
                  })
                },
                {
                  key: "unpublishVideo",
                  value: (p2 = (0, n.Z)(
                    c().mark(function e4() {
                      return c().wrap(
                        function(e5) {
                          for (; ; )
                            switch (e5.prev = e5.next) {
                              case 0:
                                return this.roomClient.disableWebcam(), e5.abrupt("return");
                              case 2:
                              case "end":
                                return e5.stop();
                            }
                        },
                        e4,
                        this
                      );
                    })
                  ), function() {
                    return p2.apply(this, arguments);
                  })
                },
                {
                  key: "disableScreenShare",
                  value: function() {
                    this.roomClient.disableShare();
                  }
                },
                {
                  key: "enableScreenShare",
                  value: function() {
                    var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0;
                    this.roomClient.enableShare(e4);
                  }
                },
                {
                  key: "pubblishScreenShare",
                  value: function() {
                    var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0;
                    this.roomClient.enableShare(e4);
                  }
                },
                {
                  key: "unpublishScreenShare",
                  value: function() {
                    this.roomClient.disableShare();
                  }
                },
                {
                  key: "sendChatMessage",
                  value: function(e4) {
                    this.roomClient.sendChatMessage(e4);
                    var t4 = {
                      text: e4,
                      timestamp: (/* @__PURE__ */ new Date()).getTime(),
                      senderId: this.localParticipant.id,
                      senderName: this.localParticipant.displayName
                    };
                    this.handleNewChatMessage(t4);
                  }
                },
                {
                  key: "startRecording",
                  value: function(e4, t4, r4) {
                    this.roomClient.startRecording(e4, t4, r4);
                  }
                },
                {
                  key: "stopRecording",
                  value: function() {
                    this.roomClient.stopRecording();
                  }
                },
                {
                  key: "startLivestream",
                  value: function(e4, t4) {
                    this.roomClient.startLivestream(e4, t4);
                  }
                },
                {
                  key: "stopLivestream",
                  value: function() {
                    this.roomClient.stopLivestream();
                  }
                },
                {
                  key: "startHls",
                  value: (d2 = (0, n.Z)(
                    c().mark(function e4(t4) {
                      return c().wrap(
                        function(e5) {
                          for (; ; )
                            switch (e5.prev = e5.next) {
                              case 0:
                                return e5.next = 2, this.roomClient.startHls(t4);
                              case 2:
                              case "end":
                                return e5.stop();
                            }
                        },
                        e4,
                        this
                      );
                    })
                  ), function(e4) {
                    return d2.apply(this, arguments);
                  })
                },
                {
                  key: "stopHls",
                  value: function() {
                    this.roomClient.stopHls();
                  }
                },
                {
                  key: "getMics",
                  value: (o2 = (0, n.Z)(
                    c().mark(function e4() {
                      return c().wrap(
                        function(e5) {
                          for (; ; )
                            switch (e5.prev = e5.next) {
                              case 0:
                                return e5.next = 2, this.roomClient.getMics();
                              case 2:
                                return e5.abrupt("return", e5.sent);
                              case 3:
                              case "end":
                                return e5.stop();
                            }
                        },
                        e4,
                        this
                      );
                    })
                  ), function() {
                    return o2.apply(this, arguments);
                  })
                },
                {
                  key: "getWebcams",
                  value: (r3 = (0, n.Z)(
                    c().mark(function e4() {
                      return c().wrap(
                        function(e5) {
                          for (; ; )
                            switch (e5.prev = e5.next) {
                              case 0:
                                return e5.next = 2, this.roomClient.getWebcams();
                              case 2:
                                return e5.abrupt("return", e5.sent);
                              case 3:
                              case "end":
                                return e5.stop();
                            }
                        },
                        e4,
                        this
                      );
                    })
                  ), function() {
                    return r3.apply(this, arguments);
                  })
                },
                {
                  key: "changeMic",
                  value: function(e4) {
                    this.roomClient.changeMic(e4);
                  }
                },
                {
                  key: "changeWebcam",
                  value: function(e4) {
                    this.roomClient.changeWebcam(e4);
                  }
                },
                {
                  key: "replaceWebcamStream",
                  value: function(e4) {
                    this.roomClient.replaceWebcamStream(e4);
                  }
                },
                {
                  key: "setWebcamQuality",
                  value: function(e4) {
                    this.roomClient.setWebcamQuality(e4);
                  }
                },
                {
                  key: "startWhiteboard",
                  value: function() {
                    this.roomClient.startWhiteboard();
                  }
                },
                {
                  key: "stopWhiteboard",
                  value: function() {
                    this.roomClient.stopWhiteboard();
                  }
                },
                {
                  key: "startVideo",
                  value: function(e4) {
                    var t4 = e4.link;
                    this.roomClient.startVideo({ link: t4 });
                  }
                },
                {
                  key: "stopVideo",
                  value: function() {
                    this.roomClient.stopVideo();
                  }
                },
                {
                  key: "resumeVideo",
                  value: function() {
                    this.roomClient.resumeVideo();
                  }
                },
                {
                  key: "refreshConnection",
                  value: function() {
                    this.roomClient.restartIce();
                  }
                },
                {
                  key: "pauseVideo",
                  value: function(e4) {
                    var t4 = e4.currentTime;
                    this.roomClient.pauseVideo(t4);
                  }
                },
                {
                  key: "seekVideo",
                  value: function(e4) {
                    var t4 = e4.currentTime;
                    this.roomClient.seekVideo(t4);
                  }
                },
                {
                  key: "handlePeerAdd",
                  value: function(e4) {
                    var t4 = e4.peer, r4 = new ve(t4);
                    this.participants.set(r4.id, r4), this.eventEmitter.emit(Me, r4), 1 === this.participants.size && this.updateMainParticipant(r4.id);
                  }
                },
                {
                  key: "handlePeerRemove",
                  value: function(e4) {
                    var t4 = e4.peerId, r4 = this.participants.get(t4);
                    null != r4 && (this.participants.delete(t4), this.eventEmitter.emit(Ae, r4), this.activePresenterId === r4.id && (this.activePresenterId = null, this.eventEmitter.emit(je, this.activePresenterId)), this.mainParticipantId === r4.id && (this.participants.size > 0 ? this.updateMainParticipant(
                      this.participants.entries().next().value[1].id
                    ) : this.updateMainParticipant(
                      this.localParticipant.id
                    )));
                  }
                },
                {
                  key: "handleProducerAdd",
                  value: function(e4) {
                    var t4 = e4.producer, r4 = new le(t4);
                    this.localParticipant.addStream(r4), "share" === r4.kind && (this.activePresenterId = this.localParticipant.id, this.eventEmitter.emit(je, this.activePresenterId), this.updateMainParticipant(this.localParticipant.id));
                  }
                },
                {
                  key: "handleUpdateProducer",
                  value: function(e4) {
                    var t4 = e4.producer, r4 = new le(t4);
                    this.localParticipant.updateStream(r4);
                  }
                },
                {
                  key: "handleProducerRemove",
                  value: function(e4) {
                    var t4 = e4.producerId, r4 = this.localParticipant.deleteStream(t4);
                    if (r4 && "share" === r4.kind) {
                      this.activePresenterId = null, this.eventEmitter.emit(je, this.activePresenterId);
                      var n2 = this.participants.size > 0 ? this.participants.entries().next().value[1].id : null;
                      this.updateMainParticipant(
                        this.activeSpeakerId || n2 || this.localParticipant.id
                      );
                    }
                  }
                },
                {
                  key: "handleConsumerAdd",
                  value: function(e4) {
                    var t4 = e4.consumer, r4 = e4.peerId, n2 = this.participants.get(r4);
                    if (n2) {
                      var a2 = new le(t4);
                      n2.addStream(a2), this.eventEmitter.emit(nt, a2), "share" === a2.kind && (this.activePresenterId = n2.id, this.eventEmitter.emit(je, this.activePresenterId), this.updateMainParticipant(n2.id));
                    }
                  }
                },
                {
                  key: "handleConsumerRemove",
                  value: function(e4) {
                    var t4 = e4.consumerId, r4 = e4.peerId, n2 = this.participants.get(r4);
                    if (null != n2 && n2) {
                      var a2 = n2.deleteStream(t4);
                      if (this.eventEmitter.emit(at, a2), a2 && "share" === a2.kind) {
                        this.activePresenterId = null, this.eventEmitter.emit(je, this.activePresenterId);
                        var i2 = this.participants.size > 0 ? this.participants.entries().next().value[1].id : null;
                        this.updateMainParticipant(
                          this.activeSpeakerId || i2 || this.localParticipant.id
                        );
                      }
                    }
                  }
                },
                {
                  key: "handleParticipantMediaStateChanged",
                  value: function(e4) {
                    var t4 = e4.peerId, r4 = e4.kind, n2 = e4.newState, a2 = this.participants.get(t4);
                    a2 && a2 && ("audio" == r4 ? a2.micOn = n2 : "video" == r4 && (a2.webcamOn = n2), a2.updateParticipantMediaState(r4, n2));
                  }
                },
                {
                  key: "handleSpeakerChange",
                  value: function(e4) {
                    var t4 = e4.peerId;
                    this.activeSpeakerId !== t4 && (this.activeSpeakerId = t4, this.eventEmitter.emit(Ne, t4), t4 && t4 !== this.localParticipant.id && this.activePresenterId !== this.mainParticipantId && t4 !== this.mainParticipantId && this.updateMainParticipant(t4));
                  }
                },
                {
                  key: "handleNewChatMessage",
                  value: function(e4) {
                    var t4 = e4.senderId, r4 = {
                      senderId: t4,
                      text: e4.text,
                      timestamp: e4.timestamp
                    };
                    if (this.localParticipant.id === t4)
                      r4.senderName = this.localParticipant.displayName;
                    else {
                      var n2 = this.participants.get(t4);
                      n2 && (r4.senderName = n2.displayName);
                    }
                    this.messages.push(r4), this.eventEmitter.emit(Be, r4);
                  }
                },
                {
                  key: "updateMainParticipant",
                  value: function(e4) {
                    this.mainParticipantId = e4;
                    var t4 = null;
                    t4 = e4 === this.localParticipant.id ? this.localParticipant : this.participants.get(this.mainParticipantId), this.eventEmitter.emit(Fe, t4);
                  }
                },
                {
                  key: "handleEntryRequested",
                  value: function(e4) {
                    var t4 = this, r4 = e4.id, n2 = e4.name;
                    this.eventEmitter.emit(Ue, {
                      participantId: r4,
                      name: n2,
                      allow: function() {
                        t4.roomClient.respondEntry(r4, "allowed");
                      },
                      deny: function() {
                        t4.roomClient.respondEntry(r4, "denied");
                      }
                    });
                  }
                },
                {
                  key: "handleEntryResponded",
                  value: function(e4) {
                    var t4 = e4.id, r4 = e4.decision;
                    this.eventEmitter.emit(Ze, t4, r4);
                  }
                },
                {
                  key: "handleMeetingJoined",
                  value: function(e4) {
                    var t4 = e4.peers, r4 = e4.poll, n2 = e4.messages, a2 = e4.baseUrl;
                    this.baseUrl = a2, n2.length > 0 && (this.messages = n2), this.eventEmitter.emit(De, {
                      peers: t4,
                      poll: r4,
                      messages: n2
                    });
                  }
                },
                {
                  key: "handleMeetingLeft",
                  value: function(e4) {
                    this.eventEmitter.emit(Ie, e4);
                  }
                },
                {
                  key: "handleRecordingStateChanged",
                  value: function(e4) {
                    this.recordingState = e4.status, this.eventEmitter.emit(He, e4);
                  }
                },
                {
                  key: "handleLivestreamStateChanged",
                  value: function(e4) {
                    this.livestreamState = e4.status, this.eventEmitter.emit(We, e4);
                  }
                },
                {
                  key: "handleHlsStateChanged",
                  value: function(e4) {
                    this.hlsState = e4.status, "HLS_PLAYABLE" == e4.status ? this.hlsUrls = {
                      downstreamUrl: e4.downstreamUrl,
                      playbackHlsUrl: e4.playbackHlsUrl,
                      livestreamUrl: e4.livestreamUrl
                    } : "HLS_STOPPED" == e4.status && (this.hlsUrls = {
                      downstreamUrl: null,
                      playbackHlsUrl: null,
                      livestreamUrl: null
                    }), this.eventEmitter.emit(Ke, e4);
                  }
                },
                {
                  key: "handleRecordingStarted",
                  value: function() {
                    this.eventEmitter.emit(ze);
                  }
                },
                {
                  key: "handleRecordingStopped",
                  value: function() {
                    this.eventEmitter.emit(Ve);
                  }
                },
                {
                  key: "handleLivestreamStarted",
                  value: function() {
                    this.eventEmitter.emit(Ge);
                  }
                },
                {
                  key: "handleLivestreamStopped",
                  value: function() {
                    this.eventEmitter.emit(qe);
                  }
                },
                {
                  key: "handleHlsStarted",
                  value: function(e4) {
                    this.eventEmitter.emit($e, e4);
                  }
                },
                {
                  key: "handleHlsStopped",
                  value: function() {
                    this.eventEmitter.emit(Xe);
                  }
                },
                {
                  key: "handleWhiteboardStarted",
                  value: function(e4) {
                    var t4 = e4.state;
                    this.eventEmitter.emit(Je, t4);
                  }
                },
                {
                  key: "handleWhiteboardStopped",
                  value: function(e4) {
                    !function(e5) {
                      if (null == e5)
                        throw new TypeError("Cannot destructure undefined");
                    }(e4), this.eventEmitter.emit(Qe);
                  }
                },
                {
                  key: "handleVideoStateChanged",
                  value: function(e4) {
                    this.eventEmitter.emit(Ye, e4);
                  }
                },
                {
                  key: "handleVideoSeeked",
                  value: function(e4) {
                    var t4 = e4.currentTime;
                    this.eventEmitter.emit(et, { currentTime: t4 });
                  }
                },
                {
                  key: "handlePinStateChanged",
                  value: function(e4) {
                    var t4 = e4.peerId, r4 = e4.state, n2 = e4.pinnedBy;
                    this.eventEmitter.emit(it, {
                      participantId: t4,
                      state: r4,
                      pinnedBy: n2
                    });
                  }
                },
                {
                  key: "handleMeetingStateChanged",
                  value: function(e4) {
                    var t4 = e4.state;
                    this.eventEmitter.emit(dt, { state: t4 });
                  }
                },
                {
                  key: "handleVideoQualityChanged",
                  value: function(e4) {
                    var t4 = e4.peerId, r4 = e4.prevQuality, n2 = e4.currentQuality, a2 = this.participants.get(t4);
                    a2 && a2 && a2.videoQualityChanged(r4, n2);
                  }
                },
                {
                  key: "handleMicRequested",
                  value: function(e4) {
                    var t4 = this, r4 = e4.peerId;
                    this.eventEmitter.emit(tt, {
                      participantId: r4,
                      accept: function() {
                        return t4.unmuteMic();
                      },
                      reject: function() {
                      }
                    });
                  }
                },
                {
                  key: "handleWebcamRequested",
                  value: function(e4) {
                    var t4 = this, r4 = e4.peerId;
                    this.eventEmitter.emit(rt, {
                      participantId: r4,
                      accept: function() {
                        return t4.enableWebcam();
                      },
                      reject: function() {
                      }
                    });
                  }
                },
                {
                  key: "handleConnectionParticipantJoin",
                  value: function(e4) {
                    var t4 = e4.roomId, r4 = e4.peer, n2 = this.connections.get(t4);
                    null != n2 && n2.meeting.participantJoin(r4);
                  }
                },
                {
                  key: "handleConnectionParticipantLeft",
                  value: function(e4) {
                    var t4 = e4.roomId, r4 = e4.peerId, n2 = this.connections.get(t4);
                    null != n2 && n2.meeting.participantLeft(r4);
                  }
                },
                {
                  key: "handleConnectionOpen",
                  value: function(e4) {
                    var t4 = e4.peers, r4 = e4.roomId, n2 = e4.payload, a2 = new Pe({ roomId: r4, peers: t4, payload: n2 });
                    this.connections.set(a2.id, a2), this.eventEmitter.emit(st, a2);
                  }
                },
                {
                  key: "handleConnectionClose",
                  value: function(e4) {
                    var t4 = e4.roomId;
                    null != this.connections.get(t4) && (this.connections.delete(t4), this.eventEmitter.emit(ot, t4));
                  }
                },
                {
                  key: "handleSwitchMeeting",
                  value: function(e4) {
                    var t4 = e4.roomId, r4 = e4.token, n2 = e4.payload, a2 = e4.peerId, i2 = e4.connectionPeerId, s2 = e4.connectionRoomId, o3 = a2 ? {
                      meetingId: t4,
                      payload: n2,
                      token: r4,
                      participantId: a2
                    } : {
                      meetingId: t4,
                      payload: n2,
                      token: r4,
                      connectionParticipantId: i2,
                      connectionMeetingId: s2
                    };
                    this.eventEmitter.emit(ct, o3);
                  }
                },
                {
                  key: "handleConnectionChatMessage",
                  value: function(e4) {
                    var t4 = e4.roomId, r4 = e4.peerId, n2 = e4.message, a2 = this.connections.get(t4);
                    null != a2 && a2.meeting.sendChatMessageEvent({
                      participantId: r4,
                      message: n2
                    });
                  }
                },
                {
                  key: "connectTo",
                  value: (t3 = (0, n.Z)(
                    c().mark(function e4(t4) {
                      var r4, n2;
                      return c().wrap(
                        function(e5) {
                          for (; ; )
                            switch (e5.prev = e5.next) {
                              case 0:
                                return r4 = t4.meetingId, n2 = t4.payload, e5.next = 3, this.roomClient.openConnection({
                                  roomId: r4,
                                  payload: n2
                                });
                              case 3:
                              case "end":
                                return e5.stop();
                            }
                        },
                        e4,
                        this
                      );
                    })
                  ), function(e4) {
                    return t3.apply(this, arguments);
                  })
                },
                {
                  key: "on",
                  value: function(e4, t4) {
                    switch (e4) {
                      case Me:
                      case Ae:
                      case Ne:
                      case je:
                      case Fe:
                      case Be:
                      case Ue:
                      case Ze:
                      case He:
                      case ze:
                      case Ve:
                      case We:
                      case Ge:
                      case qe:
                      case $e:
                      case Xe:
                      case Ke:
                      case nt:
                      case at:
                      case Je:
                      case Qe:
                      case De:
                      case Ie:
                      case Ye:
                      case et:
                      case tt:
                      case rt:
                      case it:
                      case st:
                      case ot:
                      case ct:
                      case dt:
                      case Le:
                      case xe:
                        this.eventEmitter.on(e4, t4);
                        break;
                      default:
                        throw new Error("Invalid event type");
                    }
                  }
                },
                {
                  key: "off",
                  value: function(e4, t4) {
                    switch (e4) {
                      case Me:
                      case Ae:
                      case Ne:
                      case je:
                      case Fe:
                      case Be:
                      case Ue:
                      case Ze:
                      case He:
                      case ze:
                      case Ve:
                      case We:
                      case Ge:
                      case qe:
                      case Ke:
                      case $e:
                      case Xe:
                      case nt:
                      case at:
                      case Je:
                      case Qe:
                      case De:
                      case Ie:
                      case Ye:
                      case et:
                      case tt:
                      case rt:
                      case it:
                      case st:
                      case ot:
                      case ct:
                      case dt:
                      case xe:
                      case Le:
                        this.eventEmitter.off(e4, t4);
                        break;
                      default:
                        throw new Error("Invalid event type");
                    }
                  }
                }
              ]), e3;
            }();
            function mt(e3) {
              var t3 = e3.topic, r3 = e3.message, n2 = e3.senderId, a2 = e3.timestamp, i2 = e3.senderName, s2 = e3.id;
              t3 && r3 && ae(this, pt).emit(t3, {
                message: r3,
                senderId: n2,
                timestamp: a2,
                topic: t3,
                senderName: i2,
                id: s2
              });
            }
            function ft(e3) {
              var t3 = e3.peerId, r3 = e3.mode;
              t3 === this.localParticipant.id ? this.localParticipant.mode = r3 : this.participants.get(t3).mode = r3, this.eventEmitter.emit(Le, { participantId: t3, mode: r3 });
            }
            var _t = r2(6900), gt = r2(6380), vt = r2(3430), yt = r2(8962), bt = function() {
              var e3 = (0, n.Z)(
                c().mark(function e4(t3) {
                  return c().wrap(function(e5) {
                    for (; ; )
                      switch (e5.prev = e5.next) {
                        case 0:
                          return void 0 === navigator.mediaDevices && (navigator.mediaDevices = {}), void 0 === navigator.mediaDevices.getUserMedia && (navigator.mediaDevices.getUserMedia = function(e6) {
                            var t4 = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
                            return t4 ? new Promise(function(r3, n2) {
                              t4.call(navigator, e6, r3, n2);
                            }) : Promise.reject(
                              new Error(
                                "getUserMedia is not implemented in this browser"
                              )
                            );
                          }), e5.next = 4, navigator.mediaDevices.getUserMedia(t3);
                        case 4:
                          return e5.abrupt("return", e5.sent);
                        case 5:
                        case "end":
                          return e5.stop();
                      }
                  }, e4);
                })
              );
              return function(t3) {
                return e3.apply(this, arguments);
              };
            }(), St = function() {
              var e3 = (0, n.Z)(
                c().mark(function e4(t3) {
                  return c().wrap(function(e5) {
                    for (; ; )
                      switch (e5.prev = e5.next) {
                        case 0:
                          return void 0 === navigator.mediaDevices && (navigator.mediaDevices = {}), void 0 === navigator.mediaDevices.getDisplayMedia && (navigator.mediaDevices.getDisplayMedia = function(e6) {
                            var t4 = navigator.webkitGetDisplayMedia || navigator.mozGetDisplayMedia;
                            return t4 ? new Promise(function(r3, n2) {
                              t4.call(navigator, e6, r3, n2);
                            }) : Promise.reject(
                              new Error(
                                "getDisplayMedia is not implemented in this browser"
                              )
                            );
                          }), e5.next = 4, navigator.mediaDevices.getDisplayMedia(t3);
                        case 4:
                          return e5.abrupt("return", e5.sent);
                        case 5:
                        case "end":
                          return e5.stop();
                      }
                  }, e4);
                })
              );
              return function(t3) {
                return e3.apply(this, arguments);
              };
            }();
            var wt = [T], Tt = function() {
              function e3() {
                (0, a.Z)(this, e3);
              }
              var t3, r3, s2;
              return (0, i.Z)(e3, null, [
                {
                  key: "config",
                  value: function(e4) {
                    if (!e4)
                      throw new Error(
                        "'token' is empty, please provide it in config"
                      );
                    this.apiKey = e4;
                    var t4 = v(te, void 0, b.apply(void 0, wt));
                    window.STORE = t4, re.default.init({ store: t4 });
                  }
                },
                {
                  key: "analytics",
                  value: function(e4) {
                    var t4, r4, n2, a2;
                    !e4 && navigator && navigator.userAgent && (n2 = navigator.userAgent, delete (a2 = p().parse(n2)).engine);
                    try {
                      var i2;
                      null !== (i2 = e4) && void 0 !== i2 && i2.browserUserAgent || (n2 = navigator.userAgent, delete (a2 = p().parse(n2)).engine);
                    } catch (e5) {
                    }
                    e4 && e4.rawUserAgent && (n2 = e4.rawUserAgent, delete (a2 = p().parse(n2)).engine), e4 || (e4 = {});
                    var s3 = {};
                    s3.sdkType = e4.sdkType || "javascript", s3.sdkVersion = e4.sdkVersion || "0.0.63", s3.platform = e4.platform || (null === (t4 = a2) || void 0 === t4 || null === (r4 = t4.platform) || void 0 === r4 ? void 0 : r4.type) || "", "null" == e4.browserUserAgent ? s3.browserUserAgent = void 0 : s3.browserUserAgent = a2, e4.deviceUserAgent && (s3.deviceUserAgent = e4.deviceUserAgent), this._deviceInfo = s3;
                  }
                },
                {
                  key: "initMeeting",
                  value: function(e4) {
                    var t4, r4 = e4.meetingId, n2 = e4.customCameraVideoTrack, a2 = void 0 === n2 ? void 0 : n2, i2 = e4.customMicrophoneAudioTrack, s3 = void 0 === i2 ? void 0 : i2, o2 = e4.autoConsume, c2 = void 0 === o2 || o2, d2 = e4.preferredProtocol, p2 = e4.mode, l2 = e4.multiStream, u2 = void 0 === l2 || l2, h2 = e4.participantId, m2 = e4.name, f2 = e4.micEnabled, _2 = e4.webcamEnabled, g2 = e4.maxResolution, v2 = e4.chatEnabled, y2 = e4.useSpartialLayerAnalytics;
                    if (!r4)
                      throw new Error(
                        "'meetingId' is empty, please verify it or generate new meetingId using the API."
                      );
                    var b2 = h2 || R()({ length: 8 }).toLowerCase(), S2 = m2 || R()({ length: 6 }).toLowerCase();
                    switch (this._deviceInfo || this.analytics(), "string" != typeof d2 && (d2 = "UDP_ONLY"), null === (t4 = d2) || void 0 === t4 ? void 0 : t4.toUpperCase()) {
                      case "UDP_ONLY":
                      case "UDP_OVER_TCP":
                        d2 = d2.toUpperCase();
                        break;
                      default:
                        d2 = "UDP_ONLY";
                    }
                    if (p2 || (p2 = vt.S.CONFERENCE), p2 !== vt.S.CONFERENCE && p2 !== vt.S.VIEWER)
                      throw new Error(
                        '"mode" can only be either '.concat(vt.S.CONFERENCE, " or ").concat(vt.S.VIEWER)
                      );
                    var w2 = new re.default({
                      roomId: r4,
                      peerId: b2,
                      secret: this.apiKey,
                      device: "unknown",
                      displayName: S2,
                      mode: p2,
                      useSimulcast: u2,
                      produce: true,
                      consume: true,
                      useSharingSimulcast: true,
                      datachannel: false !== v2,
                      micEnabled: false !== f2,
                      webcamEnabled: false !== _2,
                      maxResolution: g2 || "hd",
                      useSpartialLayerAnalytics: y2,
                      _deviceInfo: this._deviceInfo,
                      customCameraVideoTrack: a2,
                      customMicrophoneAudioTrack: s3,
                      autoConsume: c2,
                      preferredProtocol: d2
                    });
                    pe.roomClient = w2;
                    var T2 = new ve({
                      id: b2,
                      displayName: S2,
                      local: true,
                      mode: p2
                    });
                    return new ht(r4, T2, w2);
                  }
                },
                {
                  key: "createCameraVideoTrack",
                  value: (s2 = (0, n.Z)(
                    c().mark(function e4(t4) {
                      var r4, n2, a2, i2, s3, o2, d2, p2, l2, u2, h2, m2, f2;
                      return c().wrap(function(e5) {
                        for (; ; )
                          switch (e5.prev = e5.next) {
                            case 0:
                              return r4 = t4.cameraId, n2 = void 0 === r4 ? void 0 : r4, a2 = t4.encoderConfig, i2 = void 0 === a2 ? void 0 : a2, s3 = t4.facingMode, o2 = void 0 === s3 ? void 0 : s3, d2 = t4.optimizationMode, p2 = void 0 === d2 ? void 0 : d2, l2 = t4.multiStream, u2 = void 0 === l2 || l2, h2 = i2 ? yt.v.videoProfiles[i2] : yt.v.videoProfiles.h360p_w640p, m2 = {
                                video: {
                                  deviceId: n2 || void 0,
                                  facingMode: o2 || void 0,
                                  width: h2.width,
                                  height: h2.height,
                                  frameRate: h2.frameRate
                                }
                              }, e5.next = 5, bt(m2);
                            case 5:
                              return f2 = e5.sent, p2 && (f2.contentHint = p2), f2.encoderConfig = i2 || "h360p_w640p", f2.contentHint = p2 || "", f2.multiStream = u2, e5.abrupt("return", f2);
                            case 11:
                            case "end":
                              return e5.stop();
                          }
                      }, e4);
                    })
                  ), function(e4) {
                    return s2.apply(this, arguments);
                  })
                },
                {
                  key: "createScreenShareVideoTrack",
                  value: (r3 = (0, n.Z)(
                    c().mark(function e4(t4) {
                      var r4, n2, a2, i2, s3, o2, d2, p2, l2;
                      return c().wrap(function(e5) {
                        for (; ; )
                          switch (e5.prev = e5.next) {
                            case 0:
                              return r4 = t4.encoderConfig, n2 = void 0 === r4 ? void 0 : r4, a2 = t4.optimizationMode, i2 = void 0 === a2 ? void 0 : a2, s3 = t4.withAudio, o2 = void 0 === s3 ? "enable" : s3, d2 = n2 ? yt.v.screenShareProfiles[n2] : yt.v.screenShareProfiles.h720p_15fps, p2 = {
                                audio: "enable" === o2,
                                video: {
                                  width: d2.width,
                                  height: d2.height,
                                  frameRate: d2.frameRate
                                }
                              }, e5.next = 5, St(p2);
                            case 5:
                              return l2 = e5.sent, i2 && (l2.contentHint = i2), e5.abrupt("return", l2);
                            case 8:
                            case "end":
                              return e5.stop();
                          }
                      }, e4);
                    })
                  ), function(e4) {
                    return r3.apply(this, arguments);
                  })
                },
                {
                  key: "createMicrophoneAudioTrack",
                  value: (t3 = (0, n.Z)(
                    c().mark(function e4(t4) {
                      var r4, n2, a2, i2, s3, o2, d2, p2, l2;
                      return c().wrap(function(e5) {
                        for (; ; )
                          switch (e5.prev = e5.next) {
                            case 0:
                              return r4 = t4.noiseConfig, n2 = void 0 === r4 ? void 0 : r4, a2 = t4.encoderConfig, i2 = void 0 === a2 ? void 0 : a2, s3 = t4.microphoneId, o2 = void 0 === s3 ? void 0 : s3, d2 = i2 ? yt.v.audioProfiles[i2] : yt.v.audioProfiles.speech_standard, p2 = {
                                audio: {
                                  deviceId: o2,
                                  sampleRate: d2.sampleRate,
                                  echoCancellation: n2 ? n2 && n2.acousticEchoCancellation : d2.echoCancellation,
                                  autoGainControl: n2 ? n2 && n2.autoGainControl : d2.autoGainControl,
                                  noiseSuppression: n2 ? n2 && n2.noiseSuppression : d2.noiseSuppression,
                                  channelCount: d2.channelCount
                                }
                              }, e5.next = 5, bt(p2);
                            case 5:
                              return (l2 = e5.sent).encoderConfig = i2 || "speech_standard", e5.abrupt("return", l2);
                            case 8:
                            case "end":
                              return e5.stop();
                          }
                      }, e4);
                    })
                  ), function(e4) {
                    return t3.apply(this, arguments);
                  })
                }
              ]), e3;
            }();
            (0, s.Z)(Tt, "Constants", {
              errors: _t.R,
              recordingEvents: {
                RECORDING_STARTING: "RECORDING_STARTING",
                RECORDING_STARTED: "RECORDING_STARTED",
                RECORDING_STOPPING: "RECORDING_STOPPING",
                RECORDING_STOPPED: "RECORDING_STOPPED"
              },
              livestreamEvents: {
                LIVESTREAM_STARTING: "LIVESTREAM_STARTING",
                LIVESTREAM_STARTED: "LIVESTREAM_STARTED",
                LIVESTREAM_STOPPING: "LIVESTREAM_STOPPING",
                LIVESTREAM_STOPPED: "LIVESTREAM_STOPPED"
              },
              hlsEvents: gt.o,
              modes: vt.S
            });
            var Et = Tt;
          },
          8922: (e2, t2, r2) => {
            "use strict";
            function n(e3) {
              return n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e4) {
                return typeof e4;
              } : function(e4) {
                return e4 && "function" == typeof Symbol && e4.constructor === Symbol && e4 !== Symbol.prototype ? "symbol" : typeof e4;
              }, n(e3);
            }
            r2.r(t2), r2.d(t2, { default: () => Ei });
            var a = r2(5861), i = r2(5671), s = r2(3144), o = r2(4942), c = r2(7757), d = r2.n(c), p = r2(9293), l = r2(960), u = r2(1227), h = r2.n(u), m = "mediasoup-demo", f = function() {
              function e3(t3) {
                (0, i.Z)(this, e3), t3 ? (this._debug = h()("".concat(m, ":").concat(t3)), this._warn = h()("".concat(m, ":WARN:").concat(t3)), this._error = h()("".concat(m, ":ERROR:").concat(t3))) : (this._debug = h()(m), this._warn = h()("".concat(m, ":WARN")), this._error = h()("".concat(m, ":ERROR"))), this._debug.log = console.info.bind(console), this._warn.log = console.warn.bind(console), this._error.log = console.error.bind(console);
              }
              return (0, s.Z)(e3, [
                {
                  key: "debug",
                  get: function() {
                    return this._debug;
                  }
                },
                {
                  key: "warn",
                  get: function() {
                    return this._warn;
                  }
                },
                {
                  key: "error",
                  get: function() {
                    return this._error;
                  }
                }
              ]), e3;
            }(), _ = r2(1354), g = _.enc.Latin1.parse(
              "6gf9Oz5Y(6fOWPP@3XPv0Mwp51yfJ0HiZW^0*!9NdUuZ*VdKmRC@f))&^!Iriw)q"
            ), v = _.enc.Latin1.parse("BHrabik^$W^y*HL@A*$4YKj(");
            function y(e3) {
              return b.apply(this, arguments);
            }
            function b() {
              return (b = (0, a.Z)(
                d().mark(function e3(t3) {
                  var r3, n2, a2, i2, s2, o2, c2, p2, l2, u2, h2;
                  return d().wrap(function(e4) {
                    for (; ; )
                      switch (e4.prev = e4.next) {
                        case 0:
                          return r3 = t3.roomId, n2 = t3.secret, a2 = "call-api.videosdk.live", i2 = [], s2 = null, o2 = {}, c2 = {}, p2 = {}, e4.next = 9, fetch(
                            "https://api.videosdk.live/infra/v1/meetings/init-config",
                            {
                              method: "POST",
                              headers: {
                                Authorization: n2,
                                "Content-Type": "application/json"
                              },
                              body: JSON.stringify({ roomId: r3 })
                            }
                          ).then(function(e5) {
                            return e5.json();
                          }).catch(function(e5) {
                            return {};
                          });
                        case 9:
                          return l2 = e4.sent, (u2 = l2.data) && (a2 = u2.baseUrl, h2 = u2.observability, i2 = S(u2.iceServers), s2 = h2.jwt, o2 = h2.traces, c2 = h2.logs, p2 = h2.metaData), e4.abrupt("return", {
                            baseUrl: a2,
                            iceServers: i2,
                            observabilityJwt: s2,
                            traces: o2,
                            logs: c2,
                            metaData: p2
                          });
                        case 13:
                        case "end":
                          return e4.stop();
                      }
                  }, e3);
                })
              )).apply(this, arguments);
            }
            function S(e3) {
              try {
                var t3 = _.AES.decrypt(e3, g, {
                  iv: v,
                  mode: _.mode.CBC,
                  padding: _.pad.ZeroPadding
                }).toString(_.enc.Utf8);
                return JSON.parse(t3);
              } catch (e4) {
                return [];
              }
            }
            var w = r2(6808), T = r2.n(w), E = "mediasoup-demo.user", R = "mediasoup-demo.devices";
            function P(e3) {
              var t3 = e3.displayName;
              T().set(E, { displayName: t3 });
            }
            function C() {
              return T().getJSON(R);
            }
            var k = r2(3196), O = r2.n(k), x = function(e3) {
              return { type: "SET_ROOM_STATE", payload: { state: e3 } };
            }, D = function(e3) {
              return {
                type: "SET_ROOM_ACTIVE_SPEAKER",
                payload: { peerId: e3 }
              };
            }, I = function(e3) {
              return { type: "SET_ROOM_STATS_PEER_ID", payload: { peerId: e3 } };
            }, L = function(e3) {
              return {
                type: "SET_MEDIA_CAPABILITIES",
                payload: {
                  canSendMic: e3.canSendMic,
                  canSendWebcam: e3.canSendWebcam
                }
              };
            }, M = function(e3) {
              return { type: "SET_CAN_CHANGE_WEBCAM", payload: e3 };
            }, A = function(e3) {
              return { type: "SET_DISPLAY_NAME", payload: { displayName: e3 } };
            }, N = function(e3) {
              return { type: "SET_AUDIO_ONLY_STATE", payload: { enabled: e3 } };
            }, j = function(e3) {
              return {
                type: "SET_AUDIO_ONLY_IN_PROGRESS",
                payload: { flag: e3 }
              };
            }, F = function(e3) {
              return { type: "SET_AUDIO_MUTED_STATE", payload: { enabled: e3 } };
            }, B = function(e3) {
              return {
                type: "SET_RESTART_ICE_IN_PROGRESS",
                payload: { flag: e3 }
              };
            }, U = function(e3) {
              return { type: "ADD_PRODUCER", payload: { producer: e3 } };
            }, Z = function(e3) {
              return { type: "REMOVE_PRODUCER", payload: { producerId: e3 } };
            }, H = function(e3, t3) {
              return {
                type: "SET_PRODUCER_TRACK",
                payload: { producerId: e3, track: t3 }
              };
            }, z = function(e3, t3) {
              return {
                type: "SET_PRODUCER_SCORE",
                payload: { producerId: e3, score: t3 }
              };
            }, V = function(e3) {
              return {
                type: "ADD_DATA_PRODUCER",
                payload: { dataProducer: e3 }
              };
            }, W = function(e3) {
              return { type: "SET_WEBCAM_IN_PROGRESS", payload: { flag: e3 } };
            }, G = function(e3) {
              return { type: "SET_SHARE_IN_PROGRESS", payload: { flag: e3 } };
            }, q = function(e3) {
              return { type: "ADD_PEER", payload: { peer: e3 } };
            }, K = function(e3) {
              return { type: "REMOVE_PEER", payload: { peerId: e3 } };
            }, $ = function(e3, t3) {
              return {
                type: "SET_PEER_DISPLAY_NAME",
                payload: { displayName: e3, peerId: t3 }
              };
            }, X = function(e3, t3) {
              return {
                type: "ADD_CONSUMER",
                payload: { consumer: e3, peerId: t3 }
              };
            }, J = function(e3, t3) {
              return {
                type: "REMOVE_CONSUMER",
                payload: { consumerId: e3, peerId: t3 }
              };
            }, Q = function(e3, t3) {
              return {
                type: "SET_CONSUMER_PAUSED",
                payload: { consumerId: e3, originator: t3 }
              };
            }, Y = function(e3, t3) {
              return {
                type: "SET_CONSUMER_RESUMED",
                payload: { consumerId: e3, originator: t3 }
              };
            }, ee = function(e3, t3, r3) {
              return {
                type: "SET_CONSUMER_CURRENT_LAYERS",
                payload: { consumerId: e3, spatialLayer: t3, temporalLayer: r3 }
              };
            }, te = function(e3, t3, r3) {
              return {
                type: "SET_CONSUMER_PREFERRED_LAYERS",
                payload: { consumerId: e3, spatialLayer: t3, temporalLayer: r3 }
              };
            }, re = function(e3, t3) {
              return {
                type: "SET_CONSUMER_PRIORITY",
                payload: { consumerId: e3, priority: t3 }
              };
            }, ne = function(e3, t3) {
              return {
                type: "SET_CONSUMER_SCORE",
                payload: { consumerId: e3, score: t3 }
              };
            }, ae = function(e3, t3) {
              return {
                type: "ADD_DATA_CONSUMER",
                payload: { dataConsumer: e3, peerId: t3 }
              };
            }, ie = function(e3, t3) {
              return {
                type: "REMOVE_DATA_CONSUMER",
                payload: { dataConsumerId: e3, peerId: t3 }
              };
            }, se = function(e3) {
              var t3 = e3.type, r3 = void 0 === t3 ? "info" : t3, n2 = e3.text, a2 = e3.title, i2 = e3.timeout;
              if (!i2)
                switch (r3) {
                  case "info":
                    i2 = 3e3;
                    break;
                  case "error":
                    i2 = 5e3;
                }
              var s2 = {
                id: O()({ length: 6 }).toLowerCase(),
                type: r3,
                title: a2,
                text: n2,
                timeout: i2
              };
              return function(e4) {
                e4(
                  function(e5) {
                    return {
                      type: "ADD_NOTIFICATION",
                      payload: { notification: e5 }
                    };
                  }(s2)
                ), setTimeout(function() {
                  e4({
                    type: "REMOVE_NOTIFICATION",
                    payload: { notificationId: s2.id }
                  });
                }, i2);
              };
            }, oe = r2(7187), ce = r2(885), de = r2(8962), pe = {}, le = {}, ue = {};
            for (var he in de.v.videoProfiles)
              "oneSixNine" == de.v.videoProfiles[he].aspectRatio && (pe[he] = de.v.videoProfiles[he], pe[he].encoding = {
                maxBitrate: pe[he].bitRate,
                maxFramerate: pe[he].frameRate
              }), "fourThree" == de.v.videoProfiles[he].aspectRatio && (le[he] = de.v.videoProfiles[he], le[he].encoding = {
                maxBitrate: le[he].bitRate,
                maxFramerate: le[he].frameRate
              });
            for (var he in de.v.screenShareProfiles)
              ue[he] = de.v.screenShareProfiles[he], ue[he].encoding = {
                maxBitrate: ue[he].bitRate,
                maxFramerate: ue[he].frameRate
              };
            var me = Object.values(pe), fe = Object.values(le), _e = Object.values(ue), ge = [pe.h180p_w320p, pe.h360p_w640p], ve = [le.h180p_w240p, le.h360p_w480p], ye = ["q", "h", "f"];
            function be(e3, t3, r3, n2) {
              var a2 = n2 && n2.videoEncoding;
              e3 && (a2 = n2 && n2.screenShareEncoding);
              var i2 = null == n2 ? void 0 : n2.simulcast;
              if (a2 || (a2 = function(e4, t4, r4) {
                for (var n3 = function(e5, t5, r5) {
                  if (e5)
                    return _e;
                  var n4 = t5 > r5 ? t5 / r5 : r5 / t5;
                  if (Math.abs(n4 - 16 / 9) < Math.abs(n4 - 4 / 3))
                    return me;
                  return fe;
                }(e4, t4, r4), a3 = n3[0].encoding, i3 = Math.max(t4, r4), s3 = 0; s3 < n3.length; s3 += 1) {
                  var o3 = n3[s3];
                  if (a3 = o3.encoding, o3.width >= i3)
                    break;
                }
                return a3;
              }(e3, t3, r3)), !i2)
                return [a2];
              var s2, o2 = {
                width: t3,
                height: r3,
                encoding: {
                  maxBitrate: a2.maxBitrate,
                  maxFramerate: a2.maxFramerate
                }
              }, c2 = [], d2 = (c2 = Se(e3, o2))[0];
              if (c2.length > 1) {
                var p2 = c2;
                s2 = (0, ce.Z)(p2, 2)[1];
              }
              var l2 = Math.max(t3, r3);
              return we(
                t3,
                r3,
                l2 >= 960 && s2 ? [d2, s2, o2] : l2 >= 480 ? [d2, o2] : [o2]
              );
            }
            function Se(e3, t3) {
              if (e3)
                r3 = t3, [{ scaleResolutionDownBy: 2, fps: 3 }].map(function(e4) {
                  var t4;
                  return {
                    width: Math.floor(r3.width / e4.scaleResolutionDownBy),
                    height: Math.floor(r3.height / e4.scaleResolutionDownBy),
                    encodings: {
                      maxBitrate: Math.max(
                        15e4,
                        Math.floor(
                          r3.encoding.maxBitrate / (Math.pow(e4.scaleResolutionDownBy, 2) * ((null !== (t4 = r3.encoding.maxFramerate) && void 0 !== t4 ? t4 : 30) / e4.fps))
                        )
                      ),
                      maxFramerate: e4.fps
                    }
                  };
                });
              var r3, n2 = t3.width, a2 = t3.height, i2 = n2 > a2 ? n2 / a2 : a2 / n2;
              return Math.abs(i2 - 16 / 9) < Math.abs(i2 - 4 / 3) ? ge : ve;
            }
            function we(e3, t3, r3) {
              var n2 = [];
              return r3.forEach(function(r4, a2) {
                if (!(a2 >= ye.length)) {
                  var i2 = Math.min(e3, t3), s2 = {
                    rid: ye[a2],
                    scaleResolutionDownBy: i2 / Math.min(r4.width, r4.height),
                    maxBitrate: r4.encoding.maxBitrate,
                    maxFramerate: r4.encoding.maxFramerate
                  };
                  n2.push(s2);
                }
              }), n2;
            }
            function Te(e3, t3, r3) {
              if (!e3)
                return {};
              var n2 = e3.id, a2 = (e3.preferredSpatialLayer, e3.preferredTemporalLayer, e3.appData), i2 = a2.width, s2 = a2.height, o2 = a2.encodings;
              try {
                var c2 = function(e4) {
                  var t4 = [];
                  if (e4 && 0 != e4.length) {
                    if (1 === e4.length) {
                      for (var r4 = 0; r4 < 3; r4++)
                        t4.push(Math.pow(2, 3 - r4 - 1));
                      return t4;
                    }
                    var n3 = false;
                    return e4.forEach(function(e5) {
                      void 0 !== e5.scaleResolutionDownBy ? (n3 = true, t4.push(Math.max(1, e5.scaleResolutionDownBy))) : t4.push(1);
                    }), n3 || e4.forEach(function(r5, n4) {
                      t4[n4] = Math.pow(2, e4.length - n4 - 1);
                    }), t4;
                  }
                }(o2);
                if (!c2)
                  return {};
                for (var d2 = Math.min(
                  Math.max(de.v.adaptiveScalingFactor || 0.75, 0.5),
                  1
                ), p2 = 0, l2 = 0; l2 < c2.length; l2++) {
                  var u2 = d2 * i2 / c2[l2], h2 = d2 * s2 / c2[l2];
                  if (!(t3 >= u2 && r3 >= h2))
                    break;
                  p2 = l2;
                }
                var m2 = (e3.temporalLayers ? e3.temporalLayers : 3) - 1;
                if (0 === p2 && m2 > 0) {
                  var f2 = i2 / c2[0], _2 = s2 / c2[0];
                  t3 < 0.5 * f2 && r3 < 0.5 * _2 && (m2 -= 1), m2 > 0 && t3 < 0.25 * f2 && r3 < 0.25 * _2 && (m2 -= 1);
                }
                return {
                  consumerId: n2,
                  newPreferredSpatialLayer: p2,
                  newPreferredTemporalLayer: m2
                };
              } catch (e4) {
                return {};
              }
            }
            var Ee = r2(6900), Re = r2(710), Pe = r2(4180), Ce = r2(3430), ke = r2(6380), Oe = "object" == typeof globalThis ? globalThis : "object" == typeof self ? self : "object" == typeof window ? window : "object" == typeof r2.g ? r2.g : {}, xe = "1.4.1", De = /^(\d+)\.(\d+)\.(\d+)(-(.+))?$/;
            var Ie = function(e3) {
              var t3 = /* @__PURE__ */ new Set([e3]), r3 = /* @__PURE__ */ new Set(), n2 = e3.match(De);
              if (!n2)
                return function() {
                  return false;
                };
              var a2 = +n2[1], i2 = +n2[2], s2 = +n2[3];
              if (null != n2[4])
                return function(t4) {
                  return t4 === e3;
                };
              function o2(e4) {
                return r3.add(e4), false;
              }
              function c2(e4) {
                return t3.add(e4), true;
              }
              return function(e4) {
                if (t3.has(e4))
                  return true;
                if (r3.has(e4))
                  return false;
                var n3 = e4.match(De);
                if (!n3)
                  return o2(e4);
                var d2 = +n3[1], p2 = +n3[2], l2 = +n3[3];
                return null != n3[4] || a2 !== d2 ? o2(e4) : 0 === a2 ? i2 === p2 && s2 <= l2 ? c2(e4) : o2(e4) : i2 <= p2 ? c2(e4) : o2(e4);
              };
            }(xe), Le = xe.split(".")[0], Me = Symbol.for("opentelemetry.js.api." + Le), Ae = Oe;
            function Ne(e3, t3, r3, n2) {
              var a2;
              void 0 === n2 && (n2 = false);
              var i2 = Ae[Me] = null !== (a2 = Ae[Me]) && void 0 !== a2 ? a2 : { version: xe };
              if (!n2 && i2[e3]) {
                var s2 = new Error(
                  "@opentelemetry/api: Attempted duplicate registration of API: " + e3
                );
                return r3.error(s2.stack || s2.message), false;
              }
              if (i2.version !== xe) {
                s2 = new Error(
                  "@opentelemetry/api: Registration of version v" + i2.version + " for " + e3 + " does not match previously registered API v" + xe
                );
                return r3.error(s2.stack || s2.message), false;
              }
              return i2[e3] = t3, r3.debug(
                "@opentelemetry/api: Registered a global for " + e3 + " v1.4.1."
              ), true;
            }
            function je(e3) {
              var t3, r3, n2 = null === (t3 = Ae[Me]) || void 0 === t3 ? void 0 : t3.version;
              if (n2 && Ie(n2))
                return null === (r3 = Ae[Me]) || void 0 === r3 ? void 0 : r3[e3];
            }
            function Fe(e3, t3) {
              t3.debug(
                "@opentelemetry/api: Unregistering a global for " + e3 + " v1.4.1."
              );
              var r3 = Ae[Me];
              r3 && delete r3[e3];
            }
            var Be, Ue = function(e3, t3) {
              var r3 = "function" == typeof Symbol && e3[Symbol.iterator];
              if (!r3)
                return e3;
              var n2, a2, i2 = r3.call(e3), s2 = [];
              try {
                for (; (void 0 === t3 || t3-- > 0) && !(n2 = i2.next()).done; )
                  s2.push(n2.value);
              } catch (e4) {
                a2 = { error: e4 };
              } finally {
                try {
                  n2 && !n2.done && (r3 = i2.return) && r3.call(i2);
                } finally {
                  if (a2)
                    throw a2.error;
                }
              }
              return s2;
            }, Ze = function(e3, t3, r3) {
              if (r3 || 2 === arguments.length)
                for (var n2, a2 = 0, i2 = t3.length; a2 < i2; a2++)
                  !n2 && a2 in t3 || (n2 || (n2 = Array.prototype.slice.call(t3, 0, a2)), n2[a2] = t3[a2]);
              return e3.concat(n2 || Array.prototype.slice.call(t3));
            }, He = function() {
              function e3(e4) {
                this._namespace = e4.namespace || "DiagComponentLogger";
              }
              return e3.prototype.debug = function() {
                for (var e4 = [], t3 = 0; t3 < arguments.length; t3++)
                  e4[t3] = arguments[t3];
                return ze("debug", this._namespace, e4);
              }, e3.prototype.error = function() {
                for (var e4 = [], t3 = 0; t3 < arguments.length; t3++)
                  e4[t3] = arguments[t3];
                return ze("error", this._namespace, e4);
              }, e3.prototype.info = function() {
                for (var e4 = [], t3 = 0; t3 < arguments.length; t3++)
                  e4[t3] = arguments[t3];
                return ze("info", this._namespace, e4);
              }, e3.prototype.warn = function() {
                for (var e4 = [], t3 = 0; t3 < arguments.length; t3++)
                  e4[t3] = arguments[t3];
                return ze("warn", this._namespace, e4);
              }, e3.prototype.verbose = function() {
                for (var e4 = [], t3 = 0; t3 < arguments.length; t3++)
                  e4[t3] = arguments[t3];
                return ze("verbose", this._namespace, e4);
              }, e3;
            }();
            function ze(e3, t3, r3) {
              var n2 = je("diag");
              if (n2)
                return r3.unshift(t3), n2[e3].apply(n2, Ze([], Ue(r3), false));
            }
            !function(e3) {
              e3[e3.NONE = 0] = "NONE", e3[e3.ERROR = 30] = "ERROR", e3[e3.WARN = 50] = "WARN", e3[e3.INFO = 60] = "INFO", e3[e3.DEBUG = 70] = "DEBUG", e3[e3.VERBOSE = 80] = "VERBOSE", e3[e3.ALL = 9999] = "ALL";
            }(Be || (Be = {}));
            var Ve = function(e3, t3) {
              var r3 = "function" == typeof Symbol && e3[Symbol.iterator];
              if (!r3)
                return e3;
              var n2, a2, i2 = r3.call(e3), s2 = [];
              try {
                for (; (void 0 === t3 || t3-- > 0) && !(n2 = i2.next()).done; )
                  s2.push(n2.value);
              } catch (e4) {
                a2 = { error: e4 };
              } finally {
                try {
                  n2 && !n2.done && (r3 = i2.return) && r3.call(i2);
                } finally {
                  if (a2)
                    throw a2.error;
                }
              }
              return s2;
            }, We = function(e3, t3, r3) {
              if (r3 || 2 === arguments.length)
                for (var n2, a2 = 0, i2 = t3.length; a2 < i2; a2++)
                  !n2 && a2 in t3 || (n2 || (n2 = Array.prototype.slice.call(t3, 0, a2)), n2[a2] = t3[a2]);
              return e3.concat(n2 || Array.prototype.slice.call(t3));
            }, Ge = function() {
              function e3() {
                function e4(e5) {
                  return function() {
                    for (var t4 = [], r3 = 0; r3 < arguments.length; r3++)
                      t4[r3] = arguments[r3];
                    var n2 = je("diag");
                    if (n2)
                      return n2[e5].apply(n2, We([], Ve(t4), false));
                  };
                }
                var t3 = this;
                t3.setLogger = function(e5, r3) {
                  var n2, a2, i2;
                  if (void 0 === r3 && (r3 = { logLevel: Be.INFO }), e5 === t3) {
                    var s2 = new Error(
                      "Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation"
                    );
                    return t3.error(
                      null !== (n2 = s2.stack) && void 0 !== n2 ? n2 : s2.message
                    ), false;
                  }
                  "number" == typeof r3 && (r3 = { logLevel: r3 });
                  var o2 = je("diag"), c2 = function(e6, t4) {
                    function r4(r5, n3) {
                      var a3 = t4[r5];
                      return "function" == typeof a3 && e6 >= n3 ? a3.bind(t4) : function() {
                      };
                    }
                    return e6 < Be.NONE ? e6 = Be.NONE : e6 > Be.ALL && (e6 = Be.ALL), t4 = t4 || {}, {
                      error: r4("error", Be.ERROR),
                      warn: r4("warn", Be.WARN),
                      info: r4("info", Be.INFO),
                      debug: r4("debug", Be.DEBUG),
                      verbose: r4("verbose", Be.VERBOSE)
                    };
                  }(
                    null !== (a2 = r3.logLevel) && void 0 !== a2 ? a2 : Be.INFO,
                    e5
                  );
                  if (o2 && !r3.suppressOverrideMessage) {
                    var d2 = null !== (i2 = new Error().stack) && void 0 !== i2 ? i2 : "<failed to generate stacktrace>";
                    o2.warn("Current logger will be overwritten from " + d2), c2.warn(
                      "Current logger will overwrite one already registered from " + d2
                    );
                  }
                  return Ne("diag", c2, t3, true);
                }, t3.disable = function() {
                  Fe("diag", t3);
                }, t3.createComponentLogger = function(e5) {
                  return new He(e5);
                }, t3.verbose = e4("verbose"), t3.debug = e4("debug"), t3.info = e4("info"), t3.warn = e4("warn"), t3.error = e4("error");
              }
              return e3.instance = function() {
                return this._instance || (this._instance = new e3()), this._instance;
              }, e3;
            }(), qe = Ge.instance();
            function Ke(e3) {
              return Symbol.for(e3);
            }
            var $e, Xe = function e3(t3) {
              var r3 = this;
              r3._currentContext = t3 ? new Map(t3) : /* @__PURE__ */ new Map(), r3.getValue = function(e4) {
                return r3._currentContext.get(e4);
              }, r3.setValue = function(t4, n2) {
                var a2 = new e3(r3._currentContext);
                return a2._currentContext.set(t4, n2), a2;
              }, r3.deleteValue = function(t4) {
                var n2 = new e3(r3._currentContext);
                return n2._currentContext.delete(t4), n2;
              };
            }, Je = new Xe(), Qe = function(e3, t3) {
              var r3 = "function" == typeof Symbol && e3[Symbol.iterator];
              if (!r3)
                return e3;
              var n2, a2, i2 = r3.call(e3), s2 = [];
              try {
                for (; (void 0 === t3 || t3-- > 0) && !(n2 = i2.next()).done; )
                  s2.push(n2.value);
              } catch (e4) {
                a2 = { error: e4 };
              } finally {
                try {
                  n2 && !n2.done && (r3 = i2.return) && r3.call(i2);
                } finally {
                  if (a2)
                    throw a2.error;
                }
              }
              return s2;
            }, Ye = function(e3, t3, r3) {
              if (r3 || 2 === arguments.length)
                for (var n2, a2 = 0, i2 = t3.length; a2 < i2; a2++)
                  !n2 && a2 in t3 || (n2 || (n2 = Array.prototype.slice.call(t3, 0, a2)), n2[a2] = t3[a2]);
              return e3.concat(n2 || Array.prototype.slice.call(t3));
            }, et = function() {
              function e3() {
              }
              return e3.prototype.active = function() {
                return Je;
              }, e3.prototype.with = function(e4, t3, r3) {
                for (var n2 = [], a2 = 3; a2 < arguments.length; a2++)
                  n2[a2 - 3] = arguments[a2];
                return t3.call.apply(t3, Ye([r3], Qe(n2), false));
              }, e3.prototype.bind = function(e4, t3) {
                return t3;
              }, e3.prototype.enable = function() {
                return this;
              }, e3.prototype.disable = function() {
                return this;
              }, e3;
            }(), tt = function(e3, t3) {
              var r3 = "function" == typeof Symbol && e3[Symbol.iterator];
              if (!r3)
                return e3;
              var n2, a2, i2 = r3.call(e3), s2 = [];
              try {
                for (; (void 0 === t3 || t3-- > 0) && !(n2 = i2.next()).done; )
                  s2.push(n2.value);
              } catch (e4) {
                a2 = { error: e4 };
              } finally {
                try {
                  n2 && !n2.done && (r3 = i2.return) && r3.call(i2);
                } finally {
                  if (a2)
                    throw a2.error;
                }
              }
              return s2;
            }, rt = function(e3, t3, r3) {
              if (r3 || 2 === arguments.length)
                for (var n2, a2 = 0, i2 = t3.length; a2 < i2; a2++)
                  !n2 && a2 in t3 || (n2 || (n2 = Array.prototype.slice.call(t3, 0, a2)), n2[a2] = t3[a2]);
              return e3.concat(n2 || Array.prototype.slice.call(t3));
            }, nt = "context", at = new et(), it = function() {
              function e3() {
              }
              return e3.getInstance = function() {
                return this._instance || (this._instance = new e3()), this._instance;
              }, e3.prototype.setGlobalContextManager = function(e4) {
                return Ne(nt, e4, Ge.instance());
              }, e3.prototype.active = function() {
                return this._getContextManager().active();
              }, e3.prototype.with = function(e4, t3, r3) {
                for (var n2, a2 = [], i2 = 3; i2 < arguments.length; i2++)
                  a2[i2 - 3] = arguments[i2];
                return (n2 = this._getContextManager()).with.apply(
                  n2,
                  rt([e4, t3, r3], tt(a2), false)
                );
              }, e3.prototype.bind = function(e4, t3) {
                return this._getContextManager().bind(e4, t3);
              }, e3.prototype._getContextManager = function() {
                return je(nt) || at;
              }, e3.prototype.disable = function() {
                this._getContextManager().disable(), Fe(nt, Ge.instance());
              }, e3;
            }();
            !function(e3) {
              e3[e3.NONE = 0] = "NONE", e3[e3.SAMPLED = 1] = "SAMPLED";
            }($e || ($e = {}));
            var st = "0000000000000000", ot = "00000000000000000000000000000000", ct = { traceId: ot, spanId: st, traceFlags: $e.NONE }, dt = function() {
              function e3(e4) {
                void 0 === e4 && (e4 = ct), this._spanContext = e4;
              }
              return e3.prototype.spanContext = function() {
                return this._spanContext;
              }, e3.prototype.setAttribute = function(e4, t3) {
                return this;
              }, e3.prototype.setAttributes = function(e4) {
                return this;
              }, e3.prototype.addEvent = function(e4, t3) {
                return this;
              }, e3.prototype.setStatus = function(e4) {
                return this;
              }, e3.prototype.updateName = function(e4) {
                return this;
              }, e3.prototype.end = function(e4) {
              }, e3.prototype.isRecording = function() {
                return false;
              }, e3.prototype.recordException = function(e4, t3) {
              }, e3;
            }(), pt = Ke("OpenTelemetry Context Key SPAN");
            function lt(e3) {
              return e3.getValue(pt) || void 0;
            }
            function ut() {
              return lt(it.getInstance().active());
            }
            function ht(e3, t3) {
              return e3.setValue(pt, t3);
            }
            function mt(e3) {
              return e3.deleteValue(pt);
            }
            function ft(e3, t3) {
              return ht(e3, new dt(t3));
            }
            function _t(e3) {
              var t3;
              return null === (t3 = lt(e3)) || void 0 === t3 ? void 0 : t3.spanContext();
            }
            var gt = /^([0-9a-f]{32})$/i, vt = /^[0-9a-f]{16}$/i;
            function yt(e3) {
              return gt.test(e3) && e3 !== ot;
            }
            function bt(e3) {
              return yt(e3.traceId) && (t3 = e3.spanId, vt.test(t3) && t3 !== st);
              var t3;
            }
            function St(e3) {
              return new dt(e3);
            }
            var wt = it.getInstance(), Tt = function() {
              function e3() {
              }
              return e3.prototype.startSpan = function(e4, t3, r3) {
                if (void 0 === r3 && (r3 = wt.active()), Boolean(null == t3 ? void 0 : t3.root))
                  return new dt();
                var n2, a2 = r3 && _t(r3);
                return "object" == typeof (n2 = a2) && "string" == typeof n2.spanId && "string" == typeof n2.traceId && "number" == typeof n2.traceFlags && bt(a2) ? new dt(a2) : new dt();
              }, e3.prototype.startActiveSpan = function(e4, t3, r3, n2) {
                var a2, i2, s2;
                if (!(arguments.length < 2)) {
                  2 === arguments.length ? s2 = t3 : 3 === arguments.length ? (a2 = t3, s2 = r3) : (a2 = t3, i2 = r3, s2 = n2);
                  var o2 = null != i2 ? i2 : wt.active(), c2 = this.startSpan(e4, a2, o2), d2 = ht(o2, c2);
                  return wt.with(d2, s2, void 0, c2);
                }
              }, e3;
            }();
            var Et = new Tt(), Rt = function() {
              function e3(e4, t3, r3, n2) {
                this._provider = e4, this.name = t3, this.version = r3, this.options = n2;
              }
              return e3.prototype.startSpan = function(e4, t3, r3) {
                return this._getTracer().startSpan(e4, t3, r3);
              }, e3.prototype.startActiveSpan = function(e4, t3, r3, n2) {
                var a2 = this._getTracer();
                return Reflect.apply(a2.startActiveSpan, a2, arguments);
              }, e3.prototype._getTracer = function() {
                if (this._delegate)
                  return this._delegate;
                var e4 = this._provider.getDelegateTracer(
                  this.name,
                  this.version,
                  this.options
                );
                return e4 ? (this._delegate = e4, this._delegate) : Et;
              }, e3;
            }(), Pt = new (function() {
              function e3() {
              }
              return e3.prototype.getTracer = function(e4, t3, r3) {
                return new Tt();
              }, e3;
            }())(), Ct = function() {
              function e3() {
              }
              return e3.prototype.getTracer = function(e4, t3, r3) {
                var n2;
                return null !== (n2 = this.getDelegateTracer(e4, t3, r3)) && void 0 !== n2 ? n2 : new Rt(this, e4, t3, r3);
              }, e3.prototype.getDelegate = function() {
                var e4;
                return null !== (e4 = this._delegate) && void 0 !== e4 ? e4 : Pt;
              }, e3.prototype.setDelegate = function(e4) {
                this._delegate = e4;
              }, e3.prototype.getDelegateTracer = function(e4, t3, r3) {
                var n2;
                return null === (n2 = this._delegate) || void 0 === n2 ? void 0 : n2.getTracer(e4, t3, r3);
              }, e3;
            }(), kt = "trace", Ot = function() {
              function e3() {
                this._proxyTracerProvider = new Ct(), this.wrapSpanContext = St, this.isSpanContextValid = bt, this.deleteSpan = mt, this.getSpan = lt, this.getActiveSpan = ut, this.getSpanContext = _t, this.setSpan = ht, this.setSpanContext = ft;
              }
              return e3.getInstance = function() {
                return this._instance || (this._instance = new e3()), this._instance;
              }, e3.prototype.setGlobalTracerProvider = function(e4) {
                var t3 = Ne(kt, this._proxyTracerProvider, Ge.instance());
                return t3 && this._proxyTracerProvider.setDelegate(e4), t3;
              }, e3.prototype.getTracerProvider = function() {
                return je(kt) || this._proxyTracerProvider;
              }, e3.prototype.getTracer = function(e4, t3) {
                return this.getTracerProvider().getTracer(e4, t3);
              }, e3.prototype.disable = function() {
                Fe(kt, Ge.instance()), this._proxyTracerProvider = new Ct();
              }, e3;
            }().getInstance(), xt = it.getInstance(), Dt = function() {
              function e3() {
              }
              return e3.prototype.inject = function(e4, t3) {
              }, e3.prototype.extract = function(e4, t3) {
                return e4;
              }, e3.prototype.fields = function() {
                return [];
              }, e3;
            }(), It = {
              get: function(e3, t3) {
                if (null != e3)
                  return e3[t3];
              },
              keys: function(e3) {
                return null == e3 ? [] : Object.keys(e3);
              }
            }, Lt = {
              set: function(e3, t3, r3) {
                null != e3 && (e3[t3] = r3);
              }
            }, Mt = Ke("OpenTelemetry Baggage Key");
            function At(e3) {
              return e3.getValue(Mt) || void 0;
            }
            function Nt() {
              return At(it.getInstance().active());
            }
            function jt(e3, t3) {
              return e3.setValue(Mt, t3);
            }
            function Ft(e3) {
              return e3.deleteValue(Mt);
            }
            var Bt = function(e3, t3) {
              var r3 = "function" == typeof Symbol && e3[Symbol.iterator];
              if (!r3)
                return e3;
              var n2, a2, i2 = r3.call(e3), s2 = [];
              try {
                for (; (void 0 === t3 || t3-- > 0) && !(n2 = i2.next()).done; )
                  s2.push(n2.value);
              } catch (e4) {
                a2 = { error: e4 };
              } finally {
                try {
                  n2 && !n2.done && (r3 = i2.return) && r3.call(i2);
                } finally {
                  if (a2)
                    throw a2.error;
                }
              }
              return s2;
            }, Ut = function(e3) {
              var t3 = "function" == typeof Symbol && Symbol.iterator, r3 = t3 && e3[t3], n2 = 0;
              if (r3)
                return r3.call(e3);
              if (e3 && "number" == typeof e3.length)
                return {
                  next: function() {
                    return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
                  }
                };
              throw new TypeError(
                t3 ? "Object is not iterable." : "Symbol.iterator is not defined."
              );
            }, Zt = function() {
              function e3(e4) {
                this._entries = e4 ? new Map(e4) : /* @__PURE__ */ new Map();
              }
              return e3.prototype.getEntry = function(e4) {
                var t3 = this._entries.get(e4);
                if (t3)
                  return Object.assign({}, t3);
              }, e3.prototype.getAllEntries = function() {
                return Array.from(this._entries.entries()).map(function(e4) {
                  var t3 = Bt(e4, 2);
                  return [t3[0], t3[1]];
                });
              }, e3.prototype.setEntry = function(t3, r3) {
                var n2 = new e3(this._entries);
                return n2._entries.set(t3, r3), n2;
              }, e3.prototype.removeEntry = function(t3) {
                var r3 = new e3(this._entries);
                return r3._entries.delete(t3), r3;
              }, e3.prototype.removeEntries = function() {
                for (var t3, r3, n2 = [], a2 = 0; a2 < arguments.length; a2++)
                  n2[a2] = arguments[a2];
                var i2 = new e3(this._entries);
                try {
                  for (var s2 = Ut(n2), o2 = s2.next(); !o2.done; o2 = s2.next()) {
                    var c2 = o2.value;
                    i2._entries.delete(c2);
                  }
                } catch (e4) {
                  t3 = { error: e4 };
                } finally {
                  try {
                    o2 && !o2.done && (r3 = s2.return) && r3.call(s2);
                  } finally {
                    if (t3)
                      throw t3.error;
                  }
                }
                return i2;
              }, e3.prototype.clear = function() {
                return new e3();
              }, e3;
            }(), Ht = Symbol("BaggageEntryMetadata"), zt = Ge.instance();
            function Vt(e3) {
              return void 0 === e3 && (e3 = {}), new Zt(new Map(Object.entries(e3)));
            }
            var Wt, Gt, qt = "propagation", Kt = new Dt(), $t = function() {
              function e3() {
                this.createBaggage = Vt, this.getBaggage = At, this.getActiveBaggage = Nt, this.setBaggage = jt, this.deleteBaggage = Ft;
              }
              return e3.getInstance = function() {
                return this._instance || (this._instance = new e3()), this._instance;
              }, e3.prototype.setGlobalPropagator = function(e4) {
                return Ne(qt, e4, Ge.instance());
              }, e3.prototype.inject = function(e4, t3, r3) {
                return void 0 === r3 && (r3 = Lt), this._getGlobalPropagator().inject(e4, t3, r3);
              }, e3.prototype.extract = function(e4, t3, r3) {
                return void 0 === r3 && (r3 = It), this._getGlobalPropagator().extract(e4, t3, r3);
              }, e3.prototype.fields = function() {
                return this._getGlobalPropagator().fields();
              }, e3.prototype.disable = function() {
                Fe(qt, Ge.instance());
              }, e3.prototype._getGlobalPropagator = function() {
                return je(qt) || Kt;
              }, e3;
            }().getInstance(), Xt = "[object Null]", Jt = "[object Undefined]", Qt = Function.prototype.toString, Yt = Qt.call(Object), er = (Wt = Object.getPrototypeOf, Gt = Object, function(e3) {
              return Wt(Gt(e3));
            }), tr = Object.prototype, rr = tr.hasOwnProperty, nr = Symbol ? Symbol.toStringTag : void 0, ar = tr.toString;
            function ir(e3) {
              if (!function(e4) {
                return null != e4 && "object" == typeof e4;
              }(e3) || "[object Object]" !== function(e4) {
                if (null == e4)
                  return void 0 === e4 ? Jt : Xt;
                return nr && nr in Object(e4) ? function(e5) {
                  var t4 = rr.call(e5, nr), r4 = e5[nr], n2 = false;
                  try {
                    e5[nr] = void 0, n2 = true;
                  } catch (e6) {
                  }
                  var a2 = ar.call(e5);
                  n2 && (t4 ? e5[nr] = r4 : delete e5[nr]);
                  return a2;
                }(e4) : function(e5) {
                  return ar.call(e5);
                }(e4);
              }(e3))
                return false;
              var t3 = er(e3);
              if (null === t3)
                return true;
              var r3 = rr.call(t3, "constructor") && t3.constructor;
              return "function" == typeof r3 && r3 instanceof r3 && Qt.call(r3) === Yt;
            }
            var sr;
            function or(e3) {
              return pr(e3) ? e3.slice() : e3;
            }
            function cr(e3, t3, r3, n2) {
              var a2;
              if (void 0 === r3 && (r3 = 0), !(r3 > 20)) {
                if (r3++, hr(e3) || hr(t3) || lr(t3))
                  a2 = or(t3);
                else if (pr(e3)) {
                  if (a2 = e3.slice(), pr(t3))
                    for (var i2 = 0, s2 = t3.length; i2 < s2; i2++)
                      a2.push(or(t3[i2]));
                  else if (ur(t3))
                    for (i2 = 0, s2 = (o2 = Object.keys(t3)).length; i2 < s2; i2++) {
                      a2[c2 = o2[i2]] = or(t3[c2]);
                    }
                } else if (ur(e3))
                  if (ur(t3)) {
                    if (!function(e4, t4) {
                      if (!ir(e4) || !ir(t4))
                        return false;
                      return true;
                    }(e3, t3))
                      return t3;
                    a2 = Object.assign({}, e3);
                    var o2;
                    for (i2 = 0, s2 = (o2 = Object.keys(t3)).length; i2 < s2; i2++) {
                      var c2, d2 = t3[c2 = o2[i2]];
                      if (hr(d2))
                        void 0 === d2 ? delete a2[c2] : a2[c2] = d2;
                      else {
                        var p2 = a2[c2], l2 = d2;
                        if (dr(e3, c2, n2) || dr(t3, c2, n2))
                          delete a2[c2];
                        else {
                          if (ur(p2) && ur(l2)) {
                            var u2 = n2.get(p2) || [], h2 = n2.get(l2) || [];
                            u2.push({ obj: e3, key: c2 }), h2.push({ obj: t3, key: c2 }), n2.set(p2, u2), n2.set(l2, h2);
                          }
                          a2[c2] = cr(a2[c2], d2, r3, n2);
                        }
                      }
                    }
                  } else
                    a2 = t3;
                return a2;
              }
            }
            function dr(e3, t3, r3) {
              for (var n2 = r3.get(e3[t3]) || [], a2 = 0, i2 = n2.length; a2 < i2; a2++) {
                var s2 = n2[a2];
                if (s2.key === t3 && s2.obj === e3)
                  return true;
              }
              return false;
            }
            function pr(e3) {
              return Array.isArray(e3);
            }
            function lr(e3) {
              return "function" == typeof e3;
            }
            function ur(e3) {
              return !hr(e3) && !pr(e3) && !lr(e3) && "object" == typeof e3;
            }
            function hr(e3) {
              return "string" == typeof e3 || "number" == typeof e3 || "boolean" == typeof e3 || void 0 === e3 || e3 instanceof Date || e3 instanceof RegExp || null === e3;
            }
            !function(e3) {
              e3.AlwaysOff = "always_off", e3.AlwaysOn = "always_on", e3.ParentBasedAlwaysOff = "parentbased_always_off", e3.ParentBasedAlwaysOn = "parentbased_always_on", e3.ParentBasedTraceIdRatio = "parentbased_traceidratio", e3.TraceIdRatio = "traceidratio";
            }(sr || (sr = {}));
            var mr = "object" == typeof globalThis ? globalThis : "object" == typeof self ? self : "object" == typeof window ? window : "object" == typeof r2.g ? r2.g : {}, fr = ["OTEL_SDK_DISABLED"];
            function _r(e3) {
              return fr.indexOf(e3) > -1;
            }
            var gr = [
              "OTEL_BSP_EXPORT_TIMEOUT",
              "OTEL_BSP_MAX_EXPORT_BATCH_SIZE",
              "OTEL_BSP_MAX_QUEUE_SIZE",
              "OTEL_BSP_SCHEDULE_DELAY",
              "OTEL_BLRP_EXPORT_TIMEOUT",
              "OTEL_BLRP_MAX_EXPORT_BATCH_SIZE",
              "OTEL_BLRP_MAX_QUEUE_SIZE",
              "OTEL_BLRP_SCHEDULE_DELAY",
              "OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT",
              "OTEL_ATTRIBUTE_COUNT_LIMIT",
              "OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT",
              "OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT",
              "OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT",
              "OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT",
              "OTEL_SPAN_EVENT_COUNT_LIMIT",
              "OTEL_SPAN_LINK_COUNT_LIMIT",
              "OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT",
              "OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT",
              "OTEL_EXPORTER_OTLP_TIMEOUT",
              "OTEL_EXPORTER_OTLP_TRACES_TIMEOUT",
              "OTEL_EXPORTER_OTLP_METRICS_TIMEOUT",
              "OTEL_EXPORTER_OTLP_LOGS_TIMEOUT",
              "OTEL_EXPORTER_JAEGER_AGENT_PORT"
            ];
            function vr(e3) {
              return gr.indexOf(e3) > -1;
            }
            var yr = ["OTEL_NO_PATCH_MODULES", "OTEL_PROPAGATORS"];
            function br(e3) {
              return yr.indexOf(e3) > -1;
            }
            var Sr = 1 / 0, wr = 128, Tr = {
              OTEL_SDK_DISABLED: false,
              CONTAINER_NAME: "",
              ECS_CONTAINER_METADATA_URI_V4: "",
              ECS_CONTAINER_METADATA_URI: "",
              HOSTNAME: "",
              KUBERNETES_SERVICE_HOST: "",
              NAMESPACE: "",
              OTEL_BSP_EXPORT_TIMEOUT: 3e4,
              OTEL_BSP_MAX_EXPORT_BATCH_SIZE: 512,
              OTEL_BSP_MAX_QUEUE_SIZE: 2048,
              OTEL_BSP_SCHEDULE_DELAY: 5e3,
              OTEL_BLRP_EXPORT_TIMEOUT: 3e4,
              OTEL_BLRP_MAX_EXPORT_BATCH_SIZE: 512,
              OTEL_BLRP_MAX_QUEUE_SIZE: 2048,
              OTEL_BLRP_SCHEDULE_DELAY: 5e3,
              OTEL_EXPORTER_JAEGER_AGENT_HOST: "",
              OTEL_EXPORTER_JAEGER_AGENT_PORT: 6832,
              OTEL_EXPORTER_JAEGER_ENDPOINT: "",
              OTEL_EXPORTER_JAEGER_PASSWORD: "",
              OTEL_EXPORTER_JAEGER_USER: "",
              OTEL_EXPORTER_OTLP_ENDPOINT: "",
              OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: "",
              OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: "",
              OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: "",
              OTEL_EXPORTER_OTLP_HEADERS: "",
              OTEL_EXPORTER_OTLP_TRACES_HEADERS: "",
              OTEL_EXPORTER_OTLP_METRICS_HEADERS: "",
              OTEL_EXPORTER_OTLP_LOGS_HEADERS: "",
              OTEL_EXPORTER_OTLP_TIMEOUT: 1e4,
              OTEL_EXPORTER_OTLP_TRACES_TIMEOUT: 1e4,
              OTEL_EXPORTER_OTLP_METRICS_TIMEOUT: 1e4,
              OTEL_EXPORTER_OTLP_LOGS_TIMEOUT: 1e4,
              OTEL_EXPORTER_ZIPKIN_ENDPOINT: "http://localhost:9411/api/v2/spans",
              OTEL_LOG_LEVEL: Be.INFO,
              OTEL_NO_PATCH_MODULES: [],
              OTEL_PROPAGATORS: ["tracecontext", "baggage"],
              OTEL_RESOURCE_ATTRIBUTES: "",
              OTEL_SERVICE_NAME: "",
              OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT: Sr,
              OTEL_ATTRIBUTE_COUNT_LIMIT: wr,
              OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT: Sr,
              OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT: wr,
              OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT: Sr,
              OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT: wr,
              OTEL_SPAN_EVENT_COUNT_LIMIT: 128,
              OTEL_SPAN_LINK_COUNT_LIMIT: 128,
              OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT: 128,
              OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT: 128,
              OTEL_TRACES_EXPORTER: "",
              OTEL_TRACES_SAMPLER: sr.ParentBasedAlwaysOn,
              OTEL_TRACES_SAMPLER_ARG: "",
              OTEL_LOGS_EXPORTER: "",
              OTEL_EXPORTER_OTLP_INSECURE: "",
              OTEL_EXPORTER_OTLP_TRACES_INSECURE: "",
              OTEL_EXPORTER_OTLP_METRICS_INSECURE: "",
              OTEL_EXPORTER_OTLP_LOGS_INSECURE: "",
              OTEL_EXPORTER_OTLP_CERTIFICATE: "",
              OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE: "",
              OTEL_EXPORTER_OTLP_METRICS_CERTIFICATE: "",
              OTEL_EXPORTER_OTLP_LOGS_CERTIFICATE: "",
              OTEL_EXPORTER_OTLP_COMPRESSION: "",
              OTEL_EXPORTER_OTLP_TRACES_COMPRESSION: "",
              OTEL_EXPORTER_OTLP_METRICS_COMPRESSION: "",
              OTEL_EXPORTER_OTLP_LOGS_COMPRESSION: "",
              OTEL_EXPORTER_OTLP_CLIENT_KEY: "",
              OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY: "",
              OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY: "",
              OTEL_EXPORTER_OTLP_LOGS_CLIENT_KEY: "",
              OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE: "",
              OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE: "",
              OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE: "",
              OTEL_EXPORTER_OTLP_LOGS_CLIENT_CERTIFICATE: "",
              OTEL_EXPORTER_OTLP_PROTOCOL: "http/protobuf",
              OTEL_EXPORTER_OTLP_TRACES_PROTOCOL: "http/protobuf",
              OTEL_EXPORTER_OTLP_METRICS_PROTOCOL: "http/protobuf",
              OTEL_EXPORTER_OTLP_LOGS_PROTOCOL: "http/protobuf",
              OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE: "cumulative"
            };
            function Er(e3, t3, r3) {
              if (void 0 !== r3[e3]) {
                var n2 = String(r3[e3]);
                t3[e3] = "true" === n2.toLowerCase();
              }
            }
            function Rr(e3, t3, r3, n2, a2) {
              if (void 0 === n2 && (n2 = -1 / 0), void 0 === a2 && (a2 = 1 / 0), void 0 !== r3[e3]) {
                var i2 = Number(r3[e3]);
                isNaN(i2) || (t3[e3] = i2 < n2 ? n2 : i2 > a2 ? a2 : i2);
              }
            }
            function Pr(e3, t3, r3, n2) {
              void 0 === n2 && (n2 = ",");
              var a2 = r3[e3];
              "string" == typeof a2 && (t3[e3] = a2.split(n2).map(function(e4) {
                return e4.trim();
              }));
            }
            var Cr = {
              ALL: Be.ALL,
              VERBOSE: Be.VERBOSE,
              DEBUG: Be.DEBUG,
              INFO: Be.INFO,
              WARN: Be.WARN,
              ERROR: Be.ERROR,
              NONE: Be.NONE
            };
            function kr(e3, t3, r3) {
              var n2 = r3[e3];
              if ("string" == typeof n2) {
                var a2 = Cr[n2.toUpperCase()];
                null != a2 && (t3[e3] = a2);
              }
            }
            function Or(e3) {
              var t3 = {};
              for (var r3 in Tr) {
                var n2 = r3;
                if ("OTEL_LOG_LEVEL" === n2)
                  kr(n2, t3, e3);
                else if (_r(n2))
                  Er(n2, t3, e3);
                else if (vr(n2))
                  Rr(n2, t3, e3);
                else if (br(n2))
                  Pr(n2, t3, e3);
                else {
                  var a2 = e3[n2];
                  null != a2 && (t3[n2] = String(a2));
                }
              }
              return t3;
            }
            function xr() {
              var e3 = Or(mr);
              return Object.assign({}, Tr, e3);
            }
            var Dr = function(e3) {
              var t3 = "function" == typeof Symbol && Symbol.iterator, r3 = t3 && e3[t3], n2 = 0;
              if (r3)
                return r3.call(e3);
              if (e3 && "number" == typeof e3.length)
                return {
                  next: function() {
                    return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
                  }
                };
              throw new TypeError(
                t3 ? "Object is not iterable." : "Symbol.iterator is not defined."
              );
            }, Ir = function() {
              function e3(e4) {
                var t3;
                void 0 === e4 && (e4 = {}), this._propagators = null !== (t3 = e4.propagators) && void 0 !== t3 ? t3 : [], this._fields = Array.from(
                  new Set(
                    this._propagators.map(function(e5) {
                      return "function" == typeof e5.fields ? e5.fields() : [];
                    }).reduce(function(e5, t4) {
                      return e5.concat(t4);
                    }, [])
                  )
                );
              }
              return e3.prototype.inject = function(e4, t3, r3) {
                var n2, a2;
                try {
                  for (var i2 = Dr(this._propagators), s2 = i2.next(); !s2.done; s2 = i2.next()) {
                    var o2 = s2.value;
                    try {
                      o2.inject(e4, t3, r3);
                    } catch (e5) {
                      qe.warn(
                        "Failed to inject with " + o2.constructor.name + ". Err: " + e5.message
                      );
                    }
                  }
                } catch (e5) {
                  n2 = { error: e5 };
                } finally {
                  try {
                    s2 && !s2.done && (a2 = i2.return) && a2.call(i2);
                  } finally {
                    if (n2)
                      throw n2.error;
                  }
                }
              }, e3.prototype.extract = function(e4, t3, r3) {
                return this._propagators.reduce(function(e5, n2) {
                  try {
                    return n2.extract(e5, t3, r3);
                  } catch (e6) {
                    qe.warn(
                      "Failed to inject with " + n2.constructor.name + ". Err: " + e6.message
                    );
                  }
                  return e5;
                }, e4);
              }, e3.prototype.fields = function() {
                return this._fields.slice();
              }, e3;
            }(), Lr = Ke("OpenTelemetry SDK Context Key SUPPRESS_TRACING");
            function Mr(e3) {
              return true === e3.getValue(Lr);
            }
            var Ar = new RegExp(
              "^(?:[a-z][_0-9a-z-*/]{0,255}|[a-z0-9][_0-9a-z-*/]{0,240}@[a-z][_0-9a-z-*/]{0,13})$"
            ), Nr = /^[ -~]{0,255}[!-~]$/, jr = /,|=/;
            var Fr = function() {
              function e3(e4) {
                this._internalState = /* @__PURE__ */ new Map(), e4 && this._parse(e4);
              }
              return e3.prototype.set = function(e4, t3) {
                var r3 = this._clone();
                return r3._internalState.has(e4) && r3._internalState.delete(e4), r3._internalState.set(e4, t3), r3;
              }, e3.prototype.unset = function(e4) {
                var t3 = this._clone();
                return t3._internalState.delete(e4), t3;
              }, e3.prototype.get = function(e4) {
                return this._internalState.get(e4);
              }, e3.prototype.serialize = function() {
                var e4 = this;
                return this._keys().reduce(function(t3, r3) {
                  return t3.push(r3 + "=" + e4.get(r3)), t3;
                }, []).join(",");
              }, e3.prototype._parse = function(e4) {
                e4.length > 512 || (this._internalState = e4.split(",").reverse().reduce(function(e5, t3) {
                  var r3 = t3.trim(), n2 = r3.indexOf("=");
                  if (-1 !== n2) {
                    var a2 = r3.slice(0, n2), i2 = r3.slice(n2 + 1, t3.length);
                    (function(e6) {
                      return Ar.test(e6);
                    })(a2) && function(e6) {
                      return Nr.test(e6) && !jr.test(e6);
                    }(i2) && e5.set(a2, i2);
                  }
                  return e5;
                }, /* @__PURE__ */ new Map()), this._internalState.size > 32 && (this._internalState = new Map(
                  Array.from(this._internalState.entries()).reverse().slice(0, 32)
                )));
              }, e3.prototype._keys = function() {
                return Array.from(this._internalState.keys()).reverse();
              }, e3.prototype._clone = function() {
                var t3 = new e3();
                return t3._internalState = new Map(this._internalState), t3;
              }, e3;
            }(), Br = "traceparent", Ur = "tracestate", Zr = new RegExp(
              "^\\s?((?!ff)[\\da-f]{2})-((?![0]{32})[\\da-f]{32})-((?![0]{16})[\\da-f]{16})-([\\da-f]{2})(-.*)?\\s?$"
            );
            var Hr = function() {
              function e3() {
              }
              return e3.prototype.inject = function(e4, t3, r3) {
                var n2 = Ot.getSpanContext(e4);
                if (n2 && !Mr(e4) && bt(n2)) {
                  var a2 = "00-" + n2.traceId + "-" + n2.spanId + "-0" + Number(n2.traceFlags || $e.NONE).toString(16);
                  r3.set(t3, Br, a2), n2.traceState && r3.set(t3, Ur, n2.traceState.serialize());
                }
              }, e3.prototype.extract = function(e4, t3, r3) {
                var n2 = r3.get(t3, Br);
                if (!n2)
                  return e4;
                var a2 = Array.isArray(n2) ? n2[0] : n2;
                if ("string" != typeof a2)
                  return e4;
                var i2 = function(e5) {
                  var t4 = Zr.exec(e5);
                  return t4 ? "00" === t4[1] && t4[5] ? null : {
                    traceId: t4[2],
                    spanId: t4[3],
                    traceFlags: parseInt(t4[4], 16)
                  } : null;
                }(a2);
                if (!i2)
                  return e4;
                i2.isRemote = true;
                var s2 = r3.get(t3, Ur);
                if (s2) {
                  var o2 = Array.isArray(s2) ? s2.join(",") : s2;
                  i2.traceState = new Fr("string" == typeof o2 ? o2 : void 0);
                }
                return Ot.setSpanContext(e4, i2);
              }, e3.prototype.fields = function() {
                return [Br, Ur];
              }, e3;
            }(), zr = ",", Vr = "baggage", Wr = function(e3, t3) {
              var r3 = "function" == typeof Symbol && e3[Symbol.iterator];
              if (!r3)
                return e3;
              var n2, a2, i2 = r3.call(e3), s2 = [];
              try {
                for (; (void 0 === t3 || t3-- > 0) && !(n2 = i2.next()).done; )
                  s2.push(n2.value);
              } catch (e4) {
                a2 = { error: e4 };
              } finally {
                try {
                  n2 && !n2.done && (r3 = i2.return) && r3.call(i2);
                } finally {
                  if (a2)
                    throw a2.error;
                }
              }
              return s2;
            };
            function Gr(e3) {
              var t3 = e3.split(";");
              if (!(t3.length <= 0)) {
                var r3 = t3.shift();
                if (r3) {
                  var n2 = r3.split("=");
                  if (2 === n2.length) {
                    var a2, i2, s2 = decodeURIComponent(n2[0].trim()), o2 = decodeURIComponent(n2[1].trim());
                    return t3.length > 0 && ("string" != typeof (i2 = t3.join(";")) && (zt.error(
                      "Cannot create baggage metadata from unknown type: " + typeof i2
                    ), i2 = ""), a2 = {
                      __TYPE__: Ht,
                      toString: function() {
                        return i2;
                      }
                    }), { key: s2, value: o2, metadata: a2 };
                  }
                }
              }
            }
            function qr(e3) {
              return "string" != typeof e3 || 0 === e3.length ? {} : e3.split(zr).map(function(e4) {
                return Gr(e4);
              }).filter(function(e4) {
                return void 0 !== e4 && e4.value.length > 0;
              }).reduce(function(e4, t3) {
                return e4[t3.key] = t3.value, e4;
              }, {});
            }
            var Kr, $r = function() {
              function e3() {
              }
              return e3.prototype.inject = function(e4, t3, r3) {
                var n2 = $t.getBaggage(e4);
                if (n2 && !Mr(e4)) {
                  var a2 = function(e5) {
                    return e5.getAllEntries().map(function(e6) {
                      var t4 = Wr(e6, 2), r4 = t4[0], n3 = t4[1], a3 = encodeURIComponent(r4) + "=" + encodeURIComponent(n3.value);
                      return void 0 !== n3.metadata && (a3 += ";" + n3.metadata.toString()), a3;
                    });
                  }(n2).filter(function(e5) {
                    return e5.length <= 4096;
                  }).slice(0, 180), i2 = function(e5) {
                    return e5.reduce(function(e6, t4) {
                      var r4 = "" + e6 + ("" !== e6 ? zr : "") + t4;
                      return r4.length > 8192 ? e6 : r4;
                    }, "");
                  }(a2);
                  i2.length > 0 && r3.set(t3, Vr, i2);
                }
              }, e3.prototype.extract = function(e4, t3, r3) {
                var n2 = r3.get(t3, Vr), a2 = Array.isArray(n2) ? n2.join(zr) : n2;
                if (!a2)
                  return e4;
                var i2 = {};
                return 0 === a2.length ? e4 : (a2.split(zr).forEach(function(e5) {
                  var t4 = Gr(e5);
                  if (t4) {
                    var r4 = { value: t4.value };
                    t4.metadata && (r4.metadata = t4.metadata), i2[t4.key] = r4;
                  }
                }), 0 === Object.entries(i2).length ? e4 : $t.setBaggage(e4, $t.createBaggage(i2)));
              }, e3.prototype.fields = function() {
                return [Vr];
              }, e3;
            }(), Xr = "process.runtime.name", Jr = "service.name", Qr = "telemetry.sdk.name", Yr = "telemetry.sdk.language", en = "telemetry.sdk.version", tn = ((Kr = {})[Qr] = "opentelemetry", Kr[Xr] = "browser", Kr[Yr] = "webjs", Kr[en] = "1.14.0", Kr);
            var rn, nn, an = function() {
              return an = Object.assign || function(e3) {
                for (var t3, r3 = 1, n2 = arguments.length; r3 < n2; r3++)
                  for (var a2 in t3 = arguments[r3])
                    Object.prototype.hasOwnProperty.call(t3, a2) && (e3[a2] = t3[a2]);
                return e3;
              }, an.apply(this, arguments);
            }, sn = function(e3, t3, r3, n2) {
              return new (r3 || (r3 = Promise))(function(a2, i2) {
                function s2(e4) {
                  try {
                    c2(n2.next(e4));
                  } catch (e5) {
                    i2(e5);
                  }
                }
                function o2(e4) {
                  try {
                    c2(n2.throw(e4));
                  } catch (e5) {
                    i2(e5);
                  }
                }
                function c2(e4) {
                  var t4;
                  e4.done ? a2(e4.value) : (t4 = e4.value, t4 instanceof r3 ? t4 : new r3(function(e5) {
                    e5(t4);
                  })).then(s2, o2);
                }
                c2((n2 = n2.apply(e3, t3 || [])).next());
              });
            }, on = function(e3, t3) {
              var r3, n2, a2, i2, s2 = {
                label: 0,
                sent: function() {
                  if (1 & a2[0])
                    throw a2[1];
                  return a2[1];
                },
                trys: [],
                ops: []
              };
              return i2 = { next: o2(0), throw: o2(1), return: o2(2) }, "function" == typeof Symbol && (i2[Symbol.iterator] = function() {
                return this;
              }), i2;
              function o2(i3) {
                return function(o3) {
                  return function(i4) {
                    if (r3)
                      throw new TypeError("Generator is already executing.");
                    for (; s2; )
                      try {
                        if (r3 = 1, n2 && (a2 = 2 & i4[0] ? n2.return : i4[0] ? n2.throw || ((a2 = n2.return) && a2.call(n2), 0) : n2.next) && !(a2 = a2.call(n2, i4[1])).done)
                          return a2;
                        switch (n2 = 0, a2 && (i4 = [2 & i4[0], a2.value]), i4[0]) {
                          case 0:
                          case 1:
                            a2 = i4;
                            break;
                          case 4:
                            return s2.label++, { value: i4[1], done: false };
                          case 5:
                            s2.label++, n2 = i4[1], i4 = [0];
                            continue;
                          case 7:
                            i4 = s2.ops.pop(), s2.trys.pop();
                            continue;
                          default:
                            if (!(a2 = s2.trys, (a2 = a2.length > 0 && a2[a2.length - 1]) || 6 !== i4[0] && 2 !== i4[0])) {
                              s2 = 0;
                              continue;
                            }
                            if (3 === i4[0] && (!a2 || i4[1] > a2[0] && i4[1] < a2[3])) {
                              s2.label = i4[1];
                              break;
                            }
                            if (6 === i4[0] && s2.label < a2[1]) {
                              s2.label = a2[1], a2 = i4;
                              break;
                            }
                            if (a2 && s2.label < a2[2]) {
                              s2.label = a2[2], s2.ops.push(i4);
                              break;
                            }
                            a2[2] && s2.ops.pop(), s2.trys.pop();
                            continue;
                        }
                        i4 = t3.call(e3, s2);
                      } catch (e4) {
                        i4 = [6, e4], n2 = 0;
                      } finally {
                        r3 = a2 = 0;
                      }
                    if (5 & i4[0])
                      throw i4[1];
                    return { value: i4[0] ? i4[1] : void 0, done: true };
                  }([i3, o3]);
                };
              }
            }, cn = function(e3, t3) {
              var r3 = "function" == typeof Symbol && e3[Symbol.iterator];
              if (!r3)
                return e3;
              var n2, a2, i2 = r3.call(e3), s2 = [];
              try {
                for (; (void 0 === t3 || t3-- > 0) && !(n2 = i2.next()).done; )
                  s2.push(n2.value);
              } catch (e4) {
                a2 = { error: e4 };
              } finally {
                try {
                  n2 && !n2.done && (r3 = i2.return) && r3.call(i2);
                } finally {
                  if (a2)
                    throw a2.error;
                }
              }
              return s2;
            }, dn = function() {
              function e3(e4, t3) {
                var r3, n2 = this;
                this._attributes = e4, this.asyncAttributesPending = null != t3, this._syncAttributes = null !== (r3 = this._attributes) && void 0 !== r3 ? r3 : {}, this._asyncAttributesPromise = null == t3 ? void 0 : t3.then(
                  function(e5) {
                    return n2._attributes = Object.assign(
                      {},
                      n2._attributes,
                      e5
                    ), n2.asyncAttributesPending = false, e5;
                  },
                  function(e5) {
                    return qe.debug(
                      "a resource's async attributes promise rejected: %s",
                      e5
                    ), n2.asyncAttributesPending = false, {};
                  }
                );
              }
              return e3.empty = function() {
                return e3.EMPTY;
              }, e3.default = function() {
                var t3;
                return new e3(
                  ((t3 = {})[Jr] = "unknown_service", t3[Yr] = tn[Yr], t3[Qr] = tn[Qr], t3[en] = tn[en], t3)
                );
              }, Object.defineProperty(e3.prototype, "attributes", {
                get: function() {
                  var e4;
                  return this.asyncAttributesPending && qe.error(
                    "Accessing resource attributes before async attributes settled"
                  ), null !== (e4 = this._attributes) && void 0 !== e4 ? e4 : {};
                },
                enumerable: false,
                configurable: true
              }), e3.prototype.waitForAsyncAttributes = function() {
                return sn(this, void 0, void 0, function() {
                  return on(this, function(e4) {
                    switch (e4.label) {
                      case 0:
                        return this.asyncAttributesPending ? [4, this._asyncAttributesPromise] : [3, 2];
                      case 1:
                        e4.sent(), e4.label = 2;
                      case 2:
                        return [2];
                    }
                  });
                });
              }, e3.prototype.merge = function(t3) {
                var r3, n2 = this;
                if (!t3)
                  return this;
                var a2 = an(
                  an({}, this._syncAttributes),
                  null !== (r3 = t3._syncAttributes) && void 0 !== r3 ? r3 : t3.attributes
                );
                if (!this._asyncAttributesPromise && !t3._asyncAttributesPromise)
                  return new e3(a2);
                var i2 = Promise.all([
                  this._asyncAttributesPromise,
                  t3._asyncAttributesPromise
                ]).then(function(e4) {
                  var r4, a3 = cn(e4, 2), i3 = a3[0], s2 = a3[1];
                  return an(
                    an(
                      an(an({}, n2._syncAttributes), i3),
                      null !== (r4 = t3._syncAttributes) && void 0 !== r4 ? r4 : t3.attributes
                    ),
                    s2
                  );
                });
                return new e3(a2, i2);
              }, e3.EMPTY = new e3({}), e3;
            }();
            !function(e3) {
              e3[e3.INTERNAL = 0] = "INTERNAL", e3[e3.SERVER = 1] = "SERVER", e3[e3.CLIENT = 2] = "CLIENT", e3[e3.PRODUCER = 3] = "PRODUCER", e3[e3.CONSUMER = 4] = "CONSUMER";
            }(rn || (rn = {})), function(e3) {
              e3[e3.NOT_RECORD = 0] = "NOT_RECORD", e3[e3.RECORD = 1] = "RECORD", e3[e3.RECORD_AND_SAMPLED = 2] = "RECORD_AND_SAMPLED";
            }(nn || (nn = {}));
            var pn, ln = function(e3) {
              var t3 = "function" == typeof Symbol && Symbol.iterator, r3 = t3 && e3[t3], n2 = 0;
              if (r3)
                return r3.call(e3);
              if (e3 && "number" == typeof e3.length)
                return {
                  next: function() {
                    return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
                  }
                };
              throw new TypeError(
                t3 ? "Object is not iterable." : "Symbol.iterator is not defined."
              );
            }, un = function(e3, t3) {
              var r3 = "function" == typeof Symbol && e3[Symbol.iterator];
              if (!r3)
                return e3;
              var n2, a2, i2 = r3.call(e3), s2 = [];
              try {
                for (; (void 0 === t3 || t3-- > 0) && !(n2 = i2.next()).done; )
                  s2.push(n2.value);
              } catch (e4) {
                a2 = { error: e4 };
              } finally {
                try {
                  n2 && !n2.done && (r3 = i2.return) && r3.call(i2);
                } finally {
                  if (a2)
                    throw a2.error;
                }
              }
              return s2;
            };
            function hn(e3) {
              var t3, r3, n2 = {};
              if ("object" != typeof e3 || null == e3)
                return n2;
              try {
                for (var a2 = ln(Object.entries(e3)), i2 = a2.next(); !i2.done; i2 = a2.next()) {
                  var s2 = un(i2.value, 2), o2 = s2[0], c2 = s2[1];
                  mn(o2) ? fn(c2) ? Array.isArray(c2) ? n2[o2] = c2.slice() : n2[o2] = c2 : qe.warn("Invalid attribute value set for key: " + o2) : qe.warn("Invalid attribute key: " + o2);
                }
              } catch (e4) {
                t3 = { error: e4 };
              } finally {
                try {
                  i2 && !i2.done && (r3 = a2.return) && r3.call(a2);
                } finally {
                  if (t3)
                    throw t3.error;
                }
              }
              return n2;
            }
            function mn(e3) {
              return "string" == typeof e3 && e3.length > 0;
            }
            function fn(e3) {
              return null == e3 || (Array.isArray(e3) ? function(e4) {
                var t3, r3, n2;
                try {
                  for (var a2 = ln(e4), i2 = a2.next(); !i2.done; i2 = a2.next()) {
                    var s2 = i2.value;
                    if (null != s2) {
                      if (!n2) {
                        if (_n(s2)) {
                          n2 = typeof s2;
                          continue;
                        }
                        return false;
                      }
                      if (typeof s2 !== n2)
                        return false;
                    }
                  }
                } catch (e5) {
                  t3 = { error: e5 };
                } finally {
                  try {
                    i2 && !i2.done && (r3 = a2.return) && r3.call(a2);
                  } finally {
                    if (t3)
                      throw t3.error;
                  }
                }
                return true;
              }(e3) : _n(e3));
            }
            function _n(e3) {
              switch (typeof e3) {
                case "number":
                case "boolean":
                case "string":
                  return true;
              }
              return false;
            }
            !function(e3) {
              e3[e3.UNSET = 0] = "UNSET", e3[e3.OK = 1] = "OK", e3[e3.ERROR = 2] = "ERROR";
            }(pn || (pn = {}));
            var gn = performance, vn = Math.pow(10, 6), yn = Math.pow(10, 9);
            function bn(e3) {
              var t3 = e3 / 1e3;
              return [Math.trunc(t3), Math.round(e3 % 1e3 * vn)];
            }
            function Sn() {
              var e3 = gn.timeOrigin;
              if ("number" != typeof e3) {
                var t3 = gn;
                e3 = t3.timing && t3.timing.fetchStart;
              }
              return e3;
            }
            function wn(e3) {
              return Pn(bn(Sn()), bn("number" == typeof e3 ? e3 : gn.now()));
            }
            function Tn(e3) {
              return e3[0] * yn + e3[1];
            }
            function En(e3) {
              return Array.isArray(e3) && 2 === e3.length && "number" == typeof e3[0] && "number" == typeof e3[1];
            }
            function Rn(e3) {
              return En(e3) || "number" == typeof e3 || e3 instanceof Date;
            }
            function Pn(e3, t3) {
              var r3 = [e3[0] + t3[0], e3[1] + t3[1]];
              return r3[1] >= yn && (r3[1] -= yn, r3[0] += 1), r3;
            }
            var Cn, kn = "exception.type", On = "exception.message", xn = "exception.stacktrace", Dn = function(e3) {
              var t3 = "function" == typeof Symbol && Symbol.iterator, r3 = t3 && e3[t3], n2 = 0;
              if (r3)
                return r3.call(e3);
              if (e3 && "number" == typeof e3.length)
                return {
                  next: function() {
                    return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
                  }
                };
              throw new TypeError(
                t3 ? "Object is not iterable." : "Symbol.iterator is not defined."
              );
            }, In = function(e3, t3) {
              var r3 = "function" == typeof Symbol && e3[Symbol.iterator];
              if (!r3)
                return e3;
              var n2, a2, i2 = r3.call(e3), s2 = [];
              try {
                for (; (void 0 === t3 || t3-- > 0) && !(n2 = i2.next()).done; )
                  s2.push(n2.value);
              } catch (e4) {
                a2 = { error: e4 };
              } finally {
                try {
                  n2 && !n2.done && (r3 = i2.return) && r3.call(i2);
                } finally {
                  if (a2)
                    throw a2.error;
                }
              }
              return s2;
            }, Ln = function() {
              function e3(e4, t3, r3, n2, a2, i2, s2, o2, c2) {
                void 0 === s2 && (s2 = []), this.attributes = {}, this.links = [], this.events = [], this._droppedAttributesCount = 0, this._droppedEventsCount = 0, this._droppedLinksCount = 0, this.status = { code: pn.UNSET }, this.endTime = [0, 0], this._ended = false, this._duration = [-1, -1], this.name = r3, this._spanContext = n2, this.parentSpanId = i2, this.kind = a2, this.links = s2;
                var d2 = Date.now();
                this._performanceStartTime = gn.now(), this._performanceOffset = d2 - (this._performanceStartTime + Sn()), this._startTimeProvided = null != o2, this.startTime = this._getTime(null != o2 ? o2 : d2), this.resource = e4.resource, this.instrumentationLibrary = e4.instrumentationLibrary, this._spanLimits = e4.getSpanLimits(), this._spanProcessor = e4.getActiveSpanProcessor(), this._spanProcessor.onStart(this, t3), this._attributeValueLengthLimit = this._spanLimits.attributeValueLengthLimit || 0;
              }
              return e3.prototype.spanContext = function() {
                return this._spanContext;
              }, e3.prototype.setAttribute = function(e4, t3) {
                return null == t3 || this._isSpanEnded() ? this : 0 === e4.length ? (qe.warn("Invalid attribute key: " + e4), this) : fn(t3) ? Object.keys(this.attributes).length >= this._spanLimits.attributeCountLimit && !Object.prototype.hasOwnProperty.call(this.attributes, e4) ? (this._droppedAttributesCount++, this) : (this.attributes[e4] = this._truncateToSize(t3), this) : (qe.warn("Invalid attribute value set for key: " + e4), this);
              }, e3.prototype.setAttributes = function(e4) {
                var t3, r3;
                try {
                  for (var n2 = Dn(Object.entries(e4)), a2 = n2.next(); !a2.done; a2 = n2.next()) {
                    var i2 = In(a2.value, 2), s2 = i2[0], o2 = i2[1];
                    this.setAttribute(s2, o2);
                  }
                } catch (e5) {
                  t3 = { error: e5 };
                } finally {
                  try {
                    a2 && !a2.done && (r3 = n2.return) && r3.call(n2);
                  } finally {
                    if (t3)
                      throw t3.error;
                  }
                }
                return this;
              }, e3.prototype.addEvent = function(e4, t3, r3) {
                if (this._isSpanEnded())
                  return this;
                if (0 === this._spanLimits.eventCountLimit)
                  return qe.warn("No events allowed."), this._droppedEventsCount++, this;
                this.events.length >= this._spanLimits.eventCountLimit && (qe.warn("Dropping extra events."), this.events.shift(), this._droppedEventsCount++), Rn(t3) && (Rn(r3) || (r3 = t3), t3 = void 0);
                var n2 = hn(t3);
                return this.events.push({
                  name: e4,
                  attributes: n2,
                  time: this._getTime(r3),
                  droppedAttributesCount: 0
                }), this;
              }, e3.prototype.setStatus = function(e4) {
                return this._isSpanEnded() || (this.status = e4), this;
              }, e3.prototype.updateName = function(e4) {
                return this._isSpanEnded() || (this.name = e4), this;
              }, e3.prototype.end = function(e4) {
                this._isSpanEnded() ? qe.error(
                  this.name + " " + this._spanContext.traceId + "-" + this._spanContext.spanId + " - You can only call end() on a span once."
                ) : (this._ended = true, this.endTime = this._getTime(e4), this._duration = function(e5, t3) {
                  var r3 = t3[0] - e5[0], n2 = t3[1] - e5[1];
                  return n2 < 0 && (r3 -= 1, n2 += yn), [r3, n2];
                }(this.startTime, this.endTime), this._duration[0] < 0 && (qe.warn(
                  "Inconsistent start and end time, startTime > endTime. Setting span duration to 0ms.",
                  this.startTime,
                  this.endTime
                ), this.endTime = this.startTime.slice(), this._duration = [0, 0]), this._spanProcessor.onEnd(this));
              }, e3.prototype._getTime = function(e4) {
                if ("number" == typeof e4 && e4 < gn.now())
                  return wn(e4 + this._performanceOffset);
                if ("number" == typeof e4)
                  return bn(e4);
                if (e4 instanceof Date)
                  return bn(e4.getTime());
                if (En(e4))
                  return e4;
                if (this._startTimeProvided)
                  return bn(Date.now());
                var t3 = gn.now() - this._performanceStartTime;
                return Pn(this.startTime, bn(t3));
              }, e3.prototype.isRecording = function() {
                return false === this._ended;
              }, e3.prototype.recordException = function(e4, t3) {
                var r3 = {};
                "string" == typeof e4 ? r3[On] = e4 : e4 && (e4.code ? r3[kn] = e4.code.toString() : e4.name && (r3[kn] = e4.name), e4.message && (r3[On] = e4.message), e4.stack && (r3[xn] = e4.stack)), r3[kn] || r3[On] ? this.addEvent("exception", r3, t3) : qe.warn("Failed to record an exception " + e4);
              }, Object.defineProperty(e3.prototype, "duration", {
                get: function() {
                  return this._duration;
                },
                enumerable: false,
                configurable: true
              }), Object.defineProperty(e3.prototype, "ended", {
                get: function() {
                  return this._ended;
                },
                enumerable: false,
                configurable: true
              }), Object.defineProperty(e3.prototype, "droppedAttributesCount", {
                get: function() {
                  return this._droppedAttributesCount;
                },
                enumerable: false,
                configurable: true
              }), Object.defineProperty(e3.prototype, "droppedEventsCount", {
                get: function() {
                  return this._droppedEventsCount;
                },
                enumerable: false,
                configurable: true
              }), Object.defineProperty(e3.prototype, "droppedLinksCount", {
                get: function() {
                  return this._droppedLinksCount;
                },
                enumerable: false,
                configurable: true
              }), e3.prototype._isSpanEnded = function() {
                return this._ended && qe.warn(
                  "Can not execute the operation on ended Span {traceId: " + this._spanContext.traceId + ", spanId: " + this._spanContext.spanId + "}"
                ), this._ended;
              }, e3.prototype._truncateToLimitUtil = function(e4, t3) {
                return e4.length <= t3 ? e4 : e4.substr(0, t3);
              }, e3.prototype._truncateToSize = function(e4) {
                var t3 = this, r3 = this._attributeValueLengthLimit;
                return r3 <= 0 ? (qe.warn(
                  "Attribute value limit must be positive, got " + r3
                ), e4) : "string" == typeof e4 ? this._truncateToLimitUtil(e4, r3) : Array.isArray(e4) ? e4.map(function(e5) {
                  return "string" == typeof e5 ? t3._truncateToLimitUtil(e5, r3) : e5;
                }) : e4;
              }, e3;
            }();
            !function(e3) {
              e3[e3.NOT_RECORD = 0] = "NOT_RECORD", e3[e3.RECORD = 1] = "RECORD", e3[e3.RECORD_AND_SAMPLED = 2] = "RECORD_AND_SAMPLED";
            }(Cn || (Cn = {}));
            var Mn = function() {
              function e3() {
              }
              return e3.prototype.shouldSample = function() {
                return { decision: Cn.NOT_RECORD };
              }, e3.prototype.toString = function() {
                return "AlwaysOffSampler";
              }, e3;
            }(), An = function() {
              function e3() {
              }
              return e3.prototype.shouldSample = function() {
                return { decision: Cn.RECORD_AND_SAMPLED };
              }, e3.prototype.toString = function() {
                return "AlwaysOnSampler";
              }, e3;
            }();
            var Nn = function(e3) {
              qe.error(
                function(e4) {
                  return "string" == typeof e4 ? e4 : JSON.stringify(
                    function(e5) {
                      for (var t3 = {}, r3 = e5; null !== r3; )
                        Object.getOwnPropertyNames(r3).forEach(function(e6) {
                          if (!t3[e6]) {
                            var n2 = r3[e6];
                            n2 && (t3[e6] = String(n2));
                          }
                        }), r3 = Object.getPrototypeOf(r3);
                      return t3;
                    }(e4)
                  );
                }(e3)
              );
            };
            function jn(e3) {
              try {
                Nn(e3);
              } catch (e4) {
              }
            }
            var Fn = function() {
              function e3(e4) {
                var t3, r3, n2, a2;
                this._root = e4.root, this._root || (jn(
                  new Error(
                    "ParentBasedSampler must have a root sampler configured"
                  )
                ), this._root = new An()), this._remoteParentSampled = null !== (t3 = e4.remoteParentSampled) && void 0 !== t3 ? t3 : new An(), this._remoteParentNotSampled = null !== (r3 = e4.remoteParentNotSampled) && void 0 !== r3 ? r3 : new Mn(), this._localParentSampled = null !== (n2 = e4.localParentSampled) && void 0 !== n2 ? n2 : new An(), this._localParentNotSampled = null !== (a2 = e4.localParentNotSampled) && void 0 !== a2 ? a2 : new Mn();
              }
              return e3.prototype.shouldSample = function(e4, t3, r3, n2, a2, i2) {
                var s2 = Ot.getSpanContext(e4);
                return s2 && bt(s2) ? s2.isRemote ? s2.traceFlags & $e.SAMPLED ? this._remoteParentSampled.shouldSample(
                  e4,
                  t3,
                  r3,
                  n2,
                  a2,
                  i2
                ) : this._remoteParentNotSampled.shouldSample(
                  e4,
                  t3,
                  r3,
                  n2,
                  a2,
                  i2
                ) : s2.traceFlags & $e.SAMPLED ? this._localParentSampled.shouldSample(e4, t3, r3, n2, a2, i2) : this._localParentNotSampled.shouldSample(
                  e4,
                  t3,
                  r3,
                  n2,
                  a2,
                  i2
                ) : this._root.shouldSample(e4, t3, r3, n2, a2, i2);
              }, e3.prototype.toString = function() {
                return "ParentBased{root=" + this._root.toString() + ", remoteParentSampled=" + this._remoteParentSampled.toString() + ", remoteParentNotSampled=" + this._remoteParentNotSampled.toString() + ", localParentSampled=" + this._localParentSampled.toString() + ", localParentNotSampled=" + this._localParentNotSampled.toString() + "}";
              }, e3;
            }(), Bn = function() {
              function e3(e4) {
                void 0 === e4 && (e4 = 0), this._ratio = e4, this._ratio = this._normalize(e4), this._upperBound = Math.floor(4294967295 * this._ratio);
              }
              return e3.prototype.shouldSample = function(e4, t3) {
                return {
                  decision: yt(t3) && this._accumulate(t3) < this._upperBound ? Cn.RECORD_AND_SAMPLED : Cn.NOT_RECORD
                };
              }, e3.prototype.toString = function() {
                return "TraceIdRatioBased{" + this._ratio + "}";
              }, e3.prototype._normalize = function(e4) {
                return "number" != typeof e4 || isNaN(e4) ? 0 : e4 >= 1 ? 1 : e4 <= 0 ? 0 : e4;
              }, e3.prototype._accumulate = function(e4) {
                for (var t3 = 0, r3 = 0; r3 < e4.length / 8; r3++) {
                  var n2 = 8 * r3;
                  t3 = (t3 ^ parseInt(e4.slice(n2, n2 + 8), 16)) >>> 0;
                }
                return t3;
              }, e3;
            }(), Un = xr(), Zn = sr.AlwaysOn;
            function Hn() {
              return {
                sampler: zn(Un),
                forceFlushTimeoutMillis: 3e4,
                generalLimits: {
                  attributeValueLengthLimit: xr().OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT,
                  attributeCountLimit: xr().OTEL_ATTRIBUTE_COUNT_LIMIT
                },
                spanLimits: {
                  attributeValueLengthLimit: xr().OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT,
                  attributeCountLimit: xr().OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT,
                  linkCountLimit: xr().OTEL_SPAN_LINK_COUNT_LIMIT,
                  eventCountLimit: xr().OTEL_SPAN_EVENT_COUNT_LIMIT,
                  attributePerEventCountLimit: xr().OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT,
                  attributePerLinkCountLimit: xr().OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT
                }
              };
            }
            function zn(e3) {
              switch (void 0 === e3 && (e3 = xr()), e3.OTEL_TRACES_SAMPLER) {
                case sr.AlwaysOn:
                  return new An();
                case sr.AlwaysOff:
                  return new Mn();
                case sr.ParentBasedAlwaysOn:
                  return new Fn({ root: new An() });
                case sr.ParentBasedAlwaysOff:
                  return new Fn({ root: new Mn() });
                case sr.TraceIdRatio:
                  return new Bn(Vn(e3));
                case sr.ParentBasedTraceIdRatio:
                  return new Fn({ root: new Bn(Vn(e3)) });
                default:
                  return qe.error(
                    'OTEL_TRACES_SAMPLER value "' + e3.OTEL_TRACES_SAMPLER + " invalid, defaulting to " + Zn + '".'
                  ), new An();
              }
            }
            function Vn(e3) {
              if (void 0 === e3.OTEL_TRACES_SAMPLER_ARG || "" === e3.OTEL_TRACES_SAMPLER_ARG)
                return qe.error("OTEL_TRACES_SAMPLER_ARG is blank, defaulting to 1."), 1;
              var t3 = Number(e3.OTEL_TRACES_SAMPLER_ARG);
              return isNaN(t3) ? (qe.error(
                "OTEL_TRACES_SAMPLER_ARG=" + e3.OTEL_TRACES_SAMPLER_ARG + " was given, but it is invalid, defaulting to 1."
              ), 1) : t3 < 0 || t3 > 1 ? (qe.error(
                "OTEL_TRACES_SAMPLER_ARG=" + e3.OTEL_TRACES_SAMPLER_ARG + " was given, but it is out of range ([0..1]), defaulting to 1."
              ), 1) : t3;
            }
            function Wn(e3) {
              var t3, r3, n2, a2, i2, s2, o2, c2, d2, p2, l2, u2, h2 = Object.assign({}, e3.spanLimits), m2 = "undefined" != typeof process && process && process.env ? Or(process.env) : Or(mr);
              return h2.attributeCountLimit = null !== (s2 = null !== (i2 = null !== (a2 = null !== (r3 = null === (t3 = e3.spanLimits) || void 0 === t3 ? void 0 : t3.attributeCountLimit) && void 0 !== r3 ? r3 : null === (n2 = e3.generalLimits) || void 0 === n2 ? void 0 : n2.attributeCountLimit) && void 0 !== a2 ? a2 : m2.OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT) && void 0 !== i2 ? i2 : m2.OTEL_ATTRIBUTE_COUNT_LIMIT) && void 0 !== s2 ? s2 : wr, h2.attributeValueLengthLimit = null !== (u2 = null !== (l2 = null !== (p2 = null !== (c2 = null === (o2 = e3.spanLimits) || void 0 === o2 ? void 0 : o2.attributeValueLengthLimit) && void 0 !== c2 ? c2 : null === (d2 = e3.generalLimits) || void 0 === d2 ? void 0 : d2.attributeValueLengthLimit) && void 0 !== p2 ? p2 : m2.OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT) && void 0 !== l2 ? l2 : m2.OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT) && void 0 !== u2 ? u2 : Sr, Object.assign({}, e3, { spanLimits: h2 });
            }
            var Gn = function() {
              this.generateTraceId = Kn(16), this.generateSpanId = Kn(8);
            }, qn = Array(32);
            function Kn(e3) {
              return function() {
                for (var t3 = 0; t3 < 2 * e3; t3++)
                  qn[t3] = Math.floor(16 * Math.random()) + 48, qn[t3] >= 58 && (qn[t3] += 39);
                return String.fromCharCode.apply(null, qn.slice(0, 2 * e3));
              };
            }
            var $n, Xn = function() {
              function e3(e4, t3, r3) {
                this._tracerProvider = r3;
                var n2, a2, i2, s2, o2 = (n2 = t3, a2 = { sampler: zn() }, i2 = Hn(), (s2 = Object.assign({}, i2, a2, n2)).generalLimits = Object.assign(
                  {},
                  i2.generalLimits,
                  n2.generalLimits || {}
                ), s2.spanLimits = Object.assign(
                  {},
                  i2.spanLimits,
                  n2.spanLimits || {}
                ), s2);
                this._sampler = o2.sampler, this._generalLimits = o2.generalLimits, this._spanLimits = o2.spanLimits, this._idGenerator = t3.idGenerator || new Gn(), this.resource = r3.resource, this.instrumentationLibrary = e4;
              }
              return e3.prototype.startSpan = function(e4, t3, r3) {
                var n2, a2, i2;
                void 0 === t3 && (t3 = {}), void 0 === r3 && (r3 = xt.active()), t3.root && (r3 = Ot.deleteSpan(r3));
                var s2 = Ot.getSpan(r3);
                if (Mr(r3))
                  return qe.debug(
                    "Instrumentation suppressed, returning Noop Span"
                  ), Ot.wrapSpanContext(ct);
                var o2, c2, d2, p2 = null == s2 ? void 0 : s2.spanContext(), l2 = this._idGenerator.generateSpanId();
                p2 && Ot.isSpanContextValid(p2) ? (o2 = p2.traceId, c2 = p2.traceState, d2 = p2.spanId) : o2 = this._idGenerator.generateTraceId();
                var u2 = null !== (n2 = t3.kind) && void 0 !== n2 ? n2 : rn.INTERNAL, h2 = (null !== (a2 = t3.links) && void 0 !== a2 ? a2 : []).map(
                  function(e5) {
                    return {
                      context: e5.context,
                      attributes: hn(e5.attributes)
                    };
                  }
                ), m2 = hn(t3.attributes), f2 = this._sampler.shouldSample(r3, o2, e4, u2, m2, h2);
                c2 = null !== (i2 = f2.traceState) && void 0 !== i2 ? i2 : c2;
                var _2 = {
                  traceId: o2,
                  spanId: l2,
                  traceFlags: f2.decision === nn.RECORD_AND_SAMPLED ? $e.SAMPLED : $e.NONE,
                  traceState: c2
                };
                if (f2.decision === nn.NOT_RECORD)
                  return qe.debug(
                    "Recording is off, propagating context in a non-recording span"
                  ), Ot.wrapSpanContext(_2);
                var g2 = new Ln(this, r3, e4, _2, u2, d2, h2, t3.startTime), v2 = hn(Object.assign(m2, f2.attributes));
                return g2.setAttributes(v2), g2;
              }, e3.prototype.startActiveSpan = function(e4, t3, r3, n2) {
                var a2, i2, s2;
                if (!(arguments.length < 2)) {
                  2 === arguments.length ? s2 = t3 : 3 === arguments.length ? (a2 = t3, s2 = r3) : (a2 = t3, i2 = r3, s2 = n2);
                  var o2 = null != i2 ? i2 : xt.active(), c2 = this.startSpan(e4, a2, o2), d2 = Ot.setSpan(o2, c2);
                  return xt.with(d2, s2, void 0, c2);
                }
              }, e3.prototype.getGeneralLimits = function() {
                return this._generalLimits;
              }, e3.prototype.getSpanLimits = function() {
                return this._spanLimits;
              }, e3.prototype.getActiveSpanProcessor = function() {
                return this._tracerProvider.getActiveSpanProcessor();
              }, e3;
            }(), Jn = function(e3) {
              var t3 = "function" == typeof Symbol && Symbol.iterator, r3 = t3 && e3[t3], n2 = 0;
              if (r3)
                return r3.call(e3);
              if (e3 && "number" == typeof e3.length)
                return {
                  next: function() {
                    return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
                  }
                };
              throw new TypeError(
                t3 ? "Object is not iterable." : "Symbol.iterator is not defined."
              );
            }, Qn = function() {
              function e3(e4) {
                this._spanProcessors = e4;
              }
              return e3.prototype.forceFlush = function() {
                var e4, t3, r3 = [];
                try {
                  for (var n2 = Jn(this._spanProcessors), a2 = n2.next(); !a2.done; a2 = n2.next()) {
                    var i2 = a2.value;
                    r3.push(i2.forceFlush());
                  }
                } catch (t4) {
                  e4 = { error: t4 };
                } finally {
                  try {
                    a2 && !a2.done && (t3 = n2.return) && t3.call(n2);
                  } finally {
                    if (e4)
                      throw e4.error;
                  }
                }
                return new Promise(function(e5) {
                  Promise.all(r3).then(function() {
                    e5();
                  }).catch(function(t4) {
                    jn(
                      t4 || new Error("MultiSpanProcessor: forceFlush failed")
                    ), e5();
                  });
                });
              }, e3.prototype.onStart = function(e4, t3) {
                var r3, n2;
                try {
                  for (var a2 = Jn(this._spanProcessors), i2 = a2.next(); !i2.done; i2 = a2.next()) {
                    i2.value.onStart(e4, t3);
                  }
                } catch (e5) {
                  r3 = { error: e5 };
                } finally {
                  try {
                    i2 && !i2.done && (n2 = a2.return) && n2.call(a2);
                  } finally {
                    if (r3)
                      throw r3.error;
                  }
                }
              }, e3.prototype.onEnd = function(e4) {
                var t3, r3;
                try {
                  for (var n2 = Jn(this._spanProcessors), a2 = n2.next(); !a2.done; a2 = n2.next()) {
                    a2.value.onEnd(e4);
                  }
                } catch (e5) {
                  t3 = { error: e5 };
                } finally {
                  try {
                    a2 && !a2.done && (r3 = n2.return) && r3.call(n2);
                  } finally {
                    if (t3)
                      throw t3.error;
                  }
                }
              }, e3.prototype.shutdown = function() {
                var e4, t3, r3 = [];
                try {
                  for (var n2 = Jn(this._spanProcessors), a2 = n2.next(); !a2.done; a2 = n2.next()) {
                    var i2 = a2.value;
                    r3.push(i2.shutdown());
                  }
                } catch (t4) {
                  e4 = { error: t4 };
                } finally {
                  try {
                    a2 && !a2.done && (t3 = n2.return) && t3.call(n2);
                  } finally {
                    if (e4)
                      throw e4.error;
                  }
                }
                return new Promise(function(e5, t4) {
                  Promise.all(r3).then(function() {
                    e5();
                  }, t4);
                });
              }, e3;
            }(), Yn = function() {
              function e3() {
              }
              return e3.prototype.onStart = function(e4, t3) {
              }, e3.prototype.onEnd = function(e4) {
              }, e3.prototype.shutdown = function() {
                return Promise.resolve();
              }, e3.prototype.forceFlush = function() {
                return Promise.resolve();
              }, e3;
            }(), ea = function() {
              function e3() {
                var e4 = this;
                this._promise = new Promise(function(t3, r3) {
                  e4._resolve = t3, e4._reject = r3;
                });
              }
              return Object.defineProperty(e3.prototype, "promise", {
                get: function() {
                  return this._promise;
                },
                enumerable: false,
                configurable: true
              }), e3.prototype.resolve = function(e4) {
                this._resolve(e4);
              }, e3.prototype.reject = function(e4) {
                this._reject(e4);
              }, e3;
            }(), ta = function(e3, t3) {
              var r3 = "function" == typeof Symbol && e3[Symbol.iterator];
              if (!r3)
                return e3;
              var n2, a2, i2 = r3.call(e3), s2 = [];
              try {
                for (; (void 0 === t3 || t3-- > 0) && !(n2 = i2.next()).done; )
                  s2.push(n2.value);
              } catch (e4) {
                a2 = { error: e4 };
              } finally {
                try {
                  n2 && !n2.done && (r3 = i2.return) && r3.call(i2);
                } finally {
                  if (a2)
                    throw a2.error;
                }
              }
              return s2;
            }, ra = function(e3, t3, r3) {
              if (r3 || 2 === arguments.length)
                for (var n2, a2 = 0, i2 = t3.length; a2 < i2; a2++)
                  !n2 && a2 in t3 || (n2 || (n2 = Array.prototype.slice.call(t3, 0, a2)), n2[a2] = t3[a2]);
              return e3.concat(n2 || Array.prototype.slice.call(t3));
            }, na = function() {
              function e3(e4, t3) {
                this._callback = e4, this._that = t3, this._isCalled = false, this._deferred = new ea();
              }
              return Object.defineProperty(e3.prototype, "isCalled", {
                get: function() {
                  return this._isCalled;
                },
                enumerable: false,
                configurable: true
              }), Object.defineProperty(e3.prototype, "promise", {
                get: function() {
                  return this._deferred.promise;
                },
                enumerable: false,
                configurable: true
              }), e3.prototype.call = function() {
                for (var e4, t3 = this, r3 = [], n2 = 0; n2 < arguments.length; n2++)
                  r3[n2] = arguments[n2];
                if (!this._isCalled) {
                  this._isCalled = true;
                  try {
                    Promise.resolve(
                      (e4 = this._callback).call.apply(
                        e4,
                        ra([this._that], ta(r3), false)
                      )
                    ).then(
                      function(e5) {
                        return t3._deferred.resolve(e5);
                      },
                      function(e5) {
                        return t3._deferred.reject(e5);
                      }
                    );
                  } catch (e5) {
                    this._deferred.reject(e5);
                  }
                }
                return this._deferred.promise;
              }, e3;
            }();
            !function(e3) {
              e3[e3.SUCCESS = 0] = "SUCCESS", e3[e3.FAILED = 1] = "FAILED";
            }($n || ($n = {}));
            var aa, ia, sa = function() {
              function e3(e4, t3) {
                this._exporter = e4, this._finishedSpans = [], this._droppedSpansCount = 0;
                var r3 = xr();
                this._maxExportBatchSize = "number" == typeof (null == t3 ? void 0 : t3.maxExportBatchSize) ? t3.maxExportBatchSize : r3.OTEL_BSP_MAX_EXPORT_BATCH_SIZE, this._maxQueueSize = "number" == typeof (null == t3 ? void 0 : t3.maxQueueSize) ? t3.maxQueueSize : r3.OTEL_BSP_MAX_QUEUE_SIZE, this._scheduledDelayMillis = "number" == typeof (null == t3 ? void 0 : t3.scheduledDelayMillis) ? t3.scheduledDelayMillis : r3.OTEL_BSP_SCHEDULE_DELAY, this._exportTimeoutMillis = "number" == typeof (null == t3 ? void 0 : t3.exportTimeoutMillis) ? t3.exportTimeoutMillis : r3.OTEL_BSP_EXPORT_TIMEOUT, this._shutdownOnce = new na(this._shutdown, this), this._maxExportBatchSize > this._maxQueueSize && (qe.warn(
                  "BatchSpanProcessor: maxExportBatchSize must be smaller or equal to maxQueueSize, setting maxExportBatchSize to match maxQueueSize"
                ), this._maxExportBatchSize = this._maxQueueSize);
              }
              return e3.prototype.forceFlush = function() {
                return this._shutdownOnce.isCalled ? this._shutdownOnce.promise : this._flushAll();
              }, e3.prototype.onStart = function(e4, t3) {
              }, e3.prototype.onEnd = function(e4) {
                this._shutdownOnce.isCalled || 0 != (e4.spanContext().traceFlags & $e.SAMPLED) && this._addToBuffer(e4);
              }, e3.prototype.shutdown = function() {
                return this._shutdownOnce.call();
              }, e3.prototype._shutdown = function() {
                var e4 = this;
                return Promise.resolve().then(function() {
                  return e4.onShutdown();
                }).then(function() {
                  return e4._flushAll();
                }).then(function() {
                  return e4._exporter.shutdown();
                });
              }, e3.prototype._addToBuffer = function(e4) {
                if (this._finishedSpans.length >= this._maxQueueSize)
                  return 0 === this._droppedSpansCount && qe.debug("maxQueueSize reached, dropping spans"), void this._droppedSpansCount++;
                this._droppedSpansCount > 0 && (qe.warn(
                  "Dropped " + this._droppedSpansCount + " spans because maxQueueSize reached"
                ), this._droppedSpansCount = 0), this._finishedSpans.push(e4), this._maybeStartTimer();
              }, e3.prototype._flushAll = function() {
                var e4 = this;
                return new Promise(function(t3, r3) {
                  for (var n2 = [], a2 = 0, i2 = Math.ceil(
                    e4._finishedSpans.length / e4._maxExportBatchSize
                  ); a2 < i2; a2++)
                    n2.push(e4._flushOneBatch());
                  Promise.all(n2).then(function() {
                    t3();
                  }).catch(r3);
                });
              }, e3.prototype._flushOneBatch = function() {
                var e4 = this;
                return this._clearTimer(), 0 === this._finishedSpans.length ? Promise.resolve() : new Promise(function(t3, r3) {
                  var n2 = setTimeout(function() {
                    r3(new Error("Timeout"));
                  }, e4._exportTimeoutMillis);
                  xt.with(xt.active().setValue(Lr, true), function() {
                    var a2 = e4._finishedSpans.splice(
                      0,
                      e4._maxExportBatchSize
                    ), i2 = function() {
                      return e4._exporter.export(a2, function(e5) {
                        var a3;
                        clearTimeout(n2), e5.code === $n.SUCCESS ? t3() : r3(
                          null !== (a3 = e5.error) && void 0 !== a3 ? a3 : new Error(
                            "BatchSpanProcessor: span export failed"
                          )
                        );
                      });
                    }, s2 = a2.map(function(e5) {
                      return e5.resource;
                    }).filter(function(e5) {
                      return e5.asyncAttributesPending;
                    });
                    0 === s2.length ? i2() : Promise.all(
                      s2.map(function(e5) {
                        var t4;
                        return null === (t4 = e5.waitForAsyncAttributes) || void 0 === t4 ? void 0 : t4.call(e5);
                      })
                    ).then(i2, function(e5) {
                      jn(e5), r3(e5);
                    });
                  });
                });
              }, e3.prototype._maybeStartTimer = function() {
                var e4 = this;
                void 0 === this._timer && (this._timer = setTimeout(function() {
                  e4._flushOneBatch().then(function() {
                    e4._finishedSpans.length > 0 && (e4._clearTimer(), e4._maybeStartTimer());
                  }).catch(function(e5) {
                    jn(e5);
                  });
                }, this._scheduledDelayMillis), this._timer);
              }, e3.prototype._clearTimer = function() {
                void 0 !== this._timer && (clearTimeout(this._timer), this._timer = void 0);
              }, e3;
            }(), oa = (aa = function(e3, t3) {
              return aa = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
                e4.__proto__ = t4;
              } || function(e4, t4) {
                for (var r3 in t4)
                  Object.prototype.hasOwnProperty.call(t4, r3) && (e4[r3] = t4[r3]);
              }, aa(e3, t3);
            }, function(e3, t3) {
              if ("function" != typeof t3 && null !== t3)
                throw new TypeError(
                  "Class extends value " + String(t3) + " is not a constructor or null"
                );
              function r3() {
                this.constructor = e3;
              }
              aa(e3, t3), e3.prototype = null === t3 ? Object.create(t3) : (r3.prototype = t3.prototype, new r3());
            }), ca = function(e3) {
              function t3(t4, r3) {
                var n2 = e3.call(this, t4, r3) || this;
                return n2.onInit(r3), n2;
              }
              return oa(t3, e3), t3.prototype.onInit = function(e4) {
                var t4 = this;
                true !== (null == e4 ? void 0 : e4.disableAutoFlushOnDocumentHide) && "undefined" != typeof document && (this._visibilityChangeListener = function() {
                  "hidden" === document.visibilityState && t4.forceFlush();
                }, this._pageHideListener = function() {
                  t4.forceFlush();
                }, document.addEventListener(
                  "visibilitychange",
                  this._visibilityChangeListener
                ), document.addEventListener(
                  "pagehide",
                  this._pageHideListener
                ));
              }, t3.prototype.onShutdown = function() {
                "undefined" != typeof document && (this._visibilityChangeListener && document.removeEventListener(
                  "visibilitychange",
                  this._visibilityChangeListener
                ), this._pageHideListener && document.removeEventListener(
                  "pagehide",
                  this._pageHideListener
                ));
              }, t3;
            }(sa);
            !function(e3) {
              e3[e3.resolved = 0] = "resolved", e3[e3.timeout = 1] = "timeout", e3[e3.error = 2] = "error", e3[e3.unresolved = 3] = "unresolved";
            }(ia || (ia = {}));
            var da = function() {
              function e3(e4) {
                var t3;
                void 0 === e4 && (e4 = {}), this._registeredSpanProcessors = [], this._tracers = /* @__PURE__ */ new Map();
                var r3 = function() {
                  for (var e5 = [], t4 = 0; t4 < arguments.length; t4++)
                    e5[t4] = arguments[t4];
                  for (var r4 = e5.shift(), n3 = /* @__PURE__ */ new WeakMap(); e5.length > 0; )
                    r4 = cr(r4, e5.shift(), 0, n3);
                  return r4;
                }({}, Hn(), Wn(e4));
                this.resource = null !== (t3 = r3.resource) && void 0 !== t3 ? t3 : dn.empty(), this.resource = dn.default().merge(this.resource), this._config = Object.assign({}, r3, {
                  resource: this.resource
                });
                var n2 = this._buildExporterFromEnv();
                if (void 0 !== n2) {
                  var a2 = new ca(n2);
                  this.activeSpanProcessor = a2;
                } else
                  this.activeSpanProcessor = new Yn();
              }
              return e3.prototype.getTracer = function(e4, t3, r3) {
                var n2 = e4 + "@" + (t3 || "") + ":" + ((null == r3 ? void 0 : r3.schemaUrl) || "");
                return this._tracers.has(n2) || this._tracers.set(
                  n2,
                  new Xn(
                    {
                      name: e4,
                      version: t3,
                      schemaUrl: null == r3 ? void 0 : r3.schemaUrl
                    },
                    this._config,
                    this
                  )
                ), this._tracers.get(n2);
              }, e3.prototype.addSpanProcessor = function(e4) {
                0 === this._registeredSpanProcessors.length && this.activeSpanProcessor.shutdown().catch(function(e5) {
                  return qe.error(
                    "Error while trying to shutdown current span processor",
                    e5
                  );
                }), this._registeredSpanProcessors.push(e4), this.activeSpanProcessor = new Qn(
                  this._registeredSpanProcessors
                );
              }, e3.prototype.getActiveSpanProcessor = function() {
                return this.activeSpanProcessor;
              }, e3.prototype.register = function(e4) {
                void 0 === e4 && (e4 = {}), Ot.setGlobalTracerProvider(this), void 0 === e4.propagator && (e4.propagator = this._buildPropagatorFromEnv()), e4.contextManager && xt.setGlobalContextManager(e4.contextManager), e4.propagator && $t.setGlobalPropagator(e4.propagator);
              }, e3.prototype.forceFlush = function() {
                var e4 = this._config.forceFlushTimeoutMillis, t3 = this._registeredSpanProcessors.map(function(t4) {
                  return new Promise(function(r3) {
                    var n2, a2 = setTimeout(function() {
                      r3(
                        new Error(
                          "Span processor did not completed within timeout period of " + e4 + " ms"
                        )
                      ), n2 = ia.timeout;
                    }, e4);
                    t4.forceFlush().then(function() {
                      clearTimeout(a2), n2 !== ia.timeout && (n2 = ia.resolved, r3(n2));
                    }).catch(function(e5) {
                      clearTimeout(a2), n2 = ia.error, r3(e5);
                    });
                  });
                });
                return new Promise(function(e5, r3) {
                  Promise.all(t3).then(function(t4) {
                    var n2 = t4.filter(function(e6) {
                      return e6 !== ia.resolved;
                    });
                    n2.length > 0 ? r3(n2) : e5();
                  }).catch(function(e6) {
                    return r3([e6]);
                  });
                });
              }, e3.prototype.shutdown = function() {
                return this.activeSpanProcessor.shutdown();
              }, e3.prototype._getPropagator = function(e4) {
                var t3;
                return null === (t3 = this.constructor._registeredPropagators.get(e4)) || void 0 === t3 ? void 0 : t3();
              }, e3.prototype._getSpanExporter = function(e4) {
                var t3;
                return null === (t3 = this.constructor._registeredExporters.get(e4)) || void 0 === t3 ? void 0 : t3();
              }, e3.prototype._buildPropagatorFromEnv = function() {
                var e4 = this, t3 = Array.from(new Set(xr().OTEL_PROPAGATORS)), r3 = t3.map(function(t4) {
                  var r4 = e4._getPropagator(t4);
                  return r4 || qe.warn(
                    'Propagator "' + t4 + '" requested through environment variable is unavailable.'
                  ), r4;
                }).reduce(function(e5, t4) {
                  return t4 && e5.push(t4), e5;
                }, []);
                return 0 === r3.length ? void 0 : 1 === t3.length ? r3[0] : new Ir({ propagators: r3 });
              }, e3.prototype._buildExporterFromEnv = function() {
                var e4 = xr().OTEL_TRACES_EXPORTER;
                if ("none" !== e4 && "" !== e4) {
                  var t3 = this._getSpanExporter(e4);
                  return t3 || qe.error(
                    'Exporter "' + e4 + '" requested through environment variable is unavailable.'
                  ), t3;
                }
              }, e3._registeredPropagators = /* @__PURE__ */ new Map([
                [
                  "tracecontext",
                  function() {
                    return new Hr();
                  }
                ],
                [
                  "baggage",
                  function() {
                    return new $r();
                  }
                ]
              ]), e3._registeredExporters = /* @__PURE__ */ new Map(), e3;
            }(), pa = function(e3, t3) {
              var r3 = "function" == typeof Symbol && e3[Symbol.iterator];
              if (!r3)
                return e3;
              var n2, a2, i2 = r3.call(e3), s2 = [];
              try {
                for (; (void 0 === t3 || t3-- > 0) && !(n2 = i2.next()).done; )
                  s2.push(n2.value);
              } catch (e4) {
                a2 = { error: e4 };
              } finally {
                try {
                  n2 && !n2.done && (r3 = i2.return) && r3.call(i2);
                } finally {
                  if (a2)
                    throw a2.error;
                }
              }
              return s2;
            }, la = function(e3, t3, r3) {
              if (r3 || 2 === arguments.length)
                for (var n2, a2 = 0, i2 = t3.length; a2 < i2; a2++)
                  !n2 && a2 in t3 || (n2 || (n2 = Array.prototype.slice.call(t3, 0, a2)), n2[a2] = t3[a2]);
              return e3.concat(n2 || Array.prototype.slice.call(t3));
            }, ua = function() {
              function e3() {
                this._enabled = false, this._currentContext = Je;
              }
              return e3.prototype._bindFunction = function(e4, t3) {
                void 0 === e4 && (e4 = Je);
                var r3 = this, n2 = function() {
                  for (var n3 = this, a2 = [], i2 = 0; i2 < arguments.length; i2++)
                    a2[i2] = arguments[i2];
                  return r3.with(e4, function() {
                    return t3.apply(n3, a2);
                  });
                };
                return Object.defineProperty(n2, "length", {
                  enumerable: false,
                  configurable: true,
                  writable: false,
                  value: t3.length
                }), n2;
              }, e3.prototype.active = function() {
                return this._currentContext;
              }, e3.prototype.bind = function(e4, t3) {
                return void 0 === e4 && (e4 = this.active()), "function" == typeof t3 ? this._bindFunction(e4, t3) : t3;
              }, e3.prototype.disable = function() {
                return this._currentContext = Je, this._enabled = false, this;
              }, e3.prototype.enable = function() {
                return this._enabled || (this._enabled = true, this._currentContext = Je), this;
              }, e3.prototype.with = function(e4, t3, r3) {
                for (var n2 = [], a2 = 3; a2 < arguments.length; a2++)
                  n2[a2 - 3] = arguments[a2];
                var i2 = this._currentContext;
                this._currentContext = e4 || Je;
                try {
                  return t3.call.apply(t3, la([r3], pa(n2), false));
                } finally {
                  this._currentContext = i2;
                }
              }, e3;
            }(), ha = function() {
              var e3 = function(t3, r3) {
                return e3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
                  e4.__proto__ = t4;
                } || function(e4, t4) {
                  for (var r4 in t4)
                    Object.prototype.hasOwnProperty.call(t4, r4) && (e4[r4] = t4[r4]);
                }, e3(t3, r3);
              };
              return function(t3, r3) {
                if ("function" != typeof r3 && null !== r3)
                  throw new TypeError(
                    "Class extends value " + String(r3) + " is not a constructor or null"
                  );
                function n2() {
                  this.constructor = t3;
                }
                e3(t3, r3), t3.prototype = null === r3 ? Object.create(r3) : (n2.prototype = r3.prototype, new n2());
              };
            }(), ma = function(e3) {
              function t3(t4) {
                void 0 === t4 && (t4 = {});
                var r3 = e3.call(this, t4) || this;
                if (t4.contextManager)
                  throw "contextManager should be defined in register method not in constructor";
                if (t4.propagator)
                  throw "propagator should be defined in register method not in constructor";
                return r3;
              }
              return ha(t3, e3), t3.prototype.register = function(t4) {
                void 0 === t4 && (t4 = {}), void 0 === t4.contextManager && (t4.contextManager = new ua()), t4.contextManager && t4.contextManager.enable(), e3.prototype.register.call(this, t4);
              }, t3;
            }(da), fa = function(e3, t3) {
              var r3 = "function" == typeof Symbol && e3[Symbol.iterator];
              if (!r3)
                return e3;
              var n2, a2, i2 = r3.call(e3), s2 = [];
              try {
                for (; (void 0 === t3 || t3-- > 0) && !(n2 = i2.next()).done; )
                  s2.push(n2.value);
              } catch (e4) {
                a2 = { error: e4 };
              } finally {
                try {
                  n2 && !n2.done && (r3 = i2.return) && r3.call(i2);
                } finally {
                  if (a2)
                    throw a2.error;
                }
              }
              return s2;
            }, _a = 1e4;
            function ga(e3) {
              return "number" == typeof e3 ? e3 <= 0 ? va(e3, 1e4) : e3 : function() {
                var e4, t3 = Number(
                  null !== (e4 = xr().OTEL_EXPORTER_OTLP_TRACES_TIMEOUT) && void 0 !== e4 ? e4 : xr().OTEL_EXPORTER_OTLP_TIMEOUT
                );
                return t3 <= 0 ? va(t3, _a) : t3;
              }();
            }
            function va(e3, t3) {
              return qe.warn("Timeout must be greater than 0", e3), t3;
            }
            var ya = function() {
              function e3(e4) {
                void 0 === e4 && (e4 = {}), this._sendingPromises = [], this.url = this.getDefaultUrl(e4), "string" == typeof e4.hostname && (this.hostname = e4.hostname), this.shutdown = this.shutdown.bind(this), this._shutdownOnce = new na(this._shutdown, this), this._concurrencyLimit = "number" == typeof e4.concurrencyLimit ? e4.concurrencyLimit : 1 / 0, this.timeoutMillis = ga(e4.timeoutMillis), this.onInit(e4);
              }
              return e3.prototype.export = function(e4, t3) {
                this._shutdownOnce.isCalled ? t3({
                  code: $n.FAILED,
                  error: new Error("Exporter has been shutdown")
                }) : this._sendingPromises.length >= this._concurrencyLimit ? t3({
                  code: $n.FAILED,
                  error: new Error("Concurrent export limit reached")
                }) : this._export(e4).then(function() {
                  t3({ code: $n.SUCCESS });
                }).catch(function(e5) {
                  t3({ code: $n.FAILED, error: e5 });
                });
              }, e3.prototype._export = function(e4) {
                var t3 = this;
                return new Promise(function(r3, n2) {
                  try {
                    qe.debug("items to be sent", e4), t3.send(e4, r3, n2);
                  } catch (e5) {
                    n2(e5);
                  }
                });
              }, e3.prototype.shutdown = function() {
                return this._shutdownOnce.call();
              }, e3.prototype.forceFlush = function() {
                return Promise.all(this._sendingPromises).then(
                  function() {
                  }
                );
              }, e3.prototype._shutdown = function() {
                return qe.debug("shutdown started"), this.onShutdown(), this.forceFlush();
              }, e3;
            }(), ba = function() {
              var e3 = function(t3, r3) {
                return e3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
                  e4.__proto__ = t4;
                } || function(e4, t4) {
                  for (var r4 in t4)
                    Object.prototype.hasOwnProperty.call(t4, r4) && (e4[r4] = t4[r4]);
                }, e3(t3, r3);
              };
              return function(t3, r3) {
                if ("function" != typeof r3 && null !== r3)
                  throw new TypeError(
                    "Class extends value " + String(r3) + " is not a constructor or null"
                  );
                function n2() {
                  this.constructor = t3;
                }
                e3(t3, r3), t3.prototype = null === r3 ? Object.create(r3) : (n2.prototype = r3.prototype, new n2());
              };
            }(), Sa = function(e3) {
              function t3(t4, r3, n2) {
                var a2 = e3.call(this, t4) || this;
                return a2.name = "OTLPExporterError", a2.data = n2, a2.code = r3, a2;
              }
              return ba(t3, e3), t3;
            }(Error), wa = function() {
              return wa = Object.assign || function(e3) {
                for (var t3, r3 = 1, n2 = arguments.length; r3 < n2; r3++)
                  for (var a2 in t3 = arguments[r3])
                    Object.prototype.hasOwnProperty.call(t3, a2) && (e3[a2] = t3[a2]);
                return e3;
              }, wa.apply(this, arguments);
            }, Ta = function(e3, t3) {
              var r3 = "function" == typeof Symbol && e3[Symbol.iterator];
              if (!r3)
                return e3;
              var n2, a2, i2 = r3.call(e3), s2 = [];
              try {
                for (; (void 0 === t3 || t3-- > 0) && !(n2 = i2.next()).done; )
                  s2.push(n2.value);
              } catch (e4) {
                a2 = { error: e4 };
              } finally {
                try {
                  n2 && !n2.done && (r3 = i2.return) && r3.call(i2);
                } finally {
                  if (a2)
                    throw a2.error;
                }
              }
              return s2;
            };
            function Ea(e3, t3, r3, n2, a2, i2) {
              var s2, o2, c2 = false, d2 = setTimeout(function() {
                if (clearTimeout(s2), c2 = true, o2.readyState === XMLHttpRequest.DONE) {
                  var e4 = new Sa("Request Timeout");
                  i2(e4);
                } else
                  o2.abort();
              }, n2), p2 = function(n3, l2) {
                void 0 === n3 && (n3 = 5), void 0 === l2 && (l2 = 1e3), (o2 = new XMLHttpRequest()).open("POST", t3);
                Object.entries(
                  wa(
                    wa(
                      {},
                      {
                        Accept: "application/json",
                        "Content-Type": "application/json"
                      }
                    ),
                    r3
                  )
                ).forEach(function(e4) {
                  var t4 = Ta(e4, 2), r4 = t4[0], n4 = t4[1];
                  o2.setRequestHeader(r4, n4);
                }), o2.send(e3), o2.onreadystatechange = function() {
                  if (o2.readyState === XMLHttpRequest.DONE && false === c2)
                    if (o2.status >= 200 && o2.status <= 299)
                      qe.debug("xhr success", e3), a2(), clearTimeout(d2), clearTimeout(s2);
                    else if (o2.status && (u2 = o2.status, [429, 502, 503, 504].includes(u2)) && n3 > 0) {
                      var t4 = void 0;
                      l2 *= 1.5, t4 = o2.getResponseHeader("Retry-After") ? function(e4) {
                        if (null == e4)
                          return -1;
                        var t5 = Number.parseInt(e4, 10);
                        if (Number.isInteger(t5))
                          return t5 > 0 ? 1e3 * t5 : -1;
                        var r5 = new Date(e4).getTime() - Date.now();
                        return r5 >= 0 ? r5 : 0;
                      }(o2.getResponseHeader("Retry-After")) : Math.round(Math.random() * (5e3 - l2) + l2), s2 = setTimeout(function() {
                        p2(n3 - 1, l2);
                      }, t4);
                    } else {
                      var r4 = new Sa(
                        "Failed to export with XHR (status: " + o2.status + ")",
                        o2.status
                      );
                      i2(r4), clearTimeout(d2), clearTimeout(s2);
                    }
                  var u2;
                }, o2.onabort = function() {
                  if (c2) {
                    var e4 = new Sa("Request Timeout");
                    i2(e4);
                  }
                  clearTimeout(d2), clearTimeout(s2);
                }, o2.onerror = function() {
                  if (c2) {
                    var e4 = new Sa("Request Timeout");
                    i2(e4);
                  }
                  clearTimeout(d2), clearTimeout(s2);
                };
              };
              p2();
            }
            var Ra = function() {
              var e3 = function(t3, r3) {
                return e3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
                  e4.__proto__ = t4;
                } || function(e4, t4) {
                  for (var r4 in t4)
                    Object.prototype.hasOwnProperty.call(t4, r4) && (e4[r4] = t4[r4]);
                }, e3(t3, r3);
              };
              return function(t3, r3) {
                if ("function" != typeof r3 && null !== r3)
                  throw new TypeError(
                    "Class extends value " + String(r3) + " is not a constructor or null"
                  );
                function n2() {
                  this.constructor = t3;
                }
                e3(t3, r3), t3.prototype = null === r3 ? Object.create(r3) : (n2.prototype = r3.prototype, new n2());
              };
            }(), Pa = function(e3) {
              function t3(t4) {
                void 0 === t4 && (t4 = {});
                var r3 = e3.call(this, t4) || this;
                return r3._useXHR = false, r3._useXHR = !!t4.headers || "function" != typeof navigator.sendBeacon, r3._useXHR ? r3._headers = Object.assign(
                  {},
                  function(e4) {
                    void 0 === e4 && (e4 = {});
                    var t5 = {};
                    return Object.entries(e4).forEach(function(e5) {
                      var r4 = fa(e5, 2), n2 = r4[0], a2 = r4[1];
                      void 0 !== a2 ? t5[n2] = String(a2) : qe.warn(
                        'Header "' + n2 + '" has wrong value and will be ignored'
                      );
                    }), t5;
                  }(t4.headers),
                  qr(xr().OTEL_EXPORTER_OTLP_HEADERS)
                ) : r3._headers = {}, r3;
              }
              return Ra(t3, e3), t3.prototype.onInit = function() {
                window.addEventListener("unload", this.shutdown);
              }, t3.prototype.onShutdown = function() {
                window.removeEventListener("unload", this.shutdown);
              }, t3.prototype.send = function(e4, t4, r3) {
                var n2 = this;
                if (this._shutdownOnce.isCalled)
                  qe.debug("Shutdown already started. Cannot send objects");
                else {
                  var a2 = this.convert(e4), i2 = JSON.stringify(a2), s2 = new Promise(function(e5, t5) {
                    n2._useXHR ? Ea(i2, n2.url, n2._headers, n2.timeoutMillis, e5, t5) : function(e6, t6, r4, n3, a3) {
                      navigator.sendBeacon(t6, new Blob([e6], r4)) ? (qe.debug("sendBeacon - can send", e6), n3()) : a3(new Sa("sendBeacon - cannot send " + e6));
                    }(i2, n2.url, { type: "application/json" }, e5, t5);
                  }).then(t4, r3);
                  this._sendingPromises.push(s2);
                  var o2 = function() {
                    var e5 = n2._sendingPromises.indexOf(s2);
                    n2._sendingPromises.splice(e5, 1);
                  };
                  s2.then(o2, o2);
                }
              }, t3;
            }(ya), Ca = function(e3, t3) {
              var r3 = "function" == typeof Symbol && e3[Symbol.iterator];
              if (!r3)
                return e3;
              var n2, a2, i2 = r3.call(e3), s2 = [];
              try {
                for (; (void 0 === t3 || t3-- > 0) && !(n2 = i2.next()).done; )
                  s2.push(n2.value);
              } catch (e4) {
                a2 = { error: e4 };
              } finally {
                try {
                  n2 && !n2.done && (r3 = i2.return) && r3.call(i2);
                } finally {
                  if (a2)
                    throw a2.error;
                }
              }
              return s2;
            };
            function ka(e3) {
              return Object.keys(e3).map(function(t3) {
                return Oa(t3, e3[t3]);
              });
            }
            function Oa(e3, t3) {
              return { key: e3, value: xa(t3) };
            }
            function xa(e3) {
              var t3 = typeof e3;
              return "string" === t3 ? { stringValue: e3 } : "number" === t3 ? Number.isInteger(e3) ? { intValue: e3 } : { doubleValue: e3 } : "boolean" === t3 ? { boolValue: e3 } : e3 instanceof Uint8Array ? { bytesValue: e3 } : Array.isArray(e3) ? { arrayValue: { values: e3.map(xa) } } : "object" === t3 && null != e3 ? {
                kvlistValue: {
                  values: Object.entries(e3).map(function(e4) {
                    var t4 = Ca(e4, 2);
                    return Oa(t4[0], t4[1]);
                  })
                }
              } : {};
            }
            function Da(e3) {
              for (var t3 = e3.length, r3 = "", n2 = 0; n2 < t3; n2 += 2) {
                var a2 = e3.substring(n2, n2 + 2), i2 = parseInt(a2, 16);
                r3 += String.fromCharCode(i2);
              }
              return btoa(r3);
            }
            function Ia(e3, t3) {
              var r3, n2 = e3.spanContext(), a2 = e3.status, i2 = t3 ? e3.parentSpanId : null != e3.parentSpanId ? Da(e3.parentSpanId) : void 0;
              return {
                traceId: t3 ? n2.traceId : Da(n2.traceId),
                spanId: t3 ? n2.spanId : Da(n2.spanId),
                parentSpanId: i2,
                traceState: null === (r3 = n2.traceState) || void 0 === r3 ? void 0 : r3.serialize(),
                name: e3.name,
                kind: null == e3.kind ? 0 : e3.kind + 1,
                startTimeUnixNano: Tn(e3.startTime),
                endTimeUnixNano: Tn(e3.endTime),
                attributes: ka(e3.attributes),
                droppedAttributesCount: e3.droppedAttributesCount,
                events: e3.events.map(La),
                droppedEventsCount: e3.droppedEventsCount,
                status: { code: a2.code, message: a2.message },
                links: e3.links.map(function(e4) {
                  return function(e5, t4) {
                    var r4;
                    return {
                      attributes: e5.attributes ? ka(e5.attributes) : [],
                      spanId: t4 ? e5.context.spanId : Da(e5.context.spanId),
                      traceId: t4 ? e5.context.traceId : Da(e5.context.traceId),
                      traceState: null === (r4 = e5.context.traceState) || void 0 === r4 ? void 0 : r4.serialize(),
                      droppedAttributesCount: e5.droppedAttributesCount || 0
                    };
                  }(e4, t3);
                }),
                droppedLinksCount: e3.droppedLinksCount
              };
            }
            function La(e3) {
              return {
                attributes: e3.attributes ? ka(e3.attributes) : [],
                name: e3.name,
                timeUnixNano: Tn(e3.time),
                droppedAttributesCount: e3.droppedAttributesCount || 0
              };
            }
            var Ma = function(e3) {
              var t3 = "function" == typeof Symbol && Symbol.iterator, r3 = t3 && e3[t3], n2 = 0;
              if (r3)
                return r3.call(e3);
              if (e3 && "number" == typeof e3.length)
                return {
                  next: function() {
                    return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
                  }
                };
              throw new TypeError(
                t3 ? "Object is not iterable." : "Symbol.iterator is not defined."
              );
            }, Aa = function(e3, t3) {
              var r3 = "function" == typeof Symbol && e3[Symbol.iterator];
              if (!r3)
                return e3;
              var n2, a2, i2 = r3.call(e3), s2 = [];
              try {
                for (; (void 0 === t3 || t3-- > 0) && !(n2 = i2.next()).done; )
                  s2.push(n2.value);
              } catch (e4) {
                a2 = { error: e4 };
              } finally {
                try {
                  n2 && !n2.done && (r3 = i2.return) && r3.call(i2);
                } finally {
                  if (a2)
                    throw a2.error;
                }
              }
              return s2;
            };
            function Na(e3, t3) {
              for (var r3 = function(e4) {
                var t4, r4, n3 = /* @__PURE__ */ new Map();
                try {
                  for (var a3 = Ma(e4), i3 = a3.next(); !i3.done; i3 = a3.next()) {
                    var s3 = i3.value, o3 = n3.get(s3.resource);
                    o3 || (o3 = /* @__PURE__ */ new Map(), n3.set(s3.resource, o3));
                    var c3 = s3.instrumentationLibrary.name + "@" + (s3.instrumentationLibrary.version || "") + ":" + (s3.instrumentationLibrary.schemaUrl || ""), d3 = o3.get(c3);
                    d3 || (d3 = [], o3.set(c3, d3)), d3.push(s3);
                  }
                } catch (e5) {
                  t4 = { error: e5 };
                } finally {
                  try {
                    i3 && !i3.done && (r4 = a3.return) && r4.call(a3);
                  } finally {
                    if (t4)
                      throw t4.error;
                  }
                }
                return n3;
              }(e3), n2 = [], a2 = r3.entries(), i2 = a2.next(); !i2.done; ) {
                for (var s2 = Aa(i2.value, 2), o2 = s2[0], c2 = [], d2 = s2[1].values(), p2 = d2.next(); !p2.done; ) {
                  var l2 = p2.value;
                  if (l2.length > 0) {
                    var u2 = l2[0].instrumentationLibrary, h2 = u2.name, m2 = u2.version, f2 = u2.schemaUrl, _2 = l2.map(function(e4) {
                      return Ia(e4, t3);
                    });
                    c2.push({
                      scope: { name: h2, version: m2 },
                      spans: _2,
                      schemaUrl: f2
                    });
                  }
                  p2 = d2.next();
                }
                var g2 = {
                  resource: {
                    attributes: ka(o2.attributes),
                    droppedAttributesCount: 0
                  },
                  scopeSpans: c2,
                  schemaUrl: void 0
                };
                n2.push(g2), i2 = a2.next();
              }
              return n2;
            }
            var ja = function() {
              var e3 = function(t3, r3) {
                return e3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
                  e4.__proto__ = t4;
                } || function(e4, t4) {
                  for (var r4 in t4)
                    Object.prototype.hasOwnProperty.call(t4, r4) && (e4[r4] = t4[r4]);
                }, e3(t3, r3);
              };
              return function(t3, r3) {
                if ("function" != typeof r3 && null !== r3)
                  throw new TypeError(
                    "Class extends value " + String(r3) + " is not a constructor or null"
                  );
                function n2() {
                  this.constructor = t3;
                }
                e3(t3, r3), t3.prototype = null === r3 ? Object.create(r3) : (n2.prototype = r3.prototype, new n2());
              };
            }(), Fa = "v1/traces", Ba = function(e3) {
              function t3(t4) {
                void 0 === t4 && (t4 = {});
                var r3 = e3.call(this, t4) || this;
                return r3._headers = Object.assign(
                  r3._headers,
                  qr(xr().OTEL_EXPORTER_OTLP_TRACES_HEADERS)
                ), r3;
              }
              return ja(t3, e3), t3.prototype.convert = function(e4) {
                return function(e5, t4) {
                  return { resourceSpans: Na(e5, t4) };
                }(e4, true);
              }, t3.prototype.getDefaultUrl = function(e4) {
                return "string" == typeof e4.url ? e4.url : xr().OTEL_EXPORTER_OTLP_TRACES_ENDPOINT.length > 0 ? function(e5) {
                  try {
                    var t5 = new URL(e5);
                    return "" === t5.pathname && (t5.pathname = t5.pathname + "/"), t5.toString();
                  } catch (t6) {
                    return qe.warn("Could not parse export URL: '" + e5 + "'"), e5;
                  }
                }(xr().OTEL_EXPORTER_OTLP_TRACES_ENDPOINT) : xr().OTEL_EXPORTER_OTLP_ENDPOINT.length > 0 ? (t4 = xr().OTEL_EXPORTER_OTLP_ENDPOINT, r3 = Fa, t4.endsWith("/") || (t4 += "/"), t4 + r3) : "http://localhost:4318/v1/traces";
                var t4, r3;
              }, t3;
            }(Pa);
            var Ua = "OT_ZONE_CONTEXT", Za = function() {
              function e3() {
                this._enabled = false, this._zoneCounter = 0;
              }
              return e3.prototype._activeContextFromZone = function(e4) {
                return e4 && e4.get(Ua) || Je;
              }, e3.prototype._bindFunction = function(e4, t3) {
                var r3 = this, n2 = function() {
                  for (var n3 = this, a2 = [], i2 = 0; i2 < arguments.length; i2++)
                    a2[i2] = arguments[i2];
                  return r3.with(e4, function() {
                    return t3.apply(n3, a2);
                  });
                };
                return Object.defineProperty(n2, "length", {
                  enumerable: false,
                  configurable: true,
                  writable: false,
                  value: t3.length
                }), n2;
              }, e3.prototype._bindListener = function(e4, t3) {
                var r3 = t3;
                return void 0 !== r3.__ot_listeners || (r3.__ot_listeners = {}, "function" == typeof r3.addEventListener && (r3.addEventListener = this._patchAddEventListener(
                  r3,
                  r3.addEventListener,
                  e4
                )), "function" == typeof r3.removeEventListener && (r3.removeEventListener = this._patchRemoveEventListener(
                  r3,
                  r3.removeEventListener
                ))), t3;
              }, e3.prototype._createZoneName = function() {
                this._zoneCounter++;
                var e4 = Math.random();
                return this._zoneCounter + "-" + e4;
              }, e3.prototype._createZone = function(e4, t3) {
                var r3;
                return Zone.current.fork({
                  name: e4,
                  properties: (r3 = {}, r3.OT_ZONE_CONTEXT = t3, r3)
                });
              }, e3.prototype._getActiveZone = function() {
                return Zone.current;
              }, e3.prototype._patchAddEventListener = function(e4, t3, r3) {
                var n2 = this;
                return function(a2, i2, s2) {
                  void 0 === e4.__ot_listeners && (e4.__ot_listeners = {});
                  var o2 = e4.__ot_listeners[a2];
                  void 0 === o2 && (o2 = /* @__PURE__ */ new WeakMap(), e4.__ot_listeners[a2] = o2);
                  var c2 = n2.bind(r3, i2);
                  return o2.set(i2, c2), t3.call(this, a2, c2, s2);
                };
              }, e3.prototype._patchRemoveEventListener = function(e4, t3) {
                return function(r3, n2) {
                  if (void 0 === e4.__ot_listeners || void 0 === e4.__ot_listeners[r3])
                    return t3.call(this, r3, n2);
                  var a2 = e4.__ot_listeners[r3], i2 = a2.get(n2);
                  return a2.delete(n2), t3.call(this, r3, i2 || n2);
                };
              }, e3.prototype.active = function() {
                if (!this._enabled)
                  return Je;
                var e4 = this._getActiveZone(), t3 = this._activeContextFromZone(e4);
                return t3 || Je;
              }, e3.prototype.bind = function(e4, t3) {
                return void 0 === e4 && (e4 = this.active()), "function" == typeof t3 ? this._bindFunction(e4, t3) : (void 0 === (r3 = t3) && (r3 = {}), "function" == typeof r3.addEventListener && "function" == typeof r3.removeEventListener && this._bindListener(e4, t3), t3);
                var r3;
              }, e3.prototype.disable = function() {
                return this._enabled = false, this;
              }, e3.prototype.enable = function() {
                return this._enabled = true, this;
              }, e3.prototype.with = function(e4, t3, r3) {
                for (var n2 = [], a2 = 3; a2 < arguments.length; a2++)
                  n2[a2 - 3] = arguments[a2];
                var i2 = this._createZoneName(), s2 = this._createZone(i2, e4);
                return s2.run(t3, r3, n2);
              }, e3;
            }(), Ha = (r2(6037), function() {
              var e3 = function(t3, r3) {
                return e3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
                  e4.__proto__ = t4;
                } || function(e4, t4) {
                  for (var r4 in t4)
                    Object.prototype.hasOwnProperty.call(t4, r4) && (e4[r4] = t4[r4]);
                }, e3(t3, r3);
              };
              return function(t3, r3) {
                if ("function" != typeof r3 && null !== r3)
                  throw new TypeError(
                    "Class extends value " + String(r3) + " is not a constructor or null"
                  );
                function n2() {
                  this.constructor = t3;
                }
                e3(t3, r3), t3.prototype = null === r3 ? Object.create(r3) : (n2.prototype = r3.prototype, new n2());
              };
            }()), za = function() {
              function e3() {
              }
              return e3.prototype.createHistogram = function(e4, t3) {
                return ei;
              }, e3.prototype.createCounter = function(e4, t3) {
                return Ya;
              }, e3.prototype.createUpDownCounter = function(e4, t3) {
                return ti;
              }, e3.prototype.createObservableGauge = function(e4, t3) {
                return ni;
              }, e3.prototype.createObservableCounter = function(e4, t3) {
                return ri;
              }, e3.prototype.createObservableUpDownCounter = function(e4, t3) {
                return ai;
              }, e3.prototype.addBatchObservableCallback = function(e4, t3) {
              }, e3.prototype.removeBatchObservableCallback = function(e4) {
              }, e3;
            }(), Va = function() {
            }, Wa = function(e3) {
              function t3() {
                return null !== e3 && e3.apply(this, arguments) || this;
              }
              return Ha(t3, e3), t3.prototype.add = function(e4, t4) {
              }, t3;
            }(Va), Ga = function(e3) {
              function t3() {
                return null !== e3 && e3.apply(this, arguments) || this;
              }
              return Ha(t3, e3), t3.prototype.add = function(e4, t4) {
              }, t3;
            }(Va), qa = function(e3) {
              function t3() {
                return null !== e3 && e3.apply(this, arguments) || this;
              }
              return Ha(t3, e3), t3.prototype.record = function(e4, t4) {
              }, t3;
            }(Va), Ka = function() {
              function e3() {
              }
              return e3.prototype.addCallback = function(e4) {
              }, e3.prototype.removeCallback = function(e4) {
              }, e3;
            }(), $a = function(e3) {
              function t3() {
                return null !== e3 && e3.apply(this, arguments) || this;
              }
              return Ha(t3, e3), t3;
            }(Ka), Xa = function(e3) {
              function t3() {
                return null !== e3 && e3.apply(this, arguments) || this;
              }
              return Ha(t3, e3), t3;
            }(Ka), Ja = function(e3) {
              function t3() {
                return null !== e3 && e3.apply(this, arguments) || this;
              }
              return Ha(t3, e3), t3;
            }(Ka), Qa = new za(), Ya = new Wa(), ei = new qa(), ti = new Ga(), ri = new $a(), ni = new Xa(), ai = new Ja();
            var ii = new (function() {
              function e3() {
              }
              return e3.prototype.getMeter = function(e4, t3, r3) {
                return Qa;
              }, e3;
            }())(), si = "metrics", oi = function() {
              function e3() {
              }
              return e3.getInstance = function() {
                return this._instance || (this._instance = new e3()), this._instance;
              }, e3.prototype.setGlobalMeterProvider = function(e4) {
                return Ne(si, e4, Ge.instance());
              }, e3.prototype.getMeterProvider = function() {
                return je(si) || ii;
              }, e3.prototype.getMeter = function(e4, t3, r3) {
                return this.getMeterProvider().getMeter(e4, t3, r3);
              }, e3.prototype.disable = function() {
                Fe(si, Ge.instance());
              }, e3;
            }().getInstance();
            const ci = {
              context: xt,
              diag: qe,
              metrics: oi,
              propagation: $t,
              trace: Ot
            };
            function di(e3, t3) {
              var r3 = Object.keys(e3);
              if (Object.getOwnPropertySymbols) {
                var n2 = Object.getOwnPropertySymbols(e3);
                t3 && (n2 = n2.filter(function(t4) {
                  return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
                })), r3.push.apply(r3, n2);
              }
              return r3;
            }
            function pi(e3) {
              for (var t3 = 1; t3 < arguments.length; t3++) {
                var r3 = null != arguments[t3] ? arguments[t3] : {};
                t3 % 2 ? di(Object(r3), true).forEach(function(t4) {
                  (0, o.Z)(e3, t4, r3[t4]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(
                  e3,
                  Object.getOwnPropertyDescriptors(r3)
                ) : di(Object(r3)).forEach(function(t4) {
                  Object.defineProperty(
                    e3,
                    t4,
                    Object.getOwnPropertyDescriptor(r3, t4)
                  );
                });
              }
              return e3;
            }
            var li = function() {
              function e3(t4) {
                var r4 = t4.roomId, n2 = t4.peerId, a2 = t4.sdkName, s2 = t4.logs, o2 = t4.observabilityJwt, c2 = t4.traces, d2 = t4.metaData;
                if ((0, i.Z)(this, e3), this._peerId = n2, this._roomId = r4, this._logs = s2, this._tracesEnabled = c2.enabled, this._observabilityJwt = o2, "react-native" != a2 && this._tracesEnabled) {
                  var p2 = new Ba({
                    url: c2.endPoint,
                    headers: { Authorization: this._observabilityJwt }
                  });
                  this._provider = new ma({
                    resource: new dn({
                      "service.name": "videosdk-otel",
                      "sdk-version": "0.0.1"
                    })
                  }), this._tracer = this._provider.getTracer(n2), this._provider.addSpanProcessor(new ca(p2)), this._provider.register({ contextManager: new Za() }), this._rootSpan = this._tracer.startSpan(
                    "room_".concat(r4, "_peer_").concat(n2, "_sdk_").concat(a2),
                    {},
                    Je
                  ), this._rootSpan.setAttributes({
                    roomId: r4,
                    peerId: n2,
                    sdkName: a2,
                    userId: d2.userId,
                    email: d2.email
                  }), this._rootSpan.end();
                }
              }
              var t3, r3;
              return (0, s.Z)(e3, [
                {
                  key: "trace",
                  value: function(e4) {
                    var t4 = e4.spanName, r4 = e4.attributes, n2 = void 0 === r4 ? {} : r4, i2 = e4.span, s2 = void 0 === i2 ? void 0 : i2;
                    if (this._tracesEnabled) {
                      var o2;
                      o2 = s2 || this.getCurrentSpan();
                      var c2 = ci.trace.setSpan(Je, o2), p2 = this._tracer.startActiveSpan(
                        t4,
                        {},
                        c2,
                        function() {
                          var e5 = (0, a.Z)(
                            d().mark(function e6(t5) {
                              return d().wrap(function(e7) {
                                for (; ; )
                                  switch (e7.prev = e7.next) {
                                    case 0:
                                      return t5.setAttributes(n2), e7.abrupt("return", t5);
                                    case 2:
                                    case "end":
                                      return e7.stop();
                                  }
                              }, e6);
                            })
                          );
                          return function(t5) {
                            return e5.apply(this, arguments);
                          };
                        }()
                      );
                      return p2;
                    }
                    return null;
                  }
                },
                {
                  key: "traceAutoComplete",
                  value: function(e4) {
                    var t4 = e4.spanName, r4 = e4.attributes, n2 = void 0 === r4 ? {} : r4, a2 = e4.span, i2 = void 0 === a2 ? void 0 : a2, s2 = e4.status, o2 = void 0 === s2 ? 1 : s2, c2 = e4.message, d2 = void 0 === c2 ? "SUCCESS" : c2;
                    if (this._tracesEnabled) {
                      var p2;
                      p2 = i2 || this._rootSpan;
                      var l2 = ci.trace.setSpan(Je, p2), u2 = this._tracer.startSpan(t4, {}, l2);
                      u2.setAttributes(n2), u2.setStatus({ code: o2, message: d2 }), u2.end();
                    }
                  }
                },
                {
                  key: "completeSpan",
                  value: function(e4) {
                    var t4 = e4.span, r4 = e4.status, n2 = e4.message;
                    this._tracesEnabled && (t4.setStatus({ code: r4, message: n2 }), t4.end());
                  }
                },
                {
                  key: "getCurrentSpan",
                  value: function() {
                    var e4 = ci.trace.getSpan(ci.context.active());
                    return e4 || (e4 = this._rootSpan), e4;
                  }
                },
                {
                  key: "getCurrentSpanName",
                  value: function() {
                    var e4;
                    return null === (e4 = this.getCurrentSpan()) || void 0 === e4 ? void 0 : e4.name;
                  }
                },
                {
                  key: "flush",
                  value: (r3 = (0, a.Z)(
                    d().mark(function e4() {
                      return d().wrap(
                        function(e5) {
                          for (; ; )
                            switch (e5.prev = e5.next) {
                              case 0:
                                if (!this._tracesEnabled) {
                                  e5.next = 3;
                                  break;
                                }
                                return e5.next = 3, this._provider.shutdown();
                              case 3:
                              case "end":
                                return e5.stop();
                            }
                        },
                        e4,
                        this
                      );
                    })
                  ), function() {
                    return r3.apply(this, arguments);
                  })
                },
                {
                  key: "pushLogs",
                  value: (t3 = (0, a.Z)(
                    d().mark(function e4(t4) {
                      var r4, n2, a2, i2, s2, o2;
                      return d().wrap(
                        function(e5) {
                          for (; ; )
                            switch (e5.prev = e5.next) {
                              case 0:
                                if (r4 = t4.logType, n2 = t4.logText, a2 = t4.attributes, i2 = this._logs, s2 = i2.enabled, o2 = i2.endPoint, !s2) {
                                  e5.next = 8;
                                  break;
                                }
                                return e5.next = 5, fetch(o2, {
                                  method: "POST",
                                  headers: {
                                    Authorization: this._observabilityJwt,
                                    "Content-Type": "application/json"
                                  },
                                  body: JSON.stringify({
                                    logType: r4,
                                    logText: n2,
                                    attributes: pi(
                                      pi({}, a2),
                                      {},
                                      {
                                        roomId: this._roomId,
                                        peerId: this._peerId
                                      }
                                    )
                                  })
                                }).then(function(e6) {
                                  return e6.json();
                                }).catch(function(e6) {
                                  return console.log("error", e6), {};
                                });
                              case 5:
                                return e5.abrupt("return", e5.sent);
                              case 8:
                                return e5.abrupt("return", null);
                              case 9:
                              case "end":
                                return e5.stop();
                            }
                        },
                        e4,
                        this
                      );
                    })
                  ), function(e4) {
                    return t3.apply(this, arguments);
                  })
                }
              ]), e3;
            }();
            function ui(e3, t3) {
              var r3 = "undefined" != typeof Symbol && e3[Symbol.iterator] || e3["@@iterator"];
              if (!r3) {
                if (Array.isArray(e3) || (r3 = function(e4, t4) {
                  if (!e4)
                    return;
                  if ("string" == typeof e4)
                    return hi(e4, t4);
                  var r4 = Object.prototype.toString.call(e4).slice(8, -1);
                  "Object" === r4 && e4.constructor && (r4 = e4.constructor.name);
                  if ("Map" === r4 || "Set" === r4)
                    return Array.from(e4);
                  if ("Arguments" === r4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r4))
                    return hi(e4, t4);
                }(e3)) || t3 && e3 && "number" == typeof e3.length) {
                  r3 && (e3 = r3);
                  var n2 = 0, a2 = function() {
                  };
                  return {
                    s: a2,
                    n: function() {
                      return n2 >= e3.length ? { done: true } : { done: false, value: e3[n2++] };
                    },
                    e: function(e4) {
                      throw e4;
                    },
                    f: a2
                  };
                }
                throw new TypeError(
                  "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
                );
              }
              var i2, s2 = true, o2 = false;
              return {
                s: function() {
                  r3 = r3.call(e3);
                },
                n: function() {
                  var e4 = r3.next();
                  return s2 = e4.done, e4;
                },
                e: function(e4) {
                  o2 = true, i2 = e4;
                },
                f: function() {
                  try {
                    s2 || null == r3.return || r3.return();
                  } finally {
                    if (o2)
                      throw i2;
                  }
                }
              };
            }
            function hi(e3, t3) {
              (null == t3 || t3 > e3.length) && (t3 = e3.length);
              for (var r3 = 0, n2 = new Array(t3); r3 < t3; r3++)
                n2[r3] = e3[r3];
              return n2;
            }
            function mi(e3, t3) {
              var r3 = Object.keys(e3);
              if (Object.getOwnPropertySymbols) {
                var n2 = Object.getOwnPropertySymbols(e3);
                t3 && (n2 = n2.filter(function(t4) {
                  return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
                })), r3.push.apply(r3, n2);
              }
              return r3;
            }
            function fi(e3) {
              for (var t3 = 1; t3 < arguments.length; t3++) {
                var r3 = null != arguments[t3] ? arguments[t3] : {};
                t3 % 2 ? mi(Object(r3), true).forEach(function(t4) {
                  (0, o.Z)(e3, t4, r3[t4]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(
                  e3,
                  Object.getOwnPropertyDescriptors(r3)
                ) : mi(Object(r3)).forEach(function(t4) {
                  Object.defineProperty(
                    e3,
                    t4,
                    Object.getOwnPropertyDescriptor(r3, t4)
                  );
                });
              }
              return e3;
            }
            var _i, gi = {
              sd: {
                low: { s: 0, t: 2 },
                med: { s: 0, t: 2 },
                high: { s: 1, t: 2 },
                s0t0: { s: 0, t: 0 },
                s0t1: { s: 0, t: 1 },
                s0t2: { s: 0, t: 2 },
                s1t0: { s: 1, t: 0 },
                s1t1: { s: 1, t: 1 },
                s1t2: { s: 1, t: 2 },
                s2t0: { s: 2, t: 0 },
                s2t1: { s: 2, t: 1 },
                s2t2: { s: 2, t: 2 }
              },
              hd: {
                low: { s: 0, t: 2 },
                med: { s: 1, t: 2 },
                high: { s: 2, t: 2 },
                s0t0: { s: 0, t: 0 },
                s0t1: { s: 0, t: 1 },
                s0t2: { s: 0, t: 2 },
                s1t0: { s: 1, t: 0 },
                s1t1: { s: 1, t: 1 },
                s1t2: { s: 1, t: 2 },
                s2t0: { s: 2, t: 0 },
                s2t1: { s: 2, t: 1 },
                s2t2: { s: 2, t: 2 }
              }
            }, vi = {
              qvga: { width: { ideal: 320 }, height: { ideal: 240 } },
              vga: { width: { ideal: 640 }, height: { ideal: 480 } },
              sd: {
                width: { ideal: 1280 },
                height: { ideal: 720 },
                frameRate: { ideal: 24 }
              },
              hd: {
                width: { ideal: 1280 },
                height: { ideal: 720 },
                frameRate: { ideal: 24 }
              }
            }, yi = {
              sd: [
                { scaleResolutionDownBy: 6 },
                { scaleResolutionDownBy: 4 },
                { scaleResolutionDownBy: 2 }
              ],
              hd: [
                { scaleResolutionDownBy: 4 },
                { scaleResolutionDownBy: 2 },
                { scaleResolutionDownBy: 1 }
              ]
            }, bi = [{ scalabilityMode: "S3T3_KEY" }], Si = [{ dtx: true, maxFramerate: 10 }], wi = [{ scalabilityMode: "S3T3", dtx: true }], Ti = new f("RoomClient"), Ei = function() {
              function e3(t4) {
                var r4, n2, a2 = t4.roomId, s2 = t4.peerId, c3 = t4.secret, d2 = t4.displayName, p2 = t4.device, l2 = t4.handlerName, u3 = t4.useSimulcast, h3 = t4.useSharingSimulcast, m3 = t4.forceTcp, f3 = t4.mode, _3 = t4.forceH264, g3 = t4.forceVP9, v3 = t4.svc, y2 = t4.datachannel, b3 = t4.externalVideo, S3 = t4.micEnabled, w3 = t4.webcamEnabled, T3 = t4.maxResolution, E3 = t4.useSpartialLayerAnalytics, R3 = t4._deviceInfo, P2 = t4.customCameraVideoTrack, C2 = t4.customMicrophoneAudioTrack, k3 = t4.autoConsume, O3 = t4.preferredProtocol;
                (0, i.Z)(this, e3), (0, o.Z)(this, "delay", function(e4) {
                  return new Promise(function(t5) {
                    return setTimeout(t5, e4);
                  });
                }), Ti.debug(
                  'constructor() [roomId:"%s", peerId:"%s", displayName:"%s", device:%s]',
                  a2,
                  s2,
                  d2,
                  p2.flag
                ), this.useSpartialLayerAnalytics = E3 || false, this._deviceInfo = R3, this._eventEmitter = new oe.EventEmitter(), this._closed = false, this._displayName = d2, this._device = p2, this._forceTcp = m3, this._preferredProtocol = O3, f3 == Ce.S.CONFERENCE ? (r4 = true, n2 = true) : (r4 = false, n2 = false), this._mode = f3, this._produce = r4, this._consume = n2, this._useDataChannel = y2, this._forceH264 = Boolean(_3), this._forceVP9 = Boolean(g3), this._micEnabled = Boolean(S3), this._webcamEnabled = Boolean(w3), this._externalVideo = null, this._externalVideoStream = null, this._nextDataChannelTestNumber = 0, b3 && (this._externalVideo = document.createElement("video"), this._externalVideo.controls = true, this._externalVideo.loop = true, this._externalVideo.setAttribute("playsinline", ""), this._externalVideo.src = b3, this._externalVideo.play().catch(function(e4) {
                  return Ti.warn("externalVideo.play() failed:%o", e4);
                })), this._handlerName = l2, this._useSimulcast = u3, this._useSharingSimulcast = h3, this._protooUrl = "", this._secret = c3, this._peerId = s2, this._roomId = a2, this._baseUrl = "", this._protoo = null, this._mediasoupDevice = null, this._sendTransport = null, this._recvTransport = null, this._micProducer = null, this._webcamProducer = null, this._shareProducer = null, this._shareAudioProducer = null, this._chatDataProducer = null, this._botDataProducer = null, this._consumers = /* @__PURE__ */ new Map(), this._dataConsumers = /* @__PURE__ */ new Map(), this._mics = /* @__PURE__ */ new Map(), this._mic = { device: null }, this._webcams = /* @__PURE__ */ new Map(), this._webcam = { device: null, resolution: T3 || "hd" }, this._pinnedParticipants = /* @__PURE__ */ new Map(), v3 && (bi[0].scalabilityMode = "".concat(v3, "_KEY"), wi[0].scalabilityMode = v3), this.customCameraVideoTrack = P2, this.customMicrophoneAudioTrack = C2, this._autoConsume = k3, this._iceServers = [];
                this._metrics = new Pe.VideoSDKMetrics({
                  refreshEvery: 1e3,
                  startAfter: 1e3,
                  verbose: false
                }), this._collectStats = "react-native" != R3.sdkType, this._stats = {}, this._latestStats = {}, this._isWebsocketAlive = false, this._pingWebsocketInterval = null, this._pingInternetInterval = null, this._pingWebsocketFailedCounter = 0, this._pongInternetCounter = 0, this._transportState = "", this._openTelemetry = null;
              }
              var t3, r3, c2, u2, h2, m2, f2, _2, g2, v2, b2, S2, w2, T2, E2, R2, k2, O2, ce2, pe2, le2, ue2, he2, me2, fe2, _e2, ge2, ve2, ye2, Se2, we2, Oe2, xe2, De2, Ie2, Le2, Me2, Ae2, Ne2, je2, Fe2, Be2, Ue2, Ze2, He2, ze2, Ve2, We2, Ge2, qe2, Ke2, $e2, Xe2, Je2, Qe2, Ye2, et2, tt2, rt2, nt2, at2, it2, st2, ot2, ct2, dt2, pt2, lt2, ut2, ht2, mt2, ft2, _t2, gt2, vt2, yt2, bt2, St2, wt2, Tt2, Et2, Rt2, Pt2, Ct2, kt2, Ot2, xt2, Dt2, It2, Lt2, Mt2, At2, Nt2, jt2, Ft2, Bt2, Ut2, Zt2, Ht2;
              return (0, s.Z)(
                e3,
                [
                  {
                    key: "on",
                    value: function(e4, t4) {
                      this._eventEmitter.on(e4, t4);
                    }
                  },
                  {
                    key: "close",
                    value: (Ht2 = (0, a.Z)(
                      d().mark(function e4(t4) {
                        var r4, n2, a2, i2, s2, o2, c3, p2, l2;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (o2 = t4.sendLeft, (c3 = void 0 === o2 || o2) && (this._eventEmitter.emit(
                                    "MEETING_STATE_CHANGED",
                                    { state: "CLOSING" }
                                  ), null === (p2 = this._openTelemetry) || void 0 === p2 || p2.traceAutoComplete({
                                    spanName: "Meeting is in CLOSING State",
                                    status: 1
                                  })), !this._closed) {
                                    e5.next = 4;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 4:
                                  return this._closed = true, this._pingWebsocketInterval && clearInterval(
                                    this._pingWebsocketInterval
                                  ), this._pingWebsocketInterval = null, this._pingInternetInterval && clearInterval(
                                    this._pingInternetInterval
                                  ), this._pingInternetInterval = null, this._protoo.close(), this._metrics.running && this._metrics.stopAllProbes(), Ti.debug("close()"), e5.next = 14, null === (r4 = this._openTelemetry) || void 0 === r4 ? void 0 : r4.trace({
                                    spanName: "Closing Trasnport"
                                  });
                                case 14:
                                  return l2 = e5.sent, this._sendTransport && this._sendTransport.close(), this._recvTransport && this._recvTransport.close(), null === (n2 = this._openTelemetry) || void 0 === n2 || n2.completeSpan({
                                    span: l2,
                                    status: 1,
                                    message: "Closed Trasnport"
                                  }), _i.dispatch(x("closed")), c3 && this._eventEmitter.emit(
                                    "MEETING_STATE_CHANGED",
                                    { state: "CLOSED" }
                                  ), null === (a2 = this._openTelemetry) || void 0 === a2 || a2.traceAutoComplete({
                                    spanName: "Meeting is in CLOSED State",
                                    status: 1
                                  }), c3 && this._eventEmitter.emit(
                                    "MEETING_LEFT"
                                  ), null === (i2 = this._openTelemetry) || void 0 === i2 || i2.traceAutoComplete({
                                    spanName: "Emitted MEETING_LEFT Event",
                                    status: 1
                                  }), e5.next = 25, null === (s2 = this._openTelemetry) || void 0 === s2 ? void 0 : s2.flush();
                                case 25:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return Ht2.apply(this, arguments);
                    })
                  },
                  {
                    key: "join",
                    value: (Zt2 = (0, a.Z)(
                      d().mark(function e4() {
                        var t4, r4, n2, i2, s2, c3, u3, h3, m3, f3, _3 = this;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return e5.next = 2, y({
                                    roomId: this._roomId,
                                    secret: this._secret
                                  });
                                case 2:
                                  return n2 = e5.sent, i2 = n2.baseUrl, s2 = n2.iceServers, c3 = n2.logs, u3 = n2.observabilityJwt, h3 = n2.traces, m3 = n2.metaData, this._baseUrl = i2, this._protooUrl = "wss://".concat(this._baseUrl, "/?roomId=").concat(this._roomId, "&peerId=").concat(this._peerId, "&secret=").concat(this._secret, "&mode=").concat(this._mode), this._iceServers = s2, this._tracesEnabled = h3.enabled, "react-native" != this._deviceInfo.sdkType && (this._openTelemetry = new li({
                                    roomId: this._roomId,
                                    peerId: this._peerId,
                                    sdkName: "".concat(
                                      this._deviceInfo.sdkType,
                                      "-sdk"
                                    ),
                                    traces: h3,
                                    logs: c3,
                                    observabilityJwt: u3,
                                    metaData: m3
                                  })), e5.next = 16, null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "Join() Calling",
                                    attributes: {
                                      DeviceInfo: JSON.stringify(
                                        this._deviceInfo
                                      ),
                                      mode: this._mode,
                                      displayName: this._displayName,
                                      multiStream: this._useSimulcast,
                                      micEnabled: this._micEnabled,
                                      webcamEnabled: this._webcamEnabled,
                                      CustomVideoTrack: !!this.customCameraVideoTrack,
                                      CustomMicTrack: !!this.customMicrophoneAudioTrack
                                    }
                                  });
                                case 16:
                                  this._joinSpan = e5.sent, f3 = new p.qo(this._protooUrl), this._protoo = new p._z(f3), this._eventEmitter.emit(
                                    "MEETING_STATE_CHANGED",
                                    { state: "CONNECTING" }
                                  ), _i.dispatch(x("connecting")), null === (r4 = this._openTelemetry) || void 0 === r4 || r4.traceAutoComplete({
                                    spanName: "Meeting is in CONNECTING State",
                                    status: 1
                                  }), this._protoo.on("open", function() {
                                    var e6;
                                    _3._isWebsocketAlive = true, _3._closed = false, _3.startPingPong(), _3._eventEmitter.emit(
                                      "MEETING_STATE_CHANGED",
                                      { state: "CONNECTED" }
                                    ), null === (e6 = _3._openTelemetry) || void 0 === e6 || e6.traceAutoComplete({
                                      spanName: "Meeting is in CONNECTED State",
                                      status: 1
                                    }), _3.requestEntry();
                                  }), this._protoo.on("failed", function() {
                                    var e6;
                                    _3._eventEmitter.emit(
                                      "MEETING_STATE_CHANGED",
                                      { state: "FAILED" }
                                    ), null === (e6 = _3._openTelemetry) || void 0 === e6 || e6.traceAutoComplete({
                                      spanName: "Meeting is in FAILED State",
                                      status: 2
                                    }), _i.dispatch(
                                      se({
                                        type: "error",
                                        text: "WebSocket connection failed"
                                      })
                                    );
                                  }), this._protoo.on(
                                    "disconnected",
                                    function() {
                                      var e6;
                                      _3._eventEmitter.emit(
                                        "MEETING_STATE_CHANGED",
                                        { state: "DISCONNECTED" }
                                      ), null === (e6 = _3._openTelemetry) || void 0 === e6 || e6.traceAutoComplete({
                                        spanName: "Meeting is in DISCONNECTED State",
                                        status: 1
                                      }), _i.dispatch(
                                        se({
                                          type: "error",
                                          text: "WebSocket disconnected"
                                        })
                                      ), _3._sendTransport && (_3._sendTransport.close(), _3._sendTransport = null), _3._recvTransport && (_3._recvTransport.close(), _3._recvTransport = null), _i.dispatch(x("closed"));
                                    }
                                  ), this._protoo.on("close", function() {
                                    _3._closed || _3.close({ sendLeft: true });
                                  }), this._protoo.on(
                                    "request",
                                    function() {
                                      var e6 = (0, a.Z)(
                                        d().mark(function e7(t5, r5, n3) {
                                          var a2, i3, s3, c4, p2, u4, h4, m4, f4, g3, v3, y2, b3, S3, w3, T3, E3, R3, P2, C2, k3, O3, x2, D2, I2, L2, M2, A2, N2, j2, F2, B2, U2, Z2, H2, z2, V2, W2, G2, q2, K2, $2, Q2, Y2, ee2, te2, re2, ne2, ie2, oe2, ce3, de2, pe3, le3, ue3, he3;
                                          return d().wrap(
                                            function(e8) {
                                              for (; ; )
                                                switch (e8.prev = e8.next) {
                                                  case 0:
                                                    Ti.debug(
                                                      'proto "request" event [method:%s, data:%o]',
                                                      t5.method,
                                                      t5.data
                                                    ), e8.t0 = t5.method, e8.next = "close" === e8.t0 ? 4 : "newConsumer" === e8.t0 ? 6 : "newDataConsumer" === e8.t0 ? 51 : "enableMic" === e8.t0 ? 78 : "disableMic" === e8.t0 ? 80 : "enableWebcam" === e8.t0 ? 96 : "disableWebcam" === e8.t0 ? 98 : "pinStateChanged" === e8.t0 ? 114 : "switchRoom" === e8.t0 ? 137 : "statsData" === e8.t0 ? 140 : 143;
                                                    break;
                                                  case 4:
                                                    return _3.close({
                                                      sendLeft: true
                                                    }), e8.abrupt(
                                                      "break",
                                                      143
                                                    );
                                                  case 6:
                                                    return e8.next = 8, null === (a2 = _3._openTelemetry) || void 0 === a2 ? void 0 : a2.trace({
                                                      spanName: "Protoo REQ: newConsumer",
                                                      attributes: {
                                                        request: JSON.stringify(
                                                          t5
                                                        )
                                                      }
                                                    });
                                                  case 8:
                                                    if (s3 = e8.sent, _3._consume) {
                                                      e8.next = 13;
                                                      break;
                                                    }
                                                    return n3(
                                                      403,
                                                      "I do not want to consume"
                                                    ), null === (c4 = _3._openTelemetry) || void 0 === c4 || c4.completeSpan({
                                                      span: s3,
                                                      status: 2,
                                                      message: "I do not want to consume"
                                                    }), e8.abrupt(
                                                      "break",
                                                      143
                                                    );
                                                  case 13:
                                                    return p2 = t5.data, u4 = p2.peerId, h4 = p2.producerId, m4 = p2.id, f4 = p2.kind, g3 = p2.rtpParameters, v3 = p2.type, y2 = p2.appData, b3 = p2.producerPaused, e8.next = 16, null === (i3 = _3._openTelemetry) || void 0 === i3 ? void 0 : i3.trace({
                                                      spanName: "Creating Consumer",
                                                      span: s3
                                                    });
                                                  case 16:
                                                    return S3 = e8.sent, e8.prev = 17, e8.next = 20, _3._recvTransport.consume(
                                                      {
                                                        id: m4,
                                                        producerId: h4,
                                                        kind: f4,
                                                        rtpParameters: g3,
                                                        appData: fi(
                                                          fi({}, y2),
                                                          {},
                                                          { peerId: u4 }
                                                        )
                                                      }
                                                    );
                                                  case 20:
                                                    return P2 = e8.sent, C2 = l.parseScalabilityMode(
                                                      P2.rtpParameters.encodings[0].scalabilityMode
                                                    ), k3 = C2.spatialLayers, O3 = C2.temporalLayers, P2.spatialLayers = k3, P2.temporalLayers = O3, P2.currentSpatialLayers = k3 - 1, P2.currentTemporalLayers = O3 - 1, _3._consumers.set(
                                                      P2.id,
                                                      P2
                                                    ), P2.on(
                                                      "transportclose",
                                                      function() {
                                                        _3._consumers.delete(
                                                          P2.id
                                                        );
                                                        var e9 = J(
                                                          P2.id,
                                                          u4
                                                        );
                                                        _i.dispatch(e9), _3._eventEmitter.emit(
                                                          e9.type,
                                                          e9.payload
                                                        );
                                                      }
                                                    ), null === (w3 = _3._openTelemetry) || void 0 === w3 || w3.completeSpan({
                                                      span: S3,
                                                      status: 1,
                                                      message: "Consumer Created"
                                                    }), e8.next = 31, null === (T3 = _3._openTelemetry) || void 0 === T3 ? void 0 : T3.trace({
                                                      spanName: "Sending Stream Enabled Event",
                                                      span: s3
                                                    });
                                                  case 31:
                                                    S3 = e8.sent, x2 = X(
                                                      {
                                                        id: P2.id,
                                                        type: v3,
                                                        locallyPaused: false,
                                                        remotelyPaused: b3,
                                                        rtpParameters: P2.rtpParameters,
                                                        spatialLayers: k3,
                                                        temporalLayers: O3,
                                                        currentSpatialLayer: k3 - 1,
                                                        currentTemporalLayer: O3 - 1,
                                                        preferredSpatialLayer: k3 - 1,
                                                        preferredTemporalLayer: O3 - 1,
                                                        priority: 1,
                                                        codec: P2.rtpParameters.codecs[0].mimeType.split(
                                                          "/"
                                                        )[1],
                                                        track: P2.track,
                                                        appData: y2,
                                                        instance: P2
                                                      },
                                                      u4
                                                    ), _i.dispatch(x2), _3._eventEmitter.emit(
                                                      x2.type,
                                                      x2.payload
                                                    ), r5(), "video" === P2.kind && _i.getState().me.audioOnly && _3._pauseConsumer(
                                                      P2
                                                    ), null === (E3 = _3._openTelemetry) || void 0 === E3 || E3.completeSpan({
                                                      span: S3,
                                                      status: 1,
                                                      message: "Event Send Successfully"
                                                    }), null == s3 || s3.setAttributes(
                                                      (0, o.Z)(
                                                        {},
                                                        "consumer.consumerId",
                                                        P2.id
                                                      )
                                                    ), null === (R3 = _3._openTelemetry) || void 0 === R3 || R3.completeSpan({
                                                      span: s3,
                                                      status: 1,
                                                      message: "New Consumer Created Successfully"
                                                    }), "video" == P2.kind && P2.appData.share && (null === (D2 = _3._openTelemetry) || void 0 === D2 || D2.traceAutoComplete(
                                                      {
                                                        spanName: "Presenter Changed",
                                                        attributes: {
                                                          "peer.id": u4
                                                        }
                                                      }
                                                    )), e8.next = 50;
                                                    break;
                                                  case 43:
                                                    throw e8.prev = 43, e8.t1 = e8.catch(17), null === (I2 = _3._openTelemetry) || void 0 === I2 || I2.completeSpan({
                                                      span: S3,
                                                      status: 2,
                                                      message: "Error creating a Consumer: ".concat(
                                                        e8.t1
                                                      )
                                                    }), null === (L2 = _3._openTelemetry) || void 0 === L2 || L2.completeSpan({
                                                      span: s3,
                                                      status: 2,
                                                      message: "Error creating a Consumer: ".concat(
                                                        e8.t1
                                                      )
                                                    }), _i.dispatch(
                                                      se({
                                                        type: "error",
                                                        text: "Error creating a Consumer: ".concat(
                                                          e8.t1
                                                        )
                                                      })
                                                    ), _3._openTelemetry.pushLogs(
                                                      {
                                                        logText: "Error creating a Consumer",
                                                        logType: "ERROR",
                                                        attributes: {
                                                          error: e8.t1.message
                                                        }
                                                      }
                                                    ), e8.t1;
                                                  case 50:
                                                    return e8.abrupt(
                                                      "break",
                                                      143
                                                    );
                                                  case 51:
                                                    if (_3._consume) {
                                                      e8.next = 54;
                                                      break;
                                                    }
                                                    return n3(
                                                      403,
                                                      "I do not want to data consume"
                                                    ), e8.abrupt(
                                                      "break",
                                                      143
                                                    );
                                                  case 54:
                                                    if (_3._useDataChannel) {
                                                      e8.next = 57;
                                                      break;
                                                    }
                                                    return n3(
                                                      403,
                                                      "I do not want DataChannels"
                                                    ), e8.abrupt(
                                                      "break",
                                                      143
                                                    );
                                                  case 57:
                                                    return M2 = t5.data, A2 = M2.peerId, N2 = M2.dataProducerId, j2 = M2.id, F2 = M2.sctpStreamParameters, B2 = M2.label, U2 = M2.protocol, Z2 = M2.appData, e8.prev = 58, e8.next = 61, _3._recvTransport.consumeData(
                                                      {
                                                        id: j2,
                                                        dataProducerId: N2,
                                                        sctpStreamParameters: F2,
                                                        label: B2,
                                                        protocol: U2,
                                                        appData: fi(
                                                          fi({}, Z2),
                                                          {},
                                                          { peerId: A2 }
                                                        )
                                                      }
                                                    );
                                                  case 61:
                                                    H2 = e8.sent, _3._dataConsumers.set(
                                                      H2.id,
                                                      H2
                                                    ), H2.on(
                                                      "transportclose",
                                                      function() {
                                                        _3._dataConsumers.delete(
                                                          H2.id
                                                        );
                                                      }
                                                    ), H2.on(
                                                      "open",
                                                      function() {
                                                        Ti.debug(
                                                          'DataConsumer "open" event'
                                                        );
                                                      }
                                                    ), H2.on(
                                                      "close",
                                                      function() {
                                                        Ti.warn(
                                                          'DataConsumer "close" event'
                                                        ), _3._dataConsumers.delete(
                                                          H2.id
                                                        ), _i.dispatch(
                                                          se({
                                                            type: "error",
                                                            text: "DataConsumer closed"
                                                          })
                                                        );
                                                      }
                                                    ), H2.on(
                                                      "error",
                                                      function(e9) {
                                                        Ti.error(
                                                          'DataConsumer "error" event:%o',
                                                          e9
                                                        ), _i.dispatch(
                                                          se({
                                                            type: "error",
                                                            text: "DataConsumer error: ".concat(
                                                              e9
                                                            )
                                                          })
                                                        );
                                                      }
                                                    ), H2.on(
                                                      "message",
                                                      function(e9) {
                                                        if (Ti.debug(
                                                          'DataConsumer "message" event [streamId:%d]',
                                                          H2.sctpStreamParameters.streamId
                                                        ), window.DC_MESSAGE = e9, e9 instanceof ArrayBuffer) {
                                                          var t6 = new DataView(
                                                            e9
                                                          ).getUint32();
                                                          return t6 == Math.pow(
                                                            2,
                                                            32
                                                          ) - 1 ? (Ti.warn(
                                                            "dataChannelTest finished!"
                                                          ), void (_3._nextDataChannelTestNumber = 0)) : (t6 > _3._nextDataChannelTestNumber && Ti.warn(
                                                            "dataChannelTest: %s packets missing",
                                                            t6 - _3._nextDataChannelTestNumber
                                                          ), void (_3._nextDataChannelTestNumber = t6 + 1));
                                                        }
                                                        if ("string" == typeof e9)
                                                          switch (H2.label) {
                                                            case "chat":
                                                              var r6 = _i.getState().peers, n4 = Object.keys(
                                                                r6
                                                              ).map(
                                                                function(e10) {
                                                                  return r6[e10];
                                                                }
                                                              ).find(
                                                                function(e10) {
                                                                  return e10.dataConsumers.includes(
                                                                    H2.id
                                                                  );
                                                                }
                                                              );
                                                              if (!n4) {
                                                                Ti.warn(
                                                                  'DataConsumer "message" from unknown peer'
                                                                );
                                                                break;
                                                              }
                                                              _i.dispatch(
                                                                se({
                                                                  title: "".concat(
                                                                    n4.displayName,
                                                                    " says:"
                                                                  ),
                                                                  text: e9,
                                                                  timeout: 5e3
                                                                })
                                                              ), _3._eventEmitter.emit(
                                                                "CHAT_MESSAGE",
                                                                {
                                                                  text: e9,
                                                                  senderId: n4.id,
                                                                  timestamp: (/* @__PURE__ */ new Date()).getTime()
                                                                }
                                                              );
                                                              break;
                                                            case "bot":
                                                              _i.dispatch(
                                                                se({
                                                                  title: "Message from Bot:",
                                                                  text: e9,
                                                                  timeout: 5e3
                                                                })
                                                              );
                                                          }
                                                        else
                                                          Ti.warn(
                                                            'ignoring DataConsumer "message" (not a string)'
                                                          );
                                                      }
                                                    ), window.DC = H2, _i.dispatch(
                                                      ae(
                                                        {
                                                          id: H2.id,
                                                          sctpStreamParameters: H2.sctpStreamParameters,
                                                          label: H2.label,
                                                          protocol: H2.protocol
                                                        },
                                                        A2
                                                      )
                                                    ), r5(), e8.next = 77;
                                                    break;
                                                  case 73:
                                                    e8.prev = 73, e8.t2 = e8.catch(58), Ti.error(
                                                      '"newDataConsumer" request failed:%o',
                                                      e8.t2
                                                    ), _i.dispatch(
                                                      se({
                                                        type: "error",
                                                        text: "Error creating a DataConsumer: ".concat(
                                                          e8.t2
                                                        )
                                                      })
                                                    );
                                                  case 77:
                                                    return e8.abrupt(
                                                      "break",
                                                      143
                                                    );
                                                  case 78:
                                                    try {
                                                      V2 = t5.data.peerId, null === (z2 = _3._openTelemetry) || void 0 === z2 || z2.traceAutoComplete(
                                                        {
                                                          spanName: "Emitting MIC_REQUESTED & Protoo REQ: enableMic",
                                                          attributes: {
                                                            peerId: V2
                                                          },
                                                          status: 1
                                                        }
                                                      ), _3._eventEmitter.emit(
                                                        "MIC_REQUESTED",
                                                        { peerId: V2 }
                                                      ), r5();
                                                    } catch (e9) {
                                                      Ti.error(
                                                        '"enableMic" request failed:%o',
                                                        e9
                                                      ), _3._openTelemetry.pushLogs(
                                                        {
                                                          logText: "Error enableMic request failed",
                                                          logType: "ERROR",
                                                          attributes: {
                                                            error: e9.message
                                                          }
                                                        }
                                                      ), _3._emitError({
                                                        code: 3027,
                                                        message: e9.message
                                                      });
                                                    }
                                                    return e8.abrupt(
                                                      "break",
                                                      143
                                                    );
                                                  case 80:
                                                    return e8.prev = 80, e8.next = 83, null === (G2 = _3._openTelemetry) || void 0 === G2 ? void 0 : G2.trace({
                                                      spanName: "Protoo REQ: disableMic"
                                                    });
                                                  case 83:
                                                    return W2 = e8.sent, e8.next = 86, _3.disableMic(false, W2);
                                                  case 86:
                                                    null === (q2 = _3._openTelemetry) || void 0 === q2 || q2.completeSpan({
                                                      span: W2,
                                                      status: 1,
                                                      message: "Request Completed"
                                                    }), r5(), e8.next = 95;
                                                    break;
                                                  case 90:
                                                    e8.prev = 90, e8.t3 = e8.catch(80), null === (K2 = _3._openTelemetry) || void 0 === K2 || K2.completeSpan({
                                                      span: W2,
                                                      status: 2,
                                                      message: "disableMic request failed ".concat(
                                                        e8.t3
                                                      )
                                                    }), _3._openTelemetry.pushLogs(
                                                      {
                                                        logText: "Error disableMic request failed",
                                                        logType: "ERROR",
                                                        attributes: {
                                                          error: e8.t3.message
                                                        }
                                                      }
                                                    ), _3._emitError({
                                                      code: 3028,
                                                      message: e8.t3.message
                                                    });
                                                  case 95:
                                                    return e8.abrupt(
                                                      "break",
                                                      143
                                                    );
                                                  case 96:
                                                    try {
                                                      Q2 = t5.data.peerId, null === ($2 = _3._openTelemetry) || void 0 === $2 || $2.traceAutoComplete(
                                                        {
                                                          spanName: "Emitting WEBCAM_REQUESTED & Protoo REQ: enableWebcam",
                                                          attributes: {
                                                            peerId: Q2
                                                          },
                                                          status: 1
                                                        }
                                                      ), _3._eventEmitter.emit(
                                                        "WEBCAM_REQUESTED",
                                                        { peerId: Q2 }
                                                      ), r5();
                                                    } catch (e9) {
                                                      Ti.error(
                                                        '"enableWebcam" request failed:%o',
                                                        e9
                                                      ), _3._openTelemetry.pushLogs(
                                                        {
                                                          logText: "Error enableWebcam request failed",
                                                          logType: "ERROR",
                                                          attributes: {
                                                            error: e9.message
                                                          }
                                                        }
                                                      ), _3._emitError({
                                                        code: 3029,
                                                        message: e9.message
                                                      });
                                                    }
                                                    return e8.abrupt(
                                                      "break",
                                                      143
                                                    );
                                                  case 98:
                                                    return e8.prev = 98, e8.next = 101, null === (ee2 = _3._openTelemetry) || void 0 === ee2 ? void 0 : ee2.trace({
                                                      spanName: "Protoo REQ: disableWebcam"
                                                    });
                                                  case 101:
                                                    return Y2 = e8.sent, e8.next = 104, _3.disableWebcam(Y2);
                                                  case 104:
                                                    null === (te2 = _3._openTelemetry) || void 0 === te2 || te2.completeSpan({
                                                      span: Y2,
                                                      status: 1,
                                                      message: "Request Completed"
                                                    }), r5(), e8.next = 113;
                                                    break;
                                                  case 108:
                                                    e8.prev = 108, e8.t4 = e8.catch(98), null === (re2 = _3._openTelemetry) || void 0 === re2 || re2.completeSpan({
                                                      span: Y2,
                                                      status: 2,
                                                      message: "disableWebcam request failed ".concat(
                                                        e8.t4
                                                      )
                                                    }), _3._openTelemetry.pushLogs(
                                                      {
                                                        logText: "Error disableWebcam request failed",
                                                        logType: "ERROR",
                                                        attributes: {
                                                          error: e8.t4.message
                                                        }
                                                      }
                                                    ), _3._emitError({
                                                      code: 3030,
                                                      message: e8.t4.message
                                                    });
                                                  case 113:
                                                    return e8.abrupt(
                                                      "break",
                                                      143
                                                    );
                                                  case 114:
                                                    return e8.prev = 114, ce3 = t5.data, de2 = ce3.peerId, pe3 = ce3.state, le3 = ce3.pinnedBy, e8.next = 118, null === (ie2 = _3._openTelemetry) || void 0 === ie2 ? void 0 : ie2.trace({
                                                      spanName: "Protoo REQ: pinStateChanged",
                                                      attributes: {
                                                        requestData: JSON.stringify(
                                                          {
                                                            peerId: de2,
                                                            state: pe3,
                                                            pinnedBy: le3
                                                          }
                                                        )
                                                      }
                                                    });
                                                  case 118:
                                                    ne2 = e8.sent, _3._pinnedParticipants.has(
                                                      de2
                                                    ) || _3._pinnedParticipants.set(
                                                      de2,
                                                      {
                                                        cam: false,
                                                        share: false
                                                      }
                                                    ), ue3 = _3._pinnedParticipants.get(
                                                      de2
                                                    ), null != pe3.cam && (ue3.cam = pe3.cam), null != pe3.share && (ue3.share = pe3.share), _3._pinnedParticipants.set(
                                                      de2,
                                                      ue3
                                                    ), _3._eventEmitter.emit(
                                                      "PIN_STATE_CHANGED",
                                                      {
                                                        peerId: de2,
                                                        state: pe3,
                                                        pinnedBy: le3
                                                      }
                                                    ), 0 == ue3.share && 0 == ue3.cam && _3._pinnedParticipants.delete(
                                                      de2
                                                    ), ne2.setAttributes({
                                                      _pinnedParticipants: JSON.stringify(
                                                        _3._pinnedParticipants
                                                      )
                                                    }), null === (oe2 = _3._openTelemetry) || void 0 === oe2 || oe2.completeSpan({
                                                      span: ne2,
                                                      status: 1,
                                                      message: "Request Completed"
                                                    }), r5(), e8.next = 136;
                                                    break;
                                                  case 131:
                                                    throw e8.prev = 131, e8.t5 = e8.catch(114), null === (he3 = _3._openTelemetry) || void 0 === he3 || he3.completeSpan({
                                                      span: ne2,
                                                      status: 2,
                                                      message: "pinStateChanged request failed"
                                                    }), _3._openTelemetry.pushLogs(
                                                      {
                                                        logText: "Error pinStateChanged request failed",
                                                        logType: "ERROR",
                                                        attributes: {
                                                          error: e8.t5.message
                                                        }
                                                      }
                                                    ), e8.t5;
                                                  case 136:
                                                    return e8.abrupt(
                                                      "break",
                                                      143
                                                    );
                                                  case 137:
                                                    return _3._eventEmitter.emit(
                                                      "SWITCH_ROOM",
                                                      t5.data
                                                    ), r5(), e8.abrupt(
                                                      "break",
                                                      143
                                                    );
                                                  case 140:
                                                    return r5({
                                                      peerId: _3._peerId,
                                                      statsData: _3._stats
                                                    }), _3._stats = {}, e8.abrupt(
                                                      "break",
                                                      143
                                                    );
                                                  case 143:
                                                  case "end":
                                                    return e8.stop();
                                                }
                                            },
                                            e7,
                                            null,
                                            [
                                              [17, 43],
                                              [58, 73],
                                              [80, 90],
                                              [98, 108],
                                              [114, 131]
                                            ]
                                          );
                                        })
                                      );
                                      return function(t5, r5, n3) {
                                        return e6.apply(this, arguments);
                                      };
                                    }()
                                  ), this._protoo.on(
                                    "notification",
                                    function() {
                                      var e6 = (0, a.Z)(
                                        d().mark(function e7(t5) {
                                          var r5, n3, a2, i3, s3, o2, c4, p2, l2, u4, h4, m4, f4, g3, v3, y2, b3, S3, w3, T3, E3, R3, P2, C2, k3, O3, x2, I2, L2, M2, A2, N2, j2, F2, B2, U2, Z2, H2, V2, W2, G2, X2, te2, re2, ae2, oe2, ce3, de2, pe3, le3, ue3, he3, me3, fe3, _e3, ge3, ve3, ye3, be2, Se3, we3, Te2, Ee2, Re2, Pe2, Ce2, Oe3, xe3, De3, Ie3;
                                          return d().wrap(function(e8) {
                                            for (; ; )
                                              switch (e8.prev = e8.next) {
                                                case 0:
                                                  Ti.debug(
                                                    'proto "notification" event [method:%s, data:%o]',
                                                    t5.method,
                                                    t5.data
                                                  ), e8.t0 = t5.method, e8.next = "error" === e8.t0 ? 4 : "participantMediaStateChanged" === e8.t0 ? 9 : "producerScore" === e8.t0 ? 10 : "entryRequested" === e8.t0 ? 13 : "entryResponded" === e8.t0 ? 19 : "newPeer" === e8.t0 ? 27 : "peerClosed" === e8.t0 ? 34 : "peerDisplayNameChanged" === e8.t0 ? 40 : "downlinkBwe" === e8.t0 ? 44 : "consumerClosed" === e8.t0 ? 46 : "consumerPaused" === e8.t0 ? 58 : "consumerResumed" === e8.t0 ? 65 : "consumerLayersChanged" === e8.t0 ? 72 : "consumerScore" === e8.t0 ? 83 : "dataConsumerClosed" === e8.t0 ? 86 : "activeSpeaker" === e8.t0 ? 95 : "recordingStateChanged" === e8.t0 ? 100 : "recordingStarted" === e8.t0 ? 103 : "recordingStopped" === e8.t0 ? 105 : "livestreamStateChanged" === e8.t0 ? 107 : "livestreamStarted" === e8.t0 ? 110 : "livestreamStopped" === e8.t0 ? 112 : "hlsStateChanged" === e8.t0 ? 114 : "hlsPlayableStateChanged" === e8.t0 ? 117 : "hlsStarted" === e8.t0 ? 119 : "hlsStopped" === e8.t0 ? 122 : "whiteboardStarted" === e8.t0 ? 124 : "whiteboardStopped" === e8.t0 ? 127 : "videoStatusChanged" === e8.t0 ? 129 : "videoSeeked" === e8.t0 ? 131 : "connectionOpen" === e8.t0 ? 134 : "connectionClose" === e8.t0 ? 136 : "connectionChatMessage" === e8.t0 ? 138 : "connectionParticipantJoined" === e8.t0 ? 140 : "connectionParticipantLeft" === e8.t0 ? 142 : "pubsubMessage" === e8.t0 ? 144 : "peerModeChanged" === e8.t0 ? 146 : "restartIce" === e8.t0 ? 149 : 155;
                                                  break;
                                                case 4:
                                                  return n3 = t5.data, _3._eventEmitter.emit(
                                                    "ERROR",
                                                    n3
                                                  ), _3._openTelemetry.pushLogs(
                                                    {
                                                      logText: "Error in Meeting Session",
                                                      logType: "ERROR",
                                                      attributes: {
                                                        error: n3.message
                                                      }
                                                    }
                                                  ), null === (r5 = _3._openTelemetry) || void 0 === r5 || r5.traceAutoComplete(
                                                    {
                                                      spanName: "Emitted `ERROR` Event",
                                                      attributes: {
                                                        error: n3.message
                                                      },
                                                      status: 2
                                                    }
                                                  ), e8.abrupt("break", 156);
                                                case 9:
                                                  try {
                                                    a2 = t5.data, i3 = a2.peerId, s3 = a2.kind, o2 = a2.newState, _3._eventEmitter.emit(
                                                      "PARTICIPANT_MEDIA_STATE_CHANGED",
                                                      {
                                                        peerId: i3,
                                                        kind: s3,
                                                        newState: o2
                                                      }
                                                    ), "video" == s3 && (null === (c4 = _3._openTelemetry) || void 0 === c4 || c4.traceAutoComplete(
                                                      {
                                                        spanName: "".concat(
                                                          i3,
                                                          " has "
                                                        ).concat(
                                                          o2 ? "enable" : "disable",
                                                          " "
                                                        ).concat(
                                                          s3
                                                        ),
                                                        status: 1
                                                      }
                                                    ));
                                                  } catch (e9) {
                                                    Ti.error(
                                                      '"newProducer" request failed:%o',
                                                      e9
                                                    ), _3._openTelemetry.pushLogs(
                                                      {
                                                        logText: "Error newProducer request failed",
                                                        logType: "ERROR",
                                                        attributes: {
                                                          error: e9.message
                                                        }
                                                      }
                                                    );
                                                  }
                                                case 10:
                                                  return p2 = t5.data, l2 = p2.producerId, u4 = p2.score, _i.dispatch(z(l2, u4)), e8.abrupt("break", 156);
                                                case 13:
                                                  return m4 = t5.data, f4 = m4.id, g3 = m4.name, e8.next = 16, null === (h4 = _3._openTelemetry) || void 0 === h4 ? void 0 : h4.trace({
                                                    spanName: "Protoo Noti: entryRequested",
                                                    span: _3._joinSpan,
                                                    attributes: {
                                                      data: JSON.stringify(
                                                        {
                                                          id: f4,
                                                          name: g3
                                                        }
                                                      )
                                                    }
                                                  });
                                                case 16:
                                                  return v3 = e8.sent, f4 !== _3._peerId ? (_3._eventEmitter.emit(
                                                    "ENTRY_REQUESTED",
                                                    {
                                                      id: f4,
                                                      name: g3
                                                    }
                                                  ), null === (y2 = _3._openTelemetry) || void 0 === y2 || y2.completeSpan({
                                                    span: v3,
                                                    status: 1,
                                                    message: "EntryResponded Recieved"
                                                  })) : null === (b3 = _3._openTelemetry) || void 0 === b3 || b3.completeSpan({
                                                    span: v3,
                                                    status: 2,
                                                    message: "Entry Request Failed"
                                                  }), e8.abrupt("break", 156);
                                                case 19:
                                                  return w3 = t5.data, T3 = w3.id, E3 = w3.decision, R3 = w3.sessionId, _3._tracesEnabled && _3._joinSpan.setAttribute(
                                                    "sessionId",
                                                    R3
                                                  ), _3._eventEmitter.emit(
                                                    "ENTRY_RESPONDED",
                                                    {
                                                      id: T3,
                                                      decision: E3
                                                    }
                                                  ), e8.next = 24, null === (S3 = _3._openTelemetry) || void 0 === S3 ? void 0 : S3.trace({
                                                    spanName: "Protoo Noti: entryResponded",
                                                    attributes: {
                                                      data: JSON.stringify(
                                                        {
                                                          id: T3,
                                                          decision: E3
                                                        }
                                                      )
                                                    },
                                                    span: _3._joinSpan
                                                  });
                                                case 24:
                                                  return P2 = e8.sent, T3 === _3._peerId && "allowed" === E3 ? (_3.joinRoom(), null === (C2 = _3._openTelemetry) || void 0 === C2 || C2.completeSpan({
                                                    span: P2,
                                                    status: 1,
                                                    message: "EntryResponded Recieved"
                                                  })) : null === (k3 = _3._openTelemetry) || void 0 === k3 || k3.completeSpan({
                                                    span: _3._joinSpan,
                                                    status: 2,
                                                    message: "Join Request Denied"
                                                  }), e8.abrupt("break", 156);
                                                case 27:
                                                  O3 = t5.data, x2 = q(
                                                    fi(
                                                      fi({}, O3),
                                                      {},
                                                      {
                                                        consumers: [],
                                                        dataConsumers: []
                                                      }
                                                    )
                                                  ), _i.dispatch(x2), _3._eventEmitter.emit(
                                                    x2.type,
                                                    x2.payload
                                                  ), _i.dispatch(
                                                    se({
                                                      text: "".concat(
                                                        O3.displayName,
                                                        " has joined the room"
                                                      )
                                                    })
                                                  );
                                                  try {
                                                    null === (I2 = _3._openTelemetry) || void 0 === I2 || I2.traceAutoComplete(
                                                      {
                                                        spanName: "Protoo Noti: newPeer ".concat(
                                                          O3.displayName
                                                        ),
                                                        attributes: {
                                                          peerData: JSON.stringify(
                                                            O3
                                                          )
                                                        }
                                                      }
                                                    );
                                                  } catch (e9) {
                                                    _3._openTelemetry.pushLogs(
                                                      {
                                                        logText: "Error Protoo Noti: newPeer",
                                                        logType: "ERROR",
                                                        attributes: {
                                                          error: e9.message
                                                        }
                                                      }
                                                    ), console.error(e9);
                                                  }
                                                  return e8.abrupt(
                                                    "break",
                                                    156
                                                  );
                                                case 34:
                                                  return M2 = t5.data.peerId, A2 = K(M2), _i.dispatch(A2), _3._eventEmitter.emit(
                                                    A2.type,
                                                    A2.payload
                                                  ), null === (L2 = _3._openTelemetry) || void 0 === L2 || L2.traceAutoComplete(
                                                    {
                                                      spanName: "Protoo Noti: peerClosed for ".concat(
                                                        M2
                                                      )
                                                    }
                                                  ), e8.abrupt("break", 156);
                                                case 40:
                                                  return N2 = t5.data, j2 = N2.peerId, F2 = N2.displayName, B2 = N2.oldDisplayName, _i.dispatch($(F2, j2)), _i.dispatch(
                                                    se({
                                                      text: "".concat(
                                                        B2,
                                                        " is now "
                                                      ).concat(F2)
                                                    })
                                                  ), e8.abrupt("break", 156);
                                                case 44:
                                                  return Ti.debug(
                                                    "'downlinkBwe' event:%o",
                                                    t5.data
                                                  ), e8.abrupt("break", 156);
                                                case 46:
                                                  if (Z2 = t5.data.consumerId, H2 = _3._consumers.get(
                                                    Z2
                                                  )) {
                                                    e8.next = 50;
                                                    break;
                                                  }
                                                  return e8.abrupt(
                                                    "break",
                                                    156
                                                  );
                                                case 50:
                                                  return H2.close(), _3._consumers.delete(
                                                    Z2
                                                  ), V2 = H2.appData.peerId, W2 = J(Z2, V2), _i.dispatch(W2), _3._eventEmitter.emit(
                                                    W2.type,
                                                    W2.payload
                                                  ), null === (U2 = _3._openTelemetry) || void 0 === U2 || U2.traceAutoComplete(
                                                    {
                                                      spanName: "Protoo Noti: consumerClosed for ".concat(
                                                        Z2
                                                      ),
                                                      attributes: {
                                                        consumerData: JSON.stringify(
                                                          H2
                                                        )
                                                      }
                                                    }
                                                  ), e8.abrupt("break", 156);
                                                case 58:
                                                  if (G2 = t5.data.consumerId, X2 = _3._consumers.get(
                                                    G2
                                                  )) {
                                                    e8.next = 62;
                                                    break;
                                                  }
                                                  return e8.abrupt(
                                                    "break",
                                                    156
                                                  );
                                                case 62:
                                                  return X2.pause(), _i.dispatch(
                                                    Q(G2, "remote")
                                                  ), e8.abrupt("break", 156);
                                                case 65:
                                                  if (te2 = t5.data.consumerId, re2 = _3._consumers.get(
                                                    te2
                                                  )) {
                                                    e8.next = 69;
                                                    break;
                                                  }
                                                  return e8.abrupt(
                                                    "break",
                                                    156
                                                  );
                                                case 69:
                                                  return re2.resume(), _i.dispatch(
                                                    Y(te2, "remote")
                                                  ), e8.abrupt("break", 156);
                                                case 72:
                                                  if (ae2 = t5.data, oe2 = ae2.consumerId, ce3 = ae2.spatialLayer, de2 = ae2.temporalLayer, (pe3 = _3._consumers.get(
                                                    oe2
                                                  )).currentSpatialLayer = ce3, pe3.currentTemporalLayer = de2, pe3) {
                                                    e8.next = 78;
                                                    break;
                                                  }
                                                  return e8.abrupt(
                                                    "break",
                                                    156
                                                  );
                                                case 78:
                                                  return pe3.appData.encodings.length > 1 ? (_3._eventEmitter.emit(
                                                    "VIDEO_QUALITY_CHANGED",
                                                    {
                                                      peerId: pe3.appData.peerId,
                                                      prevQuality: pe3.spatialLayers - 1 - pe3.currentSpatialLayer == 0 ? "HIGH" : pe3.spatialLayers - 1 - pe3.currentSpatialLayer == 1 ? "MEDIUM" : "LOW",
                                                      currentQuality: pe3.spatialLayers - 1 - ce3 == 0 ? "HIGH" : pe3.spatialLayers - 1 - ce3 == 1 ? "MEDIUM" : "LOW"
                                                    }
                                                  ), _3._openTelemetry.pushLogs(
                                                    {
                                                      logText: "Consumer Peer ".concat(
                                                        pe3.appData.peerId,
                                                        " changed to "
                                                      ).concat(
                                                        pe3.spatialLayers - 1 - ce3 == 0 ? "HIGH" : pe3.spatialLayers - 1 - ce3 == 1 ? "MEDIUM" : "LOW",
                                                        ", previous quality was "
                                                      ).concat(
                                                        pe3.spatialLayers - 1 - pe3.currentSpatialLayer == 0 ? "HIGH" : pe3.spatialLayers - 1 - pe3.currentSpatialLayer == 1 ? "MEDIUM" : "LOW"
                                                      ),
                                                      logType: "INFO",
                                                      attributes: {
                                                        consumerId: oe2
                                                      }
                                                    }
                                                  )) : (_3._eventEmitter.emit(
                                                    "VIDEO_QUALITY_CHANGED",
                                                    {
                                                      peerId: pe3.appData.peerId,
                                                      prevQuality: "HIGH",
                                                      currentQuality: "HIGH"
                                                    }
                                                  ), _3._openTelemetry.pushLogs(
                                                    {
                                                      logText: "Consumer Peer ".concat(
                                                        pe3.appData.peerId,
                                                        " changed to HIGH, previous quality was HIGH"
                                                      ),
                                                      logType: "INFO",
                                                      attributes: {
                                                        consumerId: oe2
                                                      }
                                                    }
                                                  )), pe3.currentSpatialLayer = ce3, pe3.currentTemporalLayer = de2, _i.dispatch(
                                                    ee(oe2, ce3, de2)
                                                  ), e8.abrupt("break", 156);
                                                case 83:
                                                  return le3 = t5.data, ue3 = le3.consumerId, he3 = le3.score, _i.dispatch(
                                                    ne(ue3, he3)
                                                  ), e8.abrupt("break", 156);
                                                case 86:
                                                  if (me3 = t5.data.dataConsumerId, fe3 = _3._dataConsumers.get(
                                                    me3
                                                  )) {
                                                    e8.next = 90;
                                                    break;
                                                  }
                                                  return e8.abrupt(
                                                    "break",
                                                    156
                                                  );
                                                case 90:
                                                  return fe3.close(), _3._dataConsumers.delete(
                                                    me3
                                                  ), _e3 = fe3.appData.peerId, _i.dispatch(
                                                    ie(me3, _e3)
                                                  ), e8.abrupt("break", 156);
                                                case 95:
                                                  return ge3 = t5.data.peerId, ve3 = D(ge3), _i.dispatch(ve3), _3._eventEmitter.emit(
                                                    ve3.type,
                                                    ve3.payload
                                                  ), e8.abrupt("break", 156);
                                                case 100:
                                                  return _3._eventEmitter.emit(
                                                    "RECORDING_STATE_CHANGED",
                                                    t5.data
                                                  ), null === (ye3 = _3._openTelemetry) || void 0 === ye3 || ye3.traceAutoComplete(
                                                    {
                                                      spanName: "Emitted RECORDING_STATE_CHANGED, status : ".concat(
                                                        t5.data.status
                                                      ),
                                                      attributes: {
                                                        data: JSON.stringify(
                                                          t5.data
                                                        )
                                                      },
                                                      status: 1
                                                    }
                                                  ), e8.abrupt("break", 156);
                                                case 103:
                                                  return _3._eventEmitter.emit(
                                                    "RECORDING_STARTED",
                                                    {}
                                                  ), e8.abrupt("break", 156);
                                                case 105:
                                                  return _3._eventEmitter.emit(
                                                    "RECORDING_STOPPED",
                                                    {}
                                                  ), e8.abrupt("break", 156);
                                                case 107:
                                                  return _3._eventEmitter.emit(
                                                    "LIVESTREAM_STATE_CHANGED",
                                                    t5.data
                                                  ), null === (be2 = _3._openTelemetry) || void 0 === be2 || be2.traceAutoComplete(
                                                    {
                                                      spanName: "Emitted LIVESTREAM_STATE_CHANGED, status : ".concat(
                                                        t5.data.status
                                                      ),
                                                      attributes: {
                                                        data: JSON.stringify(
                                                          t5.data
                                                        )
                                                      },
                                                      status: 1
                                                    }
                                                  ), e8.abrupt("break", 156);
                                                case 110:
                                                  return _3._eventEmitter.emit(
                                                    "LIVESTREAM_STARTED",
                                                    {}
                                                  ), e8.abrupt("break", 156);
                                                case 112:
                                                  return _3._eventEmitter.emit(
                                                    "LIVESTREAM_STOPPED",
                                                    {}
                                                  ), e8.abrupt("break", 156);
                                                case 114:
                                                  return _3._eventEmitter.emit(
                                                    "HLS_STATE_CHANGED",
                                                    t5.data
                                                  ), null === (Se3 = _3._openTelemetry) || void 0 === Se3 || Se3.traceAutoComplete(
                                                    {
                                                      spanName: "Emitted HLS_STATE_CHANGED, status : ".concat(
                                                        t5.data.status
                                                      ),
                                                      attributes: {
                                                        data: JSON.stringify(
                                                          t5.data
                                                        )
                                                      },
                                                      status: 1
                                                    }
                                                  ), e8.abrupt("break", 156);
                                                case 117:
                                                  return t5.data.isPlayable && (_3._eventEmitter.emit(
                                                    "HLS_STATE_CHANGED",
                                                    fi(
                                                      fi({}, t5.data),
                                                      {},
                                                      {
                                                        status: ke.o.HLS_PLAYABLE
                                                      }
                                                    )
                                                  ), null === (we3 = _3._openTelemetry) || void 0 === we3 || we3.traceAutoComplete(
                                                    {
                                                      spanName: "Protoo Noti: hlsPlayableStateChanged",
                                                      status: 1
                                                    }
                                                  )), e8.abrupt("break", 156);
                                                case 119:
                                                  return Te2 = t5.data.downstreamUrl, _3._eventEmitter.emit(
                                                    "HLS_STARTED",
                                                    Te2
                                                  ), e8.abrupt("break", 156);
                                                case 122:
                                                  return _3._eventEmitter.emit(
                                                    "HLS_STOPPED",
                                                    {}
                                                  ), e8.abrupt("break", 156);
                                                case 124:
                                                  return Ee2 = t5.data.state, _3._eventEmitter.emit(
                                                    "WHITEBOARD_STARTED",
                                                    { state: Ee2 }
                                                  ), e8.abrupt("break", 156);
                                                case 127:
                                                  return _3._eventEmitter.emit(
                                                    "WHITEBOARD_STOPPED",
                                                    {}
                                                  ), e8.abrupt("break", 156);
                                                case 129:
                                                  return _3._eventEmitter.emit(
                                                    "VIDEO_STATE_CHANGED",
                                                    t5.data
                                                  ), e8.abrupt("break", 156);
                                                case 131:
                                                  return Re2 = t5.data.currentTime, _3._eventEmitter.emit(
                                                    "VIDEO_SEEKED",
                                                    { currentTime: Re2 }
                                                  ), e8.abrupt("break", 156);
                                                case 134:
                                                  return _3._eventEmitter.emit(
                                                    "CONNECTION_OPEN",
                                                    t5.data
                                                  ), e8.abrupt("break", 156);
                                                case 136:
                                                  return _3._eventEmitter.emit(
                                                    "CONNECTION_CLOSE",
                                                    t5.data
                                                  ), e8.abrupt("break", 156);
                                                case 138:
                                                  return _3._eventEmitter.emit(
                                                    "CONNECTION_CHAT_MESSAGE",
                                                    t5.data
                                                  ), e8.abrupt("break", 156);
                                                case 140:
                                                  return _3._eventEmitter.emit(
                                                    "CONNECTION_PARTICIPANT_JOIN",
                                                    t5.data
                                                  ), e8.abrupt("break", 156);
                                                case 142:
                                                  return _3._eventEmitter.emit(
                                                    "CONNECTION_PARTICIPANT_LEFT",
                                                    t5.data
                                                  ), e8.abrupt("break", 156);
                                                case 144:
                                                  return _3._eventEmitter.emit(
                                                    "PUBSUB_MESSAGE",
                                                    t5.data
                                                  ), e8.abrupt("break", 156);
                                                case 146:
                                                  return _3._eventEmitter.emit(
                                                    "PEER_MODE_CHANGED",
                                                    t5.data
                                                  ), null === (Pe2 = _3._openTelemetry) || void 0 === Pe2 || Pe2.traceAutoComplete(
                                                    {
                                                      spanName: "Emitted PEER_MODE_CHANGED",
                                                      attributes: {
                                                        data: JSON.stringify(
                                                          t5.data
                                                        )
                                                      },
                                                      status: 1
                                                    }
                                                  ), e8.abrupt("break", 156);
                                                case 149:
                                                  return Oe3 = t5.data, xe3 = Oe3.transportId, De3 = Oe3.iceParameters, e8.next = 152, null === (Ce2 = _3._openTelemetry) || void 0 === Ce2 ? void 0 : Ce2.trace({
                                                    spanName: "Protoo Noti: restartIce for transportId :".concat(
                                                      xe3
                                                    ),
                                                    attributes: {
                                                      iceParameters: JSON.stringify(
                                                        De3
                                                      )
                                                    }
                                                  });
                                                case 152:
                                                  return Ie3 = e8.sent, _3.handleRemoteRestartIce(
                                                    {
                                                      transportId: xe3,
                                                      iceParameters: De3,
                                                      internalSpan: Ie3
                                                    }
                                                  ), e8.abrupt("break", 156);
                                                case 155:
                                                  Ti.error(
                                                    'unknown protoo notification.method "%s"',
                                                    t5.method
                                                  );
                                                case 156:
                                                case "end":
                                                  return e8.stop();
                                              }
                                          }, e7);
                                        })
                                      );
                                      return function(t5) {
                                        return e6.apply(this, arguments);
                                      };
                                    }()
                                  );
                                case 28:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return Zt2.apply(this, arguments);
                    })
                  },
                  {
                    key: "requestEntry",
                    value: (Ut2 = (0, a.Z)(
                      d().mark(function e4() {
                        var t4, r4, n2;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return e5.next = 2, null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "Requesting Entry",
                                    span: this._joinSpan
                                  });
                                case 2:
                                  return n2 = e5.sent, e5.next = 5, this._protoo.request("requestEntry", {
                                    name: this._displayName
                                  });
                                case 5:
                                  null === (r4 = this._openTelemetry) || void 0 === r4 || r4.completeSpan({
                                    span: n2,
                                    status: 1,
                                    message: "Entry Requested Successfully"
                                  });
                                case 6:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return Ut2.apply(this, arguments);
                    })
                  },
                  {
                    key: "respondEntry",
                    value: (Bt2 = (0, a.Z)(
                      d().mark(function e4(t4, r4) {
                        var n2, a2, i2;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return e5.next = 2, null === (n2 = this._openTelemetry) || void 0 === n2 ? void 0 : n2.trace({
                                    spanName: "Responding Entry",
                                    attributes: {
                                      peerId: t4,
                                      decision: r4
                                    },
                                    span: this._joinSpan
                                  });
                                case 2:
                                  return i2 = e5.sent, e5.next = 5, this._protoo.request("respondEntry", {
                                    id: t4,
                                    decision: r4
                                  });
                                case 5:
                                  null === (a2 = this._openTelemetry) || void 0 === a2 || a2.completeSpan({
                                    message: "Entry Responded Successfully",
                                    span: i2,
                                    status: 1
                                  });
                                case 6:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4, t4) {
                      return Bt2.apply(this, arguments);
                    })
                  },
                  {
                    key: "startRecording",
                    value: (Ft2 = (0, a.Z)(
                      d().mark(function e4(t4, r4, n2) {
                        var a2, i2, s2, o2;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ti.debug("startRecording()"), e5.next = 3, null === (a2 = this._openTelemetry) || void 0 === a2 ? void 0 : a2.trace({
                                    spanName: "startRecording() Start",
                                    attributes: {
                                      webhookUrl: t4 || "webhookUrl Not Specify",
                                      awsDirPath: r4 || "awsDirPath Not Specify",
                                      config: n2 ? JSON.stringify(n2) : "config Not Specify"
                                    }
                                  });
                                case 3:
                                  return s2 = e5.sent, e5.prev = 4, e5.next = 7, this._protoo.request("startRecording", {
                                    webhookUrl: t4,
                                    awsDirPath: r4,
                                    config: n2
                                  });
                                case 7:
                                  e5.next = 15;
                                  break;
                                case 9:
                                  e5.prev = 9, e5.t0 = e5.catch(4), Ti.error(
                                    "startRecording() | failed:%o",
                                    e5.t0
                                  ), null === (o2 = this._openTelemetry) || void 0 === o2 || o2.completeSpan({
                                    span: s2,
                                    status: 2,
                                    message: "startRecording() failed"
                                  }), this._openTelemetry.pushLogs({
                                    logText: "Error startRecording() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), this._emitError({
                                    code: 3017,
                                    message: e5.t0.message
                                  });
                                case 15:
                                  null === (i2 = this._openTelemetry) || void 0 === i2 || i2.completeSpan({
                                    span: s2,
                                    status: 1,
                                    message: "startRecording() End"
                                  });
                                case 16:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[4, 9]]
                        );
                      })
                    ), function(e4, t4, r4) {
                      return Ft2.apply(this, arguments);
                    })
                  },
                  {
                    key: "stopRecording",
                    value: (jt2 = (0, a.Z)(
                      d().mark(function e4() {
                        var t4, r4, n2, a2;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ti.debug("stopRecording()"), e5.next = 3, null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "stopRecording() Start"
                                  });
                                case 3:
                                  return n2 = e5.sent, e5.prev = 4, e5.next = 7, this._protoo.request(
                                    "stopRecording",
                                    {}
                                  );
                                case 7:
                                  e5.next = 14;
                                  break;
                                case 9:
                                  e5.prev = 9, e5.t0 = e5.catch(4), null === (a2 = this._openTelemetry) || void 0 === a2 || a2.completeSpan({
                                    span: n2,
                                    status: 2,
                                    message: "stopRecording() failed"
                                  }), this._openTelemetry.pushLogs({
                                    logText: "Error stopRecording() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), this._emitError({
                                    code: 3018,
                                    message: e5.t0.message
                                  });
                                case 14:
                                  null === (r4 = this._openTelemetry) || void 0 === r4 || r4.completeSpan({
                                    span: n2,
                                    status: 1,
                                    message: "stopRecording() End"
                                  });
                                case 15:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[4, 9]]
                        );
                      })
                    ), function() {
                      return jt2.apply(this, arguments);
                    })
                  },
                  {
                    key: "startLivestream",
                    value: (Nt2 = (0, a.Z)(
                      d().mark(function e4(t4, r4) {
                        var n2, a2, i2, s2;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ti.debug("startLivestream()"), e5.next = 3, null === (n2 = this._openTelemetry) || void 0 === n2 ? void 0 : n2.trace({
                                    spanName: "startLivestream() Start",
                                    attributes: {
                                      outputs: t4 ? JSON.stringify(t4) : "outputs Not Specify",
                                      config: r4 ? JSON.stringify(r4) : "config Not Specify"
                                    }
                                  });
                                case 3:
                                  return i2 = e5.sent, e5.prev = 4, e5.next = 7, this._protoo.request(
                                    "startLivestream",
                                    { outputs: t4, config: r4 }
                                  );
                                case 7:
                                  e5.next = 14;
                                  break;
                                case 9:
                                  e5.prev = 9, e5.t0 = e5.catch(4), null === (s2 = this._openTelemetry) || void 0 === s2 || s2.completeSpan({
                                    span: i2,
                                    status: 1,
                                    message: "startLivestream() End"
                                  }), this._openTelemetry.pushLogs({
                                    logText: "Error startLivestream() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), this._emitError({
                                    code: 3019,
                                    message: e5.t0.message
                                  });
                                case 14:
                                  null === (a2 = this._openTelemetry) || void 0 === a2 || a2.completeSpan({
                                    span: i2,
                                    status: 1,
                                    message: "startLivestream() End"
                                  });
                                case 15:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[4, 9]]
                        );
                      })
                    ), function(e4, t4) {
                      return Nt2.apply(this, arguments);
                    })
                  },
                  {
                    key: "stopLivestream",
                    value: (At2 = (0, a.Z)(
                      d().mark(function e4() {
                        var t4, r4, n2, a2;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ti.debug("stopLivestream()"), e5.next = 3, null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "stopLivestream() Start"
                                  });
                                case 3:
                                  return n2 = e5.sent, e5.prev = 4, e5.next = 7, this._protoo.request(
                                    "stopLivestream",
                                    {}
                                  );
                                case 7:
                                  e5.next = 14;
                                  break;
                                case 9:
                                  e5.prev = 9, e5.t0 = e5.catch(4), this._openTelemetry.pushLogs({
                                    logText: "Error stopLivestream() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), null === (a2 = this._openTelemetry) || void 0 === a2 || a2.completeSpan({
                                    span: n2,
                                    status: 2,
                                    message: "Error stopLivestream() failed"
                                  }), this._emitError({
                                    code: 3020,
                                    message: e5.t0.message
                                  });
                                case 14:
                                  null === (r4 = this._openTelemetry) || void 0 === r4 || r4.completeSpan({
                                    span: n2,
                                    status: 1,
                                    message: "stopLivestream() End"
                                  });
                                case 15:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[4, 9]]
                        );
                      })
                    ), function() {
                      return At2.apply(this, arguments);
                    })
                  },
                  {
                    key: "startHls",
                    value: (Mt2 = (0, a.Z)(
                      d().mark(function e4(t4) {
                        var r4, n2, a2, i2;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return t4 = t4 || {}, Ti.debug("startHls()"), e5.next = 4, null === (r4 = this._openTelemetry) || void 0 === r4 ? void 0 : r4.trace({
                                    spanName: "startHls() Start",
                                    attributes: {
                                      config: t4 ? JSON.stringify(t4) : "config Not Specify"
                                    }
                                  });
                                case 4:
                                  return a2 = e5.sent, e5.prev = 5, e5.next = 8, this._protoo.request("startHls", {
                                    config: t4
                                  });
                                case 8:
                                  e5.next = 15;
                                  break;
                                case 10:
                                  e5.prev = 10, e5.t0 = e5.catch(5), this._openTelemetry.pushLogs({
                                    logText: "Error startHls() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), null === (i2 = this._openTelemetry) || void 0 === i2 || i2.completeSpan({
                                    span: a2,
                                    status: 2,
                                    message: "Error startHls() failed"
                                  }), Ti.error(
                                    "startHls() | failed:%o",
                                    e5.t0
                                  );
                                case 15:
                                  null === (n2 = this._openTelemetry) || void 0 === n2 || n2.completeSpan({
                                    span: a2,
                                    status: 1,
                                    message: "startHlsSpan() End"
                                  });
                                case 16:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[5, 10]]
                        );
                      })
                    ), function(e4) {
                      return Mt2.apply(this, arguments);
                    })
                  },
                  {
                    key: "stopHls",
                    value: (Lt2 = (0, a.Z)(
                      d().mark(function e4() {
                        var t4, r4, n2, a2;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ti.debug("stopHls()"), e5.next = 3, null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "stopHls() Start"
                                  });
                                case 3:
                                  return n2 = e5.sent, e5.prev = 4, e5.next = 7, this._protoo.request("stopHls", {});
                                case 7:
                                  e5.next = 13;
                                  break;
                                case 9:
                                  e5.prev = 9, e5.t0 = e5.catch(4), this._openTelemetry.pushLogs({
                                    logText: "Error stopHls() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), null === (a2 = this._openTelemetry) || void 0 === a2 || a2.completeSpan({
                                    span: n2,
                                    status: 2,
                                    message: "Error stopHls() failed"
                                  });
                                case 13:
                                  null === (r4 = this._openTelemetry) || void 0 === r4 || r4.completeSpan({
                                    span: n2,
                                    status: 1,
                                    message: "stopHls() End"
                                  });
                                case 14:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[4, 9]]
                        );
                      })
                    ), function() {
                      return Lt2.apply(this, arguments);
                    })
                  },
                  {
                    key: "startWhiteboard",
                    value: (It2 = (0, a.Z)(
                      d().mark(function e4() {
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ti.debug("startWhiteboard()"), e5.prev = 1, e5.next = 4, this._protoo.request(
                                    "startWhiteboard",
                                    {}
                                  );
                                case 4:
                                  e5.next = 10;
                                  break;
                                case 6:
                                  e5.prev = 6, e5.t0 = e5.catch(1), Ti.error(
                                    "startWhiteboard() | failed:%o",
                                    e5.t0
                                  ), this._emitError({
                                    code: 3021,
                                    message: e5.t0.message
                                  });
                                case 10:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[1, 6]]
                        );
                      })
                    ), function() {
                      return It2.apply(this, arguments);
                    })
                  },
                  {
                    key: "stopWhiteboard",
                    value: (Dt2 = (0, a.Z)(
                      d().mark(function e4() {
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ti.debug("stopWhiteboard()"), e5.prev = 1, e5.next = 4, this._protoo.request(
                                    "stopWhiteboard",
                                    {}
                                  );
                                case 4:
                                  e5.next = 10;
                                  break;
                                case 6:
                                  e5.prev = 6, e5.t0 = e5.catch(1), Ti.error(
                                    "stopWhiteboard() | failed:%o",
                                    e5.t0
                                  ), this._emitError({
                                    code: 3022,
                                    message: e5.t0.message
                                  });
                                case 10:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[1, 6]]
                        );
                      })
                    ), function() {
                      return Dt2.apply(this, arguments);
                    })
                  },
                  {
                    key: "pinStateChange",
                    value: (xt2 = (0, a.Z)(
                      d().mark(function e4(t4) {
                        var r4, n2, a2;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return n2 = t4.peerId, a2 = t4.state, null === (r4 = this._openTelemetry) || void 0 === r4 || r4.traceAutoComplete({
                                    spanName: "Pin state Change for ".concat(n2),
                                    attributes: {
                                      state: a2 ? JSON.stringify(a2) : null
                                    },
                                    status: 1
                                  }), e5.prev = 2, e5.next = 5, this._protoo.request(
                                    "pinStateChanged",
                                    { peerId: n2, state: a2 }
                                  );
                                case 5:
                                  e5.next = 11;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), this._openTelemetry.pushLogs({
                                    logText: "Error pinStateChange() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Ti.error("pinStateChange() | failed");
                                case 11:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function(e4) {
                      return xt2.apply(this, arguments);
                    })
                  },
                  {
                    key: "startVideo",
                    value: (Ot2 = (0, a.Z)(
                      d().mark(function e4(t4) {
                        var r4;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return r4 = t4.link, Ti.debug("startVideo()"), this._openTelemetry.pushLogs({
                                    logText: "startVideo() Calling",
                                    logType: "INFO"
                                  }), e5.prev = 3, e5.next = 6, this._protoo.request("startVideo", {
                                    link: r4
                                  });
                                case 6:
                                  e5.next = 13;
                                  break;
                                case 8:
                                  e5.prev = 8, e5.t0 = e5.catch(3), this._openTelemetry.pushLogs({
                                    logText: "Error startVideo() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Ti.error(
                                    "startVideo() | failed:%o",
                                    e5.t0
                                  ), this._emitError({
                                    code: 3023,
                                    message: e5.t0.message
                                  });
                                case 13:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[3, 8]]
                        );
                      })
                    ), function(e4) {
                      return Ot2.apply(this, arguments);
                    })
                  },
                  {
                    key: "stopVideo",
                    value: (kt2 = (0, a.Z)(
                      d().mark(function e4() {
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ti.debug("stopVideo()"), this._openTelemetry.pushLogs({
                                    logText: "stopVideo() Calling",
                                    logType: "INFO"
                                  }), e5.prev = 2, e5.next = 5, this._protoo.request("stopVideo", {});
                                case 5:
                                  e5.next = 12;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), this._openTelemetry.pushLogs({
                                    logText: "Error stopVideo() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Ti.error(
                                    "stopVideo() | failed:%o",
                                    e5.t0
                                  ), this._emitError({
                                    code: 3024,
                                    message: e5.t0.message
                                  });
                                case 12:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function() {
                      return kt2.apply(this, arguments);
                    })
                  },
                  {
                    key: "pauseVideo",
                    value: (Ct2 = (0, a.Z)(
                      d().mark(function e4(t4) {
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ti.debug("pauseVideo()"), e5.prev = 1, e5.next = 4, this._protoo.request("pauseVideo", {
                                    currentTime: t4
                                  });
                                case 4:
                                  e5.next = 10;
                                  break;
                                case 6:
                                  e5.prev = 6, e5.t0 = e5.catch(1), Ti.error(
                                    "pauseVideo() | failed:%o",
                                    e5.t0
                                  ), this._emitError({
                                    code: 3025,
                                    message: e5.t0.message
                                  });
                                case 10:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[1, 6]]
                        );
                      })
                    ), function(e4) {
                      return Ct2.apply(this, arguments);
                    })
                  },
                  {
                    key: "resumeVideo",
                    value: (Pt2 = (0, a.Z)(
                      d().mark(function e4() {
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ti.debug("resumeVideo()"), e5.prev = 1, e5.next = 4, this._protoo.request("resumeVideo", {});
                                case 4:
                                  e5.next = 10;
                                  break;
                                case 6:
                                  e5.prev = 6, e5.t0 = e5.catch(1), Ti.error(
                                    "resumeVideo() | failed:%o",
                                    e5.t0
                                  ), this._emitError({
                                    code: 3026,
                                    message: e5.t0.message
                                  });
                                case 10:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[1, 6]]
                        );
                      })
                    ), function() {
                      return Pt2.apply(this, arguments);
                    })
                  },
                  {
                    key: "seekVideo",
                    value: (Rt2 = (0, a.Z)(
                      d().mark(function e4(t4) {
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ti.debug("seekVideo()"), e5.prev = 1, e5.next = 4, this._protoo.request("seekVideo", {
                                    currentTime: t4
                                  });
                                case 4:
                                  e5.next = 10;
                                  break;
                                case 6:
                                  e5.prev = 6, e5.t0 = e5.catch(1), Ti.error(
                                    "seekVideo() | failed:%o",
                                    e5.t0
                                  ), this._emitError({
                                    code: 3031,
                                    message: e5.t0.message
                                  });
                                case 10:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[1, 6]]
                        );
                      })
                    ), function(e4) {
                      return Rt2.apply(this, arguments);
                    })
                  },
                  {
                    key: "enablePeerMic",
                    value: (Et2 = (0, a.Z)(
                      d().mark(function e4(t4) {
                        var r4;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return null === (r4 = this._openTelemetry) || void 0 === r4 || r4.traceAutoComplete({
                                    spanName: "Enabling peer ".concat(
                                      t4,
                                      " Mic"
                                    ),
                                    status: 1
                                  }), Ti.debug("enablePeerMic()"), e5.prev = 2, e5.next = 5, this._protoo.request("enablePeerMic", {
                                    peerId: t4
                                  });
                                case 5:
                                  e5.next = 11;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), this._openTelemetry.pushLogs({
                                    logText: "Error enablePeerMic() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Ti.error(
                                    "enablePeerMic() | failed:%o",
                                    e5.t0
                                  );
                                case 11:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function(e4) {
                      return Et2.apply(this, arguments);
                    })
                  },
                  {
                    key: "disablePeerMic",
                    value: (Tt2 = (0, a.Z)(
                      d().mark(function e4(t4) {
                        var r4;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return null === (r4 = this._openTelemetry) || void 0 === r4 || r4.traceAutoComplete({
                                    spanName: "Disabling peer ".concat(
                                      t4,
                                      " Mic"
                                    ),
                                    status: 1
                                  }), Ti.debug("disablePeerMic()"), e5.prev = 2, e5.next = 5, this._protoo.request("disablePeerMic", {
                                    peerId: t4
                                  });
                                case 5:
                                  e5.next = 11;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), this._openTelemetry.pushLogs({
                                    logText: "Error disablePeerMic() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Ti.error(
                                    "disablePeerMic() | failed:%o",
                                    e5.t0
                                  );
                                case 11:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function(e4) {
                      return Tt2.apply(this, arguments);
                    })
                  },
                  {
                    key: "consumeWebcamStreams",
                    value: (wt2 = (0, a.Z)(
                      d().mark(function e4(t4) {
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ti.debug("consumeWebcamStreams()"), this._openTelemetry.pushLogs({
                                    logText: "consumeWebcamStreams() Calling",
                                    logType: "INFO",
                                    attributes: { peerId: t4 }
                                  }), e5.prev = 2, e5.next = 5, this._protoo.request(
                                    "consumeVideoStreams",
                                    { peerId: t4 }
                                  );
                                case 5:
                                  e5.next = 11;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), this._openTelemetry.pushLogs({
                                    logText: "Error consumeWebcamStreams() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Ti.error(
                                    "consumeWebcamStreams() | failed:%o",
                                    e5.t0
                                  );
                                case 11:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function(e4) {
                      return wt2.apply(this, arguments);
                    })
                  },
                  {
                    key: "consumeMicStreams",
                    value: (St2 = (0, a.Z)(
                      d().mark(function e4(t4) {
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ti.debug("consumeMicStreams()"), this._openTelemetry.pushLogs({
                                    logText: "consumeMicStreams() Calling",
                                    logType: "INFO",
                                    attributes: { peerId: t4 }
                                  }), e5.prev = 2, e5.next = 5, this._protoo.request(
                                    "consumeAudioStreams",
                                    { peerId: t4 }
                                  );
                                case 5:
                                  e5.next = 11;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), this._openTelemetry.pushLogs({
                                    logText: "Error consumeMicStreams() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Ti.error(
                                    "consumeMicStreams() | failed:%o",
                                    e5.t0
                                  );
                                case 11:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function(e4) {
                      return St2.apply(this, arguments);
                    })
                  },
                  {
                    key: "stopConsumingMicStreams",
                    value: (bt2 = (0, a.Z)(
                      d().mark(function e4(t4) {
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ti.debug("stopConsumingAudioStreams()"), this._openTelemetry.pushLogs({
                                    logText: "Error stopConsumingAudioStreams() Calling",
                                    logType: "INFO",
                                    attributes: { peerId: t4 }
                                  }), e5.prev = 2, e5.next = 5, this._protoo.request(
                                    "stopConsumingAudioStreams",
                                    { peerId: t4 }
                                  );
                                case 5:
                                  e5.next = 11;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), this._openTelemetry.pushLogs({
                                    logText: "Error stopConsumingMicStreams() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Ti.error(
                                    "stopConsumingMicStreams() | failed:%o",
                                    e5.t0
                                  );
                                case 11:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function(e4) {
                      return bt2.apply(this, arguments);
                    })
                  },
                  {
                    key: "stopConsumingWebcamStreams",
                    value: (yt2 = (0, a.Z)(
                      d().mark(function e4(t4) {
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ti.debug(
                                    "stopConsumingWebcamStreams()"
                                  ), this._openTelemetry.pushLogs({
                                    logText: "stopConsumingWebcamStreams() Calling",
                                    logType: "INFO",
                                    attributes: { peerId: t4 }
                                  }), e5.prev = 2, e5.next = 5, this._protoo.request(
                                    "stopConsumingVideoStreams",
                                    { peerId: t4 }
                                  );
                                case 5:
                                  e5.next = 11;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), this._openTelemetry.pushLogs({
                                    logText: "Error stopConsumingWebcamStreams() failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Ti.error(
                                    "stopConsumingWebcamStreams() | failed:%o",
                                    e5.t0
                                  );
                                case 11:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function(e4) {
                      return yt2.apply(this, arguments);
                    })
                  },
                  {
                    key: "changeMode",
                    value: (vt2 = (0, a.Z)(
                      d().mark(function e4(t4) {
                        var r4, n2, a2, i2, s2, c3, p2, u3, h3, m3, f3, _3, g3, v3, y2, b3, S3, w3, T3, E3, R3, P2, k3, O3, x2, D2 = this;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return e5.next = 2, null === (r4 = this._openTelemetry) || void 0 === r4 ? void 0 : r4.trace({
                                    spanName: "changeMode() Calling with mode : ".concat(
                                      t4
                                    )
                                  });
                                case 2:
                                  if (n2 = e5.sent, a2 = this._mode, e5.prev = 4, a2 !== t4) {
                                    e5.next = 10;
                                    break;
                                  }
                                  throw n2.setAttributes({
                                    message: "You are already in ".concat(
                                      t4,
                                      " mode"
                                    )
                                  }), null === (i2 = this._openTelemetry) || void 0 === i2 || i2.completeSpan({
                                    span: n2,
                                    status: 2,
                                    message: "changeMode() Ending"
                                  }), this._openTelemetry.pushLogs({
                                    logText: "You are already in ".concat(
                                      t4,
                                      " mode"
                                    ),
                                    logType: "INFO"
                                  }), new Error(
                                    "You are already in ".concat(
                                      t4,
                                      " mode"
                                    )
                                  );
                                case 10:
                                  if (this._mode = t4, t4 !== Ce.S.CONFERENCE) {
                                    e5.next = 42;
                                    break;
                                  }
                                  return this._consume = true, this._produce = true, this._mediasoupDevice = new l.Device({
                                    handlerName: this._handlerName
                                  }), e5.next = 17, this._protoo.request(
                                    "getRouterRtpCapabilities"
                                  );
                                case 17:
                                  return p2 = e5.sent, null == n2 || n2.setAttributes(
                                    (0, o.Z)(
                                      {},
                                      "routerRtpCapabilities",
                                      JSON.stringify(p2).toString()
                                    )
                                  ), e5.next = 21, this._mediasoupDevice.load({
                                    routerRtpCapabilities: p2
                                  });
                                case 21:
                                  if (!this._produce) {
                                    e5.next = 26;
                                    break;
                                  }
                                  return e5.next = 24, this._protoo.request(
                                    "createWebRtcTransport",
                                    {
                                      preferredProtocol: this._preferredProtocol,
                                      producing: true,
                                      consuming: false,
                                      sctpCapabilities: this._useDataChannel ? this._mediasoupDevice.sctpCapabilities : void 0
                                    }
                                  );
                                case 24:
                                  u3 = e5.sent, this.createProducerTransport(u3, n2);
                                case 26:
                                  if (!this._consume) {
                                    e5.next = 33;
                                    break;
                                  }
                                  return e5.next = 29, this._protoo.request(
                                    "createWebRtcTransport",
                                    {
                                      preferredProtocol: this._preferredProtocol,
                                      producing: false,
                                      consuming: true,
                                      sctpCapabilities: this._useDataChannel ? this._mediasoupDevice.sctpCapabilities : void 0
                                    }
                                  );
                                case 29:
                                  h3 = e5.sent, m3 = h3.id, f3 = h3.iceParameters, _3 = h3.iceCandidates, g3 = h3.dtlsParameters, v3 = h3.sctpParameters, this._recvTransport = this._mediasoupDevice.createRecvTransport(
                                    {
                                      id: m3,
                                      iceParameters: f3,
                                      iceCandidates: _3,
                                      dtlsParameters: g3,
                                      sctpParameters: v3,
                                      iceServers: this._iceServers
                                    }
                                  ), this._recvTransport.on(
                                    "connect",
                                    function(e6, t5, r5) {
                                      var n3 = e6.dtlsParameters;
                                      D2._protoo.request(
                                        "connectWebRtcTransport",
                                        {
                                          transportId: D2._recvTransport.id,
                                          dtlsParameters: n3
                                        }
                                      ).then(t5).catch(r5);
                                    }
                                  );
                                case 33:
                                  return null === (s2 = this._openTelemetry) || void 0 === s2 || s2.traceAutoComplete({
                                    spanName: "Sending changeMode request to server",
                                    status: 1
                                  }), e5.next = 36, this._protoo.request("changeMode", {
                                    mode: t4
                                  });
                                case 36:
                                  this._produce && (_i.dispatch(
                                    L({
                                      canSendMic: this._mediasoupDevice.canProduce(
                                        "audio"
                                      ),
                                      canSendWebcam: this._mediasoupDevice.canProduce(
                                        "video"
                                      )
                                    })
                                  ), this._micEnabled && this.enableMic(
                                    this.customMicrophoneAudioTrack
                                  ), y2 = C(), this._webcamEnabled && (!y2 || y2.webcamEnabled || this._externalVideo) && this.enableWebcam(
                                    this.customCameraVideoTrack,
                                    n2
                                  ), this.enableChatDataProducer()), window.SHOW_INFO && (b3 = _i.getState(), S3 = b3.me, _i.dispatch(I(S3.id))), null === (c3 = this._openTelemetry) || void 0 === c3 || c3.traceAutoComplete({
                                    spanName: "Emitting PEER_MODE_CHANGED for Peer : ".concat(
                                      this._peerId,
                                      " "
                                    ),
                                    status: 1
                                  }), this._eventEmitter.emit(
                                    "PEER_MODE_CHANGED",
                                    {
                                      peerId: this._peerId,
                                      mode: "CONFERENCE"
                                    }
                                  ), e5.next = 58;
                                  break;
                                case 42:
                                  if (t4 !== Ce.S.VIEWER) {
                                    e5.next = 58;
                                    break;
                                  }
                                  return null === (w3 = this._openTelemetry) || void 0 === w3 || w3.traceAutoComplete({
                                    spanName: "Sending changeMode request to server",
                                    status: 1
                                  }), e5.next = 46, this._protoo.request("changeMode", {
                                    mode: t4
                                  });
                                case 46:
                                  return this._consume = false, this._produce = false, this._dataConsumers.clear(), e5.next = 51, null === (T3 = this._openTelemetry) || void 0 === T3 ? void 0 : T3.trace({
                                    spanName: "Closing Trasnport",
                                    span: n2
                                  });
                                case 51:
                                  O3 = e5.sent, null === (E3 = this._sendTransport) || void 0 === E3 || E3.close(), this._sendTransport = null, null === (R3 = this._recvTransport) || void 0 === R3 || R3.close(), this._recvTransport = null, null === (P2 = this._openTelemetry) || void 0 === P2 || P2.completeSpan({
                                    span: O3,
                                    status: 1,
                                    message: "Closed Trasnport"
                                  }), null === (k3 = this._openTelemetry) || void 0 === k3 || k3.completeSpan({
                                    span: O3,
                                    status: 1,
                                    message: "changeMode() Ending"
                                  });
                                case 58:
                                  e5.next = 64;
                                  break;
                                case 60:
                                  e5.prev = 60, e5.t0 = e5.catch(4), this._openTelemetry.pushLogs({
                                    logText: "Error changeMode(".concat(
                                      t4,
                                      ") | failed"
                                    ),
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), null === (x2 = this._openTelemetry) || void 0 === x2 || x2.completeSpan({
                                    span: n2,
                                    status: 2,
                                    message: "changeMode(".concat(
                                      t4,
                                      ") | failed"
                                    )
                                  });
                                case 64:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[4, 60]]
                        );
                      })
                    ), function(e4) {
                      return vt2.apply(this, arguments);
                    })
                  },
                  {
                    key: "enablePeerWebcam",
                    value: (gt2 = (0, a.Z)(
                      d().mark(function e4(t4) {
                        var r4;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return null === (r4 = this._openTelemetry) || void 0 === r4 || r4.traceAutoComplete({
                                    spanName: "Enabling peer ".concat(
                                      t4,
                                      " Webcam"
                                    ),
                                    status: 1
                                  }), Ti.debug("enablePeerWebcam()"), e5.prev = 2, e5.next = 5, this._protoo.request(
                                    "enablePeerWebcam",
                                    { peerId: t4 }
                                  );
                                case 5:
                                  e5.next = 11;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), this._openTelemetry.pushLogs({
                                    logText: "Error enablePeerWebcam | failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Ti.error(
                                    "enablePeerWebcam() | failed:%o",
                                    e5.t0
                                  );
                                case 11:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function(e4) {
                      return gt2.apply(this, arguments);
                    })
                  },
                  {
                    key: "disablePeerWebcam",
                    value: (_t2 = (0, a.Z)(
                      d().mark(function e4(t4) {
                        var r4;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return null === (r4 = this._openTelemetry) || void 0 === r4 || r4.traceAutoComplete({
                                    spanName: "Disabling peer ".concat(
                                      t4,
                                      " Webcam"
                                    ),
                                    status: 1
                                  }), Ti.debug("disablePeerWebcam()"), e5.prev = 2, e5.next = 5, this._protoo.request(
                                    "disablePeerWebcam",
                                    { peerId: t4 }
                                  );
                                case 5:
                                  e5.next = 10;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), this._openTelemetry.pushLogs({
                                    logText: "Error disablePeerWebcam | failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  });
                                case 10:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function(e4) {
                      return _t2.apply(this, arguments);
                    })
                  },
                  {
                    key: "enableMic",
                    value: (ft2 = (0, a.Z)(
                      d().mark(function e4() {
                        var t4, r4, n2, a2, i2, s2, o2, c3, p2, l2, u3, h3, m3, f3, _3, g3, v3, y2, b3, S3, w3, T3, E3, R3, P2, C2, k3, O3, x2, D2, I2, L2, M2, A2, N2 = this, j2 = arguments;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return r4 = j2.length > 0 && void 0 !== j2[0] ? j2[0] : void 0, n2 = j2.length > 1 && void 0 !== j2[1] ? j2[1] : void 0, e5.next = 4, null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "enableMic() Calling ".concat(
                                      r4 ? "With Custom Audio Track" : "Without Custom Audio Track "
                                    ),
                                    attributes: {
                                      customAudioConfig: r4 ? JSON.stringify(r4) : "Not Specify Custom Track"
                                    },
                                    span: n2 || null
                                  });
                                case 4:
                                  if (a2 = e5.sent, Ti.debug("enableMic()"), this._micEnabled = true, !this._micProducer) {
                                    e5.next = 23;
                                    break;
                                  }
                                  return e5.next = 10, null === (i2 = this._openTelemetry) || void 0 === i2 ? void 0 : i2.trace({
                                    spanName: "Mic Producer found",
                                    span: a2
                                  });
                                case 10:
                                  return c3 = e5.sent, r4 && (null === (p2 = this._openTelemetry) || void 0 === p2 || p2.traceAutoComplete({
                                    spanName: "Stopping customAudioTrack",
                                    status: 1
                                  }), r4.getTracks().forEach(function(e6) {
                                    e6.stop();
                                  })), null === (s2 = this._openTelemetry) || void 0 === s2 || s2.completeSpan({
                                    span: c3,
                                    status: 1,
                                    message: "Resuming Mic Producer"
                                  }), this._micProducer.resume(), l2 = this._micProducer, e5.next = 17, this._sendTransport.produce({
                                    track: this._micProducer.track,
                                    encodings: this._micProducer._appData.encodings,
                                    codecOptions: this._micProducer._appData.codecOptions
                                  });
                                case 17:
                                  return this._micProducer = e5.sent, u3 = U({
                                    id: this._micProducer.id,
                                    paused: this._micProducer.paused,
                                    track: this._micProducer.track,
                                    rtpParameters: this._micProducer.rtpParameters,
                                    codec: this._micProducer.rtpParameters.codecs[0].mimeType.split(
                                      "/"
                                    )[1],
                                    encodings: l2._appData.encodings,
                                    codecOptions: l2._appData.codecOptions,
                                    instance: this._micProducer
                                  }), _i.dispatch(u3), this._eventEmitter.emit(
                                    u3.type,
                                    u3.payload
                                  ), null === (o2 = this._openTelemetry) || void 0 === o2 || o2.completeSpan({
                                    span: a2,
                                    status: 1,
                                    message: "Enable Mic Successful"
                                  }), e5.abrupt("return");
                                case 23:
                                  if (this._mediasoupDevice.canProduce(
                                    "audio"
                                  )) {
                                    e5.next = 27;
                                    break;
                                  }
                                  return Ti.error(
                                    "enableMic() | cannot produce audio"
                                  ), null === (h3 = this._openTelemetry) || void 0 === h3 || h3.completeSpan({
                                    span: a2,
                                    status: 2,
                                    message: 'enableMic() | cannot produce audio"'
                                  }), e5.abrupt("return");
                                case 27:
                                  if (e5.prev = 27, this._externalVideo) {
                                    e5.next = 57;
                                    break;
                                  }
                                  return Ti.debug(
                                    "enableMic() | calling getUserMedia()"
                                  ), e5.next = 32, this._updateMics(a2);
                                case 32:
                                  if (this._mic.device) {
                                    e5.next = 36;
                                    break;
                                  }
                                  throw null === (S3 = this._openTelemetry) || void 0 === S3 || S3.traceAutoComplete({
                                    spanName: "Mic Device Not Found",
                                    status: 2
                                  }), this._openTelemetry.pushLogs({
                                    logText: "Error Mic Device Not Found",
                                    logType: "ERROR"
                                  }), new Error("no mic devices");
                                case 36:
                                  try {
                                    r4 && "ended" == (m3 = r4.getAudioTracks()[0]).readyState && (m3 = null, null === (w3 = this._openTelemetry) || void 0 === w3 || w3.traceAutoComplete({
                                      spanName: "Dispose Audio Custom Track, it is in ended state",
                                      status: 2
                                    }));
                                  } catch (e6) {
                                    this._openTelemetry.pushLogs({
                                      logText: "Error Invalid Custom Audio Track Passed. Reverting to default Error",
                                      logType: "ERROR",
                                      attributes: { error: e6.message }
                                    }), console.log(
                                      "Invalid Custom Audio Track Passed. Reverting to default Error: ".concat(
                                        e6
                                      )
                                    );
                                  }
                                  if (m3) {
                                    e5.next = 55;
                                    break;
                                  }
                                  return e5.next = 40, null === (T3 = this._openTelemetry) || void 0 === T3 ? void 0 : T3.trace({
                                    spanName: "Creating Track",
                                    span: a2
                                  });
                                case 40:
                                  return R3 = e5.sent, e5.prev = 41, e5.next = 44, navigator.mediaDevices.getUserMedia({
                                    audio: {
                                      deviceId: {
                                        ideal: this._mic.device.deviceId
                                      },
                                      channelCount: 1,
                                      noiseSuppression: true,
                                      echoCancellation: true,
                                      googEchoCancellation: true,
                                      googEchoCancellation2: true,
                                      googAutoGainControl: true,
                                      googAutoGainControl2: true,
                                      googNoiseSuppression: true,
                                      googNoiseSuppression2: true,
                                      googHighpassFilter: true
                                    }
                                  });
                                case 44:
                                  P2 = e5.sent, e5.next = 53;
                                  break;
                                case 47:
                                  return e5.prev = 47, e5.t0 = e5.catch(41), this._openTelemetry.pushLogs({
                                    logText: "Error in getUserMedia for audio",
                                    logType: "ERROR",
                                    attributes: {
                                      error: JSON.stringify(e5.t0)
                                    }
                                  }), null === (C2 = this._openTelemetry) || void 0 === C2 || C2.completeSpan({
                                    span: a2,
                                    status: 2,
                                    message: "Error in getUserMedia for audio"
                                  }), "Permission denied" === e5.t0.message || "NotAllowedError" === e5.t0.name ? (this._openTelemetry.pushLogs({
                                    logText: "Error Invalid Custom Audio Track Passed. Reverting to default Error: ".concat(
                                      error
                                    ),
                                    logType: "ERROR"
                                  }), this._emitError(
                                    Ee.H.ERROR_GET_AUDIO_MEDIA_PERMISSION_DENIED
                                  )) : this._emitError(
                                    Ee.H.ERROR_GET_AUDIO_MEDIA
                                  ), e5.abrupt("return");
                                case 53:
                                  m3 = P2.getAudioTracks()[0], null === (E3 = this._openTelemetry) || void 0 === E3 || E3.completeSpan({
                                    message: "Audio Track Generated",
                                    span: R3,
                                    status: 1
                                  });
                                case 55:
                                  e5.next = 61;
                                  break;
                                case 57:
                                  return e5.next = 59, this._getExternalVideoStream();
                                case 59:
                                  k3 = e5.sent, m3 = k3.getAudioTracks()[0].clone();
                                case 61:
                                  return e5.next = 63, null === (f3 = this._openTelemetry) || void 0 === f3 ? void 0 : f3.trace({
                                    spanName: "Generating Producer Configuration",
                                    span: a2
                                  });
                                case 63:
                                  return O3 = e5.sent, x2 = { opusStereo: 1, opusDtx: 1 }, r4 && (D2 = r4.encoderConfig ? de.v.audioProfiles[r4.encoderConfig] : de.v.audioProfiles.speech_standard, x2 = {
                                    opusStereo: D2.stereo ? 1 : 0,
                                    opusFec: D2.fec ? 1 : 0,
                                    opusDtx: D2.dtx ? 1 : 0,
                                    opusMaxPlaybackRate: D2.maxPlaybackRate,
                                    opusPtime: D2.packetTime
                                  }), L2 = {
                                    encodings: I2 = [
                                      { networkPriority: "high" }
                                    ],
                                    codecOptions: x2
                                  }, null === (_3 = this._openTelemetry) || void 0 === _3 || _3.traceAutoComplete({
                                    spanName: "Generated AppData",
                                    attributes: {
                                      appData: JSON.stringify(L2)
                                    },
                                    status: 1
                                  }), null === (g3 = this._openTelemetry) || void 0 === g3 || g3.completeSpan({
                                    span: O3,
                                    status: 1,
                                    message: "Producer Configuration Generated"
                                  }), e5.next = 73, null === (v3 = this._openTelemetry) || void 0 === v3 ? void 0 : v3.trace({
                                    spanName: "Creating Mic Producer",
                                    span: a2
                                  });
                                case 73:
                                  return O3 = e5.sent, e5.next = 76, this._sendTransport.produce({
                                    track: m3,
                                    encodings: I2,
                                    codecOptions: x2,
                                    appData: L2
                                  });
                                case 76:
                                  this._micProducer = e5.sent, M2 = U({
                                    id: this._micProducer.id,
                                    paused: this._micProducer.paused,
                                    track: this._micProducer.track,
                                    rtpParameters: this._micProducer.rtpParameters,
                                    codec: this._micProducer.rtpParameters.codecs[0].mimeType.split(
                                      "/"
                                    )[1],
                                    encodings: I2,
                                    codecOptions: x2,
                                    instance: this._micProducer
                                  }), _i.dispatch(M2), this._eventEmitter.emit(
                                    M2.type,
                                    M2.payload
                                  ), this._micProducer.on(
                                    "transportclose",
                                    function() {
                                      var e6, t5 = Z(N2._micProducer.id);
                                      _i.dispatch(t5), N2._eventEmitter.emit(
                                        t5.type,
                                        t5.payload
                                      ), null === (e6 = N2._micProducer) || void 0 === e6 || e6.close(), N2._micProducer = null;
                                    }
                                  ), this._micProducer.on(
                                    "trackended",
                                    function() {
                                      var e6;
                                      null === (e6 = N2._openTelemetry) || void 0 === e6 || e6.traceAutoComplete({
                                        spanName: "this._micProducer trackended or Microphone disconnected!",
                                        status: 2
                                      }), _i.dispatch(
                                        se({
                                          type: "error",
                                          text: "Microphone disconnected!"
                                        })
                                      ), N2.disableMic(false, a2).catch(
                                        function() {
                                        }
                                      );
                                    }
                                  ), null === (y2 = this._openTelemetry) || void 0 === y2 || y2.completeSpan({
                                    span: O3,
                                    status: 1,
                                    message: "Mic Producer Created"
                                  }), null === (b3 = this._openTelemetry) || void 0 === b3 || b3.completeSpan({
                                    span: a2,
                                    status: 1,
                                    message: "Enable Mic Successful"
                                  }), e5.next = 95;
                                  break;
                                case 86:
                                  return e5.prev = 86, e5.t1 = e5.catch(27), null === (A2 = this._openTelemetry) || void 0 === A2 || A2.completeSpan({
                                    span: a2,
                                    status: 2,
                                    message: "Error enabling microphone: ".concat(
                                      e5.t1
                                    )
                                  }), this._openTelemetry.pushLogs({
                                    logText: "Error enabling microphone",
                                    logType: "ERROR",
                                    attributes: { error: e5.t1.message }
                                  }), Ti.error(
                                    "enableMic() | failed:%o",
                                    e5.t1
                                  ), _i.dispatch(
                                    se({
                                      type: "error",
                                      text: "Error enabling microphone: ".concat(
                                        e5.t1
                                      )
                                    })
                                  ), e5.next = 94, this._protoo.request("produceError", {
                                    mediaType: "audio",
                                    message: e5.t1.message
                                  });
                                case 94:
                                  m3 && m3.stop();
                                case 95:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [
                            [27, 86],
                            [41, 47]
                          ]
                        );
                      })
                    ), function() {
                      return ft2.apply(this, arguments);
                    })
                  },
                  {
                    key: "disableMic",
                    value: (mt2 = (0, a.Z)(
                      d().mark(function e4() {
                        var t4, r4, n2, a2, i2, s2, o2, c3, p2, l2, u3, h3, m3, f3, _3, g3, v3, y2, b3 = arguments;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return n2 = b3.length > 0 && void 0 !== b3[0] && b3[0], a2 = b3.length > 1 && void 0 !== b3[1] ? b3[1] : void 0, Ti.debug("disableMic()"), e5.next = 5, null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "disableMic() Calling",
                                    status: 1,
                                    span: a2 || null
                                  });
                                case 5:
                                  if (i2 = e5.sent, this._micProducer) {
                                    e5.next = 9;
                                    break;
                                  }
                                  return null === (s2 = this._openTelemetry) || void 0 === s2 || s2.completeSpan({
                                    span: i2,
                                    status: 2,
                                    message: "Mic Producer Not found"
                                  }), e5.abrupt("return");
                                case 9:
                                  return e5.next = 11, null === (r4 = this._openTelemetry) || void 0 === r4 ? void 0 : r4.trace({
                                    spanName: "Closing Mic Producer",
                                    span: i2,
                                    status: 1
                                  });
                                case 11:
                                  if (o2 = e5.sent, this._micEnabled = false, !this._micProducer || n2) {
                                    e5.next = 35;
                                    break;
                                  }
                                  return e5.next = 16, null === (c3 = this._openTelemetry) || void 0 === c3 ? void 0 : c3.trace({
                                    spanName: "Pausing Mic Producer",
                                    span: o2,
                                    status: 1
                                  });
                                case 16:
                                  return u3 = e5.sent, this._micProducer.pause(), h3 = Z(this._micProducer.id), null === (p2 = this._openTelemetry) || void 0 === p2 || p2.completeSpan({
                                    span: u3,
                                    status: 1,
                                    message: "Pause Mic Successfully"
                                  }), _i.dispatch(h3), this._eventEmitter.emit(
                                    h3.type,
                                    h3.payload
                                  ), e5.prev = 22, e5.next = 25, this._protoo.request("closeProducer", {
                                    producerId: this._micProducer.id
                                  });
                                case 25:
                                  null === (m3 = this._openTelemetry) || void 0 === m3 || m3.completeSpan({
                                    span: o2,
                                    status: 1,
                                    message: "Requested Server to Close Producer"
                                  }), e5.next = 33;
                                  break;
                                case 28:
                                  e5.prev = 28, e5.t0 = e5.catch(22), _i.dispatch(
                                    se({
                                      type: "error",
                                      text: "Error closing server-side mic Producer: ".concat(
                                        e5.t0
                                      )
                                    })
                                  ), null === (f3 = this._openTelemetry) || void 0 === f3 || f3.completeSpan({
                                    span: i2,
                                    status: 2,
                                    message: "Error closing server-side mic Producer closeProducer :".concat(
                                      n2
                                    )
                                  }), this._openTelemetry.pushLogs({
                                    logText: "Error closing server-side mic Producer closeProducer :".concat(
                                      n2
                                    ),
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  });
                                case 33:
                                  return null === (l2 = this._openTelemetry) || void 0 === l2 || l2.completeSpan({
                                    span: i2,
                                    status: 1,
                                    message: "Mic Disabled Successfully"
                                  }), e5.abrupt("return");
                                case 35:
                                  return this._micProducer.close(), _3 = Z(this._micProducer.id), _i.dispatch(_3), this._eventEmitter.emit(
                                    _3.type,
                                    _3.payload
                                  ), e5.prev = 39, e5.next = 42, this._protoo.request("closeProducer", {
                                    producerId: this._micProducer.id
                                  });
                                case 42:
                                  null === (g3 = this._openTelemetry) || void 0 === g3 || g3.completeSpan({
                                    span: o2,
                                    status: 1,
                                    message: "Requested Server to Close Producer"
                                  }), null === (v3 = this._openTelemetry) || void 0 === v3 || v3.completeSpan({
                                    span: i2,
                                    status: 1,
                                    message: "Mic Disabled Successfully"
                                  }), e5.next = 51;
                                  break;
                                case 46:
                                  e5.prev = 46, e5.t1 = e5.catch(39), _i.dispatch(
                                    se({
                                      type: "error",
                                      text: "Error closing server-side mic Producer: ".concat(
                                        e5.t1
                                      )
                                    })
                                  ), null === (y2 = this._openTelemetry) || void 0 === y2 || y2.completeSpan({
                                    span: i2,
                                    status: 2,
                                    message: "Error closing server-side mic Producer closeProducer :".concat(
                                      n2
                                    )
                                  }), this._openTelemetry.pushLogs({
                                    logText: "Error closing server-side mic Producer closeProducer :".concat(
                                      n2
                                    ),
                                    logType: "ERROR",
                                    attributes: { error: e5.t1.message }
                                  });
                                case 51:
                                  this._micProducer = null;
                                case 52:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [
                            [22, 28],
                            [39, 46]
                          ]
                        );
                      })
                    ), function() {
                      return mt2.apply(this, arguments);
                    })
                  },
                  {
                    key: "muteMic",
                    value: (ht2 = (0, a.Z)(
                      d().mark(function e4() {
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ti.debug("muteMic()"), this._micEnabled = false, this._micProducer.pause(), e5.prev = 3, e5.next = 6, this._protoo.request("pauseProducer", {
                                    producerId: this._micProducer.id
                                  });
                                case 6:
                                  _i.dispatch({
                                    type: "SET_PRODUCER_PAUSED",
                                    payload: {
                                      producerId: this._micProducer.id
                                    }
                                  }), e5.next = 14;
                                  break;
                                case 9:
                                  e5.prev = 9, e5.t0 = e5.catch(3), Ti.error(
                                    "muteMic() | failed: %o",
                                    e5.t0
                                  ), this._openTelemetry.pushLogs({
                                    logText: "Error pausing server-side mic Producer",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), _i.dispatch(
                                    se({
                                      type: "error",
                                      text: "Error pausing server-side mic Producer: ".concat(
                                        e5.t0
                                      )
                                    })
                                  );
                                case 14:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[3, 9]]
                        );
                      })
                    ), function() {
                      return ht2.apply(this, arguments);
                    })
                  },
                  {
                    key: "unmuteMic",
                    value: (ut2 = (0, a.Z)(
                      d().mark(function e4() {
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ti.debug("unmuteMic()"), this._micEnabled = true, this._micProducer.resume(), e5.prev = 3, e5.next = 6, this._protoo.request("resumeProducer", {
                                    producerId: this._micProducer.id
                                  });
                                case 6:
                                  _i.dispatch({
                                    type: "SET_PRODUCER_RESUMED",
                                    payload: {
                                      producerId: this._micProducer.id
                                    }
                                  }), e5.next = 14;
                                  break;
                                case 9:
                                  e5.prev = 9, e5.t0 = e5.catch(3), Ti.error(
                                    "unmuteMic() | failed: %o",
                                    e5.t0
                                  ), this._openTelemetry.pushLogs({
                                    logText: "Error resuming server-side mic Producer",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), _i.dispatch(
                                    se({
                                      type: "error",
                                      text: "Error resuming server-side mic Producer: ".concat(
                                        e5.t0
                                      )
                                    })
                                  );
                                case 14:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[3, 9]]
                        );
                      })
                    ), function() {
                      return ut2.apply(this, arguments);
                    })
                  },
                  {
                    key: "enableWebcam",
                    value: (lt2 = (0, a.Z)(
                      d().mark(function e4() {
                        var t4, r4, n2, a2, i2, s2, o2, c3, p2, l2, u3, h3, m3, f3, _3, g3, v3, y2, b3, S3, w3, T3, E3, R3, P2, C2, k3, O3, x2, D2, I2, L2, M2, A2 = this, N2 = arguments;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return r4 = N2.length > 0 && void 0 !== N2[0] ? N2[0] : void 0, n2 = N2.length > 1 && void 0 !== N2[1] ? N2[1] : void 0, e5.next = 4, null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "enableWebcam() Calling ".concat(
                                      r4 ? "With Custom Video Track" : "Without Custom Video Track "
                                    ),
                                    attributes: {
                                      customVideoConfig: r4 ? JSON.stringify(r4) : "Not Specify Custom Track"
                                    },
                                    span: n2 || null
                                  });
                                case 4:
                                  if (a2 = e5.sent, Ti.debug("enableWebcam()"), this._webcamEnabled = true, !this._webcamProducer) {
                                    e5.next = 10;
                                    break;
                                  }
                                  return null === (i2 = this._openTelemetry) || void 0 === i2 || i2.completeSpan({
                                    span: a2,
                                    status: 2,
                                    message: "Webcam Producer found"
                                  }), e5.abrupt("return");
                                case 10:
                                  if (this._mediasoupDevice.canProduce(
                                    "video"
                                  )) {
                                    e5.next = 14;
                                    break;
                                  }
                                  return null === (s2 = this._openTelemetry) || void 0 === s2 || s2.completeSpan({
                                    span: a2,
                                    status: 2,
                                    message: "enableWebcam() | cannot produce video"
                                  }), Ti.error(
                                    "enableWebcam() | cannot produce video"
                                  ), e5.abrupt("return");
                                case 14:
                                  if (_i.dispatch(W(true)), p2 = this._webcam.resolution, e5.prev = 16, this._externalVideo) {
                                    e5.next = 56;
                                    break;
                                  }
                                  return e5.next = 20, this._updateWebcams(a2);
                                case 20:
                                  if (c3 = this._webcam.device) {
                                    e5.next = 25;
                                    break;
                                  }
                                  throw null === (g3 = this._openTelemetry) || void 0 === g3 || g3.traceAutoComplete({
                                    spanName: "Webcam Device Not Found",
                                    status: 2
                                  }), this._openTelemetry.pushLogs({
                                    logText: "Error Webcam Device Not Found",
                                    logType: "ERROR"
                                  }), new Error("no webcam devices");
                                case 25:
                                  Ti.debug(
                                    "enableWebcam() | calling getUserMedia()"
                                  );
                                  try {
                                    r4 && "ended" == (o2 = r4.getVideoTracks()[0]).readyState && (o2 = null, null === (v3 = this._openTelemetry) || void 0 === v3 || v3.traceAutoComplete({
                                      spanName: "Dispose Video Custom Track, it is in ended state",
                                      status: 2
                                    }));
                                  } catch (e6) {
                                    this._openTelemetry.pushLogs({
                                      logText: "Error Invalid Custom Track Passed. Reverting to default Error",
                                      logType: "ERROR",
                                      attributes: { error: e6.message }
                                    }), console.log(
                                      "Invalid Custom Track Passed. Reverting to default Error: ".concat(
                                        e6
                                      )
                                    );
                                  }
                                  if (o2) {
                                    e5.next = 54;
                                    break;
                                  }
                                  return e5.next = 30, null === (y2 = this._openTelemetry) || void 0 === y2 ? void 0 : y2.trace({
                                    spanName: "Creating Track",
                                    span: a2
                                  });
                                case 30:
                                  if (b3 = e5.sent, e5.prev = 31, "hd" != this._webcam.resolution) {
                                    e5.next = 39;
                                    break;
                                  }
                                  return e5.next = 35, Re.VideoSDK.createCameraVideoTrack({
                                    cameraId: c3.deviceId,
                                    encoderConfig: "h720p_w1280p",
                                    multiStream: this._useSimulcast
                                  });
                                case 35:
                                  r4 = e5.sent, b3.setAttributes({
                                    customVideoTrackConfig: JSON.stringify({
                                      encoderConfig: "h720p_w1280p",
                                      multiStream: this._useSimulcast
                                    })
                                  }), e5.next = 43;
                                  break;
                                case 39:
                                  return e5.next = 41, Re.VideoSDK.createCameraVideoTrack({
                                    cameraId: c3.deviceId,
                                    encoderConfig: "h540p_w960p",
                                    multiStream: this._useSimulcast
                                  });
                                case 41:
                                  r4 = e5.sent, b3.setAttributes({
                                    customVideoTrackConfig: JSON.stringify({
                                      encoderConfig: "h540p_w960p",
                                      multiStream: this._useSimulcast
                                    })
                                  });
                                case 43:
                                  o2 = r4.getVideoTracks()[0], null === (S3 = this._openTelemetry) || void 0 === S3 || S3.completeSpan({
                                    message: "Video Track Generated",
                                    span: b3,
                                    status: 1
                                  }), e5.next = 54;
                                  break;
                                case 47:
                                  return e5.prev = 47, e5.t0 = e5.catch(31), this._openTelemetry.pushLogs({
                                    logText: "Error Creating VideoTrack",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), null === (w3 = this._openTelemetry) || void 0 === w3 || w3.completeSpan({
                                    message: "Error Creating VideoTrack",
                                    span: a2,
                                    status: 2
                                  }), console.log(
                                    "Error Creating VideoTrack: ",
                                    e5.t0
                                  ), "Permission denied" === e5.t0.message || "NotAllowedError" === e5.t0.name ? this._emitError(
                                    Ee.H.ERROR_GET_VIDEO_MEDIA_PERMISSION_DENIED
                                  ) : this._emitError(
                                    Ee.H.ERROR_GET_VIDEO_MEDIA
                                  ), e5.abrupt("return");
                                case 54:
                                  e5.next = 61;
                                  break;
                                case 56:
                                  return c3 = { label: "external video" }, e5.next = 59, this._getExternalVideoStream();
                                case 59:
                                  T3 = e5.sent, o2 = T3.getVideoTracks()[0].clone();
                                case 61:
                                  return e5.next = 63, null === (l2 = this._openTelemetry) || void 0 === l2 ? void 0 : l2.trace({
                                    spanName: "Generating Producer Configuration",
                                    span: a2
                                  });
                                case 63:
                                  if (E3 = e5.sent, C2 = { videoGoogleStartBitrate: 1e3 }, !this._forceH264) {
                                    e5.next = 72;
                                    break;
                                  }
                                  if (P2 = this._mediasoupDevice.rtpCapabilities.codecs.find(
                                    function(e6) {
                                      return "video/h264" === e6.mimeType.toLowerCase();
                                    }
                                  )) {
                                    e5.next = 70;
                                    break;
                                  }
                                  throw this._openTelemetry.pushLogs({
                                    logText: "Error desired H264 codec+configuration is not supported",
                                    logType: "ERROR"
                                  }), new Error(
                                    "desired H264 codec+configuration is not supported"
                                  );
                                case 70:
                                  e5.next = 77;
                                  break;
                                case 72:
                                  if (!this._forceVP9) {
                                    e5.next = 77;
                                    break;
                                  }
                                  if (P2 = this._mediasoupDevice.rtpCapabilities.codecs.find(
                                    function(e6) {
                                      return "video/vp9" === e6.mimeType.toLowerCase();
                                    }
                                  )) {
                                    e5.next = 77;
                                    break;
                                  }
                                  throw this._openTelemetry.pushLogs({
                                    logText: "Error desired VP9 codec+configuration is not supported",
                                    logType: "ERROR"
                                  }), new Error(
                                    "desired VP9 codec+configuration is not supported"
                                  );
                                case 77:
                                  o2 ? (k3 = o2.getConstraints(), R3 = be(false, k3.width, k3.height, {
                                    simulcast: r4.multiStream
                                  })) : this._useSimulcast && (O3 = this._mediasoupDevice.rtpCapabilities.codecs.find(
                                    function(e6) {
                                      return "video" === e6.kind;
                                    }
                                  ), R3 = this._forceVP9 && P2 || "video/vp9" === O3.mimeType.toLowerCase() ? bi : yi[this._webcam.resolution]), x2 = {};
                                  try {
                                    x2 = {
                                      encodings: R3,
                                      width: r4 ? null === (D2 = o2) || void 0 === D2 ? void 0 : D2.getConstraints().width : vi[p2].width.ideal,
                                      height: r4 ? null === (I2 = o2) || void 0 === I2 ? void 0 : I2.getConstraints().height : vi[p2].height.ideal
                                    };
                                  } catch (e6) {
                                    this._openTelemetry.pushLogs({
                                      logText: "Error Enable Webcam AppData",
                                      logType: "ERROR",
                                      attributes: { error: e6.message }
                                    }), console.log(e6);
                                  }
                                  return null === (u3 = this._openTelemetry) || void 0 === u3 || u3.traceAutoComplete({
                                    spanName: "Track Generated with height ".concat(x2.height, " and width ").concat(
                                      x2.width,
                                      " with multiStream "
                                    ).concat(this._useSimulcast),
                                    attributes: {
                                      appData: JSON.stringify(x2)
                                    },
                                    status: 1
                                  }), null === (h3 = this._openTelemetry) || void 0 === h3 || h3.completeSpan({
                                    span: E3,
                                    status: 1,
                                    message: "Producer Configuration Generated"
                                  }), e5.next = 84, null === (m3 = this._openTelemetry) || void 0 === m3 ? void 0 : m3.trace({
                                    spanName: "Creating Webcam Producer",
                                    span: a2
                                  });
                                case 84:
                                  return E3 = e5.sent, e5.next = 87, this._sendTransport.produce({
                                    track: o2,
                                    encodings: R3,
                                    codecOptions: C2,
                                    codec: P2,
                                    appData: x2
                                  });
                                case 87:
                                  this._webcamProducer = e5.sent, L2 = U({
                                    id: this._webcamProducer.id,
                                    deviceLabel: c3.label,
                                    type: this._getWebcamType(c3),
                                    paused: this._webcamProducer.paused,
                                    track: this._webcamProducer.track,
                                    rtpParameters: this._webcamProducer.rtpParameters,
                                    codec: this._webcamProducer.rtpParameters.codecs[0].mimeType.split(
                                      "/"
                                    )[1],
                                    instance: this._webcamProducer
                                  }), _i.dispatch(L2), this._eventEmitter.emit(
                                    L2.type,
                                    L2.payload
                                  ), this._webcamProducer.on(
                                    "transportclose",
                                    function() {
                                      var e6, t5 = Z(A2._webcamProducer.id);
                                      _i.dispatch(t5), A2._eventEmitter.emit(
                                        t5.type,
                                        t5.payload
                                      ), null === (e6 = A2._webcamProducer) || void 0 === e6 || e6.close(), A2._webcamProducer = null;
                                    }
                                  ), this._webcamProducer.on(
                                    "trackended",
                                    function() {
                                      var e6;
                                      null === (e6 = A2._openTelemetry) || void 0 === e6 || e6.traceAutoComplete({
                                        spanName: " this._webcamProducer trackended or Webcam disconnected!",
                                        status: 2
                                      }), _i.dispatch(
                                        se({
                                          type: "error",
                                          text: "Webcam disconnected!"
                                        })
                                      ), A2.disableWebcam(a2).catch(
                                        function() {
                                        }
                                      );
                                    }
                                  ), null === (f3 = this._openTelemetry) || void 0 === f3 || f3.completeSpan({
                                    span: E3,
                                    status: 1,
                                    message: "Webcam Producer Created"
                                  }), null === (_3 = this._openTelemetry) || void 0 === _3 || _3.completeSpan({
                                    span: a2,
                                    status: 1,
                                    message: "Enable Webcam Successful"
                                  }), e5.next = 106;
                                  break;
                                case 97:
                                  return e5.prev = 97, e5.t1 = e5.catch(16), console.log(
                                    "enableWebcam() | failed:%o",
                                    e5.t1
                                  ), this._openTelemetry.pushLogs({
                                    logText: "Error enabling webcam",
                                    logType: "ERROR",
                                    attributes: { error: e5.t1.message }
                                  }), null === (M2 = this._openTelemetry) || void 0 === M2 || M2.completeSpan({
                                    span: a2,
                                    status: 2,
                                    message: "Error enabling webcam"
                                  }), _i.dispatch(
                                    se({
                                      type: "error",
                                      text: "Error enabling webcam: ".concat(
                                        e5.t1
                                      )
                                    })
                                  ), e5.next = 105, this._protoo.request("produceError", {
                                    mediaType: "video",
                                    message: e5.t1.message
                                  });
                                case 105:
                                  o2 && o2.stop();
                                case 106:
                                  _i.dispatch(W(false));
                                case 107:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [
                            [16, 97],
                            [31, 47]
                          ]
                        );
                      })
                    ), function() {
                      return lt2.apply(this, arguments);
                    })
                  },
                  {
                    key: "disableWebcam",
                    value: (pt2 = (0, a.Z)(
                      d().mark(function e4() {
                        var t4, r4, n2, a2, i2, s2, o2, c3, p2, l2, u3 = arguments;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return a2 = u3.length > 0 && void 0 !== u3[0] ? u3[0] : void 0, e5.next = 3, null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "disableWebcam() Calling",
                                    status: 1,
                                    span: a2 || null
                                  });
                                case 3:
                                  if (i2 = e5.sent, Ti.debug("disableWebcam()"), this._webcamEnabled = false, this._webcamProducer) {
                                    e5.next = 9;
                                    break;
                                  }
                                  return null === (s2 = this._openTelemetry) || void 0 === s2 || s2.completeSpan({
                                    span: i2,
                                    status: 2,
                                    message: "Webcam Producer Not found"
                                  }), e5.abrupt("return");
                                case 9:
                                  return e5.next = 11, null === (r4 = this._openTelemetry) || void 0 === r4 ? void 0 : r4.trace({
                                    spanName: "Closing Webcam Producer",
                                    span: i2,
                                    status: 1
                                  });
                                case 11:
                                  return o2 = e5.sent, this._webcamProducer.close(), c3 = Z(this._webcamProducer.id), _i.dispatch(c3), this._eventEmitter.emit(
                                    c3.type,
                                    c3.payload
                                  ), e5.prev = 16, e5.next = 19, this._protoo.request("closeProducer", {
                                    producerId: this._webcamProducer.id
                                  });
                                case 19:
                                  null === (p2 = this._openTelemetry) || void 0 === p2 || p2.completeSpan({
                                    span: o2,
                                    status: 1,
                                    message: "Requested Server to Close Producer"
                                  }), e5.next = 27;
                                  break;
                                case 22:
                                  e5.prev = 22, e5.t0 = e5.catch(16), this._openTelemetry.pushLogs({
                                    logText: "Error closing server-side webcam Producer",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), null === (l2 = this._openTelemetry) || void 0 === l2 || l2.completeSpan({
                                    span: i2,
                                    status: 2,
                                    message: "Error closing server-side webcam Producer: ".concat(
                                      e5.t0
                                    )
                                  }), _i.dispatch(
                                    se({
                                      type: "error",
                                      text: "Error closing server-side webcam Producer: ".concat(
                                        e5.t0
                                      )
                                    })
                                  );
                                case 27:
                                  this._webcamProducer = null, null === (n2 = this._openTelemetry) || void 0 === n2 || n2.completeSpan({
                                    span: i2,
                                    status: 1,
                                    message: "Webcam Disabled Successfully"
                                  });
                                case 29:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[16, 22]]
                        );
                      })
                    ), function() {
                      return pt2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getMics",
                    value: (dt2 = (0, a.Z)(
                      d().mark(function e4() {
                        var t4;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return t4 = [], e5.prev = 1, e5.next = 4, this._updateMics();
                                case 4:
                                  this._mics.forEach(function(e6, r4) {
                                    t4.push({ deviceId: r4, label: e6.label });
                                  }), e5.next = 11;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(1), Ti.error("getMics() | Error", e5.t0), this._openTelemetry.pushLogs({
                                    logText: "Error getMics() | Error",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  });
                                case 11:
                                  return e5.abrupt("return", t4);
                                case 12:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[1, 7]]
                        );
                      })
                    ), function() {
                      return dt2.apply(this, arguments);
                    })
                  },
                  {
                    key: "changeMic",
                    value: (ct2 = (0, a.Z)(
                      d().mark(function e4(t4) {
                        var r4, a2, i2, s2, o2, c3, p2, l2, u3, h3, m3, f3;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return e5.next = 2, null === (r4 = this._openTelemetry) || void 0 === r4 ? void 0 : r4.trace({
                                    spanName: "changeMic() Calling"
                                  });
                                case 2:
                                  if (a2 = e5.sent, e5.prev = 3, "object" != n(t4)) {
                                    e5.next = 12;
                                    break;
                                  }
                                  return a2.setAttributes({
                                    customTrackConfig: JSON.stringify(t4)
                                  }), e5.next = 8, this.disableMic(true, a2);
                                case 8:
                                  return e5.next = 10, this.enableMic(t4, a2);
                                case 10:
                                  e5.next = 32;
                                  break;
                                case 12:
                                  return c3 = t4, e5.next = 15, this._updateMics();
                                case 15:
                                  return p2 = Array.from(this._mics.keys()), l2 = p2.length, u3 = this._mic.device ? this._mic.device.deviceId : void 0, null != c3 && null != c3 ? h3 = p2.indexOf(c3) : (h3 = p2.indexOf(u3)) < l2 - 1 ? h3++ : h3 = 0, this._mic.device = this._mics.get(
                                    p2[h3]
                                  ), e5.next = 22, null === (i2 = this._openTelemetry) || void 0 === i2 ? void 0 : i2.trace({
                                    spanName: "Getting Selected Mic",
                                    span: a2,
                                    attributes: {
                                      selectedWebcam: this._mic.device ? JSON.stringify(
                                        this._mic.device
                                      ) : "No Mic devices"
                                    }
                                  });
                                case 22:
                                  if (m3 = e5.sent, this._mic.device) {
                                    e5.next = 26;
                                    break;
                                  }
                                  throw this._openTelemetry.pushLogs({
                                    logText: "Error changeMic : No mic Found",
                                    logType: "ERROR"
                                  }), new Error("No mic Found");
                                case 26:
                                  return e5.next = 28, this.disableMic(true, a2);
                                case 28:
                                  return e5.next = 30, this.enableMic(void 0, a2);
                                case 30:
                                  null === (s2 = this._openTelemetry) || void 0 === s2 || s2.completeSpan({
                                    span: m3,
                                    status: 1,
                                    message: "Done"
                                  }), null === (o2 = this._openTelemetry) || void 0 === o2 || o2.completeSpan({
                                    span: a2,
                                    status: 1,
                                    message: "changeMic() Ending"
                                  });
                                case 32:
                                  e5.next = 38;
                                  break;
                                case 34:
                                  e5.prev = 34, e5.t0 = e5.catch(3), null === (f3 = this._openTelemetry) || void 0 === f3 || f3.completeSpan({
                                    span: a2,
                                    status: 2,
                                    message: "changeMic() | Error ".concat(
                                      e5.t0
                                    )
                                  }), this._openTelemetry.pushLogs({
                                    logText: "Error changeMic() | Error",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  });
                                case 38:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[3, 34]]
                        );
                      })
                    ), function(e4) {
                      return ct2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getWebcams",
                    value: (ot2 = (0, a.Z)(
                      d().mark(function e4() {
                        var t4;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return t4 = [], e5.prev = 1, e5.next = 4, this._updateWebcams();
                                case 4:
                                  this._webcams.forEach(function(e6, r4) {
                                    t4.push({
                                      deviceId: r4,
                                      label: e6.label,
                                      facingMode: e6.facing || "environment"
                                    });
                                  }), e5.next = 11;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(1), Ti.error(
                                    "getWebcams() | failed %o",
                                    e5.t0
                                  ), this._openTelemetry.pushLogs({
                                    logText: "Error getWebcams() | failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  });
                                case 11:
                                  return e5.abrupt("return", t4);
                                case 12:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[1, 7]]
                        );
                      })
                    ), function() {
                      return ot2.apply(this, arguments);
                    })
                  },
                  {
                    key: "replaceWebcamStream",
                    value: (st2 = (0, a.Z)(
                      d().mark(function e4(t4) {
                        var r4;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (!this._webcamProducer) {
                                    e5.next = 7;
                                    break;
                                  }
                                  return r4 = t4.getVideoTracks()[0], e5.next = 4, this._webcamProducer.replaceTrack({
                                    track: r4
                                  });
                                case 4:
                                  this._eventEmitter.emit(
                                    "UPDATE_PRODUCER",
                                    { producer: this._webcamProducer }
                                  ), e5.next = 11;
                                  break;
                                case 7:
                                  return e5.next = 9, this.disableWebcam();
                                case 9:
                                  return e5.next = 11, this.enableWebcam(t4);
                                case 11:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return st2.apply(this, arguments);
                    })
                  },
                  {
                    key: "changeWebcam",
                    value: (it2 = (0, a.Z)(
                      d().mark(function e4(t4) {
                        var r4, a2, i2, s2, o2, c3, p2, l2, u3, h3, m3;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return e5.next = 2, null === (r4 = this._openTelemetry) || void 0 === r4 ? void 0 : r4.trace({
                                    spanName: "changeWebcam() Calling"
                                  });
                                case 2:
                                  if (a2 = e5.sent, _i.dispatch(W(true)), "object" !== n(t4)) {
                                    e5.next = 20;
                                    break;
                                  }
                                  return a2.setAttributes({
                                    customTrackConfig: JSON.stringify(t4)
                                  }), e5.prev = 6, e5.next = 9, this.disableWebcam(a2);
                                case 9:
                                  return e5.next = 11, this.enableWebcam(t4, a2);
                                case 11:
                                  e5.next = 18;
                                  break;
                                case 13:
                                  e5.prev = 13, e5.t0 = e5.catch(6), Ti.error(
                                    "changeWebcam() | failed: %o",
                                    e5.t0
                                  ), this._openTelemetry.pushLogs({
                                    logText: "Error Could not change webcam",
                                    logType: "ERROR",
                                    attributes: {
                                      object: JSON.stringify(t4),
                                      error: e5.t0.message
                                    }
                                  }), _i.dispatch(
                                    se({
                                      type: "error",
                                      text: "Could not change webcam: ".concat(
                                        e5.t0
                                      )
                                    })
                                  );
                                case 18:
                                  e5.next = 51;
                                  break;
                                case 20:
                                  return e5.prev = 20, e5.next = 23, this._updateWebcams(a2);
                                case 23:
                                  return c3 = Array.from(this._webcams.keys()), p2 = c3.length, l2 = this._webcam.device ? this._webcam.device.deviceId : void 0, null != t4 && null != t4 ? u3 = c3.indexOf(t4) : (u3 = c3.indexOf(l2)) < p2 - 1 ? u3++ : u3 = 0, this._webcam.device = this._webcams.get(c3[u3]), Ti.debug(
                                    "changeWebcam() | new selected webcam [device:%o]",
                                    this._webcam.device
                                  ), this._webcam.resolution = this._webcam.resolution || "hd", e5.next = 32, null === (i2 = this._openTelemetry) || void 0 === i2 ? void 0 : i2.trace({
                                    spanName: "Getting Selected Webcam",
                                    span: a2,
                                    attributes: {
                                      selectedWebcam: this._webcam.device ? JSON.stringify(
                                        this._webcam.device
                                      ) : "No webcam devices"
                                    }
                                  });
                                case 32:
                                  if (h3 = e5.sent, this._webcam.device) {
                                    e5.next = 36;
                                    break;
                                  }
                                  throw this._openTelemetry.pushLogs({
                                    logText: "Error changeWebcam : No webcam Found",
                                    logType: "ERROR"
                                  }), new Error("no webcam devices");
                                case 36:
                                  return e5.next = 38, this.disableWebcam(a2);
                                case 38:
                                  return e5.next = 40, this.enableWebcam(void 0, a2);
                                case 40:
                                  return null === (s2 = this._openTelemetry) || void 0 === s2 || s2.completeSpan({
                                    span: h3,
                                    status: 1,
                                    message: "Done"
                                  }), null === (o2 = this._openTelemetry) || void 0 === o2 || o2.completeSpan({
                                    span: a2,
                                    status: 1,
                                    message: "changeWebcam() Ending"
                                  }), e5.abrupt("return");
                                case 45:
                                  e5.prev = 45, e5.t1 = e5.catch(20), Ti.error(
                                    "changeWebcam() | failed: %o",
                                    e5.t1
                                  ), this._openTelemetry.pushLogs({
                                    logText: "Error Could not change webcam",
                                    logType: "ERROR",
                                    attributes: {
                                      object: JSON.stringify(t4),
                                      error: e5.t1.message
                                    }
                                  }), null === (m3 = this._openTelemetry) || void 0 === m3 || m3.completeSpan({
                                    span: a2,
                                    status: 2,
                                    message: "Could not change webcam ".concat(
                                      e5.t1
                                    )
                                  }), _i.dispatch(
                                    se({
                                      type: "error",
                                      text: "Could not change webcam: ".concat(
                                        e5.t1
                                      )
                                    })
                                  );
                                case 51:
                                  _i.dispatch(W(false));
                                case 52:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [
                            [6, 13],
                            [20, 45]
                          ]
                        );
                      })
                    ), function(e4) {
                      return it2.apply(this, arguments);
                    })
                  },
                  {
                    key: "changeWebcamResolution",
                    value: (at2 = (0, a.Z)(
                      d().mark(function e4() {
                        var t4, r4;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  Ti.debug("changeWebcamResolution()"), _i.dispatch(W(true)), e5.prev = 2, e5.t0 = this._webcam.resolution, e5.next = "qvga" === e5.t0 ? 6 : "vga" === e5.t0 ? 8 : "hd" === e5.t0 ? 10 : 12;
                                  break;
                                case 6:
                                  return this._webcam.resolution = "vga", e5.abrupt("break", 13);
                                case 8:
                                  return this._webcam.resolution = "hd", e5.abrupt("break", 13);
                                case 10:
                                  return this._webcam.resolution = "qvga", e5.abrupt("break", 13);
                                case 12:
                                  this._webcam.resolution = "hd";
                                case 13:
                                  return Ti.debug(
                                    "changeWebcamResolution() | calling getUserMedia()"
                                  ), e5.prev = 14, e5.next = 17, navigator.mediaDevices.getUserMedia({
                                    video: fi(
                                      {
                                        deviceId: {
                                          exact: this._webcam.device.deviceId
                                        }
                                      },
                                      vi[this._webcam.resolution]
                                    )
                                  });
                                case 17:
                                  t4 = e5.sent, e5.next = 25;
                                  break;
                                case 20:
                                  return e5.prev = 20, e5.t1 = e5.catch(14), this._openTelemetry.pushLogs({
                                    logText: "Error in getUserMedia for changeWebcamResolution",
                                    logType: "ERROR",
                                    attributes: {
                                      error: JSON.stringify(e5.t1)
                                    }
                                  }), "Permission denied" === e5.t1.message || "NotAllowedError" === e5.t1.name ? this._emitError(
                                    Ee.H.ERROR_GET_VIDEO_MEDIA_PERMISSION_DENIED
                                  ) : this._emitError(
                                    Ee.H.ERROR_GET_VIDEO_MEDIA
                                  ), e5.abrupt("return");
                                case 25:
                                  return r4 = t4.getVideoTracks()[0], e5.next = 28, this._webcamProducer.replaceTrack({
                                    track: r4
                                  });
                                case 28:
                                  _i.dispatch(
                                    H(this._webcamProducer.id, r4)
                                  ), e5.next = 36;
                                  break;
                                case 31:
                                  e5.prev = 31, e5.t2 = e5.catch(2), Ti.error(
                                    "changeWebcamResolution() | failed: %o",
                                    e5.t2
                                  ), this._openTelemetry.pushLogs({
                                    logText: "Error Could not change webcam resolution",
                                    logType: "ERROR",
                                    attributes: { error: e5.t2.message }
                                  }), _i.dispatch(
                                    se({
                                      type: "error",
                                      text: "Could not change webcam resolution: ".concat(
                                        e5.t2
                                      )
                                    })
                                  );
                                case 36:
                                  _i.dispatch(W(false));
                                case 37:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [
                            [2, 31],
                            [14, 20]
                          ]
                        );
                      })
                    ), function() {
                      return at2.apply(this, arguments);
                    })
                  },
                  {
                    key: "enableShare",
                    value: (nt2 = (0, a.Z)(
                      d().mark(function e4() {
                        var t4, r4, n2, a2, i2, s2, o2, c3, p2, l2, u3, h3, m3, f3, _3, g3, v3, y2, b3, S3, w3, T3, E3, R3, P2, C2, k3, O3, x2, D2 = this, I2 = arguments;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return r4 = I2.length > 0 && void 0 !== I2[0] ? I2[0] : void 0, e5.next = 3, null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "enableShare() Calling ".concat(
                                      r4 ? "With Custom Video Track" : "Without Custom Video Track "
                                    ),
                                    attributes: {
                                      customShareConfig: r4 ? JSON.stringify(r4) : "Not Specify Custom Track"
                                    }
                                  });
                                case 3:
                                  if (n2 = e5.sent, Ti.debug("enableShare()"), !this._shareProducer) {
                                    e5.next = 8;
                                    break;
                                  }
                                  return null === (a2 = this._openTelemetry) || void 0 === a2 || a2.completeSpan({
                                    span: n2,
                                    status: 2,
                                    message: "Screen Share Producer found"
                                  }), e5.abrupt("return");
                                case 8:
                                  if (this._mediasoupDevice.canProduce(
                                    "video"
                                  )) {
                                    e5.next = 12;
                                    break;
                                  }
                                  return null === (i2 = this._openTelemetry) || void 0 === i2 || i2.completeSpan({
                                    span: n2,
                                    status: 2,
                                    message: "enableShare() | cannot produce video"
                                  }), Ti.error(
                                    "enableShare() | cannot produce video"
                                  ), e5.abrupt("return");
                                case 12:
                                  return _i.dispatch(G(true)), e5.prev = 13, Ti.debug(
                                    "enableShare() | calling getUserMedia()"
                                  ), e5.next = 17, null === (c3 = this._openTelemetry) || void 0 === c3 ? void 0 : c3.trace({
                                    spanName: "Creating Track",
                                    span: n2
                                  });
                                case 17:
                                  if (f3 = e5.sent, !r4 || !r4.active) {
                                    e5.next = 23;
                                    break;
                                  }
                                  s2 = r4.getVideoTracks()[0], o2 = r4.getAudioTracks()[0], e5.next = 42;
                                  break;
                                case 23:
                                  return e5.prev = 23, e5.next = 26, navigator.mediaDevices.getDisplayMedia({
                                    audio: true,
                                    video: {
                                      width: { max: 1920 },
                                      height: { max: 1080 },
                                      frameRate: { max: 10 }
                                    }
                                  });
                                case 26:
                                  g3 = e5.sent, e5.next = 35;
                                  break;
                                case 29:
                                  return e5.prev = 29, e5.t0 = e5.catch(23), this._openTelemetry.pushLogs({
                                    logText: "Error in getDisplayMedia for screen share",
                                    logType: "ERROR",
                                    attributes: {
                                      error: JSON.stringify(e5.t0)
                                    }
                                  }), null === (v3 = this._openTelemetry) || void 0 === v3 || v3.completeSpan({
                                    span: n2,
                                    status: 2,
                                    message: "Error in getDisplayMedia for screen share ".concat(
                                      e5.t0
                                    )
                                  }), "Permission denied" === e5.t0.message || "NotAllowedError" === e5.t0.name ? this._emitError(
                                    Ee.H.ERROR_GET_DISPLAY_MEDIA_PERMISSION_DENIED
                                  ) : this._emitError(
                                    Ee.H.ERROR_GET_DISPLAY_MEDIA
                                  ), e5.abrupt("return");
                                case 35:
                                  if (g3) {
                                    e5.next = 39;
                                    break;
                                  }
                                  return _i.dispatch(G(true)), null === (y2 = this._openTelemetry) || void 0 === y2 || y2.completeSpan({
                                    span: n2,
                                    status: 2,
                                    message: "Stream not found"
                                  }), e5.abrupt("return");
                                case 39:
                                  s2 = g3.getVideoTracks()[0], o2 = g3.getAudioTracks()[0], null === (_3 = this._openTelemetry) || void 0 === _3 || _3.completeSpan({
                                    message: "Track Generated with height ".concat(
                                      s2.getSettings().height,
                                      " and width "
                                    ).concat(s2.getSettings().width),
                                    span: f3,
                                    status: 1
                                  });
                                case 42:
                                  return e5.next = 44, null === (p2 = this._openTelemetry) || void 0 === p2 ? void 0 : p2.trace({
                                    spanName: "Generating Producer Configuration",
                                    span: n2
                                  });
                                case 44:
                                  if (b3 = e5.sent, T3 = { videoGoogleStartBitrate: 1e3 }, !this._forceH264) {
                                    e5.next = 53;
                                    break;
                                  }
                                  if (w3 = this._mediasoupDevice.rtpCapabilities.codecs.find(
                                    function(e6) {
                                      return "video/h264" === e6.mimeType.toLowerCase();
                                    }
                                  )) {
                                    e5.next = 51;
                                    break;
                                  }
                                  throw this._openTelemetry.pushLogs({
                                    logText: "Error EnableShare : desired H264 codec+configuration is not supported",
                                    logType: "ERROR"
                                  }), new Error(
                                    "desired H264 codec+configuration is not supported"
                                  );
                                case 51:
                                  e5.next = 58;
                                  break;
                                case 53:
                                  if (!this._forceVP9) {
                                    e5.next = 58;
                                    break;
                                  }
                                  if (w3 = this._mediasoupDevice.rtpCapabilities.codecs.find(
                                    function(e6) {
                                      return "video/vp9" === e6.mimeType.toLowerCase();
                                    }
                                  )) {
                                    e5.next = 58;
                                    break;
                                  }
                                  throw this._openTelemetry.pushLogs({
                                    logText: "Error EnableShare :desired VP9 codec+configuration is not supported",
                                    logType: "ERROR"
                                  }), new Error(
                                    "desired VP9 codec+configuration is not supported"
                                  );
                                case 58:
                                  return this._useSharingSimulcast && (E3 = this._mediasoupDevice.rtpCapabilities.codecs.find(
                                    function(e6) {
                                      return "video" === e6.kind;
                                    }
                                  ), S3 = this._forceVP9 && w3 || "video/vp9" === E3.mimeType.toLowerCase() ? wi : Si.map(function(e6) {
                                    return fi(
                                      fi({}, e6),
                                      {},
                                      { dtx: true }
                                    );
                                  })), null === (l2 = this._openTelemetry) || void 0 === l2 || l2.completeSpan({
                                    span: b3,
                                    status: 1,
                                    message: "Producer Configuration Generated"
                                  }), e5.next = 62, null === (u3 = this._openTelemetry) || void 0 === u3 ? void 0 : u3.trace({
                                    spanName: "Creating Share Producer",
                                    span: n2
                                  });
                                case 62:
                                  return b3 = e5.sent, e5.next = 65, this._sendTransport.produce({
                                    track: s2,
                                    encodings: S3,
                                    codecOptions: T3,
                                    codec: w3,
                                    appData: { share: true }
                                  });
                                case 65:
                                  if (this._shareProducer = e5.sent, R3 = U({
                                    id: this._shareProducer.id,
                                    type: "share",
                                    paused: this._shareProducer.paused,
                                    track: this._shareProducer.track,
                                    rtpParameters: this._shareProducer.rtpParameters,
                                    codec: this._shareProducer.rtpParameters.codecs[0].mimeType.split(
                                      "/"
                                    )[1],
                                    appData: { share: true },
                                    instance: this._shareProducer
                                  }), _i.dispatch(R3), this._eventEmitter.emit(
                                    R3.type,
                                    R3.payload
                                  ), this._shareProducer.on(
                                    "transportclose",
                                    function() {
                                      var e6, t5 = Z(D2._shareProducer.id);
                                      _i.dispatch(t5), D2._eventEmitter.emit(
                                        t5.type,
                                        t5.payload
                                      ), null === (e6 = D2._shareProducer) || void 0 === e6 || e6.close(), D2._shareProducer = null;
                                    }
                                  ), this._shareProducer.on(
                                    "trackended",
                                    function() {
                                      var e6;
                                      null === (e6 = D2._openTelemetry) || void 0 === e6 || e6.traceAutoComplete({
                                        spanName: " this._shareProducer trackended or Share disconnected!",
                                        status: 2
                                      }), _i.dispatch(
                                        se({
                                          type: "error",
                                          text: "Share disconnected!"
                                        })
                                      ), D2.disableShare().catch(
                                        function() {
                                        }
                                      );
                                    }
                                  ), null === (h3 = this._openTelemetry) || void 0 === h3 || h3.completeSpan({
                                    span: b3,
                                    status: 1,
                                    message: "Share Producer Created"
                                  }), !o2) {
                                    e5.next = 94;
                                    break;
                                  }
                                  return e5.prev = 73, k3 = { opusStereo: 1, opusDtx: 1 }, e5.next = 77, null === (P2 = this._openTelemetry) || void 0 === P2 ? void 0 : P2.trace({
                                    spanName: "Creating Share Audio Producer",
                                    span: n2
                                  });
                                case 77:
                                  return b3 = e5.sent, e5.next = 80, this._sendTransport.produce({
                                    track: o2,
                                    codecOptions: k3,
                                    appData: { share: true }
                                  });
                                case 80:
                                  this._shareAudioProducer = e5.sent, O3 = U({
                                    id: this._shareAudioProducer.id,
                                    type: "share",
                                    paused: this._shareAudioProducer.paused,
                                    track: this._shareAudioProducer.track,
                                    rtpParameters: this._shareAudioProducer.rtpParameters,
                                    codec: this._shareAudioProducer.rtpParameters.codecs[0].mimeType.split(
                                      "/"
                                    )[1],
                                    appData: { share: true },
                                    instance: this._shareAudioProducer
                                  }), _i.dispatch(O3), this._eventEmitter.emit(
                                    O3.type,
                                    O3.payload
                                  ), this._shareAudioProducer.on(
                                    "transportclose",
                                    function() {
                                      var e6, t5 = Z(D2._shareAudioProducer.id);
                                      _i.dispatch(t5), D2._eventEmitter.emit(
                                        t5.type,
                                        t5.payload
                                      ), null === (e6 = D2._shareAudioProducer) || void 0 === e6 || e6.close(), D2._shareAudioProducer = null;
                                    }
                                  ), this._shareAudioProducer.on(
                                    "trackended",
                                    function() {
                                      var e6;
                                      null === (e6 = D2._openTelemetry) || void 0 === e6 || e6.traceAutoComplete({
                                        spanName: " this._shareAudioProducer trackended",
                                        status: 2
                                      }), _i.dispatch(
                                        se({
                                          type: "error",
                                          text: "Share disconnected!"
                                        })
                                      );
                                    }
                                  ), null === (C2 = this._openTelemetry) || void 0 === C2 || C2.completeSpan({
                                    span: b3,
                                    status: 1,
                                    message: "Share Audio Producer Created"
                                  }), e5.next = 94;
                                  break;
                                case 89:
                                  return e5.prev = 89, e5.t1 = e5.catch(73), e5.next = 93, this._protoo.request("produceError", {
                                    mediaType: "shareAudio",
                                    message: e5.t1.message
                                  });
                                case 93:
                                  this._openTelemetry.pushLogs({
                                    logText: "Error in shareAudio produceError",
                                    logType: "ERROR",
                                    attributes: { error: e5.t1.message }
                                  });
                                case 94:
                                  null === (m3 = this._openTelemetry) || void 0 === m3 || m3.completeSpan({
                                    span: n2,
                                    status: 1,
                                    message: "Enable Share Successful"
                                  }), e5.next = 109;
                                  break;
                                case 97:
                                  return e5.prev = 97, e5.t2 = e5.catch(13), Ti.error(
                                    "enableShare() | failed:%o",
                                    e5.t2
                                  ), null === (x2 = this._openTelemetry) || void 0 === x2 || x2.completeSpan({
                                    span: n2,
                                    status: 2,
                                    message: "Error in enableShare video produceError"
                                  }), n2.setAttributes({
                                    error: e5.t2.message
                                  }), console.log(
                                    "screen share catch",
                                    e5.t2.message
                                  ), this._openTelemetry.pushLogs({
                                    logText: "Error in enableShare video produceError",
                                    logType: "ERROR",
                                    attributes: { error: e5.t2.message }
                                  }), "NotAllowedError" !== e5.t2.name && _i.dispatch(
                                    se({
                                      type: "error",
                                      text: "Error sharing: ".concat(
                                        e5.t2
                                      )
                                    })
                                  ), e5.next = 107, this._protoo.request("produceError", {
                                    mediaType: "share",
                                    message: e5.t2.message
                                  });
                                case 107:
                                  s2 && s2.stop(), o2 && o2.stop();
                                case 109:
                                  _i.dispatch(G(false));
                                case 110:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [
                            [13, 97],
                            [23, 29],
                            [73, 89]
                          ]
                        );
                      })
                    ), function() {
                      return nt2.apply(this, arguments);
                    })
                  },
                  {
                    key: "disableShare",
                    value: (rt2 = (0, a.Z)(
                      d().mark(function e4() {
                        var t4, r4, n2, a2, i2, s2, o2, c3, p2, l2, u3, h3;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ti.debug("disableShare()"), e5.next = 3, null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "disableShare() Calling",
                                    status: 1
                                  });
                                case 3:
                                  if (a2 = e5.sent, this._shareProducer) {
                                    e5.next = 7;
                                    break;
                                  }
                                  return null === (i2 = this._openTelemetry) || void 0 === i2 || i2.completeSpan({
                                    span: a2,
                                    status: 2,
                                    message: "Share Producer Not found"
                                  }), e5.abrupt("return");
                                case 7:
                                  return e5.next = 9, null === (r4 = this._openTelemetry) || void 0 === r4 ? void 0 : r4.trace({
                                    spanName: "Closing Share Producer",
                                    span: a2,
                                    status: 1
                                  });
                                case 9:
                                  if (s2 = e5.sent, this._shareProducer.close(), o2 = Z(this._shareProducer.id), _i.dispatch(o2), this._eventEmitter.emit(
                                    o2.type,
                                    o2.payload
                                  ), !this._shareAudioProducer) {
                                    e5.next = 23;
                                    break;
                                  }
                                  return e5.next = 17, null === (c3 = this._openTelemetry) || void 0 === c3 ? void 0 : c3.trace({
                                    spanName: "Closing Share Audio Producer",
                                    span: a2,
                                    status: 1
                                  });
                                case 17:
                                  l2 = e5.sent, this._shareAudioProducer.close(), o2 = Z(this._shareAudioProducer.id), _i.dispatch(o2), this._eventEmitter.emit(
                                    o2.type,
                                    o2.payload
                                  ), null === (p2 = this._openTelemetry) || void 0 === p2 || p2.completeSpan({
                                    span: l2,
                                    status: 1,
                                    message: "Closed Share Audio Producer"
                                  });
                                case 23:
                                  return e5.prev = 23, e5.next = 26, this._protoo.request("closeProducer", {
                                    producerId: this._shareProducer.id
                                  });
                                case 26:
                                  if (!this._shareAudioProducer) {
                                    e5.next = 29;
                                    break;
                                  }
                                  return e5.next = 29, this._protoo.request("closeProducer", {
                                    producerId: this._shareAudioProducer.id
                                  });
                                case 29:
                                  null === (u3 = this._openTelemetry) || void 0 === u3 || u3.completeSpan({
                                    span: s2,
                                    status: 1,
                                    message: "Requested Server to Close Producer"
                                  }), e5.next = 37;
                                  break;
                                case 32:
                                  e5.prev = 32, e5.t0 = e5.catch(23), _i.dispatch(
                                    se({
                                      type: "error",
                                      text: "Error closing server-side share Producer: ".concat(
                                        e5.t0
                                      )
                                    })
                                  ), null === (h3 = this._openTelemetry) || void 0 === h3 || h3.completeSpan({
                                    span: a2,
                                    status: 2,
                                    message: "Error closing server-side share Producer ".concat(
                                      e5.t0
                                    )
                                  }), this._openTelemetry.pushLogs({
                                    logText: "Error closing server-side share Producer",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  });
                                case 37:
                                  this._shareProducer = null, this._shareAudioProducer = null, null === (n2 = this._openTelemetry) || void 0 === n2 || n2.completeSpan({
                                    span: a2,
                                    status: 1,
                                    message: "Screen Share Disabled Successfully"
                                  });
                                case 40:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[23, 32]]
                        );
                      })
                    ), function() {
                      return rt2.apply(this, arguments);
                    })
                  },
                  {
                    key: "enableAudioOnly",
                    value: (tt2 = (0, a.Z)(
                      d().mark(function e4() {
                        var t4, r4, n2;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  Ti.debug("enableAudioOnly()"), _i.dispatch(j(true)), this.disableWebcam(), t4 = ui(this._consumers.values()), e5.prev = 4, t4.s();
                                case 6:
                                  if ((r4 = t4.n()).done) {
                                    e5.next = 13;
                                    break;
                                  }
                                  if ("video" === (n2 = r4.value).kind) {
                                    e5.next = 10;
                                    break;
                                  }
                                  return e5.abrupt("continue", 11);
                                case 10:
                                  this._pauseConsumer(n2);
                                case 11:
                                  e5.next = 6;
                                  break;
                                case 13:
                                  e5.next = 18;
                                  break;
                                case 15:
                                  e5.prev = 15, e5.t0 = e5.catch(4), t4.e(e5.t0);
                                case 18:
                                  return e5.prev = 18, t4.f(), e5.finish(18);
                                case 21:
                                  _i.dispatch(N(true)), _i.dispatch(j(false));
                                case 23:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[4, 15, 18, 21]]
                        );
                      })
                    ), function() {
                      return tt2.apply(this, arguments);
                    })
                  },
                  {
                    key: "disableAudioOnly",
                    value: (et2 = (0, a.Z)(
                      d().mark(function e4() {
                        var t4, r4, n2;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  Ti.debug("disableAudioOnly()"), _i.dispatch(j(true)), !this._webcamProducer && this._produce && (C() || {}).webcamEnabled && this.enableWebcam(), t4 = ui(this._consumers.values()), e5.prev = 4, t4.s();
                                case 6:
                                  if ((r4 = t4.n()).done) {
                                    e5.next = 13;
                                    break;
                                  }
                                  if ("video" === (n2 = r4.value).kind) {
                                    e5.next = 10;
                                    break;
                                  }
                                  return e5.abrupt("continue", 11);
                                case 10:
                                  this._resumeConsumer(n2);
                                case 11:
                                  e5.next = 6;
                                  break;
                                case 13:
                                  e5.next = 18;
                                  break;
                                case 15:
                                  e5.prev = 15, e5.t0 = e5.catch(4), t4.e(e5.t0);
                                case 18:
                                  return e5.prev = 18, t4.f(), e5.finish(18);
                                case 21:
                                  _i.dispatch(N(false)), _i.dispatch(j(false));
                                case 23:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[4, 15, 18, 21]]
                        );
                      })
                    ), function() {
                      return et2.apply(this, arguments);
                    })
                  },
                  {
                    key: "muteAudio",
                    value: (Ye2 = (0, a.Z)(
                      d().mark(function e4() {
                        return d().wrap(function(e5) {
                          for (; ; )
                            switch (e5.prev = e5.next) {
                              case 0:
                                Ti.debug("muteAudio()"), _i.dispatch(F(true));
                              case 2:
                              case "end":
                                return e5.stop();
                            }
                        }, e4);
                      })
                    ), function() {
                      return Ye2.apply(this, arguments);
                    })
                  },
                  {
                    key: "unmuteAudio",
                    value: (Qe2 = (0, a.Z)(
                      d().mark(function e4() {
                        return d().wrap(function(e5) {
                          for (; ; )
                            switch (e5.prev = e5.next) {
                              case 0:
                                Ti.debug("unmuteAudio()"), _i.dispatch(F(false));
                              case 2:
                              case "end":
                                return e5.stop();
                            }
                        }, e4);
                      })
                    ), function() {
                      return Qe2.apply(this, arguments);
                    })
                  },
                  {
                    key: "handleRemoteRestartIce",
                    value: (Je2 = (0, a.Z)(
                      d().mark(function e4(t4) {
                        var r4, n2, a2, i2, s2, o2, c3;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return a2 = t4.iceParameters, i2 = t4.transportId, s2 = t4.internalSpan, i2 === (null === (r4 = this._sendTransport) || void 0 === r4 ? void 0 : r4.id) && this._sendTransport.restartIce({
                                    iceParameters: a2
                                  }), i2 === (null === (n2 = this._recvTransport) || void 0 === n2 ? void 0 : n2.id) && this._recvTransport.restartIce({
                                    iceParameters: a2
                                  }), e5.prev = 3, e5.next = 6, this._protoo.request("iceRestarted", {
                                    transportId: i2
                                  });
                                case 6:
                                  null === (o2 = this._openTelemetry) || void 0 === o2 || o2.completeSpan({
                                    span: s2,
                                    status: 1,
                                    message: "iceRestarted"
                                  }), e5.next = 14;
                                  break;
                                case 9:
                                  e5.prev = 9, e5.t0 = e5.catch(3), null === (c3 = this._openTelemetry) || void 0 === c3 || c3.completeSpan({
                                    span: s2,
                                    status: 2,
                                    message: "handleRemoteRestartIce() ICE restart failed ".concat(
                                      e5.t0
                                    )
                                  }), this._openTelemetry.pushLogs({
                                    logText: "Error handleRemoteRestartIce() ICE restart failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), _i.dispatch(
                                    se({
                                      type: "error",
                                      text: "ICE restart failed: ".concat(
                                        e5.t0
                                      )
                                    })
                                  );
                                case 14:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[3, 9]]
                        );
                      })
                    ), function(e4) {
                      return Je2.apply(this, arguments);
                    })
                  },
                  {
                    key: "restartIce",
                    value: (Xe2 = (0, a.Z)(
                      d().mark(function e4() {
                        var t4, r4;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Ti.debug("restartIce()"), _i.dispatch(B(true)), e5.prev = 2, !this._sendTransport) {
                                    e5.next = 9;
                                    break;
                                  }
                                  return e5.next = 6, this._protoo.request("restartIce", {
                                    transportId: this._sendTransport.id
                                  });
                                case 6:
                                  return t4 = e5.sent, e5.next = 9, this._sendTransport.restartIce({
                                    iceParameters: t4
                                  });
                                case 9:
                                  if (!this._recvTransport) {
                                    e5.next = 15;
                                    break;
                                  }
                                  return e5.next = 12, this._protoo.request("restartIce", {
                                    transportId: this._recvTransport.id
                                  });
                                case 12:
                                  return r4 = e5.sent, e5.next = 15, this._recvTransport.restartIce({
                                    iceParameters: r4
                                  });
                                case 15:
                                  _i.dispatch(
                                    se({ text: "ICE restarted" })
                                  ), e5.next = 23;
                                  break;
                                case 18:
                                  e5.prev = 18, e5.t0 = e5.catch(2), Ti.error(
                                    "restartIce() | failed:%o",
                                    e5.t0
                                  ), _i.dispatch(
                                    se({
                                      type: "error",
                                      text: "ICE restart failed: ".concat(
                                        e5.t0
                                      )
                                    })
                                  ), this._openTelemetry.pushLogs({
                                    logText: "Error restartIce() ICE restart failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  });
                                case 23:
                                  _i.dispatch(B(false));
                                case 24:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 18]]
                        );
                      })
                    ), function() {
                      return Xe2.apply(this, arguments);
                    })
                  },
                  {
                    key: "setMaxSendingSpatialLayer",
                    value: ($e2 = (0, a.Z)(
                      d().mark(function e4(t4) {
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Ti.debug(
                                    "setMaxSendingSpatialLayer() [spatialLayer:%s]",
                                    t4
                                  ), e5.prev = 1, !this._webcamProducer) {
                                    e5.next = 7;
                                    break;
                                  }
                                  return e5.next = 5, this._webcamProducer.setMaxSpatialLayer(
                                    t4
                                  );
                                case 5:
                                  e5.next = 10;
                                  break;
                                case 7:
                                  if (!this._shareProducer) {
                                    e5.next = 10;
                                    break;
                                  }
                                  return e5.next = 10, this._shareProducer.setMaxSpatialLayer(
                                    t4
                                  );
                                case 10:
                                  e5.next = 17;
                                  break;
                                case 12:
                                  e5.prev = 12, e5.t0 = e5.catch(1), Ti.error(
                                    "setMaxSendingSpatialLayer() | failed:%o",
                                    e5.t0
                                  ), this._openTelemetry.pushLogs({
                                    logText: "Error setting max sending video spatial layer",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), _i.dispatch(
                                    se({
                                      type: "error",
                                      text: "Error setting max sending video spatial layer: ".concat(
                                        e5.t0
                                      )
                                    })
                                  );
                                case 17:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[1, 12]]
                        );
                      })
                    ), function(e4) {
                      return $e2.apply(this, arguments);
                    })
                  },
                  {
                    key: "setWebcamQuality",
                    value: (Ke2 = (0, a.Z)(
                      d().mark(function e4(t4) {
                        var r4, n2;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (this._webcamProducer) {
                                    e5.next = 2;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 2:
                                  if (r4 = this._webcam.resolution, n2 = gi[r4][t4].s, this._webcamProducer.maxSpatialLayer != n2) {
                                    e5.next = 6;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 6:
                                  return e5.next = 8, this._webcamProducer.setMaxSpatialLayer(
                                    n2
                                  );
                                case 8:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return Ke2.apply(this, arguments);
                    })
                  },
                  {
                    key: "setConsumerQuality",
                    value: (qe2 = (0, a.Z)(
                      d().mark(function e4(t4, r4) {
                        var n2, a2, i2, s2, o2, c3, p2;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return s2 = this._webcam.resolution, e5.next = 3, null === (n2 = this._openTelemetry) || void 0 === n2 ? void 0 : n2.trace({
                                    spanName: 'Setting "'.concat(
                                      r4,
                                      '" Quality'
                                    )
                                  });
                                case 3:
                                  return o2 = e5.sent, c3 = gi[s2][r4].s, p2 = gi[s2][r4].t, null === (a2 = this._openTelemetry) || void 0 === a2 || a2.traceAutoComplete({
                                    spanName: "Getting spatial & temporal layers",
                                    attributes: {
                                      spatialLayers: JSON.parse(c3),
                                      temporalLayers: JSON.parse(p2)
                                    },
                                    status: 1
                                  }), e5.next = 9, this.setConsumerPreferredLayers(t4, c3, p2);
                                case 9:
                                  null === (i2 = this._openTelemetry) || void 0 === i2 || i2.completeSpan({
                                    message: "Done",
                                    span: o2,
                                    status: 1
                                  });
                                case 10:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4, t4) {
                      return qe2.apply(this, arguments);
                    })
                  },
                  {
                    key: "setViewPort",
                    value: (Ge2 = (0, a.Z)(
                      d().mark(function e4(t4, r4, n2) {
                        var a2, i2, s2, o2;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (this._consumers.get(t4.id)) {
                                    e5.next = 2;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 2:
                                  if (a2 = Te(
                                    this._consumers.get(t4.id),
                                    r4,
                                    n2
                                  ), i2 = a2.consumerId, s2 = a2.newPreferredSpatialLayer, o2 = a2.newPreferredTemporalLayer, !i2) {
                                    e5.next = 6;
                                    break;
                                  }
                                  return e5.next = 6, this.setConsumerPreferredLayers(i2, s2, o2);
                                case 6:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4, t4, r4) {
                      return Ge2.apply(this, arguments);
                    })
                  },
                  {
                    key: "setConsumerPreferredLayers",
                    value: (We2 = (0, a.Z)(
                      d().mark(function e4(t4, r4, n2) {
                        var a2;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ti.debug(
                                    "setConsumerPreferredLayers() [consumerId:%s, spatialLayer:%s, temporalLayer:%s]",
                                    t4,
                                    r4,
                                    n2
                                  ), e5.prev = 1, (a2 = this._consumers.get(t4)).spatialLayers > 1 && (a2.preferredSpatialLayer = r4, a2.preferredTemporalLayer = n2), e5.next = 6, this._protoo.request(
                                    "setConsumerPreferredLayers",
                                    {
                                      consumerId: t4,
                                      spatialLayer: r4,
                                      temporalLayer: n2
                                    }
                                  );
                                case 6:
                                  _i.dispatch(te(t4, r4, n2)), e5.next = 14;
                                  break;
                                case 9:
                                  e5.prev = 9, e5.t0 = e5.catch(1), Ti.error(
                                    "setConsumerPreferredLayers() | failed:%o",
                                    e5.t0
                                  ), this._openTelemetry.pushLogs({
                                    logText: "Error setting Consumer preferred layers:",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), _i.dispatch(
                                    se({
                                      type: "error",
                                      text: "Error setting Consumer preferred layers: ".concat(
                                        e5.t0
                                      )
                                    })
                                  );
                                case 14:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[1, 9]]
                        );
                      })
                    ), function(e4, t4, r4) {
                      return We2.apply(this, arguments);
                    })
                  },
                  {
                    key: "setConsumerPriority",
                    value: (Ve2 = (0, a.Z)(
                      d().mark(function e4(t4, r4) {
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ti.debug(
                                    "setConsumerPriority() [consumerId:%s, priority:%d]",
                                    t4,
                                    r4
                                  ), e5.prev = 1, e5.next = 4, this._protoo.request(
                                    "setConsumerPriority",
                                    { consumerId: t4, priority: r4 }
                                  );
                                case 4:
                                  _i.dispatch(re(t4, r4)), e5.next = 12;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(1), Ti.error(
                                    "setConsumerPriority() | failed:%o",
                                    e5.t0
                                  ), this._openTelemetry.pushLogs({
                                    logText: "Error setting Consumer priority",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), _i.dispatch(
                                    se({
                                      type: "error",
                                      text: "Error setting Consumer priority: ".concat(
                                        e5.t0
                                      )
                                    })
                                  );
                                case 12:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[1, 7]]
                        );
                      })
                    ), function(e4, t4) {
                      return Ve2.apply(this, arguments);
                    })
                  },
                  {
                    key: "requestConsumerKeyFrame",
                    value: (ze2 = (0, a.Z)(
                      d().mark(function e4(t4) {
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ti.debug(
                                    "requestConsumerKeyFrame() [consumerId:%s]",
                                    t4
                                  ), e5.prev = 1, e5.next = 4, this._protoo.request(
                                    "requestConsumerKeyFrame",
                                    { consumerId: t4 }
                                  );
                                case 4:
                                  _i.dispatch(
                                    se({
                                      text: "Keyframe requested for video consumer"
                                    })
                                  ), e5.next = 12;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(1), Ti.error(
                                    "requestConsumerKeyFrame() | failed:%o",
                                    e5.t0
                                  ), this._openTelemetry.pushLogs({
                                    logText: "Error requesting key frame for Consumer",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), _i.dispatch(
                                    se({
                                      type: "error",
                                      text: "Error requesting key frame for Consumer: ".concat(
                                        e5.t0
                                      )
                                    })
                                  );
                                case 12:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[1, 7]]
                        );
                      })
                    ), function(e4) {
                      return ze2.apply(this, arguments);
                    })
                  },
                  {
                    key: "enableChatDataProducer",
                    value: (He2 = (0, a.Z)(
                      d().mark(function e4() {
                        var t4 = this;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Ti.debug("enableChatDataProducer()"), this._useDataChannel) {
                                    e5.next = 3;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 3:
                                  return e5.prev = 3, e5.next = 6, this._sendTransport.produceData({
                                    ordered: false,
                                    maxRetransmits: 1,
                                    label: "chat",
                                    priority: "medium",
                                    appData: {
                                      info: "my-chat-DataProducer"
                                    }
                                  });
                                case 6:
                                  this._chatDataProducer = e5.sent, _i.dispatch(
                                    V({
                                      id: this._chatDataProducer.id,
                                      sctpStreamParameters: this._chatDataProducer.sctpStreamParameters,
                                      label: this._chatDataProducer.label,
                                      protocol: this._chatDataProducer.protocol
                                    })
                                  ), this._chatDataProducer.on(
                                    "transportclose",
                                    function() {
                                      t4._chatDataProducer = null;
                                    }
                                  ), this._chatDataProducer.on(
                                    "open",
                                    function() {
                                      Ti.debug(
                                        'chat DataProducer "open" event'
                                      );
                                    }
                                  ), this._chatDataProducer.on(
                                    "close",
                                    function() {
                                      Ti.error(
                                        'chat DataProducer "close" event'
                                      ), t4._chatDataProducer = null, _i.dispatch(
                                        se({
                                          type: "error",
                                          text: "Chat DataProducer closed"
                                        })
                                      );
                                    }
                                  ), this._chatDataProducer.on(
                                    "error",
                                    function(e6) {
                                      Ti.error(
                                        'chat DataProducer "error" event:%o',
                                        e6
                                      ), _i.dispatch(
                                        se({
                                          type: "error",
                                          text: "Chat DataProducer error: ".concat(
                                            e6
                                          )
                                        })
                                      );
                                    }
                                  ), this._chatDataProducer.on(
                                    "bufferedamountlow",
                                    function() {
                                      Ti.debug(
                                        'chat DataProducer "bufferedamountlow" event'
                                      );
                                    }
                                  ), e5.next = 21;
                                  break;
                                case 15:
                                  throw e5.prev = 15, e5.t0 = e5.catch(3), Ti.error(
                                    "enableChatDataProducer() | failed:%o",
                                    e5.t0
                                  ), this._openTelemetry.pushLogs({
                                    logText: "Error enabling chat DataProducer",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), _i.dispatch(
                                    se({
                                      type: "error",
                                      text: "Error enabling chat DataProducer: ".concat(
                                        e5.t0
                                      )
                                    })
                                  ), e5.t0;
                                case 21:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[3, 15]]
                        );
                      })
                    ), function() {
                      return He2.apply(this, arguments);
                    })
                  },
                  {
                    key: "enableBotDataProducer",
                    value: (Ze2 = (0, a.Z)(
                      d().mark(function e4() {
                        var t4 = this;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Ti.debug("enableBotDataProducer()"), this._useDataChannel) {
                                    e5.next = 3;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 3:
                                  return e5.prev = 3, e5.next = 6, this._sendTransport.produceData({
                                    ordered: false,
                                    maxPacketLifeTime: 2e3,
                                    label: "bot",
                                    priority: "medium",
                                    appData: {
                                      info: "my-bot-DataProducer"
                                    }
                                  });
                                case 6:
                                  this._botDataProducer = e5.sent, _i.dispatch(
                                    V({
                                      id: this._botDataProducer.id,
                                      sctpStreamParameters: this._botDataProducer.sctpStreamParameters,
                                      label: this._botDataProducer.label,
                                      protocol: this._botDataProducer.protocol
                                    })
                                  ), this._botDataProducer.on(
                                    "transportclose",
                                    function() {
                                      t4._botDataProducer = null;
                                    }
                                  ), this._botDataProducer.on(
                                    "open",
                                    function() {
                                      Ti.debug(
                                        'bot DataProducer "open" event'
                                      );
                                    }
                                  ), this._botDataProducer.on(
                                    "close",
                                    function() {
                                      Ti.error(
                                        'bot DataProducer "close" event'
                                      ), t4._botDataProducer = null, _i.dispatch(
                                        se({
                                          type: "error",
                                          text: "Bot DataProducer closed"
                                        })
                                      );
                                    }
                                  ), this._botDataProducer.on(
                                    "error",
                                    function(e6) {
                                      Ti.error(
                                        'bot DataProducer "error" event:%o',
                                        e6
                                      ), _i.dispatch(
                                        se({
                                          type: "error",
                                          text: "Bot DataProducer error: ".concat(
                                            e6
                                          )
                                        })
                                      );
                                    }
                                  ), this._botDataProducer.on(
                                    "bufferedamountlow",
                                    function() {
                                      Ti.debug(
                                        'bot DataProducer "bufferedamountlow" event'
                                      );
                                    }
                                  ), e5.next = 21;
                                  break;
                                case 15:
                                  throw e5.prev = 15, e5.t0 = e5.catch(3), Ti.error(
                                    "enableBotDataProducer() | failed:%o",
                                    e5.t0
                                  ), this._openTelemetry.pushLogs({
                                    logText: "Error enabling bot DataProducer",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), _i.dispatch(
                                    se({
                                      type: "error",
                                      text: "Error enabling bot DataProducer: ".concat(
                                        e5.t0
                                      )
                                    })
                                  ), e5.t0;
                                case 21:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[3, 15]]
                        );
                      })
                    ), function() {
                      return Ze2.apply(this, arguments);
                    })
                  },
                  {
                    key: "sendChatMessage",
                    value: (Ue2 = (0, a.Z)(
                      d().mark(function e4(t4) {
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Ti.debug(
                                    'sendChatMessage() [text:"%s]',
                                    t4
                                  ), this._chatDataProducer) {
                                    e5.next = 4;
                                    break;
                                  }
                                  return _i.dispatch(
                                    se({
                                      type: "error",
                                      text: "No chat DataProducer"
                                    })
                                  ), e5.abrupt("return");
                                case 4:
                                  try {
                                    this._chatDataProducer.send(t4);
                                  } catch (e6) {
                                    Ti.error(
                                      "chat DataProducer.send() failed:%o",
                                      e6
                                    ), _i.dispatch(
                                      se({
                                        type: "error",
                                        text: "chat DataProducer.send() failed: ".concat(
                                          e6
                                        )
                                      })
                                    );
                                  }
                                case 5:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return Ue2.apply(this, arguments);
                    })
                  },
                  {
                    key: "sendBotMessage",
                    value: (Be2 = (0, a.Z)(
                      d().mark(function e4(t4) {
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Ti.debug(
                                    'sendBotMessage() [text:"%s]',
                                    t4
                                  ), this._botDataProducer) {
                                    e5.next = 4;
                                    break;
                                  }
                                  return _i.dispatch(
                                    se({
                                      type: "error",
                                      text: "No bot DataProducer"
                                    })
                                  ), e5.abrupt("return");
                                case 4:
                                  try {
                                    this._botDataProducer.send(t4);
                                  } catch (e6) {
                                    Ti.error(
                                      "bot DataProducer.send() failed:%o",
                                      e6
                                    ), _i.dispatch(
                                      se({
                                        type: "error",
                                        text: "bot DataProducer.send() failed: ".concat(
                                          e6
                                        )
                                      })
                                    );
                                  }
                                case 5:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return Be2.apply(this, arguments);
                    })
                  },
                  {
                    key: "changeDisplayName",
                    value: (Fe2 = (0, a.Z)(
                      d().mark(function e4(t4) {
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ti.debug(
                                    'changeDisplayName() [displayName:"%s"]',
                                    t4
                                  ), P({ displayName: t4 }), e5.prev = 2, e5.next = 5, this._protoo.request(
                                    "changeDisplayName",
                                    { displayName: t4 }
                                  );
                                case 5:
                                  this._displayName = t4, _i.dispatch(A(t4)), _i.dispatch(
                                    se({ text: "Display name changed" })
                                  ), e5.next = 15;
                                  break;
                                case 10:
                                  e5.prev = 10, e5.t0 = e5.catch(2), Ti.error(
                                    "changeDisplayName() | failed: %o",
                                    e5.t0
                                  ), _i.dispatch(
                                    se({
                                      type: "error",
                                      text: "Could not change display name: ".concat(
                                        e5.t0
                                      )
                                    })
                                  ), _i.dispatch(A());
                                case 15:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 10]]
                        );
                      })
                    ), function(e4) {
                      return Fe2.apply(this, arguments);
                    })
                  },
                  {
                    key: "openConnection",
                    value: (je2 = (0, a.Z)(
                      d().mark(function e4(t4) {
                        var r4, n2;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return r4 = t4.roomId, n2 = t4.payload, e5.next = 3, this._protoo.request("openConnection", {
                                    roomId: r4,
                                    payload: n2
                                  }).catch(function(e6) {
                                    throw new Error(e6);
                                  });
                                case 3:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return je2.apply(this, arguments);
                    })
                  },
                  {
                    key: "closeConnection",
                    value: (Ne2 = (0, a.Z)(
                      d().mark(function e4(t4) {
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return e5.next = 2, this._protoo.request(
                                    "closeConnection",
                                    { roomId: t4 }
                                  );
                                case 2:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return Ne2.apply(this, arguments);
                    })
                  },
                  {
                    key: "switchTo",
                    value: (Ae2 = (0, a.Z)(
                      d().mark(function e4(t4) {
                        var r4, n2, a2;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return r4 = t4.roomId, n2 = t4.peerIds, a2 = t4.payload, e5.next = 3, this._protoo.request(
                                    "requestSwitchRoom",
                                    { roomId: r4, peerIds: n2, payload: a2 }
                                  );
                                case 3:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return Ae2.apply(this, arguments);
                    })
                  },
                  {
                    key: "switchPeerRoom",
                    value: (Me2 = (0, a.Z)(
                      d().mark(function e4(t4) {
                        var r4, n2, a2, i2;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return r4 = t4.peerId, n2 = t4.roomId, a2 = t4.payload, i2 = t4.token, e5.next = 3, this._protoo.request("switchPeerRoom", {
                                    roomId: n2,
                                    peerId: r4,
                                    payload: a2,
                                    token: i2
                                  });
                                case 3:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return Me2.apply(this, arguments);
                    })
                  },
                  {
                    key: "connectionSwitchPeerRoom",
                    value: (Le2 = (0, a.Z)(
                      d().mark(function e4(t4) {
                        var r4, n2, a2, i2, s2;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return r4 = t4.roomId, n2 = t4.connectionRoomId, a2 = t4.peerId, i2 = t4.payload, s2 = t4.token, e5.next = 3, this._protoo.request(
                                    "connectionSwitchPeerRoom",
                                    {
                                      roomId: r4,
                                      connectionRoomId: n2,
                                      peerId: a2,
                                      payload: i2,
                                      token: s2
                                    }
                                  );
                                case 3:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return Le2.apply(this, arguments);
                    })
                  },
                  {
                    key: "connectionSendChatMessage",
                    value: (Ie2 = (0, a.Z)(
                      d().mark(function e4(t4) {
                        var r4, n2;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return r4 = t4.roomId, n2 = t4.message, e5.next = 3, this._protoo.request(
                                    "connectionSendChatMessage",
                                    { roomId: r4, message: n2 }
                                  );
                                case 3:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return Ie2.apply(this, arguments);
                    })
                  },
                  {
                    key: "connectionEndMeeting",
                    value: (De2 = (0, a.Z)(
                      d().mark(function e4(t4) {
                        var r4;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return r4 = t4.roomId, e5.next = 3, this._protoo.request(
                                    "connectionCloseRoom",
                                    { roomId: r4 }
                                  );
                                case 3:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return De2.apply(this, arguments);
                    })
                  },
                  {
                    key: "pubsubPublish",
                    value: (xe2 = (0, a.Z)(
                      d().mark(function e4(t4, r4, n2) {
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return e5.prev = 0, e5.next = 3, this._protoo.request("pubsubPublish", {
                                    topic: t4,
                                    message: r4,
                                    options: n2
                                  });
                                case 3:
                                  e5.next = 9;
                                  break;
                                case 5:
                                  e5.prev = 5, e5.t0 = e5.catch(0), this._openTelemetry.pushLogs({
                                    logText: "Error pubsubPublish() | failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Ti.error(
                                    "pubsubPublish() | failed: %o",
                                    e5.t0
                                  );
                                case 9:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[0, 5]]
                        );
                      })
                    ), function(e4, t4, r4) {
                      return xe2.apply(this, arguments);
                    })
                  },
                  {
                    key: "pubsubSubscribe",
                    value: (Oe2 = (0, a.Z)(
                      d().mark(function e4(t4) {
                        var r4;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return e5.prev = 0, e5.next = 3, this._protoo.request(
                                    "pubsubSubscribe",
                                    { topic: t4 }
                                  );
                                case 3:
                                  return r4 = e5.sent, e5.abrupt("return", r4);
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(0), this._openTelemetry.pushLogs({
                                    logText: "Error pubsubSubscribe() | failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Ti.error(
                                    "pubsubSubscribe() | failed: %o",
                                    e5.t0
                                  );
                                case 11:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[0, 7]]
                        );
                      })
                    ), function(e4) {
                      return Oe2.apply(this, arguments);
                    })
                  },
                  {
                    key: "pubsubUnsubscribe",
                    value: (we2 = (0, a.Z)(
                      d().mark(function e4(t4) {
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return e5.prev = 0, e5.next = 3, this._protoo.request(
                                    "pubsubUnsubscribe",
                                    { topic: t4 }
                                  );
                                case 3:
                                  e5.next = 9;
                                  break;
                                case 5:
                                  e5.prev = 5, e5.t0 = e5.catch(0), this._openTelemetry.pushLogs({
                                    logText: "Error pubsubUnsubscribe() | failed",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), Ti.error(
                                    "pubsubUnsubscribe() | failed: %o",
                                    e5.t0
                                  );
                                case 9:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[0, 5]]
                        );
                      })
                    ), function(e4) {
                      return we2.apply(this, arguments);
                    })
                  },
                  {
                    key: "closeRoom",
                    value: (Se2 = (0, a.Z)(
                      d().mark(function e4() {
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return e5.next = 2, this._protoo.request("closeRoom", {});
                                case 2:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return Se2.apply(this, arguments);
                    })
                  },
                  {
                    key: "removePeer",
                    value: (ye2 = (0, a.Z)(
                      d().mark(function e4(t4) {
                        var r4;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (null === (r4 = this._openTelemetry) || void 0 === r4 || r4.traceAutoComplete({
                                    spanName: "Removing peer ".concat(
                                      t4
                                    ),
                                    status: 1
                                  }), null != t4) {
                                    e5.next = 3;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 3:
                                  return e5.next = 5, this._protoo.request("removePeer", {
                                    peerId: t4
                                  });
                                case 5:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return ye2.apply(this, arguments);
                    })
                  },
                  {
                    key: "startPingPong",
                    value: (ve2 = (0, a.Z)(
                      d().mark(function e4() {
                        var t4 = this;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  null != this._pingWebsocketInterval && clearInterval(
                                    this._pingWebsocketInterval
                                  ), this._pingWebsocketInterval = setInterval(function() {
                                    t4.pingWebSocket();
                                  }, 2e3);
                                case 2:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return ve2.apply(this, arguments);
                    })
                  },
                  {
                    key: "pingWebSocket",
                    value: (ge2 = (0, a.Z)(
                      d().mark(function e4() {
                        var t4, r4 = this;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (!this._closed) {
                                    e5.next = 2;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 2:
                                  t4 = false, this._protoo.request("ping").then(function(e6) {
                                    e6 && (t4 = true);
                                  }).catch(function(e6) {
                                  }), setTimeout(function() {
                                    t4 ? (!r4._isWebsocketAlive || r4._pingWebsocketFailedCounter > 1 ? (r4._eventEmitter.emit(
                                      "MEETING_STATE_CHANGED",
                                      { state: "CONNECTED" }
                                    ), r4._isWebsocketAlive = true, r4._pingWebsocketFailedCounter = 0, r4.restartIce()) : "failed" != r4._transportState && "disconnected" != r4._transportState || (console.log(
                                      "Calling Restart Ice based on transport state",
                                      r4._transportState
                                    ), r4.restartIce()), r4._pingWebsocketFailedCounter = 0) : (r4._isWebsocketAlive && r4._pingWebsocketFailedCounter > 1 && (r4._eventEmitter.emit(
                                      "MEETING_STATE_CHANGED",
                                      { state: "DISCONNECTED" }
                                    ), r4._isWebsocketAlive = false, r4.startInternetPingPong()), r4._pingWebsocketFailedCounter = r4._pingWebsocketFailedCounter + 1);
                                  }, 1e3);
                                case 5:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return ge2.apply(this, arguments);
                    })
                  },
                  {
                    key: "startInternetPingPong",
                    value: (_e2 = (0, a.Z)(
                      d().mark(function e4() {
                        var t4 = this;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  null != this._pingInternetInterval && clearInterval(
                                    this._pingInternetInterval
                                  ), this._pingInternetInterval = setInterval(function() {
                                    t4.pingInternet();
                                  }, 2e3);
                                case 2:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return _e2.apply(this, arguments);
                    })
                  },
                  {
                    key: "pingInternet",
                    value: (fe2 = (0, a.Z)(
                      d().mark(function e4() {
                        var t4 = this;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (!this._closed) {
                                    e5.next = 2;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 2:
                                  return this._openTelemetry.pushLogs({
                                    logText: "pinging internet",
                                    logType: "INFO"
                                  }), e5.next = 5, fetch(
                                    "https://api.videosdk.live/ping",
                                    { method: "GET" }
                                  ).then(function(e6) {
                                    return e6.text();
                                  }).catch(function(e6) {
                                    return t4._openTelemetry.pushLogs({
                                      logText: "Error pingInternet failed",
                                      logType: "ERROR",
                                      attributes: {
                                        error: e6.message
                                      }
                                    }), "failed";
                                  });
                                case 5:
                                  if ("pong" != e5.sent) {
                                    e5.next = 16;
                                    break;
                                  }
                                  if (this._openTelemetry.pushLogs({
                                    logText: "Pong",
                                    logType: "INFO"
                                  }), !(this._pingWebsocketFailedCounter > 5 && this._pongInternetCounter > 3) || this._isWebsocketAlive) {
                                    e5.next = 14;
                                    break;
                                  }
                                  return this._pongInternetCounter = 0, this.close({ sendLeft: false }), this._openTelemetry.pushLogs({
                                    logText: "Re-join the meeting, after diconnect",
                                    logType: "INFO"
                                  }), e5.next = 14, this.join();
                                case 14:
                                  this._pongInternetCounter = this._pongInternetCounter + 1, this._isWebsocketAlive && (this._pongInternetCounter = 0, null != this._pingInternetInterval && (clearInterval(
                                    this._pingInternetInterval
                                  ), this._pingInternetInterval = null));
                                case 16:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return fe2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getSendTransportRemoteStats",
                    value: (me2 = (0, a.Z)(
                      d().mark(function e4() {
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Ti.debug(
                                    "getSendTransportRemoteStats()"
                                  ), this._sendTransport) {
                                    e5.next = 3;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 3:
                                  return e5.abrupt(
                                    "return",
                                    this._protoo.request(
                                      "getTransportStats",
                                      {
                                        transportId: this._sendTransport.id
                                      }
                                    )
                                  );
                                case 4:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return me2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getRecvTransportRemoteStats",
                    value: (he2 = (0, a.Z)(
                      d().mark(function e4() {
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Ti.debug(
                                    "getRecvTransportRemoteStats()"
                                  ), this._recvTransport) {
                                    e5.next = 3;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 3:
                                  return e5.abrupt(
                                    "return",
                                    this._protoo.request(
                                      "getTransportStats",
                                      {
                                        transportId: this._recvTransport.id
                                      }
                                    )
                                  );
                                case 4:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return he2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getAudioRemoteStats",
                    value: (ue2 = (0, a.Z)(
                      d().mark(function e4() {
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Ti.debug("getAudioRemoteStats()"), this._micProducer) {
                                    e5.next = 3;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 3:
                                  return e5.abrupt(
                                    "return",
                                    this._latestStats[this._micProducer.id]
                                  );
                                case 4:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return ue2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getVideoRemoteStats",
                    value: (le2 = (0, a.Z)(
                      d().mark(function e4() {
                        var t4;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Ti.debug("getVideoRemoteStats()"), t4 = this._webcamProducer) {
                                    e5.next = 4;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 4:
                                  return e5.abrupt(
                                    "return",
                                    this._latestStats[t4.id]
                                  );
                                case 5:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return le2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getShareRemoteStats",
                    value: (pe2 = (0, a.Z)(
                      d().mark(function e4() {
                        var t4;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Ti.debug("getVideoRemoteStats()"), t4 = this._shareProducer) {
                                    e5.next = 4;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 4:
                                  return e5.abrupt(
                                    "return",
                                    this._latestStats[t4.id]
                                  );
                                case 5:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return pe2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getConsumerRemoteStats",
                    value: (ce2 = (0, a.Z)(
                      d().mark(function e4(t4) {
                        var r4;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Ti.debug("getConsumerRemoteStats()"), r4 = this._consumers.get(t4)) {
                                    e5.next = 4;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 4:
                                  return this._latestStats[t4] && (this._latestStats[t4][0].currentSpatialLayer = r4.currentSpatialLayer, this._latestStats[t4][0].currentTemporalLayer = r4.currentTemporalLayer, this._latestStats[t4][0].preferredSpatialLayer = r4.preferredSpatialLayer, this._latestStats[t4][0].preferredTemporalLayer = r4.preferredTemporalLayer), e5.abrupt("return", this._latestStats[t4]);
                                case 6:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return ce2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getChatDataProducerRemoteStats",
                    value: (O2 = (0, a.Z)(
                      d().mark(function e4() {
                        var t4;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Ti.debug(
                                    "getChatDataProducerRemoteStats()"
                                  ), t4 = this._chatDataProducer) {
                                    e5.next = 4;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 4:
                                  return e5.abrupt(
                                    "return",
                                    this._protoo.request(
                                      "getDataProducerStats",
                                      { dataProducerId: t4.id }
                                    )
                                  );
                                case 5:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return O2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getBotDataProducerRemoteStats",
                    value: (k2 = (0, a.Z)(
                      d().mark(function e4() {
                        var t4;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Ti.debug(
                                    "getBotDataProducerRemoteStats()"
                                  ), t4 = this._botDataProducer) {
                                    e5.next = 4;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 4:
                                  return e5.abrupt(
                                    "return",
                                    this._protoo.request(
                                      "getDataProducerStats",
                                      { dataProducerId: t4.id }
                                    )
                                  );
                                case 5:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return k2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getDataConsumerRemoteStats",
                    value: (R2 = (0, a.Z)(
                      d().mark(function e4(t4) {
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Ti.debug(
                                    "getDataConsumerRemoteStats()"
                                  ), this._dataConsumers.get(t4)) {
                                    e5.next = 4;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 4:
                                  return e5.abrupt(
                                    "return",
                                    this._protoo.request(
                                      "getDataConsumerStats",
                                      { dataConsumerId: t4 }
                                    )
                                  );
                                case 5:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return R2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getSendTransportLocalStats",
                    value: (E2 = (0, a.Z)(
                      d().mark(function e4() {
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Ti.debug(
                                    "getSendTransportLocalStats()"
                                  ), this._sendTransport) {
                                    e5.next = 3;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 3:
                                  return e5.abrupt(
                                    "return",
                                    this._sendTransport.getStats()
                                  );
                                case 4:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return E2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getRecvTransportLocalStats",
                    value: (T2 = (0, a.Z)(
                      d().mark(function e4() {
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Ti.debug(
                                    "getRecvTransportLocalStats()"
                                  ), this._recvTransport) {
                                    e5.next = 3;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 3:
                                  return e5.abrupt(
                                    "return",
                                    this._recvTransport.getStats()
                                  );
                                case 4:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return T2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getAudioLocalStats",
                    value: (w2 = (0, a.Z)(
                      d().mark(function e4() {
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Ti.debug("getAudioLocalStats()"), this._micProducer) {
                                    e5.next = 3;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 3:
                                  return e5.abrupt(
                                    "return",
                                    this._micProducer.getStats()
                                  );
                                case 4:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return w2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getVideoLocalStats",
                    value: (S2 = (0, a.Z)(
                      d().mark(function e4() {
                        var t4;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (Ti.debug("getVideoLocalStats()"), t4 = this._webcamProducer || this._shareProducer) {
                                    e5.next = 4;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 4:
                                  return e5.abrupt("return", t4.getStats());
                                case 5:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return S2.apply(this, arguments);
                    })
                  },
                  {
                    key: "getConsumerLocalStats",
                    value: (b2 = (0, a.Z)(
                      d().mark(function e4(t4) {
                        var r4;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (r4 = this._consumers.get(t4)) {
                                    e5.next = 3;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 3:
                                  return e5.abrupt("return", r4.getStats());
                                case 4:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4) {
                      return b2.apply(this, arguments);
                    })
                  },
                  {
                    key: "applyNetworkThrottle",
                    value: (v2 = (0, a.Z)(
                      d().mark(function e4(t4) {
                        var r4, n2, a2, i2;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return r4 = t4.uplink, n2 = t4.downlink, a2 = t4.rtt, i2 = t4.secret, Ti.debug(
                                    "applyNetworkThrottle() [uplink:%s, downlink:%s, rtt:%s]",
                                    r4,
                                    n2,
                                    a2
                                  ), e5.prev = 2, e5.next = 5, this._protoo.request(
                                    "applyNetworkThrottle",
                                    {
                                      uplink: r4,
                                      downlink: n2,
                                      rtt: a2,
                                      secret: i2
                                    }
                                  );
                                case 5:
                                  e5.next = 11;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), Ti.error(
                                    "applyNetworkThrottle() | failed:%o",
                                    e5.t0
                                  ), _i.dispatch(
                                    se({
                                      type: "error",
                                      text: "Error applying network throttle: ".concat(
                                        e5.t0
                                      )
                                    })
                                  );
                                case 11:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function(e4) {
                      return v2.apply(this, arguments);
                    })
                  },
                  {
                    key: "resetNetworkThrottle",
                    value: (g2 = (0, a.Z)(
                      d().mark(function e4(t4) {
                        var r4, n2, a2;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return r4 = t4.silent, n2 = void 0 !== r4 && r4, a2 = t4.secret, Ti.debug("resetNetworkThrottle()"), e5.prev = 2, e5.next = 5, this._protoo.request(
                                    "resetNetworkThrottle",
                                    { secret: a2 }
                                  );
                                case 5:
                                  e5.next = 10;
                                  break;
                                case 7:
                                  e5.prev = 7, e5.t0 = e5.catch(2), n2 || (Ti.error(
                                    "resetNetworkThrottle() | failed:%o",
                                    e5.t0
                                  ), _i.dispatch(
                                    se({
                                      type: "error",
                                      text: "Error resetting network throttle: ".concat(
                                        e5.t0
                                      )
                                    })
                                  ));
                                case 10:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 7]]
                        );
                      })
                    ), function(e4) {
                      return g2.apply(this, arguments);
                    })
                  },
                  {
                    key: "createProducerTransport",
                    value: (_2 = (0, a.Z)(
                      d().mark(function e4(t4, r4) {
                        var n2, i2, s2, o2, c3, p2, l2, u3, h3, m3, f3 = this;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return s2 = t4.id, o2 = t4.iceParameters, c3 = t4.iceCandidates, p2 = t4.dtlsParameters, l2 = t4.sctpParameters, e5.next = 3, null === (n2 = this._openTelemetry) || void 0 === n2 ? void 0 : n2.trace({
                                    spanName: "Creating Send Transport",
                                    span: r4 || null
                                  });
                                case 3:
                                  u3 = e5.sent, this._sendTransport = this._mediasoupDevice.createSendTransport(
                                    {
                                      id: s2,
                                      iceParameters: o2,
                                      iceCandidates: c3,
                                      dtlsParameters: p2,
                                      sctpParameters: l2,
                                      iceServers: this._iceServers
                                    }
                                  ), this._sendTransport.on(
                                    "connect",
                                    function(e6, t5, r5) {
                                      var n3, a2 = e6.dtlsParameters;
                                      null === (n3 = f3._openTelemetry) || void 0 === n3 || n3.traceAutoComplete({
                                        spanName: "this._sendTransport `connect` Event : Transport is about to establish the ICE+DTLS connection",
                                        status: 1
                                      }), f3._protoo.request(
                                        "connectWebRtcTransport",
                                        {
                                          transportId: f3._sendTransport.id,
                                          dtlsParameters: a2
                                        }
                                      ).then(t5).catch(r5);
                                    }
                                  ), this._sendTransport.on(
                                    "produce",
                                    function() {
                                      var e6 = (0, a.Z)(
                                        d().mark(function e7(t5, r5, n3) {
                                          var a2, i3, s3, o3, c4, p3;
                                          return d().wrap(
                                            function(e8) {
                                              for (; ; )
                                                switch (e8.prev = e8.next) {
                                                  case 0:
                                                    return a2 = t5.kind, i3 = t5.rtpParameters, s3 = t5.appData, e8.prev = 1, null === (o3 = f3._openTelemetry) || void 0 === o3 || o3.traceAutoComplete(
                                                      {
                                                        spanName: "this._sendTransport `produce` Event : Transmit information about a new producer ",
                                                        status: 1
                                                      }
                                                    ), e8.next = 5, f3._protoo.request(
                                                      "produce",
                                                      {
                                                        transportId: f3._sendTransport.id,
                                                        kind: a2,
                                                        rtpParameters: i3,
                                                        appData: s3
                                                      }
                                                    );
                                                  case 5:
                                                    c4 = e8.sent, p3 = c4.id, r5({ id: p3 }), e8.next = 14;
                                                    break;
                                                  case 10:
                                                    e8.prev = 10, e8.t0 = e8.catch(1), f3._openTelemetry.pushLogs(
                                                      {
                                                        logText: 'Error this._sendTransport "produce" Event catch',
                                                        logType: "ERROR",
                                                        attributes: {
                                                          error: e8.t0.message
                                                        }
                                                      }
                                                    ), n3(e8.t0);
                                                  case 14:
                                                  case "end":
                                                    return e8.stop();
                                                }
                                            },
                                            e7,
                                            null,
                                            [[1, 10]]
                                          );
                                        })
                                      );
                                      return function(t5, r5, n3) {
                                        return e6.apply(this, arguments);
                                      };
                                    }()
                                  ), this._sendTransport.on(
                                    "producedata",
                                    function() {
                                      var e6 = (0, a.Z)(
                                        d().mark(function e7(t5, r5, n3) {
                                          var a2, i3, s3, o3, c4, p3;
                                          return d().wrap(
                                            function(e8) {
                                              for (; ; )
                                                switch (e8.prev = e8.next) {
                                                  case 0:
                                                    return a2 = t5.sctpStreamParameters, i3 = t5.label, s3 = t5.protocol, o3 = t5.appData, Ti.debug(
                                                      '"producedata" event: [sctpStreamParameters:%o, appData:%o]',
                                                      a2,
                                                      o3
                                                    ), e8.prev = 2, e8.next = 5, f3._protoo.request(
                                                      "produceData",
                                                      {
                                                        transportId: f3._sendTransport.id,
                                                        sctpStreamParameters: a2,
                                                        label: i3,
                                                        protocol: s3,
                                                        appData: o3
                                                      }
                                                    );
                                                  case 5:
                                                    c4 = e8.sent, p3 = c4.id, r5({ id: p3 }), e8.next = 14;
                                                    break;
                                                  case 10:
                                                    e8.prev = 10, e8.t0 = e8.catch(2), f3._openTelemetry.pushLogs(
                                                      {
                                                        logText: "Error producedata event catch",
                                                        logType: "ERROR",
                                                        attributes: {
                                                          error: e8.t0.message
                                                        }
                                                      }
                                                    ), n3(e8.t0);
                                                  case 14:
                                                  case "end":
                                                    return e8.stop();
                                                }
                                            },
                                            e7,
                                            null,
                                            [[2, 10]]
                                          );
                                        })
                                      );
                                      return function(t5, r5, n3) {
                                        return e6.apply(this, arguments);
                                      };
                                    }()
                                  ), this._sendTransport.on(
                                    "connectionstatechange",
                                    function(e6) {
                                      var t5;
                                      null === (t5 = f3._openTelemetry) || void 0 === t5 || t5.traceAutoComplete({
                                        spanName: "_sendTransport Event connectionstatechange ".concat(
                                          e6
                                        ),
                                        status: 1
                                      }), "failed" === e6 && f3.restartIce(), f3._transportState = e6;
                                    }
                                  ), h3 = 0, (m3 = this._metrics.addNewProbe(
                                    this._sendTransport,
                                    "sendTransport"
                                  )).onStatsCollected = function(e6) {
                                    try {
                                      var t5, r5, n3, a2;
                                      f3._stats.producerStats || (f3._stats.producerStats = {}), f3._stats.producerStats.audio || (f3._stats.producerStats.audio = []), f3._stats.producerStats.shareAudio || (f3._stats.producerStats.shareAudio = []), f3._micProducer && (f3._latestStats[null === (t5 = f3._micProducer) || void 0 === t5 ? void 0 : t5.id] = []), f3._shareAudioProducer && (f3._latestStats[null === (r5 = f3._shareAudioProducer) || void 0 === r5 ? void 0 : r5.id] = []), e6.audio.forEach(function(e7) {
                                        var t6, r6, n4;
                                        if (f3._micProducer && e7.trackId == (null === (t6 = f3._micProducer) || void 0 === t6 ? void 0 : t6.track.id))
                                          f3._latestStats[null === (n4 = f3._micProducer) || void 0 === n4 ? void 0 : n4.id].push(e7), h3 % 5 == 0 && f3._stats.producerStats.audio.push(
                                            e7
                                          );
                                        else if (f3._shareAudioProducer && e7.trackId == (null === (r6 = f3._shareAudioProducer) || void 0 === r6 ? void 0 : r6.track.id)) {
                                          var a3;
                                          f3._latestStats[null === (a3 = f3._shareAudioProducer) || void 0 === a3 ? void 0 : a3.id].push(e7), h3 % 5 == 0 && f3._stats.producerStats.shareAudio.push(
                                            e7
                                          );
                                        }
                                      }), f3._stats.producerStats.video || (f3._stats.producerStats.video = []), f3._stats.producerStats.share || (f3._stats.producerStats.share = []), f3._webcamProducer && (f3._latestStats[null === (n3 = f3._webcamProducer) || void 0 === n3 ? void 0 : n3.id] = []), f3._shareProducer && (f3._latestStats[null === (a2 = f3._shareProducer) || void 0 === a2 ? void 0 : a2.id] = []), e6.video.forEach(function(e7) {
                                        var t6, r6, n4;
                                        if (f3._webcamProducer && e7.trackId == (null === (t6 = f3._webcamProducer) || void 0 === t6 ? void 0 : t6.track.id))
                                          f3._latestStats[null === (n4 = f3._webcamProducer) || void 0 === n4 ? void 0 : n4.id].push(e7);
                                        else if (f3._shareProducer && e7.trackId == (null === (r6 = f3._shareProducer) || void 0 === r6 ? void 0 : r6.track.id)) {
                                          var a3;
                                          f3._latestStats[null === (a3 = f3._shareProducer) || void 0 === a3 ? void 0 : a3.id].push(e7);
                                        }
                                      }), h3 % 5 == 0 && null != f3._webcamProducer && f3._stats.producerStats.video.push(
                                        {
                                          timestamp: /* @__PURE__ */ new Date(),
                                          stats: f3._latestStats[f3._webcamProducer.id]
                                        }
                                      ), h3 % 5 == 0 && null != f3._shareProducer && f3._stats.producerStats.share.push(
                                        {
                                          timestamp: /* @__PURE__ */ new Date(),
                                          stats: f3._latestStats[f3._shareProducer.id]
                                        }
                                      ), h3++;
                                    } catch (e7) {
                                      f3._openTelemetry.pushLogs({
                                        logText: "Error PRODUCER Stats ERROR",
                                        logType: "ERROR",
                                        attributes: { error: e7.message }
                                      }), console.log("PRODUCER ERROR", e7);
                                    }
                                  }, m3.start(), this._sendTransport.observer.on(
                                    "close",
                                    function() {
                                      m3.stop(), f3._metrics.removeExistingProbe(m3);
                                    }
                                  ), null === (i2 = this._openTelemetry) || void 0 === i2 || i2.completeSpan({
                                    span: u3,
                                    status: 1,
                                    message: "Send Transport Created Successfully"
                                  });
                                case 15:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4, t4) {
                      return _2.apply(this, arguments);
                    })
                  },
                  {
                    key: "createConsumerTransport",
                    value: (f2 = (0, a.Z)(
                      d().mark(function e4(t4, r4) {
                        var n2, a2, i2, s2, o2, c3, p2, l2, u3, h3, m3 = this;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return i2 = t4.id, s2 = t4.iceParameters, o2 = t4.iceCandidates, c3 = t4.dtlsParameters, p2 = t4.sctpParameters, e5.next = 3, null === (n2 = this._openTelemetry) || void 0 === n2 ? void 0 : n2.trace({
                                    spanName: "Creating Recieve Transport",
                                    span: r4 || null
                                  });
                                case 3:
                                  l2 = e5.sent, this._recvTransport = this._mediasoupDevice.createRecvTransport(
                                    {
                                      id: i2,
                                      iceParameters: s2,
                                      iceCandidates: o2,
                                      dtlsParameters: c3,
                                      sctpParameters: p2,
                                      iceServers: this._iceServers
                                    }
                                  ), this._recvTransport.on(
                                    "connect",
                                    function(e6, t5, r5) {
                                      var n3, a3 = e6.dtlsParameters;
                                      null === (n3 = m3._openTelemetry) || void 0 === n3 || n3.traceAutoComplete({
                                        spanName: "this._recvTransport `connect` Event : Recieve Transport is about to establish the ICE+DTLS connection",
                                        status: 1
                                      }), m3._protoo.request(
                                        "connectWebRtcTransport",
                                        {
                                          transportId: m3._recvTransport.id,
                                          dtlsParameters: a3
                                        }
                                      ).then(t5).catch(r5);
                                    }
                                  ), this._recvTransport.on(
                                    "connectionstatechange",
                                    function(e6) {
                                      var t5;
                                      null === (t5 = m3._openTelemetry) || void 0 === t5 || t5.traceAutoComplete({
                                        spanName: "_recvTransport Event connectionstatechange ".concat(
                                          e6
                                        ),
                                        status: 1
                                      }), "failed" === e6 && m3.restartIce(), m3._transportState = e6;
                                    }
                                  ), u3 = 0, (h3 = this._metrics.addNewProbe(
                                    this._recvTransport,
                                    "transport"
                                  )).onStatsCollected = function(e6) {
                                    try {
                                      e6.audio.forEach(function(e7) {
                                        var t5 = m3._consumers.get(
                                          e7.trackId
                                        );
                                        if (null != t5) {
                                          var r5 = 1 == t5.appData.share ? "audio" == t5.kind ? "shareAudio" : "share" : t5.kind;
                                          m3._stats.consumerStats || (m3._stats.consumerStats = {}), m3._stats.consumerStats[t5.appData.peerId] || (m3._stats.consumerStats[t5.appData.peerId] = {}), m3._stats.consumerStats[t5.appData.peerId][r5] || (m3._stats.consumerStats[t5.appData.peerId][r5] = []), e7.trackId == t5.id && (m3._latestStats[t5.id] = [], m3._latestStats[t5.id].push(
                                            e7
                                          ), u3 % 5 == 0 && m3._stats.consumerStats[t5.appData.peerId][r5].push(e7));
                                        }
                                      }), e6.video.forEach(function(e7) {
                                        var t5 = m3._consumers.get(
                                          e7.trackId
                                        );
                                        if (null != t5) {
                                          var r5 = 1 == t5.appData.share ? "audio" == t5.kind ? "shareAudio" : "share" : t5.kind;
                                          m3._stats.consumerStats || (m3._stats.consumerStats = {}), m3._stats.consumerStats[t5.appData.peerId] || (m3._stats.consumerStats[t5.appData.peerId] = {}), m3._stats.consumerStats[t5.appData.peerId][r5] || (m3._stats.consumerStats[t5.appData.peerId][r5] = []), e7.trackId == t5.id && (m3._latestStats[t5.id] = [], m3._latestStats[t5.id].push(
                                            e7
                                          ), u3 % 5 == 0 && m3._stats.consumerStats[t5.appData.peerId][r5].push(e7));
                                        }
                                      }), u3++;
                                    } catch (e7) {
                                      m3._openTelemetry.pushLogs({
                                        logText: "Error CONSUMER Stats ERROR",
                                        logType: "ERROR",
                                        attributes: { error: e7.message }
                                      }), console.log("CONSUMER CATCH", e7);
                                    }
                                  }, h3.start(), this._recvTransport.observer.on(
                                    "close",
                                    function() {
                                      h3.stop(), m3._metrics.removeExistingProbe(h3);
                                    }
                                  ), null === (a2 = this._openTelemetry) || void 0 === a2 || a2.completeSpan({
                                    span: l2,
                                    status: 1,
                                    message: "Recieve Transport Created Successfully"
                                  });
                                case 13:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function(e4, t4) {
                      return f2.apply(this, arguments);
                    })
                  },
                  {
                    key: "joinRoom",
                    value: (m2 = (0, a.Z)(
                      d().mark(function e4() {
                        var t4, r4, n2, a2, i2, s2, c3, p2, u3, h3, m3, f3, _3, g3, v3, y2, b3, S3, w3, T3, E3, R3, P2, k3;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return Ti.debug("joinRoom()"), e5.prev = 1, e5.next = 4, null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "Loading Router Capabilities",
                                    span: this._joinSpan
                                  });
                                case 4:
                                  return c3 = e5.sent, this._mediasoupDevice = new l.Device({
                                    handlerName: this._handlerName
                                  }), e5.next = 8, this._protoo.request(
                                    "getRouterRtpCapabilities"
                                  );
                                case 8:
                                  return p2 = e5.sent, null == c3 || c3.setAttributes(
                                    (0, o.Z)(
                                      {},
                                      "routerRtpCapabilities",
                                      JSON.stringify(p2).toString()
                                    )
                                  ), e5.next = 12, this._mediasoupDevice.load({
                                    routerRtpCapabilities: p2
                                  });
                                case 12:
                                  if (null === (r4 = this._openTelemetry) || void 0 === r4 || r4.completeSpan({
                                    span: c3,
                                    status: 1,
                                    message: "Router Capabilities Loaded"
                                  }), !this._produce) {
                                    e5.next = 18;
                                    break;
                                  }
                                  return e5.next = 16, this._protoo.request(
                                    "createWebRtcTransport",
                                    {
                                      preferredProtocol: this._preferredProtocol,
                                      producing: true,
                                      consuming: false,
                                      sctpCapabilities: this._useDataChannel ? this._mediasoupDevice.sctpCapabilities : void 0
                                    }
                                  );
                                case 16:
                                  u3 = e5.sent, this.createProducerTransport(
                                    u3,
                                    this._joinSpan
                                  );
                                case 18:
                                  if (!this._consume) {
                                    e5.next = 23;
                                    break;
                                  }
                                  return e5.next = 21, this._protoo.request(
                                    "createWebRtcTransport",
                                    {
                                      preferredProtocol: this._preferredProtocol,
                                      producing: false,
                                      consuming: true,
                                      sctpCapabilities: this._useDataChannel ? this._mediasoupDevice.sctpCapabilities : void 0
                                    }
                                  );
                                case 21:
                                  h3 = e5.sent, this.createConsumerTransport(
                                    h3,
                                    this._joinSpan
                                  );
                                case 23:
                                  return e5.next = 25, this._protoo.request("join", {
                                    displayName: this._displayName,
                                    device: this._device,
                                    secret: this._secret,
                                    rtpCapabilities: null === (n2 = this._mediasoupDevice) || void 0 === n2 ? void 0 : n2.rtpCapabilities,
                                    sctpCapabilities: null === (a2 = this._mediasoupDevice) || void 0 === a2 ? void 0 : a2.sctpCapabilities,
                                    deviceInfo: this._deviceInfo,
                                    autoConsume: this._autoConsume
                                  });
                                case 25:
                                  m3 = e5.sent, f3 = m3.peers, _3 = m3.poll, g3 = m3.messages, _i.dispatch(x("connected")), null === (i2 = this._openTelemetry) || void 0 === i2 || i2.traceAutoComplete({
                                    spanName: "Emitted `MEETING_JOINED` Event",
                                    status: 1
                                  }), this._eventEmitter.emit(
                                    "MEETING_JOINED",
                                    {
                                      peers: f3,
                                      poll: _3,
                                      messages: g3,
                                      baseUrl: this._baseUrl
                                    }
                                  ), _i.dispatch({
                                    type: "REMOVE_ALL_NOTIFICATIONS"
                                  }), _i.dispatch(
                                    se({
                                      text: "You are in the room!",
                                      timeout: 3e3
                                    })
                                  ), v3 = ui(f3);
                                  try {
                                    for (v3.s(); !(y2 = v3.n()).done; )
                                      b3 = y2.value, S3 = q(
                                        fi(
                                          fi({}, b3),
                                          {},
                                          {
                                            consumers: [],
                                            dataConsumers: []
                                          }
                                        )
                                      ), _i.dispatch(S3), this._eventEmitter.emit(
                                        S3.type,
                                        S3.payload
                                      );
                                  } catch (e6) {
                                    v3.e(e6);
                                  } finally {
                                    v3.f();
                                  }
                                  this._produce && (_i.dispatch(
                                    L({
                                      canSendMic: this._mediasoupDevice.canProduce(
                                        "audio"
                                      ),
                                      canSendWebcam: this._mediasoupDevice.canProduce(
                                        "video"
                                      )
                                    })
                                  ), this._micEnabled ? this.enableMic(
                                    this.customMicrophoneAudioTrack,
                                    this._joinSpan
                                  ) : this.customMicrophoneAudioTrack && (null === (w3 = this._openTelemetry) || void 0 === w3 || w3.traceAutoComplete({
                                    spanName: "Disposing Audio Track",
                                    status: 2
                                  }), this.customMicrophoneAudioTrack.getTracks().forEach(function(e6) {
                                    e6.stop();
                                  })), T3 = C(), this._webcamEnabled && (!T3 || T3.webcamEnabled || this._externalVideo) ? this.enableWebcam(
                                    this.customCameraVideoTrack,
                                    this._joinSpan
                                  ) : this.customCameraVideoTrack && (null === (E3 = this._openTelemetry) || void 0 === E3 || E3.traceAutoComplete({
                                    spanName: "Disposing Video Track",
                                    status: 2
                                  }), this.customCameraVideoTrack.getTracks().forEach(function(e6) {
                                    e6.stop();
                                  })), this.enableChatDataProducer()), window.SHOW_INFO && (R3 = _i.getState(), P2 = R3.me, _i.dispatch(I(P2.id))), null === (s2 = this._openTelemetry) || void 0 === s2 || s2.completeSpan({
                                    span: this._joinSpan,
                                    status: 1,
                                    message: "Room Joined"
                                  }), e5.next = 48;
                                  break;
                                case 41:
                                  e5.prev = 41, e5.t0 = e5.catch(1), Ti.error("joinRoom() failed:%o", e5.t0), this._openTelemetry.pushLogs({
                                    logText: "Error Could not join the room",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), null === (k3 = this._openTelemetry) || void 0 === k3 || k3.completeSpan({
                                    span: this._joinSpan,
                                    status: 2,
                                    message: "Could not join the room ".concat(
                                      e5.t0
                                    )
                                  }), _i.dispatch(
                                    se({
                                      type: "error",
                                      text: "Could not join the room: ".concat(
                                        e5.t0
                                      )
                                    })
                                  ), this.close({ sendLeft: true });
                                case 48:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[1, 41]]
                        );
                      })
                    ), function() {
                      return m2.apply(this, arguments);
                    })
                  },
                  {
                    key: "_updateMics",
                    value: (h2 = (0, a.Z)(
                      d().mark(function e4() {
                        var t4, r4, n2, a2, i2, s2, o2, c3, p2, l2, u3, h3 = arguments;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return n2 = h3.length > 0 && void 0 !== h3[0] ? h3[0] : void 0, this._mics = /* @__PURE__ */ new Map(), Ti.debug("_updateMics() |"), e5.next = 5, navigator.mediaDevices.enumerateDevices();
                                case 5:
                                  return a2 = e5.sent, e5.next = 8, null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "_updateMics() Calling for Getting System Mic list",
                                    attributes: {
                                      systemDevice: a2 ? JSON.stringify(a2) : "Device not found"
                                    },
                                    span: n2 || null
                                  });
                                case 8:
                                  i2 = e5.sent, s2 = ui(a2);
                                  try {
                                    for (s2.s(); !(o2 = s2.n()).done; )
                                      "audioinput" == (c3 = o2.value).kind && this._mics.set(c3.deviceId, c3);
                                  } catch (e6) {
                                    s2.e(e6);
                                  } finally {
                                    s2.f();
                                  }
                                  p2 = Array.from(this._mics.values()), l2 = p2.length, u3 = this._mic.device ? this._mic.device.deviceId : void 0, 0 === l2 ? this._mic.device = null : this._mics.has(u3) || (this._mic.device = p2[0]), this._tracesEnabled && i2.setAttribute({
                                    "this._mic": JSON.stringify(
                                      this._mic
                                    )
                                  }), null === (r4 = this._openTelemetry) || void 0 === r4 || r4.completeSpan({
                                    span: i2,
                                    status: 1,
                                    message: "Update Mic"
                                  });
                                case 17:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return h2.apply(this, arguments);
                    })
                  },
                  {
                    key: "_updateWebcams",
                    value: (u2 = (0, a.Z)(
                      d().mark(function e4() {
                        var t4, r4, n2, a2, i2, s2, o2, c3, p2, l2, u3, h3 = arguments;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  return n2 = h3.length > 0 && void 0 !== h3[0] ? h3[0] : void 0, Ti.debug("_updateWebcams()"), this._webcams = /* @__PURE__ */ new Map(), Ti.debug(
                                    "_updateWebcams() | calling enumerateDevices()"
                                  ), e5.next = 6, navigator.mediaDevices.enumerateDevices();
                                case 6:
                                  return a2 = e5.sent, e5.next = 9, null === (t4 = this._openTelemetry) || void 0 === t4 ? void 0 : t4.trace({
                                    spanName: "_updateWebcams() Calling for Getting System Webcam list",
                                    attributes: {
                                      systemDevice: a2 ? JSON.stringify(a2) : "Device not found"
                                    },
                                    span: n2 || null
                                  });
                                case 9:
                                  i2 = e5.sent, s2 = ui(a2), e5.prev = 11, s2.s();
                                case 13:
                                  if ((o2 = s2.n()).done) {
                                    e5.next = 20;
                                    break;
                                  }
                                  if ("videoinput" === (c3 = o2.value).kind) {
                                    e5.next = 17;
                                    break;
                                  }
                                  return e5.abrupt("continue", 18);
                                case 17:
                                  this._webcams.set(c3.deviceId, c3);
                                case 18:
                                  e5.next = 13;
                                  break;
                                case 20:
                                  e5.next = 25;
                                  break;
                                case 22:
                                  e5.prev = 22, e5.t0 = e5.catch(11), s2.e(e5.t0);
                                case 25:
                                  return e5.prev = 25, s2.f(), e5.finish(25);
                                case 28:
                                  p2 = Array.from(this._webcams.values()), l2 = p2.length, u3 = this._webcam.device ? this._webcam.device.deviceId : void 0, Ti.debug(
                                    "_updateWebcams() [webcams:%o]",
                                    p2
                                  ), 0 === l2 ? this._webcam.device = null : this._webcams.has(u3) || (this._webcam.device = p2[0]), this._tracesEnabled && i2.setAttribute({
                                    "this._webcams": JSON.stringify(
                                      this._webcam
                                    )
                                  }), null === (r4 = this._openTelemetry) || void 0 === r4 || r4.completeSpan({
                                    span: i2,
                                    status: 1,
                                    message: "Update Webcam"
                                  }), _i.dispatch(M(this._webcams.size > 1));
                                case 36:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[11, 22, 25, 28]]
                        );
                      })
                    ), function() {
                      return u2.apply(this, arguments);
                    })
                  },
                  {
                    key: "_getWebcamType",
                    value: function(e4) {
                      return /(back|rear)/i.test(e4.label) ? (Ti.debug(
                        "_getWebcamType() | it seems to be a back camera"
                      ), "back") : (Ti.debug(
                        "_getWebcamType() | it seems to be a front camera"
                      ), "front");
                    }
                  },
                  {
                    key: "_pauseConsumer",
                    value: (c2 = (0, a.Z)(
                      d().mark(function e4(t4) {
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (!t4.paused) {
                                    e5.next = 2;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 2:
                                  return e5.prev = 2, e5.next = 5, this._protoo.request("pauseConsumer", {
                                    consumerId: t4.id
                                  });
                                case 5:
                                  t4.pause(), _i.dispatch(Q(t4.id, "local")), e5.next = 14;
                                  break;
                                case 9:
                                  e5.prev = 9, e5.t0 = e5.catch(2), Ti.error(
                                    "_pauseConsumer() | failed:%o",
                                    e5.t0
                                  ), this._openTelemetry.pushLogs({
                                    logText: "Error pausing Consumer",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), _i.dispatch(
                                    se({
                                      type: "error",
                                      text: "Error pausing Consumer: ".concat(
                                        e5.t0
                                      )
                                    })
                                  );
                                case 14:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 9]]
                        );
                      })
                    ), function(e4) {
                      return c2.apply(this, arguments);
                    })
                  },
                  {
                    key: "_resumeConsumer",
                    value: (r3 = (0, a.Z)(
                      d().mark(function e4(t4) {
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (t4.paused) {
                                    e5.next = 2;
                                    break;
                                  }
                                  return e5.abrupt("return");
                                case 2:
                                  return e5.prev = 2, e5.next = 5, this._protoo.request("resumeConsumer", {
                                    consumerId: t4.id
                                  });
                                case 5:
                                  t4.resume(), _i.dispatch(Y(t4.id, "local")), e5.next = 14;
                                  break;
                                case 9:
                                  e5.prev = 9, e5.t0 = e5.catch(2), Ti.error(
                                    "_resumeConsumer() | failed:%o",
                                    e5.t0
                                  ), this._openTelemetry.pushLogs({
                                    logText: "Error resuming Consumer",
                                    logType: "ERROR",
                                    attributes: { error: e5.t0.message }
                                  }), _i.dispatch(
                                    se({
                                      type: "error",
                                      text: "Error resuming Consumer: ".concat(
                                        e5.t0
                                      )
                                    })
                                  );
                                case 14:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this,
                          [[2, 9]]
                        );
                      })
                    ), function(e4) {
                      return r3.apply(this, arguments);
                    })
                  },
                  {
                    key: "_getExternalVideoStream",
                    value: (t3 = (0, a.Z)(
                      d().mark(function e4() {
                        var t4 = this;
                        return d().wrap(
                          function(e5) {
                            for (; ; )
                              switch (e5.prev = e5.next) {
                                case 0:
                                  if (!this._externalVideoStream) {
                                    e5.next = 2;
                                    break;
                                  }
                                  return e5.abrupt(
                                    "return",
                                    this._externalVideoStream
                                  );
                                case 2:
                                  if (!(this._externalVideo.readyState < 3)) {
                                    e5.next = 5;
                                    break;
                                  }
                                  return e5.next = 5, new Promise(function(e6) {
                                    return t4._externalVideo.addEventListener(
                                      "canplay",
                                      e6
                                    );
                                  });
                                case 5:
                                  if (!this._externalVideo.captureStream) {
                                    e5.next = 9;
                                    break;
                                  }
                                  this._externalVideoStream = this._externalVideo.captureStream(), e5.next = 14;
                                  break;
                                case 9:
                                  if (!this._externalVideo.mozCaptureStream) {
                                    e5.next = 13;
                                    break;
                                  }
                                  this._externalVideoStream = this._externalVideo.mozCaptureStream(), e5.next = 14;
                                  break;
                                case 13:
                                  throw new Error(
                                    "video.captureStream() not supported"
                                  );
                                case 14:
                                  return e5.abrupt(
                                    "return",
                                    this._externalVideoStream
                                  );
                                case 15:
                                case "end":
                                  return e5.stop();
                              }
                          },
                          e4,
                          this
                        );
                      })
                    ), function() {
                      return t3.apply(this, arguments);
                    })
                  },
                  {
                    key: "_emitError",
                    value: function(e4) {
                      this._eventEmitter.emit("ERROR", e4);
                    }
                  }
                ],
                [
                  {
                    key: "init",
                    value: function(e4) {
                      _i = e4.store;
                    }
                  }
                ]
              ), e3;
            }();
          },
          1206: function(e2) {
            e2.exports = function(e3) {
              var t2 = {};
              function r2(n) {
                if (t2[n])
                  return t2[n].exports;
                var a = t2[n] = { i: n, l: false, exports: {} };
                return e3[n].call(a.exports, a, a.exports, r2), a.l = true, a.exports;
              }
              return r2.m = e3, r2.c = t2, r2.d = function(e4, t3, n) {
                r2.o(e4, t3) || Object.defineProperty(e4, t3, { enumerable: true, get: n });
              }, r2.r = function(e4) {
                "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e4, Symbol.toStringTag, {
                  value: "Module"
                }), Object.defineProperty(e4, "__esModule", { value: true });
              }, r2.t = function(e4, t3) {
                if (1 & t3 && (e4 = r2(e4)), 8 & t3)
                  return e4;
                if (4 & t3 && "object" == typeof e4 && e4 && e4.__esModule)
                  return e4;
                var n = /* @__PURE__ */ Object.create(null);
                if (r2.r(n), Object.defineProperty(n, "default", {
                  enumerable: true,
                  value: e4
                }), 2 & t3 && "string" != typeof e4)
                  for (var a in e4)
                    r2.d(
                      n,
                      a,
                      (function(t4) {
                        return e4[t4];
                      }).bind(null, a)
                    );
                return n;
              }, r2.n = function(e4) {
                var t3 = e4 && e4.__esModule ? function() {
                  return e4.default;
                } : function() {
                  return e4;
                };
                return r2.d(t3, "a", t3), t3;
              }, r2.o = function(e4, t3) {
                return Object.prototype.hasOwnProperty.call(e4, t3);
              }, r2.p = "", r2(r2.s = 90);
            }({
              17: function(e3, t2, r2) {
                "use strict";
                t2.__esModule = true, t2.default = void 0;
                var n = r2(18), a = function() {
                  function e4() {
                  }
                  return e4.getFirstMatch = function(e5, t3) {
                    var r3 = t3.match(e5);
                    return r3 && r3.length > 0 && r3[1] || "";
                  }, e4.getSecondMatch = function(e5, t3) {
                    var r3 = t3.match(e5);
                    return r3 && r3.length > 1 && r3[2] || "";
                  }, e4.matchAndReturnConst = function(e5, t3, r3) {
                    if (e5.test(t3))
                      return r3;
                  }, e4.getWindowsVersionName = function(e5) {
                    switch (e5) {
                      case "NT":
                        return "NT";
                      case "XP":
                      case "NT 5.1":
                        return "XP";
                      case "NT 5.0":
                        return "2000";
                      case "NT 5.2":
                        return "2003";
                      case "NT 6.0":
                        return "Vista";
                      case "NT 6.1":
                        return "7";
                      case "NT 6.2":
                        return "8";
                      case "NT 6.3":
                        return "8.1";
                      case "NT 10.0":
                        return "10";
                      default:
                        return;
                    }
                  }, e4.getMacOSVersionName = function(e5) {
                    var t3 = e5.split(".").splice(0, 2).map(function(e6) {
                      return parseInt(e6, 10) || 0;
                    });
                    if (t3.push(0), 10 === t3[0])
                      switch (t3[1]) {
                        case 5:
                          return "Leopard";
                        case 6:
                          return "Snow Leopard";
                        case 7:
                          return "Lion";
                        case 8:
                          return "Mountain Lion";
                        case 9:
                          return "Mavericks";
                        case 10:
                          return "Yosemite";
                        case 11:
                          return "El Capitan";
                        case 12:
                          return "Sierra";
                        case 13:
                          return "High Sierra";
                        case 14:
                          return "Mojave";
                        case 15:
                          return "Catalina";
                        default:
                          return;
                      }
                  }, e4.getAndroidVersionName = function(e5) {
                    var t3 = e5.split(".").splice(0, 2).map(function(e6) {
                      return parseInt(e6, 10) || 0;
                    });
                    if (t3.push(0), !(1 === t3[0] && t3[1] < 5))
                      return 1 === t3[0] && t3[1] < 6 ? "Cupcake" : 1 === t3[0] && t3[1] >= 6 ? "Donut" : 2 === t3[0] && t3[1] < 2 ? "Eclair" : 2 === t3[0] && 2 === t3[1] ? "Froyo" : 2 === t3[0] && t3[1] > 2 ? "Gingerbread" : 3 === t3[0] ? "Honeycomb" : 4 === t3[0] && t3[1] < 1 ? "Ice Cream Sandwich" : 4 === t3[0] && t3[1] < 4 ? "Jelly Bean" : 4 === t3[0] && t3[1] >= 4 ? "KitKat" : 5 === t3[0] ? "Lollipop" : 6 === t3[0] ? "Marshmallow" : 7 === t3[0] ? "Nougat" : 8 === t3[0] ? "Oreo" : 9 === t3[0] ? "Pie" : void 0;
                  }, e4.getVersionPrecision = function(e5) {
                    return e5.split(".").length;
                  }, e4.compareVersions = function(t3, r3, n2) {
                    void 0 === n2 && (n2 = false);
                    var a2 = e4.getVersionPrecision(t3), i = e4.getVersionPrecision(r3), s = Math.max(a2, i), o = 0, c = e4.map([t3, r3], function(t4) {
                      var r4 = s - e4.getVersionPrecision(t4), n3 = t4 + new Array(r4 + 1).join(".0");
                      return e4.map(n3.split("."), function(e5) {
                        return new Array(20 - e5.length).join("0") + e5;
                      }).reverse();
                    });
                    for (n2 && (o = s - Math.min(a2, i)), s -= 1; s >= o; ) {
                      if (c[0][s] > c[1][s])
                        return 1;
                      if (c[0][s] === c[1][s]) {
                        if (s === o)
                          return 0;
                        s -= 1;
                      } else if (c[0][s] < c[1][s])
                        return -1;
                    }
                  }, e4.map = function(e5, t3) {
                    var r3, n2 = [];
                    if (Array.prototype.map)
                      return Array.prototype.map.call(e5, t3);
                    for (r3 = 0; r3 < e5.length; r3 += 1)
                      n2.push(t3(e5[r3]));
                    return n2;
                  }, e4.find = function(e5, t3) {
                    var r3, n2;
                    if (Array.prototype.find)
                      return Array.prototype.find.call(e5, t3);
                    for (r3 = 0, n2 = e5.length; r3 < n2; r3 += 1) {
                      var a2 = e5[r3];
                      if (t3(a2, r3))
                        return a2;
                    }
                  }, e4.assign = function(e5) {
                    for (var t3, r3, n2 = e5, a2 = arguments.length, i = new Array(a2 > 1 ? a2 - 1 : 0), s = 1; s < a2; s++)
                      i[s - 1] = arguments[s];
                    if (Object.assign)
                      return Object.assign.apply(Object, [e5].concat(i));
                    var o = function() {
                      var e6 = i[t3];
                      "object" == typeof e6 && null !== e6 && Object.keys(e6).forEach(function(t4) {
                        n2[t4] = e6[t4];
                      });
                    };
                    for (t3 = 0, r3 = i.length; t3 < r3; t3 += 1)
                      o();
                    return e5;
                  }, e4.getBrowserAlias = function(e5) {
                    return n.BROWSER_ALIASES_MAP[e5];
                  }, e4.getBrowserTypeByAlias = function(e5) {
                    return n.BROWSER_MAP[e5] || "";
                  }, e4;
                }();
                t2.default = a, e3.exports = t2.default;
              },
              18: function(e3, t2, r2) {
                "use strict";
                t2.__esModule = true, t2.ENGINE_MAP = t2.OS_MAP = t2.PLATFORMS_MAP = t2.BROWSER_MAP = t2.BROWSER_ALIASES_MAP = void 0, t2.BROWSER_ALIASES_MAP = {
                  "Amazon Silk": "amazon_silk",
                  "Android Browser": "android",
                  Bada: "bada",
                  BlackBerry: "blackberry",
                  Chrome: "chrome",
                  Chromium: "chromium",
                  Electron: "electron",
                  Epiphany: "epiphany",
                  Firefox: "firefox",
                  Focus: "focus",
                  Generic: "generic",
                  "Google Search": "google_search",
                  Googlebot: "googlebot",
                  "Internet Explorer": "ie",
                  "K-Meleon": "k_meleon",
                  Maxthon: "maxthon",
                  "Microsoft Edge": "edge",
                  "MZ Browser": "mz",
                  "NAVER Whale Browser": "naver",
                  Opera: "opera",
                  "Opera Coast": "opera_coast",
                  PhantomJS: "phantomjs",
                  Puffin: "puffin",
                  QupZilla: "qupzilla",
                  QQ: "qq",
                  QQLite: "qqlite",
                  Safari: "safari",
                  Sailfish: "sailfish",
                  "Samsung Internet for Android": "samsung_internet",
                  SeaMonkey: "seamonkey",
                  Sleipnir: "sleipnir",
                  Swing: "swing",
                  Tizen: "tizen",
                  "UC Browser": "uc",
                  Vivaldi: "vivaldi",
                  "WebOS Browser": "webos",
                  WeChat: "wechat",
                  "Yandex Browser": "yandex",
                  Roku: "roku"
                }, t2.BROWSER_MAP = {
                  amazon_silk: "Amazon Silk",
                  android: "Android Browser",
                  bada: "Bada",
                  blackberry: "BlackBerry",
                  chrome: "Chrome",
                  chromium: "Chromium",
                  electron: "Electron",
                  epiphany: "Epiphany",
                  firefox: "Firefox",
                  focus: "Focus",
                  generic: "Generic",
                  googlebot: "Googlebot",
                  google_search: "Google Search",
                  ie: "Internet Explorer",
                  k_meleon: "K-Meleon",
                  maxthon: "Maxthon",
                  edge: "Microsoft Edge",
                  mz: "MZ Browser",
                  naver: "NAVER Whale Browser",
                  opera: "Opera",
                  opera_coast: "Opera Coast",
                  phantomjs: "PhantomJS",
                  puffin: "Puffin",
                  qupzilla: "QupZilla",
                  qq: "QQ Browser",
                  qqlite: "QQ Browser Lite",
                  safari: "Safari",
                  sailfish: "Sailfish",
                  samsung_internet: "Samsung Internet for Android",
                  seamonkey: "SeaMonkey",
                  sleipnir: "Sleipnir",
                  swing: "Swing",
                  tizen: "Tizen",
                  uc: "UC Browser",
                  vivaldi: "Vivaldi",
                  webos: "WebOS Browser",
                  wechat: "WeChat",
                  yandex: "Yandex Browser"
                }, t2.PLATFORMS_MAP = {
                  tablet: "tablet",
                  mobile: "mobile",
                  desktop: "desktop",
                  tv: "tv"
                }, t2.OS_MAP = {
                  WindowsPhone: "Windows Phone",
                  Windows: "Windows",
                  MacOS: "macOS",
                  iOS: "iOS",
                  Android: "Android",
                  WebOS: "WebOS",
                  BlackBerry: "BlackBerry",
                  Bada: "Bada",
                  Tizen: "Tizen",
                  Linux: "Linux",
                  ChromeOS: "Chrome OS",
                  PlayStation4: "PlayStation 4",
                  Roku: "Roku"
                }, t2.ENGINE_MAP = {
                  EdgeHTML: "EdgeHTML",
                  Blink: "Blink",
                  Trident: "Trident",
                  Presto: "Presto",
                  Gecko: "Gecko",
                  WebKit: "WebKit"
                };
              },
              90: function(e3, t2, r2) {
                "use strict";
                t2.__esModule = true, t2.default = void 0;
                var n, a = (n = r2(91)) && n.__esModule ? n : { default: n }, i = r2(18);
                function s(e4, t3) {
                  for (var r3 = 0; r3 < t3.length; r3++) {
                    var n2 = t3[r3];
                    n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e4, n2.key, n2);
                  }
                }
                var o = function() {
                  function e4() {
                  }
                  var t3, r3, n2;
                  return e4.getParser = function(e5, t4) {
                    if (void 0 === t4 && (t4 = false), "string" != typeof e5)
                      throw new Error("UserAgent should be a string");
                    return new a.default(e5, t4);
                  }, e4.parse = function(e5) {
                    return new a.default(e5).getResult();
                  }, t3 = e4, n2 = [
                    {
                      key: "BROWSER_MAP",
                      get: function() {
                        return i.BROWSER_MAP;
                      }
                    },
                    {
                      key: "ENGINE_MAP",
                      get: function() {
                        return i.ENGINE_MAP;
                      }
                    },
                    {
                      key: "OS_MAP",
                      get: function() {
                        return i.OS_MAP;
                      }
                    },
                    {
                      key: "PLATFORMS_MAP",
                      get: function() {
                        return i.PLATFORMS_MAP;
                      }
                    }
                  ], (r3 = null) && s(t3.prototype, r3), n2 && s(t3, n2), e4;
                }();
                t2.default = o, e3.exports = t2.default;
              },
              91: function(e3, t2, r2) {
                "use strict";
                t2.__esModule = true, t2.default = void 0;
                var n = c(r2(92)), a = c(r2(93)), i = c(r2(94)), s = c(r2(95)), o = c(r2(17));
                function c(e4) {
                  return e4 && e4.__esModule ? e4 : { default: e4 };
                }
                var d = function() {
                  function e4(e5, t4) {
                    if (void 0 === t4 && (t4 = false), null == e5 || "" === e5)
                      throw new Error("UserAgent parameter can't be empty");
                    this._ua = e5, this.parsedResult = {}, true !== t4 && this.parse();
                  }
                  var t3 = e4.prototype;
                  return t3.getUA = function() {
                    return this._ua;
                  }, t3.test = function(e5) {
                    return e5.test(this._ua);
                  }, t3.parseBrowser = function() {
                    var e5 = this;
                    this.parsedResult.browser = {};
                    var t4 = o.default.find(n.default, function(t5) {
                      if ("function" == typeof t5.test)
                        return t5.test(e5);
                      if (t5.test instanceof Array)
                        return t5.test.some(function(t6) {
                          return e5.test(t6);
                        });
                      throw new Error("Browser's test function is not valid");
                    });
                    return t4 && (this.parsedResult.browser = t4.describe(this.getUA())), this.parsedResult.browser;
                  }, t3.getBrowser = function() {
                    return this.parsedResult.browser ? this.parsedResult.browser : this.parseBrowser();
                  }, t3.getBrowserName = function(e5) {
                    return e5 ? String(this.getBrowser().name).toLowerCase() || "" : this.getBrowser().name || "";
                  }, t3.getBrowserVersion = function() {
                    return this.getBrowser().version;
                  }, t3.getOS = function() {
                    return this.parsedResult.os ? this.parsedResult.os : this.parseOS();
                  }, t3.parseOS = function() {
                    var e5 = this;
                    this.parsedResult.os = {};
                    var t4 = o.default.find(a.default, function(t5) {
                      if ("function" == typeof t5.test)
                        return t5.test(e5);
                      if (t5.test instanceof Array)
                        return t5.test.some(function(t6) {
                          return e5.test(t6);
                        });
                      throw new Error("Browser's test function is not valid");
                    });
                    return t4 && (this.parsedResult.os = t4.describe(this.getUA())), this.parsedResult.os;
                  }, t3.getOSName = function(e5) {
                    var t4 = this.getOS().name;
                    return e5 ? String(t4).toLowerCase() || "" : t4 || "";
                  }, t3.getOSVersion = function() {
                    return this.getOS().version;
                  }, t3.getPlatform = function() {
                    return this.parsedResult.platform ? this.parsedResult.platform : this.parsePlatform();
                  }, t3.getPlatformType = function(e5) {
                    void 0 === e5 && (e5 = false);
                    var t4 = this.getPlatform().type;
                    return e5 ? String(t4).toLowerCase() || "" : t4 || "";
                  }, t3.parsePlatform = function() {
                    var e5 = this;
                    this.parsedResult.platform = {};
                    var t4 = o.default.find(i.default, function(t5) {
                      if ("function" == typeof t5.test)
                        return t5.test(e5);
                      if (t5.test instanceof Array)
                        return t5.test.some(function(t6) {
                          return e5.test(t6);
                        });
                      throw new Error("Browser's test function is not valid");
                    });
                    return t4 && (this.parsedResult.platform = t4.describe(this.getUA())), this.parsedResult.platform;
                  }, t3.getEngine = function() {
                    return this.parsedResult.engine ? this.parsedResult.engine : this.parseEngine();
                  }, t3.getEngineName = function(e5) {
                    return e5 ? String(this.getEngine().name).toLowerCase() || "" : this.getEngine().name || "";
                  }, t3.parseEngine = function() {
                    var e5 = this;
                    this.parsedResult.engine = {};
                    var t4 = o.default.find(s.default, function(t5) {
                      if ("function" == typeof t5.test)
                        return t5.test(e5);
                      if (t5.test instanceof Array)
                        return t5.test.some(function(t6) {
                          return e5.test(t6);
                        });
                      throw new Error("Browser's test function is not valid");
                    });
                    return t4 && (this.parsedResult.engine = t4.describe(this.getUA())), this.parsedResult.engine;
                  }, t3.parse = function() {
                    return this.parseBrowser(), this.parseOS(), this.parsePlatform(), this.parseEngine(), this;
                  }, t3.getResult = function() {
                    return o.default.assign({}, this.parsedResult);
                  }, t3.satisfies = function(e5) {
                    var t4 = this, r3 = {}, n2 = 0, a2 = {}, i2 = 0;
                    if (Object.keys(e5).forEach(function(t5) {
                      var s3 = e5[t5];
                      "string" == typeof s3 ? (a2[t5] = s3, i2 += 1) : "object" == typeof s3 && (r3[t5] = s3, n2 += 1);
                    }), n2 > 0) {
                      var s2 = Object.keys(r3), c2 = o.default.find(s2, function(e6) {
                        return t4.isOS(e6);
                      });
                      if (c2) {
                        var d2 = this.satisfies(r3[c2]);
                        if (void 0 !== d2)
                          return d2;
                      }
                      var p = o.default.find(s2, function(e6) {
                        return t4.isPlatform(e6);
                      });
                      if (p) {
                        var l = this.satisfies(r3[p]);
                        if (void 0 !== l)
                          return l;
                      }
                    }
                    if (i2 > 0) {
                      var u = Object.keys(a2), h = o.default.find(u, function(e6) {
                        return t4.isBrowser(e6, true);
                      });
                      if (void 0 !== h)
                        return this.compareVersion(a2[h]);
                    }
                  }, t3.isBrowser = function(e5, t4) {
                    void 0 === t4 && (t4 = false);
                    var r3 = this.getBrowserName().toLowerCase(), n2 = e5.toLowerCase(), a2 = o.default.getBrowserTypeByAlias(n2);
                    return t4 && a2 && (n2 = a2.toLowerCase()), n2 === r3;
                  }, t3.compareVersion = function(e5) {
                    var t4 = [0], r3 = e5, n2 = false, a2 = this.getBrowserVersion();
                    if ("string" == typeof a2)
                      return ">" === e5[0] || "<" === e5[0] ? (r3 = e5.substr(1), "=" === e5[1] ? (n2 = true, r3 = e5.substr(2)) : t4 = [], ">" === e5[0] ? t4.push(1) : t4.push(-1)) : "=" === e5[0] ? r3 = e5.substr(1) : "~" === e5[0] && (n2 = true, r3 = e5.substr(1)), t4.indexOf(o.default.compareVersions(a2, r3, n2)) > -1;
                  }, t3.isOS = function(e5) {
                    return this.getOSName(true) === String(e5).toLowerCase();
                  }, t3.isPlatform = function(e5) {
                    return this.getPlatformType(true) === String(e5).toLowerCase();
                  }, t3.isEngine = function(e5) {
                    return this.getEngineName(true) === String(e5).toLowerCase();
                  }, t3.is = function(e5, t4) {
                    return void 0 === t4 && (t4 = false), this.isBrowser(e5, t4) || this.isOS(e5) || this.isPlatform(e5);
                  }, t3.some = function(e5) {
                    var t4 = this;
                    return void 0 === e5 && (e5 = []), e5.some(function(e6) {
                      return t4.is(e6);
                    });
                  }, e4;
                }();
                t2.default = d, e3.exports = t2.default;
              },
              92: function(e3, t2, r2) {
                "use strict";
                t2.__esModule = true, t2.default = void 0;
                var n, a = (n = r2(17)) && n.__esModule ? n : { default: n }, i = /version\/(\d+(\.?_?\d+)+)/i, s = [
                  {
                    test: [/googlebot/i],
                    describe: function(e4) {
                      var t3 = { name: "Googlebot" }, r3 = a.default.getFirstMatch(
                        /googlebot\/(\d+(\.\d+))/i,
                        e4
                      ) || a.default.getFirstMatch(i, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/opera/i],
                    describe: function(e4) {
                      var t3 = { name: "Opera" }, r3 = a.default.getFirstMatch(i, e4) || a.default.getFirstMatch(
                        /(?:opera)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/opr\/|opios/i],
                    describe: function(e4) {
                      var t3 = { name: "Opera" }, r3 = a.default.getFirstMatch(
                        /(?:opr|opios)[\s/](\S+)/i,
                        e4
                      ) || a.default.getFirstMatch(i, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/SamsungBrowser/i],
                    describe: function(e4) {
                      var t3 = { name: "Samsung Internet for Android" }, r3 = a.default.getFirstMatch(i, e4) || a.default.getFirstMatch(
                        /(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/Whale/i],
                    describe: function(e4) {
                      var t3 = { name: "NAVER Whale Browser" }, r3 = a.default.getFirstMatch(i, e4) || a.default.getFirstMatch(
                        /(?:whale)[\s/](\d+(?:\.\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/MZBrowser/i],
                    describe: function(e4) {
                      var t3 = { name: "MZ Browser" }, r3 = a.default.getFirstMatch(
                        /(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i,
                        e4
                      ) || a.default.getFirstMatch(i, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/focus/i],
                    describe: function(e4) {
                      var t3 = { name: "Focus" }, r3 = a.default.getFirstMatch(
                        /(?:focus)[\s/](\d+(?:\.\d+)+)/i,
                        e4
                      ) || a.default.getFirstMatch(i, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/swing/i],
                    describe: function(e4) {
                      var t3 = { name: "Swing" }, r3 = a.default.getFirstMatch(
                        /(?:swing)[\s/](\d+(?:\.\d+)+)/i,
                        e4
                      ) || a.default.getFirstMatch(i, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/coast/i],
                    describe: function(e4) {
                      var t3 = { name: "Opera Coast" }, r3 = a.default.getFirstMatch(i, e4) || a.default.getFirstMatch(
                        /(?:coast)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/opt\/\d+(?:.?_?\d+)+/i],
                    describe: function(e4) {
                      var t3 = { name: "Opera Touch" }, r3 = a.default.getFirstMatch(
                        /(?:opt)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      ) || a.default.getFirstMatch(i, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/yabrowser/i],
                    describe: function(e4) {
                      var t3 = { name: "Yandex Browser" }, r3 = a.default.getFirstMatch(
                        /(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      ) || a.default.getFirstMatch(i, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/ucbrowser/i],
                    describe: function(e4) {
                      var t3 = { name: "UC Browser" }, r3 = a.default.getFirstMatch(i, e4) || a.default.getFirstMatch(
                        /(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/Maxthon|mxios/i],
                    describe: function(e4) {
                      var t3 = { name: "Maxthon" }, r3 = a.default.getFirstMatch(i, e4) || a.default.getFirstMatch(
                        /(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/epiphany/i],
                    describe: function(e4) {
                      var t3 = { name: "Epiphany" }, r3 = a.default.getFirstMatch(i, e4) || a.default.getFirstMatch(
                        /(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/puffin/i],
                    describe: function(e4) {
                      var t3 = { name: "Puffin" }, r3 = a.default.getFirstMatch(i, e4) || a.default.getFirstMatch(
                        /(?:puffin)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/sleipnir/i],
                    describe: function(e4) {
                      var t3 = { name: "Sleipnir" }, r3 = a.default.getFirstMatch(i, e4) || a.default.getFirstMatch(
                        /(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/k-meleon/i],
                    describe: function(e4) {
                      var t3 = { name: "K-Meleon" }, r3 = a.default.getFirstMatch(i, e4) || a.default.getFirstMatch(
                        /(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/micromessenger/i],
                    describe: function(e4) {
                      var t3 = { name: "WeChat" }, r3 = a.default.getFirstMatch(
                        /(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      ) || a.default.getFirstMatch(i, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/qqbrowser/i],
                    describe: function(e4) {
                      var t3 = {
                        name: /qqbrowserlite/i.test(e4) ? "QQ Browser Lite" : "QQ Browser"
                      }, r3 = a.default.getFirstMatch(
                        /(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i,
                        e4
                      ) || a.default.getFirstMatch(i, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/msie|trident/i],
                    describe: function(e4) {
                      var t3 = { name: "Internet Explorer" }, r3 = a.default.getFirstMatch(
                        /(?:msie |rv:)(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/\sedg\//i],
                    describe: function(e4) {
                      var t3 = { name: "Microsoft Edge" }, r3 = a.default.getFirstMatch(
                        /\sedg\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/edg([ea]|ios)/i],
                    describe: function(e4) {
                      var t3 = { name: "Microsoft Edge" }, r3 = a.default.getSecondMatch(
                        /edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/vivaldi/i],
                    describe: function(e4) {
                      var t3 = { name: "Vivaldi" }, r3 = a.default.getFirstMatch(
                        /vivaldi\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/seamonkey/i],
                    describe: function(e4) {
                      var t3 = { name: "SeaMonkey" }, r3 = a.default.getFirstMatch(
                        /seamonkey\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/sailfish/i],
                    describe: function(e4) {
                      var t3 = { name: "Sailfish" }, r3 = a.default.getFirstMatch(
                        /sailfish\s?browser\/(\d+(\.\d+)?)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/silk/i],
                    describe: function(e4) {
                      var t3 = { name: "Amazon Silk" }, r3 = a.default.getFirstMatch(
                        /silk\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/phantom/i],
                    describe: function(e4) {
                      var t3 = { name: "PhantomJS" }, r3 = a.default.getFirstMatch(
                        /phantomjs\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/slimerjs/i],
                    describe: function(e4) {
                      var t3 = { name: "SlimerJS" }, r3 = a.default.getFirstMatch(
                        /slimerjs\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/blackberry|\bbb\d+/i, /rim\stablet/i],
                    describe: function(e4) {
                      var t3 = { name: "BlackBerry" }, r3 = a.default.getFirstMatch(i, e4) || a.default.getFirstMatch(
                        /blackberry[\d]+\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/(web|hpw)[o0]s/i],
                    describe: function(e4) {
                      var t3 = { name: "WebOS Browser" }, r3 = a.default.getFirstMatch(i, e4) || a.default.getFirstMatch(
                        /w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/bada/i],
                    describe: function(e4) {
                      var t3 = { name: "Bada" }, r3 = a.default.getFirstMatch(
                        /dolfin\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/tizen/i],
                    describe: function(e4) {
                      var t3 = { name: "Tizen" }, r3 = a.default.getFirstMatch(
                        /(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i,
                        e4
                      ) || a.default.getFirstMatch(i, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/qupzilla/i],
                    describe: function(e4) {
                      var t3 = { name: "QupZilla" }, r3 = a.default.getFirstMatch(
                        /(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      ) || a.default.getFirstMatch(i, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/firefox|iceweasel|fxios/i],
                    describe: function(e4) {
                      var t3 = { name: "Firefox" }, r3 = a.default.getFirstMatch(
                        /(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/electron/i],
                    describe: function(e4) {
                      var t3 = { name: "Electron" }, r3 = a.default.getFirstMatch(
                        /(?:electron)\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/MiuiBrowser/i],
                    describe: function(e4) {
                      var t3 = { name: "Miui" }, r3 = a.default.getFirstMatch(
                        /(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/chromium/i],
                    describe: function(e4) {
                      var t3 = { name: "Chromium" }, r3 = a.default.getFirstMatch(
                        /(?:chromium)[\s/](\d+(\.?_?\d+)+)/i,
                        e4
                      ) || a.default.getFirstMatch(i, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/chrome|crios|crmo/i],
                    describe: function(e4) {
                      var t3 = { name: "Chrome" }, r3 = a.default.getFirstMatch(
                        /(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/GSA/i],
                    describe: function(e4) {
                      var t3 = { name: "Google Search" }, r3 = a.default.getFirstMatch(
                        /(?:GSA)\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: function(e4) {
                      var t3 = !e4.test(/like android/i), r3 = e4.test(/android/i);
                      return t3 && r3;
                    },
                    describe: function(e4) {
                      var t3 = { name: "Android Browser" }, r3 = a.default.getFirstMatch(i, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/playstation 4/i],
                    describe: function(e4) {
                      var t3 = { name: "PlayStation 4" }, r3 = a.default.getFirstMatch(i, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/safari|applewebkit/i],
                    describe: function(e4) {
                      var t3 = { name: "Safari" }, r3 = a.default.getFirstMatch(i, e4);
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/.*/i],
                    describe: function(e4) {
                      var t3 = -1 !== e4.search("\\(") ? /^(.*)\/(.*)[ \t]\((.*)/ : /^(.*)\/(.*) /;
                      return {
                        name: a.default.getFirstMatch(t3, e4),
                        version: a.default.getSecondMatch(t3, e4)
                      };
                    }
                  }
                ];
                t2.default = s, e3.exports = t2.default;
              },
              93: function(e3, t2, r2) {
                "use strict";
                t2.__esModule = true, t2.default = void 0;
                var n, a = (n = r2(17)) && n.__esModule ? n : { default: n }, i = r2(18), s = [
                  {
                    test: [/Roku\/DVP/],
                    describe: function(e4) {
                      var t3 = a.default.getFirstMatch(
                        /Roku\/DVP-(\d+\.\d+)/i,
                        e4
                      );
                      return { name: i.OS_MAP.Roku, version: t3 };
                    }
                  },
                  {
                    test: [/windows phone/i],
                    describe: function(e4) {
                      var t3 = a.default.getFirstMatch(
                        /windows phone (?:os)?\s?(\d+(\.\d+)*)/i,
                        e4
                      );
                      return { name: i.OS_MAP.WindowsPhone, version: t3 };
                    }
                  },
                  {
                    test: [/windows /i],
                    describe: function(e4) {
                      var t3 = a.default.getFirstMatch(
                        /Windows ((NT|XP)( \d\d?.\d)?)/i,
                        e4
                      ), r3 = a.default.getWindowsVersionName(t3);
                      return {
                        name: i.OS_MAP.Windows,
                        version: t3,
                        versionName: r3
                      };
                    }
                  },
                  {
                    test: [/Macintosh(.*?) FxiOS(.*?)\//],
                    describe: function(e4) {
                      var t3 = { name: i.OS_MAP.iOS }, r3 = a.default.getSecondMatch(
                        /(Version\/)(\d[\d.]+)/,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/macintosh/i],
                    describe: function(e4) {
                      var t3 = a.default.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i, e4).replace(/[_\s]/g, "."), r3 = a.default.getMacOSVersionName(t3), n2 = { name: i.OS_MAP.MacOS, version: t3 };
                      return r3 && (n2.versionName = r3), n2;
                    }
                  },
                  {
                    test: [/(ipod|iphone|ipad)/i],
                    describe: function(e4) {
                      var t3 = a.default.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i, e4).replace(/[_\s]/g, ".");
                      return { name: i.OS_MAP.iOS, version: t3 };
                    }
                  },
                  {
                    test: function(e4) {
                      var t3 = !e4.test(/like android/i), r3 = e4.test(/android/i);
                      return t3 && r3;
                    },
                    describe: function(e4) {
                      var t3 = a.default.getFirstMatch(
                        /android[\s/-](\d+(\.\d+)*)/i,
                        e4
                      ), r3 = a.default.getAndroidVersionName(t3), n2 = { name: i.OS_MAP.Android, version: t3 };
                      return r3 && (n2.versionName = r3), n2;
                    }
                  },
                  {
                    test: [/(web|hpw)[o0]s/i],
                    describe: function(e4) {
                      var t3 = a.default.getFirstMatch(
                        /(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i,
                        e4
                      ), r3 = { name: i.OS_MAP.WebOS };
                      return t3 && t3.length && (r3.version = t3), r3;
                    }
                  },
                  {
                    test: [/blackberry|\bbb\d+/i, /rim\stablet/i],
                    describe: function(e4) {
                      var t3 = a.default.getFirstMatch(
                        /rim\stablet\sos\s(\d+(\.\d+)*)/i,
                        e4
                      ) || a.default.getFirstMatch(
                        /blackberry\d+\/(\d+([_\s]\d+)*)/i,
                        e4
                      ) || a.default.getFirstMatch(/\bbb(\d+)/i, e4);
                      return { name: i.OS_MAP.BlackBerry, version: t3 };
                    }
                  },
                  {
                    test: [/bada/i],
                    describe: function(e4) {
                      var t3 = a.default.getFirstMatch(
                        /bada\/(\d+(\.\d+)*)/i,
                        e4
                      );
                      return { name: i.OS_MAP.Bada, version: t3 };
                    }
                  },
                  {
                    test: [/tizen/i],
                    describe: function(e4) {
                      var t3 = a.default.getFirstMatch(
                        /tizen[/\s](\d+(\.\d+)*)/i,
                        e4
                      );
                      return { name: i.OS_MAP.Tizen, version: t3 };
                    }
                  },
                  {
                    test: [/linux/i],
                    describe: function() {
                      return { name: i.OS_MAP.Linux };
                    }
                  },
                  {
                    test: [/CrOS/],
                    describe: function() {
                      return { name: i.OS_MAP.ChromeOS };
                    }
                  },
                  {
                    test: [/PlayStation 4/],
                    describe: function(e4) {
                      var t3 = a.default.getFirstMatch(
                        /PlayStation 4[/\s](\d+(\.\d+)*)/i,
                        e4
                      );
                      return { name: i.OS_MAP.PlayStation4, version: t3 };
                    }
                  }
                ];
                t2.default = s, e3.exports = t2.default;
              },
              94: function(e3, t2, r2) {
                "use strict";
                t2.__esModule = true, t2.default = void 0;
                var n, a = (n = r2(17)) && n.__esModule ? n : { default: n }, i = r2(18), s = [
                  {
                    test: [/googlebot/i],
                    describe: function() {
                      return { type: "bot", vendor: "Google" };
                    }
                  },
                  {
                    test: [/huawei/i],
                    describe: function(e4) {
                      var t3 = a.default.getFirstMatch(/(can-l01)/i, e4) && "Nova", r3 = { type: i.PLATFORMS_MAP.mobile, vendor: "Huawei" };
                      return t3 && (r3.model = t3), r3;
                    }
                  },
                  {
                    test: [/nexus\s*(?:7|8|9|10).*/i],
                    describe: function() {
                      return { type: i.PLATFORMS_MAP.tablet, vendor: "Nexus" };
                    }
                  },
                  {
                    test: [/ipad/i],
                    describe: function() {
                      return {
                        type: i.PLATFORMS_MAP.tablet,
                        vendor: "Apple",
                        model: "iPad"
                      };
                    }
                  },
                  {
                    test: [/Macintosh(.*?) FxiOS(.*?)\//],
                    describe: function() {
                      return {
                        type: i.PLATFORMS_MAP.tablet,
                        vendor: "Apple",
                        model: "iPad"
                      };
                    }
                  },
                  {
                    test: [/kftt build/i],
                    describe: function() {
                      return {
                        type: i.PLATFORMS_MAP.tablet,
                        vendor: "Amazon",
                        model: "Kindle Fire HD 7"
                      };
                    }
                  },
                  {
                    test: [/silk/i],
                    describe: function() {
                      return { type: i.PLATFORMS_MAP.tablet, vendor: "Amazon" };
                    }
                  },
                  {
                    test: [/tablet(?! pc)/i],
                    describe: function() {
                      return { type: i.PLATFORMS_MAP.tablet };
                    }
                  },
                  {
                    test: function(e4) {
                      var t3 = e4.test(/ipod|iphone/i), r3 = e4.test(/like (ipod|iphone)/i);
                      return t3 && !r3;
                    },
                    describe: function(e4) {
                      var t3 = a.default.getFirstMatch(/(ipod|iphone)/i, e4);
                      return {
                        type: i.PLATFORMS_MAP.mobile,
                        vendor: "Apple",
                        model: t3
                      };
                    }
                  },
                  {
                    test: [/nexus\s*[0-6].*/i, /galaxy nexus/i],
                    describe: function() {
                      return { type: i.PLATFORMS_MAP.mobile, vendor: "Nexus" };
                    }
                  },
                  {
                    test: [/[^-]mobi/i],
                    describe: function() {
                      return { type: i.PLATFORMS_MAP.mobile };
                    }
                  },
                  {
                    test: function(e4) {
                      return "blackberry" === e4.getBrowserName(true);
                    },
                    describe: function() {
                      return {
                        type: i.PLATFORMS_MAP.mobile,
                        vendor: "BlackBerry"
                      };
                    }
                  },
                  {
                    test: function(e4) {
                      return "bada" === e4.getBrowserName(true);
                    },
                    describe: function() {
                      return { type: i.PLATFORMS_MAP.mobile };
                    }
                  },
                  {
                    test: function(e4) {
                      return "windows phone" === e4.getBrowserName();
                    },
                    describe: function() {
                      return {
                        type: i.PLATFORMS_MAP.mobile,
                        vendor: "Microsoft"
                      };
                    }
                  },
                  {
                    test: function(e4) {
                      var t3 = Number(String(e4.getOSVersion()).split(".")[0]);
                      return "android" === e4.getOSName(true) && t3 >= 3;
                    },
                    describe: function() {
                      return { type: i.PLATFORMS_MAP.tablet };
                    }
                  },
                  {
                    test: function(e4) {
                      return "android" === e4.getOSName(true);
                    },
                    describe: function() {
                      return { type: i.PLATFORMS_MAP.mobile };
                    }
                  },
                  {
                    test: function(e4) {
                      return "macos" === e4.getOSName(true);
                    },
                    describe: function() {
                      return { type: i.PLATFORMS_MAP.desktop, vendor: "Apple" };
                    }
                  },
                  {
                    test: function(e4) {
                      return "windows" === e4.getOSName(true);
                    },
                    describe: function() {
                      return { type: i.PLATFORMS_MAP.desktop };
                    }
                  },
                  {
                    test: function(e4) {
                      return "linux" === e4.getOSName(true);
                    },
                    describe: function() {
                      return { type: i.PLATFORMS_MAP.desktop };
                    }
                  },
                  {
                    test: function(e4) {
                      return "playstation 4" === e4.getOSName(true);
                    },
                    describe: function() {
                      return { type: i.PLATFORMS_MAP.tv };
                    }
                  },
                  {
                    test: function(e4) {
                      return "roku" === e4.getOSName(true);
                    },
                    describe: function() {
                      return { type: i.PLATFORMS_MAP.tv };
                    }
                  }
                ];
                t2.default = s, e3.exports = t2.default;
              },
              95: function(e3, t2, r2) {
                "use strict";
                t2.__esModule = true, t2.default = void 0;
                var n, a = (n = r2(17)) && n.__esModule ? n : { default: n }, i = r2(18), s = [
                  {
                    test: function(e4) {
                      return "microsoft edge" === e4.getBrowserName(true);
                    },
                    describe: function(e4) {
                      if (/\sedg\//i.test(e4))
                        return { name: i.ENGINE_MAP.Blink };
                      var t3 = a.default.getFirstMatch(
                        /edge\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return { name: i.ENGINE_MAP.EdgeHTML, version: t3 };
                    }
                  },
                  {
                    test: [/trident/i],
                    describe: function(e4) {
                      var t3 = { name: i.ENGINE_MAP.Trident }, r3 = a.default.getFirstMatch(
                        /trident\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: function(e4) {
                      return e4.test(/presto/i);
                    },
                    describe: function(e4) {
                      var t3 = { name: i.ENGINE_MAP.Presto }, r3 = a.default.getFirstMatch(
                        /presto\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: function(e4) {
                      var t3 = e4.test(/gecko/i), r3 = e4.test(/like gecko/i);
                      return t3 && !r3;
                    },
                    describe: function(e4) {
                      var t3 = { name: i.ENGINE_MAP.Gecko }, r3 = a.default.getFirstMatch(
                        /gecko\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  },
                  {
                    test: [/(apple)?webkit\/537\.36/i],
                    describe: function() {
                      return { name: i.ENGINE_MAP.Blink };
                    }
                  },
                  {
                    test: [/(apple)?webkit/i],
                    describe: function(e4) {
                      var t3 = { name: i.ENGINE_MAP.WebKit }, r3 = a.default.getFirstMatch(
                        /webkit\/(\d+(\.?_?\d+)+)/i,
                        e4
                      );
                      return r3 && (t3.version = r3), t3;
                    }
                  }
                ];
                t2.default = s, e3.exports = t2.default;
              }
            });
          },
          452: function(e2, t2, r2) {
            var n;
            e2.exports = (n = r2(8249), r2(8269), r2(8214), r2(888), r2(5109), function() {
              var e3 = n, t3 = e3.lib.BlockCipher, r3 = e3.algo, a = [], i = [], s = [], o = [], c = [], d = [], p = [], l = [], u = [], h = [];
              !function() {
                for (var e4 = [], t4 = 0; t4 < 256; t4++)
                  e4[t4] = t4 < 128 ? t4 << 1 : t4 << 1 ^ 283;
                var r4 = 0, n2 = 0;
                for (t4 = 0; t4 < 256; t4++) {
                  var m2 = n2 ^ n2 << 1 ^ n2 << 2 ^ n2 << 3 ^ n2 << 4;
                  m2 = m2 >>> 8 ^ 255 & m2 ^ 99, a[r4] = m2, i[m2] = r4;
                  var f2 = e4[r4], _ = e4[f2], g = e4[_], v = 257 * e4[m2] ^ 16843008 * m2;
                  s[r4] = v << 24 | v >>> 8, o[r4] = v << 16 | v >>> 16, c[r4] = v << 8 | v >>> 24, d[r4] = v, v = 16843009 * g ^ 65537 * _ ^ 257 * f2 ^ 16843008 * r4, p[m2] = v << 24 | v >>> 8, l[m2] = v << 16 | v >>> 16, u[m2] = v << 8 | v >>> 24, h[m2] = v, r4 ? (r4 = f2 ^ e4[e4[e4[g ^ f2]]], n2 ^= e4[e4[n2]]) : r4 = n2 = 1;
                }
              }();
              var m = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54], f = r3.AES = t3.extend({
                _doReset: function() {
                  if (!this._nRounds || this._keyPriorReset !== this._key) {
                    for (var e4 = this._keyPriorReset = this._key, t4 = e4.words, r4 = e4.sigBytes / 4, n2 = 4 * ((this._nRounds = r4 + 6) + 1), i2 = this._keySchedule = [], s2 = 0; s2 < n2; s2++)
                      s2 < r4 ? i2[s2] = t4[s2] : (d2 = i2[s2 - 1], s2 % r4 ? r4 > 6 && s2 % r4 == 4 && (d2 = a[d2 >>> 24] << 24 | a[d2 >>> 16 & 255] << 16 | a[d2 >>> 8 & 255] << 8 | a[255 & d2]) : (d2 = a[(d2 = d2 << 8 | d2 >>> 24) >>> 24] << 24 | a[d2 >>> 16 & 255] << 16 | a[d2 >>> 8 & 255] << 8 | a[255 & d2], d2 ^= m[s2 / r4 | 0] << 24), i2[s2] = i2[s2 - r4] ^ d2);
                    for (var o2 = this._invKeySchedule = [], c2 = 0; c2 < n2; c2++) {
                      if (s2 = n2 - c2, c2 % 4)
                        var d2 = i2[s2];
                      else
                        d2 = i2[s2 - 4];
                      o2[c2] = c2 < 4 || s2 <= 4 ? d2 : p[a[d2 >>> 24]] ^ l[a[d2 >>> 16 & 255]] ^ u[a[d2 >>> 8 & 255]] ^ h[a[255 & d2]];
                    }
                  }
                },
                encryptBlock: function(e4, t4) {
                  this._doCryptBlock(e4, t4, this._keySchedule, s, o, c, d, a);
                },
                decryptBlock: function(e4, t4) {
                  var r4 = e4[t4 + 1];
                  e4[t4 + 1] = e4[t4 + 3], e4[t4 + 3] = r4, this._doCryptBlock(
                    e4,
                    t4,
                    this._invKeySchedule,
                    p,
                    l,
                    u,
                    h,
                    i
                  ), r4 = e4[t4 + 1], e4[t4 + 1] = e4[t4 + 3], e4[t4 + 3] = r4;
                },
                _doCryptBlock: function(e4, t4, r4, n2, a2, i2, s2, o2) {
                  for (var c2 = this._nRounds, d2 = e4[t4] ^ r4[0], p2 = e4[t4 + 1] ^ r4[1], l2 = e4[t4 + 2] ^ r4[2], u2 = e4[t4 + 3] ^ r4[3], h2 = 4, m2 = 1; m2 < c2; m2++) {
                    var f2 = n2[d2 >>> 24] ^ a2[p2 >>> 16 & 255] ^ i2[l2 >>> 8 & 255] ^ s2[255 & u2] ^ r4[h2++], _ = n2[p2 >>> 24] ^ a2[l2 >>> 16 & 255] ^ i2[u2 >>> 8 & 255] ^ s2[255 & d2] ^ r4[h2++], g = n2[l2 >>> 24] ^ a2[u2 >>> 16 & 255] ^ i2[d2 >>> 8 & 255] ^ s2[255 & p2] ^ r4[h2++], v = n2[u2 >>> 24] ^ a2[d2 >>> 16 & 255] ^ i2[p2 >>> 8 & 255] ^ s2[255 & l2] ^ r4[h2++];
                    d2 = f2, p2 = _, l2 = g, u2 = v;
                  }
                  f2 = (o2[d2 >>> 24] << 24 | o2[p2 >>> 16 & 255] << 16 | o2[l2 >>> 8 & 255] << 8 | o2[255 & u2]) ^ r4[h2++], _ = (o2[p2 >>> 24] << 24 | o2[l2 >>> 16 & 255] << 16 | o2[u2 >>> 8 & 255] << 8 | o2[255 & d2]) ^ r4[h2++], g = (o2[l2 >>> 24] << 24 | o2[u2 >>> 16 & 255] << 16 | o2[d2 >>> 8 & 255] << 8 | o2[255 & p2]) ^ r4[h2++], v = (o2[u2 >>> 24] << 24 | o2[d2 >>> 16 & 255] << 16 | o2[p2 >>> 8 & 255] << 8 | o2[255 & l2]) ^ r4[h2++], e4[t4] = f2, e4[t4 + 1] = _, e4[t4 + 2] = g, e4[t4 + 3] = v;
                },
                keySize: 8
              });
              e3.AES = t3._createHelper(f);
            }(), n.AES);
          },
          5109: function(e2, t2, r2) {
            var n;
            e2.exports = (n = r2(8249), r2(888), void (n.lib.Cipher || function(e3) {
              var t3 = n, r3 = t3.lib, a = r3.Base, i = r3.WordArray, s = r3.BufferedBlockAlgorithm, o = t3.enc, c = (o.Utf8, o.Base64), d = t3.algo.EvpKDF, p = r3.Cipher = s.extend({
                cfg: a.extend(),
                createEncryptor: function(e4, t4) {
                  return this.create(this._ENC_XFORM_MODE, e4, t4);
                },
                createDecryptor: function(e4, t4) {
                  return this.create(this._DEC_XFORM_MODE, e4, t4);
                },
                init: function(e4, t4, r4) {
                  this.cfg = this.cfg.extend(r4), this._xformMode = e4, this._key = t4, this.reset();
                },
                reset: function() {
                  s.reset.call(this), this._doReset();
                },
                process: function(e4) {
                  return this._append(e4), this._process();
                },
                finalize: function(e4) {
                  return e4 && this._append(e4), this._doFinalize();
                },
                keySize: 4,
                ivSize: 4,
                _ENC_XFORM_MODE: 1,
                _DEC_XFORM_MODE: 2,
                _createHelper: function() {
                  function e4(e5) {
                    return "string" == typeof e5 ? y : g;
                  }
                  return function(t4) {
                    return {
                      encrypt: function(r4, n2, a2) {
                        return e4(n2).encrypt(t4, r4, n2, a2);
                      },
                      decrypt: function(r4, n2, a2) {
                        return e4(n2).decrypt(t4, r4, n2, a2);
                      }
                    };
                  };
                }()
              }), l = (r3.StreamCipher = p.extend({
                _doFinalize: function() {
                  return this._process(true);
                },
                blockSize: 1
              }), t3.mode = {}), u = r3.BlockCipherMode = a.extend({
                createEncryptor: function(e4, t4) {
                  return this.Encryptor.create(e4, t4);
                },
                createDecryptor: function(e4, t4) {
                  return this.Decryptor.create(e4, t4);
                },
                init: function(e4, t4) {
                  this._cipher = e4, this._iv = t4;
                }
              }), h = l.CBC = function() {
                var t4 = u.extend();
                function r4(t5, r5, n2) {
                  var a2, i2 = this._iv;
                  i2 ? (a2 = i2, this._iv = e3) : a2 = this._prevBlock;
                  for (var s2 = 0; s2 < n2; s2++)
                    t5[r5 + s2] ^= a2[s2];
                }
                return t4.Encryptor = t4.extend({
                  processBlock: function(e4, t5) {
                    var n2 = this._cipher, a2 = n2.blockSize;
                    r4.call(this, e4, t5, a2), n2.encryptBlock(e4, t5), this._prevBlock = e4.slice(t5, t5 + a2);
                  }
                }), t4.Decryptor = t4.extend({
                  processBlock: function(e4, t5) {
                    var n2 = this._cipher, a2 = n2.blockSize, i2 = e4.slice(t5, t5 + a2);
                    n2.decryptBlock(e4, t5), r4.call(this, e4, t5, a2), this._prevBlock = i2;
                  }
                }), t4;
              }(), m = (t3.pad = {}).Pkcs7 = {
                pad: function(e4, t4) {
                  for (var r4 = 4 * t4, n2 = r4 - e4.sigBytes % r4, a2 = n2 << 24 | n2 << 16 | n2 << 8 | n2, s2 = [], o2 = 0; o2 < n2; o2 += 4)
                    s2.push(a2);
                  var c2 = i.create(s2, n2);
                  e4.concat(c2);
                },
                unpad: function(e4) {
                  var t4 = 255 & e4.words[e4.sigBytes - 1 >>> 2];
                  e4.sigBytes -= t4;
                }
              }, f = (r3.BlockCipher = p.extend({
                cfg: p.cfg.extend({ mode: h, padding: m }),
                reset: function() {
                  var e4;
                  p.reset.call(this);
                  var t4 = this.cfg, r4 = t4.iv, n2 = t4.mode;
                  this._xformMode == this._ENC_XFORM_MODE ? e4 = n2.createEncryptor : (e4 = n2.createDecryptor, this._minBufferSize = 1), this._mode && this._mode.__creator == e4 ? this._mode.init(this, r4 && r4.words) : (this._mode = e4.call(n2, this, r4 && r4.words), this._mode.__creator = e4);
                },
                _doProcessBlock: function(e4, t4) {
                  this._mode.processBlock(e4, t4);
                },
                _doFinalize: function() {
                  var e4, t4 = this.cfg.padding;
                  return this._xformMode == this._ENC_XFORM_MODE ? (t4.pad(this._data, this.blockSize), e4 = this._process(true)) : (e4 = this._process(true), t4.unpad(e4)), e4;
                },
                blockSize: 4
              }), r3.CipherParams = a.extend({
                init: function(e4) {
                  this.mixIn(e4);
                },
                toString: function(e4) {
                  return (e4 || this.formatter).stringify(this);
                }
              })), _ = (t3.format = {}).OpenSSL = {
                stringify: function(e4) {
                  var t4 = e4.ciphertext, r4 = e4.salt;
                  return (r4 ? i.create([1398893684, 1701076831]).concat(r4).concat(t4) : t4).toString(c);
                },
                parse: function(e4) {
                  var t4, r4 = c.parse(e4), n2 = r4.words;
                  return 1398893684 == n2[0] && 1701076831 == n2[1] && (t4 = i.create(n2.slice(2, 4)), n2.splice(0, 4), r4.sigBytes -= 16), f.create({ ciphertext: r4, salt: t4 });
                }
              }, g = r3.SerializableCipher = a.extend({
                cfg: a.extend({ format: _ }),
                encrypt: function(e4, t4, r4, n2) {
                  n2 = this.cfg.extend(n2);
                  var a2 = e4.createEncryptor(r4, n2), i2 = a2.finalize(t4), s2 = a2.cfg;
                  return f.create({
                    ciphertext: i2,
                    key: r4,
                    iv: s2.iv,
                    algorithm: e4,
                    mode: s2.mode,
                    padding: s2.padding,
                    blockSize: e4.blockSize,
                    formatter: n2.format
                  });
                },
                decrypt: function(e4, t4, r4, n2) {
                  return n2 = this.cfg.extend(n2), t4 = this._parse(t4, n2.format), e4.createDecryptor(r4, n2).finalize(t4.ciphertext);
                },
                _parse: function(e4, t4) {
                  return "string" == typeof e4 ? t4.parse(e4, this) : e4;
                }
              }), v = (t3.kdf = {}).OpenSSL = {
                execute: function(e4, t4, r4, n2) {
                  n2 || (n2 = i.random(8));
                  var a2 = d.create({ keySize: t4 + r4 }).compute(e4, n2), s2 = i.create(a2.words.slice(t4), 4 * r4);
                  return a2.sigBytes = 4 * t4, f.create({ key: a2, iv: s2, salt: n2 });
                }
              }, y = r3.PasswordBasedCipher = g.extend({
                cfg: g.cfg.extend({ kdf: v }),
                encrypt: function(e4, t4, r4, n2) {
                  var a2 = (n2 = this.cfg.extend(n2)).kdf.execute(
                    r4,
                    e4.keySize,
                    e4.ivSize
                  );
                  n2.iv = a2.iv;
                  var i2 = g.encrypt.call(this, e4, t4, a2.key, n2);
                  return i2.mixIn(a2), i2;
                },
                decrypt: function(e4, t4, r4, n2) {
                  n2 = this.cfg.extend(n2), t4 = this._parse(t4, n2.format);
                  var a2 = n2.kdf.execute(r4, e4.keySize, e4.ivSize, t4.salt);
                  return n2.iv = a2.iv, g.decrypt.call(this, e4, t4, a2.key, n2);
                }
              });
            }()));
          },
          8249: function(e2, t2, r2) {
            var n;
            e2.exports = (n = n || function(e3, t3) {
              var n2;
              if ("undefined" != typeof window && window.crypto && (n2 = window.crypto), "undefined" != typeof self && self.crypto && (n2 = self.crypto), "undefined" != typeof globalThis && globalThis.crypto && (n2 = globalThis.crypto), !n2 && "undefined" != typeof window && window.msCrypto && (n2 = window.msCrypto), !n2 && void 0 !== r2.g && r2.g.crypto && (n2 = r2.g.crypto), !n2)
                try {
                  n2 = r2(2480);
                } catch (e4) {
                }
              var a = function() {
                if (n2) {
                  if ("function" == typeof n2.getRandomValues)
                    try {
                      return n2.getRandomValues(new Uint32Array(1))[0];
                    } catch (e4) {
                    }
                  if ("function" == typeof n2.randomBytes)
                    try {
                      return n2.randomBytes(4).readInt32LE();
                    } catch (e4) {
                    }
                }
                throw new Error(
                  "Native crypto module could not be used to get secure random number."
                );
              }, i = Object.create || function() {
                function e4() {
                }
                return function(t4) {
                  var r3;
                  return e4.prototype = t4, r3 = new e4(), e4.prototype = null, r3;
                };
              }(), s = {}, o = s.lib = {}, c = o.Base = {
                extend: function(e4) {
                  var t4 = i(this);
                  return e4 && t4.mixIn(e4), t4.hasOwnProperty("init") && this.init !== t4.init || (t4.init = function() {
                    t4.$super.init.apply(this, arguments);
                  }), t4.init.prototype = t4, t4.$super = this, t4;
                },
                create: function() {
                  var e4 = this.extend();
                  return e4.init.apply(e4, arguments), e4;
                },
                init: function() {
                },
                mixIn: function(e4) {
                  for (var t4 in e4)
                    e4.hasOwnProperty(t4) && (this[t4] = e4[t4]);
                  e4.hasOwnProperty("toString") && (this.toString = e4.toString);
                },
                clone: function() {
                  return this.init.prototype.extend(this);
                }
              }, d = o.WordArray = c.extend({
                init: function(e4, r3) {
                  e4 = this.words = e4 || [], this.sigBytes = r3 != t3 ? r3 : 4 * e4.length;
                },
                toString: function(e4) {
                  return (e4 || l).stringify(this);
                },
                concat: function(e4) {
                  var t4 = this.words, r3 = e4.words, n3 = this.sigBytes, a2 = e4.sigBytes;
                  if (this.clamp(), n3 % 4)
                    for (var i2 = 0; i2 < a2; i2++) {
                      var s2 = r3[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
                      t4[n3 + i2 >>> 2] |= s2 << 24 - (n3 + i2) % 4 * 8;
                    }
                  else
                    for (var o2 = 0; o2 < a2; o2 += 4)
                      t4[n3 + o2 >>> 2] = r3[o2 >>> 2];
                  return this.sigBytes += a2, this;
                },
                clamp: function() {
                  var t4 = this.words, r3 = this.sigBytes;
                  t4[r3 >>> 2] &= 4294967295 << 32 - r3 % 4 * 8, t4.length = e3.ceil(r3 / 4);
                },
                clone: function() {
                  var e4 = c.clone.call(this);
                  return e4.words = this.words.slice(0), e4;
                },
                random: function(e4) {
                  for (var t4 = [], r3 = 0; r3 < e4; r3 += 4)
                    t4.push(a());
                  return new d.init(t4, e4);
                }
              }), p = s.enc = {}, l = p.Hex = {
                stringify: function(e4) {
                  for (var t4 = e4.words, r3 = e4.sigBytes, n3 = [], a2 = 0; a2 < r3; a2++) {
                    var i2 = t4[a2 >>> 2] >>> 24 - a2 % 4 * 8 & 255;
                    n3.push((i2 >>> 4).toString(16)), n3.push((15 & i2).toString(16));
                  }
                  return n3.join("");
                },
                parse: function(e4) {
                  for (var t4 = e4.length, r3 = [], n3 = 0; n3 < t4; n3 += 2)
                    r3[n3 >>> 3] |= parseInt(e4.substr(n3, 2), 16) << 24 - n3 % 8 * 4;
                  return new d.init(r3, t4 / 2);
                }
              }, u = p.Latin1 = {
                stringify: function(e4) {
                  for (var t4 = e4.words, r3 = e4.sigBytes, n3 = [], a2 = 0; a2 < r3; a2++) {
                    var i2 = t4[a2 >>> 2] >>> 24 - a2 % 4 * 8 & 255;
                    n3.push(String.fromCharCode(i2));
                  }
                  return n3.join("");
                },
                parse: function(e4) {
                  for (var t4 = e4.length, r3 = [], n3 = 0; n3 < t4; n3++)
                    r3[n3 >>> 2] |= (255 & e4.charCodeAt(n3)) << 24 - n3 % 4 * 8;
                  return new d.init(r3, t4);
                }
              }, h = p.Utf8 = {
                stringify: function(e4) {
                  try {
                    return decodeURIComponent(escape(u.stringify(e4)));
                  } catch (e5) {
                    throw new Error("Malformed UTF-8 data");
                  }
                },
                parse: function(e4) {
                  return u.parse(unescape(encodeURIComponent(e4)));
                }
              }, m = o.BufferedBlockAlgorithm = c.extend({
                reset: function() {
                  this._data = new d.init(), this._nDataBytes = 0;
                },
                _append: function(e4) {
                  "string" == typeof e4 && (e4 = h.parse(e4)), this._data.concat(e4), this._nDataBytes += e4.sigBytes;
                },
                _process: function(t4) {
                  var r3, n3 = this._data, a2 = n3.words, i2 = n3.sigBytes, s2 = this.blockSize, o2 = i2 / (4 * s2), c2 = (o2 = t4 ? e3.ceil(o2) : e3.max((0 | o2) - this._minBufferSize, 0)) * s2, p2 = e3.min(4 * c2, i2);
                  if (c2) {
                    for (var l2 = 0; l2 < c2; l2 += s2)
                      this._doProcessBlock(a2, l2);
                    r3 = a2.splice(0, c2), n3.sigBytes -= p2;
                  }
                  return new d.init(r3, p2);
                },
                clone: function() {
                  var e4 = c.clone.call(this);
                  return e4._data = this._data.clone(), e4;
                },
                _minBufferSize: 0
              }), f = (o.Hasher = m.extend({
                cfg: c.extend(),
                init: function(e4) {
                  this.cfg = this.cfg.extend(e4), this.reset();
                },
                reset: function() {
                  m.reset.call(this), this._doReset();
                },
                update: function(e4) {
                  return this._append(e4), this._process(), this;
                },
                finalize: function(e4) {
                  return e4 && this._append(e4), this._doFinalize();
                },
                blockSize: 16,
                _createHelper: function(e4) {
                  return function(t4, r3) {
                    return new e4.init(r3).finalize(t4);
                  };
                },
                _createHmacHelper: function(e4) {
                  return function(t4, r3) {
                    return new f.HMAC.init(e4, r3).finalize(t4);
                  };
                }
              }), s.algo = {});
              return s;
            }(Math), n);
          },
          8269: function(e2, t2, r2) {
            var n;
            e2.exports = (n = r2(8249), function() {
              var e3 = n, t3 = e3.lib.WordArray;
              function r3(e4, r4, n2) {
                for (var a = [], i = 0, s = 0; s < r4; s++)
                  if (s % 4) {
                    var o = n2[e4.charCodeAt(s - 1)] << s % 4 * 2 | n2[e4.charCodeAt(s)] >>> 6 - s % 4 * 2;
                    a[i >>> 2] |= o << 24 - i % 4 * 8, i++;
                  }
                return t3.create(a, i);
              }
              e3.enc.Base64 = {
                stringify: function(e4) {
                  var t4 = e4.words, r4 = e4.sigBytes, n2 = this._map;
                  e4.clamp();
                  for (var a = [], i = 0; i < r4; i += 3)
                    for (var s = (t4[i >>> 2] >>> 24 - i % 4 * 8 & 255) << 16 | (t4[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 255) << 8 | t4[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 255, o = 0; o < 4 && i + 0.75 * o < r4; o++)
                      a.push(n2.charAt(s >>> 6 * (3 - o) & 63));
                  var c = n2.charAt(64);
                  if (c)
                    for (; a.length % 4; )
                      a.push(c);
                  return a.join("");
                },
                parse: function(e4) {
                  var t4 = e4.length, n2 = this._map, a = this._reverseMap;
                  if (!a) {
                    a = this._reverseMap = [];
                    for (var i = 0; i < n2.length; i++)
                      a[n2.charCodeAt(i)] = i;
                  }
                  var s = n2.charAt(64);
                  if (s) {
                    var o = e4.indexOf(s);
                    -1 !== o && (t4 = o);
                  }
                  return r3(e4, t4, a);
                },
                _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
              };
            }(), n.enc.Base64);
          },
          3786: function(e2, t2, r2) {
            var n;
            e2.exports = (n = r2(8249), function() {
              var e3 = n, t3 = e3.lib.WordArray;
              function r3(e4, r4, n2) {
                for (var a = [], i = 0, s = 0; s < r4; s++)
                  if (s % 4) {
                    var o = n2[e4.charCodeAt(s - 1)] << s % 4 * 2 | n2[e4.charCodeAt(s)] >>> 6 - s % 4 * 2;
                    a[i >>> 2] |= o << 24 - i % 4 * 8, i++;
                  }
                return t3.create(a, i);
              }
              e3.enc.Base64url = {
                stringify: function(e4, t4 = true) {
                  var r4 = e4.words, n2 = e4.sigBytes, a = t4 ? this._safe_map : this._map;
                  e4.clamp();
                  for (var i = [], s = 0; s < n2; s += 3)
                    for (var o = (r4[s >>> 2] >>> 24 - s % 4 * 8 & 255) << 16 | (r4[s + 1 >>> 2] >>> 24 - (s + 1) % 4 * 8 & 255) << 8 | r4[s + 2 >>> 2] >>> 24 - (s + 2) % 4 * 8 & 255, c = 0; c < 4 && s + 0.75 * c < n2; c++)
                      i.push(a.charAt(o >>> 6 * (3 - c) & 63));
                  var d = a.charAt(64);
                  if (d)
                    for (; i.length % 4; )
                      i.push(d);
                  return i.join("");
                },
                parse: function(e4, t4 = true) {
                  var n2 = e4.length, a = t4 ? this._safe_map : this._map, i = this._reverseMap;
                  if (!i) {
                    i = this._reverseMap = [];
                    for (var s = 0; s < a.length; s++)
                      i[a.charCodeAt(s)] = s;
                  }
                  var o = a.charAt(64);
                  if (o) {
                    var c = e4.indexOf(o);
                    -1 !== c && (n2 = c);
                  }
                  return r3(e4, n2, i);
                },
                _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
                _safe_map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"
              };
            }(), n.enc.Base64url);
          },
          298: function(e2, t2, r2) {
            var n;
            e2.exports = (n = r2(8249), function() {
              var e3 = n, t3 = e3.lib.WordArray, r3 = e3.enc;
              function a(e4) {
                return e4 << 8 & 4278255360 | e4 >>> 8 & 16711935;
              }
              r3.Utf16 = r3.Utf16BE = {
                stringify: function(e4) {
                  for (var t4 = e4.words, r4 = e4.sigBytes, n2 = [], a2 = 0; a2 < r4; a2 += 2) {
                    var i = t4[a2 >>> 2] >>> 16 - a2 % 4 * 8 & 65535;
                    n2.push(String.fromCharCode(i));
                  }
                  return n2.join("");
                },
                parse: function(e4) {
                  for (var r4 = e4.length, n2 = [], a2 = 0; a2 < r4; a2++)
                    n2[a2 >>> 1] |= e4.charCodeAt(a2) << 16 - a2 % 2 * 16;
                  return t3.create(n2, 2 * r4);
                }
              }, r3.Utf16LE = {
                stringify: function(e4) {
                  for (var t4 = e4.words, r4 = e4.sigBytes, n2 = [], i = 0; i < r4; i += 2) {
                    var s = a(t4[i >>> 2] >>> 16 - i % 4 * 8 & 65535);
                    n2.push(String.fromCharCode(s));
                  }
                  return n2.join("");
                },
                parse: function(e4) {
                  for (var r4 = e4.length, n2 = [], i = 0; i < r4; i++)
                    n2[i >>> 1] |= a(e4.charCodeAt(i) << 16 - i % 2 * 16);
                  return t3.create(n2, 2 * r4);
                }
              };
            }(), n.enc.Utf16);
          },
          888: function(e2, t2, r2) {
            var n, a, i, s, o, c, d, p;
            e2.exports = (p = r2(8249), r2(2783), r2(9824), a = (n = p).lib, i = a.Base, s = a.WordArray, o = n.algo, c = o.MD5, d = o.EvpKDF = i.extend({
              cfg: i.extend({ keySize: 4, hasher: c, iterations: 1 }),
              init: function(e3) {
                this.cfg = this.cfg.extend(e3);
              },
              compute: function(e3, t3) {
                for (var r3, n2 = this.cfg, a2 = n2.hasher.create(), i2 = s.create(), o2 = i2.words, c2 = n2.keySize, d2 = n2.iterations; o2.length < c2; ) {
                  r3 && a2.update(r3), r3 = a2.update(e3).finalize(t3), a2.reset();
                  for (var p2 = 1; p2 < d2; p2++)
                    r3 = a2.finalize(r3), a2.reset();
                  i2.concat(r3);
                }
                return i2.sigBytes = 4 * c2, i2;
              }
            }), n.EvpKDF = function(e3, t3, r3) {
              return d.create(r3).compute(e3, t3);
            }, p.EvpKDF);
          },
          2209: function(e2, t2, r2) {
            var n, a, i, s;
            e2.exports = (s = r2(8249), r2(5109), a = (n = s).lib.CipherParams, i = n.enc.Hex, n.format.Hex = {
              stringify: function(e3) {
                return e3.ciphertext.toString(i);
              },
              parse: function(e3) {
                var t3 = i.parse(e3);
                return a.create({ ciphertext: t3 });
              }
            }, s.format.Hex);
          },
          9824: function(e2, t2, r2) {
            var n, a, i, s;
            e2.exports = (n = r2(8249), i = (a = n).lib.Base, s = a.enc.Utf8, void (a.algo.HMAC = i.extend({
              init: function(e3, t3) {
                e3 = this._hasher = new e3.init(), "string" == typeof t3 && (t3 = s.parse(t3));
                var r3 = e3.blockSize, n2 = 4 * r3;
                t3.sigBytes > n2 && (t3 = e3.finalize(t3)), t3.clamp();
                for (var a2 = this._oKey = t3.clone(), i2 = this._iKey = t3.clone(), o = a2.words, c = i2.words, d = 0; d < r3; d++)
                  o[d] ^= 1549556828, c[d] ^= 909522486;
                a2.sigBytes = i2.sigBytes = n2, this.reset();
              },
              reset: function() {
                var e3 = this._hasher;
                e3.reset(), e3.update(this._iKey);
              },
              update: function(e3) {
                return this._hasher.update(e3), this;
              },
              finalize: function(e3) {
                var t3 = this._hasher, r3 = t3.finalize(e3);
                return t3.reset(), t3.finalize(this._oKey.clone().concat(r3));
              }
            })));
          },
          1354: function(e2, t2, r2) {
            var n;
            e2.exports = (n = r2(8249), r2(4938), r2(4433), r2(298), r2(8269), r2(3786), r2(8214), r2(2783), r2(2153), r2(7792), r2(34), r2(7460), r2(3327), r2(706), r2(9824), r2(2112), r2(888), r2(5109), r2(8568), r2(4242), r2(9968), r2(7660), r2(1148), r2(3615), r2(2807), r2(1077), r2(6475), r2(6991), r2(2209), r2(452), r2(4253), r2(1857), r2(4454), r2(3974), n);
          },
          4433: function(e2, t2, r2) {
            var n;
            e2.exports = (n = r2(8249), function() {
              if ("function" == typeof ArrayBuffer) {
                var e3 = n.lib.WordArray, t3 = e3.init, r3 = e3.init = function(e4) {
                  if (e4 instanceof ArrayBuffer && (e4 = new Uint8Array(e4)), (e4 instanceof Int8Array || "undefined" != typeof Uint8ClampedArray && e4 instanceof Uint8ClampedArray || e4 instanceof Int16Array || e4 instanceof Uint16Array || e4 instanceof Int32Array || e4 instanceof Uint32Array || e4 instanceof Float32Array || e4 instanceof Float64Array) && (e4 = new Uint8Array(
                    e4.buffer,
                    e4.byteOffset,
                    e4.byteLength
                  )), e4 instanceof Uint8Array) {
                    for (var r4 = e4.byteLength, n2 = [], a = 0; a < r4; a++)
                      n2[a >>> 2] |= e4[a] << 24 - a % 4 * 8;
                    t3.call(this, n2, r4);
                  } else
                    t3.apply(this, arguments);
                };
                r3.prototype = e3;
              }
            }(), n.lib.WordArray);
          },
          8214: function(e2, t2, r2) {
            var n;
            e2.exports = (n = r2(8249), function(e3) {
              var t3 = n, r3 = t3.lib, a = r3.WordArray, i = r3.Hasher, s = t3.algo, o = [];
              !function() {
                for (var t4 = 0; t4 < 64; t4++)
                  o[t4] = 4294967296 * e3.abs(e3.sin(t4 + 1)) | 0;
              }();
              var c = s.MD5 = i.extend({
                _doReset: function() {
                  this._hash = new a.init([
                    1732584193,
                    4023233417,
                    2562383102,
                    271733878
                  ]);
                },
                _doProcessBlock: function(e4, t4) {
                  for (var r4 = 0; r4 < 16; r4++) {
                    var n2 = t4 + r4, a2 = e4[n2];
                    e4[n2] = 16711935 & (a2 << 8 | a2 >>> 24) | 4278255360 & (a2 << 24 | a2 >>> 8);
                  }
                  var i2 = this._hash.words, s2 = e4[t4 + 0], c2 = e4[t4 + 1], h = e4[t4 + 2], m = e4[t4 + 3], f = e4[t4 + 4], _ = e4[t4 + 5], g = e4[t4 + 6], v = e4[t4 + 7], y = e4[t4 + 8], b = e4[t4 + 9], S = e4[t4 + 10], w = e4[t4 + 11], T = e4[t4 + 12], E = e4[t4 + 13], R = e4[t4 + 14], P = e4[t4 + 15], C = i2[0], k = i2[1], O = i2[2], x = i2[3];
                  C = d(C, k, O, x, s2, 7, o[0]), x = d(x, C, k, O, c2, 12, o[1]), O = d(O, x, C, k, h, 17, o[2]), k = d(k, O, x, C, m, 22, o[3]), C = d(C, k, O, x, f, 7, o[4]), x = d(x, C, k, O, _, 12, o[5]), O = d(O, x, C, k, g, 17, o[6]), k = d(k, O, x, C, v, 22, o[7]), C = d(C, k, O, x, y, 7, o[8]), x = d(x, C, k, O, b, 12, o[9]), O = d(O, x, C, k, S, 17, o[10]), k = d(k, O, x, C, w, 22, o[11]), C = d(C, k, O, x, T, 7, o[12]), x = d(x, C, k, O, E, 12, o[13]), O = d(O, x, C, k, R, 17, o[14]), C = p(
                    C,
                    k = d(k, O, x, C, P, 22, o[15]),
                    O,
                    x,
                    c2,
                    5,
                    o[16]
                  ), x = p(x, C, k, O, g, 9, o[17]), O = p(O, x, C, k, w, 14, o[18]), k = p(k, O, x, C, s2, 20, o[19]), C = p(C, k, O, x, _, 5, o[20]), x = p(x, C, k, O, S, 9, o[21]), O = p(O, x, C, k, P, 14, o[22]), k = p(k, O, x, C, f, 20, o[23]), C = p(C, k, O, x, b, 5, o[24]), x = p(x, C, k, O, R, 9, o[25]), O = p(O, x, C, k, m, 14, o[26]), k = p(k, O, x, C, y, 20, o[27]), C = p(C, k, O, x, E, 5, o[28]), x = p(x, C, k, O, h, 9, o[29]), O = p(O, x, C, k, v, 14, o[30]), C = l(
                    C,
                    k = p(k, O, x, C, T, 20, o[31]),
                    O,
                    x,
                    _,
                    4,
                    o[32]
                  ), x = l(x, C, k, O, y, 11, o[33]), O = l(O, x, C, k, w, 16, o[34]), k = l(k, O, x, C, R, 23, o[35]), C = l(C, k, O, x, c2, 4, o[36]), x = l(x, C, k, O, f, 11, o[37]), O = l(O, x, C, k, v, 16, o[38]), k = l(k, O, x, C, S, 23, o[39]), C = l(C, k, O, x, E, 4, o[40]), x = l(x, C, k, O, s2, 11, o[41]), O = l(O, x, C, k, m, 16, o[42]), k = l(k, O, x, C, g, 23, o[43]), C = l(C, k, O, x, b, 4, o[44]), x = l(x, C, k, O, T, 11, o[45]), O = l(O, x, C, k, P, 16, o[46]), C = u(
                    C,
                    k = l(k, O, x, C, h, 23, o[47]),
                    O,
                    x,
                    s2,
                    6,
                    o[48]
                  ), x = u(x, C, k, O, v, 10, o[49]), O = u(O, x, C, k, R, 15, o[50]), k = u(k, O, x, C, _, 21, o[51]), C = u(C, k, O, x, T, 6, o[52]), x = u(x, C, k, O, m, 10, o[53]), O = u(O, x, C, k, S, 15, o[54]), k = u(k, O, x, C, c2, 21, o[55]), C = u(C, k, O, x, y, 6, o[56]), x = u(x, C, k, O, P, 10, o[57]), O = u(O, x, C, k, g, 15, o[58]), k = u(k, O, x, C, E, 21, o[59]), C = u(C, k, O, x, f, 6, o[60]), x = u(x, C, k, O, w, 10, o[61]), O = u(O, x, C, k, h, 15, o[62]), k = u(k, O, x, C, b, 21, o[63]), i2[0] = i2[0] + C | 0, i2[1] = i2[1] + k | 0, i2[2] = i2[2] + O | 0, i2[3] = i2[3] + x | 0;
                },
                _doFinalize: function() {
                  var t4 = this._data, r4 = t4.words, n2 = 8 * this._nDataBytes, a2 = 8 * t4.sigBytes;
                  r4[a2 >>> 5] |= 128 << 24 - a2 % 32;
                  var i2 = e3.floor(n2 / 4294967296), s2 = n2;
                  r4[15 + (a2 + 64 >>> 9 << 4)] = 16711935 & (i2 << 8 | i2 >>> 24) | 4278255360 & (i2 << 24 | i2 >>> 8), r4[14 + (a2 + 64 >>> 9 << 4)] = 16711935 & (s2 << 8 | s2 >>> 24) | 4278255360 & (s2 << 24 | s2 >>> 8), t4.sigBytes = 4 * (r4.length + 1), this._process();
                  for (var o2 = this._hash, c2 = o2.words, d2 = 0; d2 < 4; d2++) {
                    var p2 = c2[d2];
                    c2[d2] = 16711935 & (p2 << 8 | p2 >>> 24) | 4278255360 & (p2 << 24 | p2 >>> 8);
                  }
                  return o2;
                },
                clone: function() {
                  var e4 = i.clone.call(this);
                  return e4._hash = this._hash.clone(), e4;
                }
              });
              function d(e4, t4, r4, n2, a2, i2, s2) {
                var o2 = e4 + (t4 & r4 | ~t4 & n2) + a2 + s2;
                return (o2 << i2 | o2 >>> 32 - i2) + t4;
              }
              function p(e4, t4, r4, n2, a2, i2, s2) {
                var o2 = e4 + (t4 & n2 | r4 & ~n2) + a2 + s2;
                return (o2 << i2 | o2 >>> 32 - i2) + t4;
              }
              function l(e4, t4, r4, n2, a2, i2, s2) {
                var o2 = e4 + (t4 ^ r4 ^ n2) + a2 + s2;
                return (o2 << i2 | o2 >>> 32 - i2) + t4;
              }
              function u(e4, t4, r4, n2, a2, i2, s2) {
                var o2 = e4 + (r4 ^ (t4 | ~n2)) + a2 + s2;
                return (o2 << i2 | o2 >>> 32 - i2) + t4;
              }
              t3.MD5 = i._createHelper(c), t3.HmacMD5 = i._createHmacHelper(c);
            }(Math), n.MD5);
          },
          8568: function(e2, t2, r2) {
            var n;
            e2.exports = (n = r2(8249), r2(5109), n.mode.CFB = function() {
              var e3 = n.lib.BlockCipherMode.extend();
              function t3(e4, t4, r3, n2) {
                var a, i = this._iv;
                i ? (a = i.slice(0), this._iv = void 0) : a = this._prevBlock, n2.encryptBlock(a, 0);
                for (var s = 0; s < r3; s++)
                  e4[t4 + s] ^= a[s];
              }
              return e3.Encryptor = e3.extend({
                processBlock: function(e4, r3) {
                  var n2 = this._cipher, a = n2.blockSize;
                  t3.call(this, e4, r3, a, n2), this._prevBlock = e4.slice(r3, r3 + a);
                }
              }), e3.Decryptor = e3.extend({
                processBlock: function(e4, r3) {
                  var n2 = this._cipher, a = n2.blockSize, i = e4.slice(r3, r3 + a);
                  t3.call(this, e4, r3, a, n2), this._prevBlock = i;
                }
              }), e3;
            }(), n.mode.CFB);
          },
          9968: function(e2, t2, r2) {
            var n;
            e2.exports = (n = r2(8249), r2(5109), n.mode.CTRGladman = function() {
              var e3 = n.lib.BlockCipherMode.extend();
              function t3(e4) {
                if (255 == (e4 >> 24 & 255)) {
                  var t4 = e4 >> 16 & 255, r4 = e4 >> 8 & 255, n2 = 255 & e4;
                  255 === t4 ? (t4 = 0, 255 === r4 ? (r4 = 0, 255 === n2 ? n2 = 0 : ++n2) : ++r4) : ++t4, e4 = 0, e4 += t4 << 16, e4 += r4 << 8, e4 += n2;
                } else
                  e4 += 1 << 24;
                return e4;
              }
              function r3(e4) {
                return 0 === (e4[0] = t3(e4[0])) && (e4[1] = t3(e4[1])), e4;
              }
              var a = e3.Encryptor = e3.extend({
                processBlock: function(e4, t4) {
                  var n2 = this._cipher, a2 = n2.blockSize, i = this._iv, s = this._counter;
                  i && (s = this._counter = i.slice(0), this._iv = void 0), r3(s);
                  var o = s.slice(0);
                  n2.encryptBlock(o, 0);
                  for (var c = 0; c < a2; c++)
                    e4[t4 + c] ^= o[c];
                }
              });
              return e3.Decryptor = a, e3;
            }(), n.mode.CTRGladman);
          },
          4242: function(e2, t2, r2) {
            var n, a, i;
            e2.exports = (i = r2(8249), r2(5109), i.mode.CTR = (n = i.lib.BlockCipherMode.extend(), a = n.Encryptor = n.extend({
              processBlock: function(e3, t3) {
                var r3 = this._cipher, n2 = r3.blockSize, a2 = this._iv, i2 = this._counter;
                a2 && (i2 = this._counter = a2.slice(0), this._iv = void 0);
                var s = i2.slice(0);
                r3.encryptBlock(s, 0), i2[n2 - 1] = i2[n2 - 1] + 1 | 0;
                for (var o = 0; o < n2; o++)
                  e3[t3 + o] ^= s[o];
              }
            }), n.Decryptor = a, n), i.mode.CTR);
          },
          1148: function(e2, t2, r2) {
            var n, a;
            e2.exports = (a = r2(8249), r2(5109), a.mode.ECB = ((n = a.lib.BlockCipherMode.extend()).Encryptor = n.extend({
              processBlock: function(e3, t3) {
                this._cipher.encryptBlock(e3, t3);
              }
            }), n.Decryptor = n.extend({
              processBlock: function(e3, t3) {
                this._cipher.decryptBlock(e3, t3);
              }
            }), n), a.mode.ECB);
          },
          7660: function(e2, t2, r2) {
            var n, a, i;
            e2.exports = (i = r2(8249), r2(5109), i.mode.OFB = (n = i.lib.BlockCipherMode.extend(), a = n.Encryptor = n.extend({
              processBlock: function(e3, t3) {
                var r3 = this._cipher, n2 = r3.blockSize, a2 = this._iv, i2 = this._keystream;
                a2 && (i2 = this._keystream = a2.slice(0), this._iv = void 0), r3.encryptBlock(i2, 0);
                for (var s = 0; s < n2; s++)
                  e3[t3 + s] ^= i2[s];
              }
            }), n.Decryptor = a, n), i.mode.OFB);
          },
          3615: function(e2, t2, r2) {
            var n;
            e2.exports = (n = r2(8249), r2(5109), n.pad.AnsiX923 = {
              pad: function(e3, t3) {
                var r3 = e3.sigBytes, n2 = 4 * t3, a = n2 - r3 % n2, i = r3 + a - 1;
                e3.clamp(), e3.words[i >>> 2] |= a << 24 - i % 4 * 8, e3.sigBytes += a;
              },
              unpad: function(e3) {
                var t3 = 255 & e3.words[e3.sigBytes - 1 >>> 2];
                e3.sigBytes -= t3;
              }
            }, n.pad.Ansix923);
          },
          2807: function(e2, t2, r2) {
            var n;
            e2.exports = (n = r2(8249), r2(5109), n.pad.Iso10126 = {
              pad: function(e3, t3) {
                var r3 = 4 * t3, a = r3 - e3.sigBytes % r3;
                e3.concat(n.lib.WordArray.random(a - 1)).concat(
                  n.lib.WordArray.create([a << 24], 1)
                );
              },
              unpad: function(e3) {
                var t3 = 255 & e3.words[e3.sigBytes - 1 >>> 2];
                e3.sigBytes -= t3;
              }
            }, n.pad.Iso10126);
          },
          1077: function(e2, t2, r2) {
            var n;
            e2.exports = (n = r2(8249), r2(5109), n.pad.Iso97971 = {
              pad: function(e3, t3) {
                e3.concat(n.lib.WordArray.create([2147483648], 1)), n.pad.ZeroPadding.pad(e3, t3);
              },
              unpad: function(e3) {
                n.pad.ZeroPadding.unpad(e3), e3.sigBytes--;
              }
            }, n.pad.Iso97971);
          },
          6991: function(e2, t2, r2) {
            var n;
            e2.exports = (n = r2(8249), r2(5109), n.pad.NoPadding = { pad: function() {
            }, unpad: function() {
            } }, n.pad.NoPadding);
          },
          6475: function(e2, t2, r2) {
            var n;
            e2.exports = (n = r2(8249), r2(5109), n.pad.ZeroPadding = {
              pad: function(e3, t3) {
                var r3 = 4 * t3;
                e3.clamp(), e3.sigBytes += r3 - (e3.sigBytes % r3 || r3);
              },
              unpad: function(e3) {
                var t3 = e3.words, r3 = e3.sigBytes - 1;
                for (r3 = e3.sigBytes - 1; r3 >= 0; r3--)
                  if (t3[r3 >>> 2] >>> 24 - r3 % 4 * 8 & 255) {
                    e3.sigBytes = r3 + 1;
                    break;
                  }
              }
            }, n.pad.ZeroPadding);
          },
          2112: function(e2, t2, r2) {
            var n, a, i, s, o, c, d, p, l;
            e2.exports = (l = r2(8249), r2(2783), r2(9824), a = (n = l).lib, i = a.Base, s = a.WordArray, o = n.algo, c = o.SHA1, d = o.HMAC, p = o.PBKDF2 = i.extend({
              cfg: i.extend({ keySize: 4, hasher: c, iterations: 1 }),
              init: function(e3) {
                this.cfg = this.cfg.extend(e3);
              },
              compute: function(e3, t3) {
                for (var r3 = this.cfg, n2 = d.create(r3.hasher, e3), a2 = s.create(), i2 = s.create([1]), o2 = a2.words, c2 = i2.words, p2 = r3.keySize, l2 = r3.iterations; o2.length < p2; ) {
                  var u = n2.update(t3).finalize(i2);
                  n2.reset();
                  for (var h = u.words, m = h.length, f = u, _ = 1; _ < l2; _++) {
                    f = n2.finalize(f), n2.reset();
                    for (var g = f.words, v = 0; v < m; v++)
                      h[v] ^= g[v];
                  }
                  a2.concat(u), c2[0]++;
                }
                return a2.sigBytes = 4 * p2, a2;
              }
            }), n.PBKDF2 = function(e3, t3, r3) {
              return p.create(r3).compute(e3, t3);
            }, l.PBKDF2);
          },
          3974: function(e2, t2, r2) {
            var n;
            e2.exports = (n = r2(8249), r2(8269), r2(8214), r2(888), r2(5109), function() {
              var e3 = n, t3 = e3.lib.StreamCipher, r3 = e3.algo, a = [], i = [], s = [], o = r3.RabbitLegacy = t3.extend({
                _doReset: function() {
                  var e4 = this._key.words, t4 = this.cfg.iv, r4 = this._X = [
                    e4[0],
                    e4[3] << 16 | e4[2] >>> 16,
                    e4[1],
                    e4[0] << 16 | e4[3] >>> 16,
                    e4[2],
                    e4[1] << 16 | e4[0] >>> 16,
                    e4[3],
                    e4[2] << 16 | e4[1] >>> 16
                  ], n2 = this._C = [
                    e4[2] << 16 | e4[2] >>> 16,
                    4294901760 & e4[0] | 65535 & e4[1],
                    e4[3] << 16 | e4[3] >>> 16,
                    4294901760 & e4[1] | 65535 & e4[2],
                    e4[0] << 16 | e4[0] >>> 16,
                    4294901760 & e4[2] | 65535 & e4[3],
                    e4[1] << 16 | e4[1] >>> 16,
                    4294901760 & e4[3] | 65535 & e4[0]
                  ];
                  this._b = 0;
                  for (var a2 = 0; a2 < 4; a2++)
                    c.call(this);
                  for (a2 = 0; a2 < 8; a2++)
                    n2[a2] ^= r4[a2 + 4 & 7];
                  if (t4) {
                    var i2 = t4.words, s2 = i2[0], o2 = i2[1], d = 16711935 & (s2 << 8 | s2 >>> 24) | 4278255360 & (s2 << 24 | s2 >>> 8), p = 16711935 & (o2 << 8 | o2 >>> 24) | 4278255360 & (o2 << 24 | o2 >>> 8), l = d >>> 16 | 4294901760 & p, u = p << 16 | 65535 & d;
                    for (n2[0] ^= d, n2[1] ^= l, n2[2] ^= p, n2[3] ^= u, n2[4] ^= d, n2[5] ^= l, n2[6] ^= p, n2[7] ^= u, a2 = 0; a2 < 4; a2++)
                      c.call(this);
                  }
                },
                _doProcessBlock: function(e4, t4) {
                  var r4 = this._X;
                  c.call(this), a[0] = r4[0] ^ r4[5] >>> 16 ^ r4[3] << 16, a[1] = r4[2] ^ r4[7] >>> 16 ^ r4[5] << 16, a[2] = r4[4] ^ r4[1] >>> 16 ^ r4[7] << 16, a[3] = r4[6] ^ r4[3] >>> 16 ^ r4[1] << 16;
                  for (var n2 = 0; n2 < 4; n2++)
                    a[n2] = 16711935 & (a[n2] << 8 | a[n2] >>> 24) | 4278255360 & (a[n2] << 24 | a[n2] >>> 8), e4[t4 + n2] ^= a[n2];
                },
                blockSize: 4,
                ivSize: 2
              });
              function c() {
                for (var e4 = this._X, t4 = this._C, r4 = 0; r4 < 8; r4++)
                  i[r4] = t4[r4];
                for (t4[0] = t4[0] + 1295307597 + this._b | 0, t4[1] = t4[1] + 3545052371 + (t4[0] >>> 0 < i[0] >>> 0 ? 1 : 0) | 0, t4[2] = t4[2] + 886263092 + (t4[1] >>> 0 < i[1] >>> 0 ? 1 : 0) | 0, t4[3] = t4[3] + 1295307597 + (t4[2] >>> 0 < i[2] >>> 0 ? 1 : 0) | 0, t4[4] = t4[4] + 3545052371 + (t4[3] >>> 0 < i[3] >>> 0 ? 1 : 0) | 0, t4[5] = t4[5] + 886263092 + (t4[4] >>> 0 < i[4] >>> 0 ? 1 : 0) | 0, t4[6] = t4[6] + 1295307597 + (t4[5] >>> 0 < i[5] >>> 0 ? 1 : 0) | 0, t4[7] = t4[7] + 3545052371 + (t4[6] >>> 0 < i[6] >>> 0 ? 1 : 0) | 0, this._b = t4[7] >>> 0 < i[7] >>> 0 ? 1 : 0, r4 = 0; r4 < 8; r4++) {
                  var n2 = e4[r4] + t4[r4], a2 = 65535 & n2, o2 = n2 >>> 16, c2 = ((a2 * a2 >>> 17) + a2 * o2 >>> 15) + o2 * o2, d = ((4294901760 & n2) * n2 | 0) + ((65535 & n2) * n2 | 0);
                  s[r4] = c2 ^ d;
                }
                e4[0] = s[0] + (s[7] << 16 | s[7] >>> 16) + (s[6] << 16 | s[6] >>> 16) | 0, e4[1] = s[1] + (s[0] << 8 | s[0] >>> 24) + s[7] | 0, e4[2] = s[2] + (s[1] << 16 | s[1] >>> 16) + (s[0] << 16 | s[0] >>> 16) | 0, e4[3] = s[3] + (s[2] << 8 | s[2] >>> 24) + s[1] | 0, e4[4] = s[4] + (s[3] << 16 | s[3] >>> 16) + (s[2] << 16 | s[2] >>> 16) | 0, e4[5] = s[5] + (s[4] << 8 | s[4] >>> 24) + s[3] | 0, e4[6] = s[6] + (s[5] << 16 | s[5] >>> 16) + (s[4] << 16 | s[4] >>> 16) | 0, e4[7] = s[7] + (s[6] << 8 | s[6] >>> 24) + s[5] | 0;
              }
              e3.RabbitLegacy = t3._createHelper(o);
            }(), n.RabbitLegacy);
          },
          4454: function(e2, t2, r2) {
            var n;
            e2.exports = (n = r2(8249), r2(8269), r2(8214), r2(888), r2(5109), function() {
              var e3 = n, t3 = e3.lib.StreamCipher, r3 = e3.algo, a = [], i = [], s = [], o = r3.Rabbit = t3.extend({
                _doReset: function() {
                  for (var e4 = this._key.words, t4 = this.cfg.iv, r4 = 0; r4 < 4; r4++)
                    e4[r4] = 16711935 & (e4[r4] << 8 | e4[r4] >>> 24) | 4278255360 & (e4[r4] << 24 | e4[r4] >>> 8);
                  var n2 = this._X = [
                    e4[0],
                    e4[3] << 16 | e4[2] >>> 16,
                    e4[1],
                    e4[0] << 16 | e4[3] >>> 16,
                    e4[2],
                    e4[1] << 16 | e4[0] >>> 16,
                    e4[3],
                    e4[2] << 16 | e4[1] >>> 16
                  ], a2 = this._C = [
                    e4[2] << 16 | e4[2] >>> 16,
                    4294901760 & e4[0] | 65535 & e4[1],
                    e4[3] << 16 | e4[3] >>> 16,
                    4294901760 & e4[1] | 65535 & e4[2],
                    e4[0] << 16 | e4[0] >>> 16,
                    4294901760 & e4[2] | 65535 & e4[3],
                    e4[1] << 16 | e4[1] >>> 16,
                    4294901760 & e4[3] | 65535 & e4[0]
                  ];
                  for (this._b = 0, r4 = 0; r4 < 4; r4++)
                    c.call(this);
                  for (r4 = 0; r4 < 8; r4++)
                    a2[r4] ^= n2[r4 + 4 & 7];
                  if (t4) {
                    var i2 = t4.words, s2 = i2[0], o2 = i2[1], d = 16711935 & (s2 << 8 | s2 >>> 24) | 4278255360 & (s2 << 24 | s2 >>> 8), p = 16711935 & (o2 << 8 | o2 >>> 24) | 4278255360 & (o2 << 24 | o2 >>> 8), l = d >>> 16 | 4294901760 & p, u = p << 16 | 65535 & d;
                    for (a2[0] ^= d, a2[1] ^= l, a2[2] ^= p, a2[3] ^= u, a2[4] ^= d, a2[5] ^= l, a2[6] ^= p, a2[7] ^= u, r4 = 0; r4 < 4; r4++)
                      c.call(this);
                  }
                },
                _doProcessBlock: function(e4, t4) {
                  var r4 = this._X;
                  c.call(this), a[0] = r4[0] ^ r4[5] >>> 16 ^ r4[3] << 16, a[1] = r4[2] ^ r4[7] >>> 16 ^ r4[5] << 16, a[2] = r4[4] ^ r4[1] >>> 16 ^ r4[7] << 16, a[3] = r4[6] ^ r4[3] >>> 16 ^ r4[1] << 16;
                  for (var n2 = 0; n2 < 4; n2++)
                    a[n2] = 16711935 & (a[n2] << 8 | a[n2] >>> 24) | 4278255360 & (a[n2] << 24 | a[n2] >>> 8), e4[t4 + n2] ^= a[n2];
                },
                blockSize: 4,
                ivSize: 2
              });
              function c() {
                for (var e4 = this._X, t4 = this._C, r4 = 0; r4 < 8; r4++)
                  i[r4] = t4[r4];
                for (t4[0] = t4[0] + 1295307597 + this._b | 0, t4[1] = t4[1] + 3545052371 + (t4[0] >>> 0 < i[0] >>> 0 ? 1 : 0) | 0, t4[2] = t4[2] + 886263092 + (t4[1] >>> 0 < i[1] >>> 0 ? 1 : 0) | 0, t4[3] = t4[3] + 1295307597 + (t4[2] >>> 0 < i[2] >>> 0 ? 1 : 0) | 0, t4[4] = t4[4] + 3545052371 + (t4[3] >>> 0 < i[3] >>> 0 ? 1 : 0) | 0, t4[5] = t4[5] + 886263092 + (t4[4] >>> 0 < i[4] >>> 0 ? 1 : 0) | 0, t4[6] = t4[6] + 1295307597 + (t4[5] >>> 0 < i[5] >>> 0 ? 1 : 0) | 0, t4[7] = t4[7] + 3545052371 + (t4[6] >>> 0 < i[6] >>> 0 ? 1 : 0) | 0, this._b = t4[7] >>> 0 < i[7] >>> 0 ? 1 : 0, r4 = 0; r4 < 8; r4++) {
                  var n2 = e4[r4] + t4[r4], a2 = 65535 & n2, o2 = n2 >>> 16, c2 = ((a2 * a2 >>> 17) + a2 * o2 >>> 15) + o2 * o2, d = ((4294901760 & n2) * n2 | 0) + ((65535 & n2) * n2 | 0);
                  s[r4] = c2 ^ d;
                }
                e4[0] = s[0] + (s[7] << 16 | s[7] >>> 16) + (s[6] << 16 | s[6] >>> 16) | 0, e4[1] = s[1] + (s[0] << 8 | s[0] >>> 24) + s[7] | 0, e4[2] = s[2] + (s[1] << 16 | s[1] >>> 16) + (s[0] << 16 | s[0] >>> 16) | 0, e4[3] = s[3] + (s[2] << 8 | s[2] >>> 24) + s[1] | 0, e4[4] = s[4] + (s[3] << 16 | s[3] >>> 16) + (s[2] << 16 | s[2] >>> 16) | 0, e4[5] = s[5] + (s[4] << 8 | s[4] >>> 24) + s[3] | 0, e4[6] = s[6] + (s[5] << 16 | s[5] >>> 16) + (s[4] << 16 | s[4] >>> 16) | 0, e4[7] = s[7] + (s[6] << 8 | s[6] >>> 24) + s[5] | 0;
              }
              e3.Rabbit = t3._createHelper(o);
            }(), n.Rabbit);
          },
          1857: function(e2, t2, r2) {
            var n;
            e2.exports = (n = r2(8249), r2(8269), r2(8214), r2(888), r2(5109), function() {
              var e3 = n, t3 = e3.lib.StreamCipher, r3 = e3.algo, a = r3.RC4 = t3.extend({
                _doReset: function() {
                  for (var e4 = this._key, t4 = e4.words, r4 = e4.sigBytes, n2 = this._S = [], a2 = 0; a2 < 256; a2++)
                    n2[a2] = a2;
                  a2 = 0;
                  for (var i2 = 0; a2 < 256; a2++) {
                    var s2 = a2 % r4, o = t4[s2 >>> 2] >>> 24 - s2 % 4 * 8 & 255;
                    i2 = (i2 + n2[a2] + o) % 256;
                    var c = n2[a2];
                    n2[a2] = n2[i2], n2[i2] = c;
                  }
                  this._i = this._j = 0;
                },
                _doProcessBlock: function(e4, t4) {
                  e4[t4] ^= i.call(this);
                },
                keySize: 8,
                ivSize: 0
              });
              function i() {
                for (var e4 = this._S, t4 = this._i, r4 = this._j, n2 = 0, a2 = 0; a2 < 4; a2++) {
                  r4 = (r4 + e4[t4 = (t4 + 1) % 256]) % 256;
                  var i2 = e4[t4];
                  e4[t4] = e4[r4], e4[r4] = i2, n2 |= e4[(e4[t4] + e4[r4]) % 256] << 24 - 8 * a2;
                }
                return this._i = t4, this._j = r4, n2;
              }
              e3.RC4 = t3._createHelper(a);
              var s = r3.RC4Drop = a.extend({
                cfg: a.cfg.extend({ drop: 192 }),
                _doReset: function() {
                  a._doReset.call(this);
                  for (var e4 = this.cfg.drop; e4 > 0; e4--)
                    i.call(this);
                }
              });
              e3.RC4Drop = t3._createHelper(s);
            }(), n.RC4);
          },
          706: function(e2, t2, r2) {
            var n;
            e2.exports = (n = r2(8249), function(e3) {
              var t3 = n, r3 = t3.lib, a = r3.WordArray, i = r3.Hasher, s = t3.algo, o = a.create([
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                7,
                4,
                13,
                1,
                10,
                6,
                15,
                3,
                12,
                0,
                9,
                5,
                2,
                14,
                11,
                8,
                3,
                10,
                14,
                4,
                9,
                15,
                8,
                1,
                2,
                7,
                0,
                6,
                13,
                11,
                5,
                12,
                1,
                9,
                11,
                10,
                0,
                8,
                12,
                4,
                13,
                3,
                7,
                15,
                14,
                5,
                6,
                2,
                4,
                0,
                5,
                9,
                7,
                12,
                2,
                10,
                14,
                1,
                3,
                8,
                11,
                6,
                15,
                13
              ]), c = a.create([
                5,
                14,
                7,
                0,
                9,
                2,
                11,
                4,
                13,
                6,
                15,
                8,
                1,
                10,
                3,
                12,
                6,
                11,
                3,
                7,
                0,
                13,
                5,
                10,
                14,
                15,
                8,
                12,
                4,
                9,
                1,
                2,
                15,
                5,
                1,
                3,
                7,
                14,
                6,
                9,
                11,
                8,
                12,
                2,
                10,
                0,
                4,
                13,
                8,
                6,
                4,
                1,
                3,
                11,
                15,
                0,
                5,
                12,
                2,
                13,
                9,
                7,
                10,
                14,
                12,
                15,
                10,
                4,
                1,
                5,
                8,
                7,
                6,
                2,
                13,
                14,
                0,
                3,
                9,
                11
              ]), d = a.create([
                11,
                14,
                15,
                12,
                5,
                8,
                7,
                9,
                11,
                13,
                14,
                15,
                6,
                7,
                9,
                8,
                7,
                6,
                8,
                13,
                11,
                9,
                7,
                15,
                7,
                12,
                15,
                9,
                11,
                7,
                13,
                12,
                11,
                13,
                6,
                7,
                14,
                9,
                13,
                15,
                14,
                8,
                13,
                6,
                5,
                12,
                7,
                5,
                11,
                12,
                14,
                15,
                14,
                15,
                9,
                8,
                9,
                14,
                5,
                6,
                8,
                6,
                5,
                12,
                9,
                15,
                5,
                11,
                6,
                8,
                13,
                12,
                5,
                12,
                13,
                14,
                11,
                8,
                5,
                6
              ]), p = a.create([
                8,
                9,
                9,
                11,
                13,
                15,
                15,
                5,
                7,
                7,
                8,
                11,
                14,
                14,
                12,
                6,
                9,
                13,
                15,
                7,
                12,
                8,
                9,
                11,
                7,
                7,
                12,
                7,
                6,
                15,
                13,
                11,
                9,
                7,
                15,
                11,
                8,
                6,
                6,
                14,
                12,
                13,
                5,
                14,
                13,
                13,
                7,
                5,
                15,
                5,
                8,
                11,
                14,
                14,
                6,
                14,
                6,
                9,
                12,
                9,
                12,
                5,
                15,
                8,
                8,
                5,
                12,
                9,
                12,
                5,
                14,
                6,
                8,
                13,
                6,
                5,
                15,
                13,
                11,
                11
              ]), l = a.create([
                0,
                1518500249,
                1859775393,
                2400959708,
                2840853838
              ]), u = a.create([
                1352829926,
                1548603684,
                1836072691,
                2053994217,
                0
              ]), h = s.RIPEMD160 = i.extend({
                _doReset: function() {
                  this._hash = a.create([
                    1732584193,
                    4023233417,
                    2562383102,
                    271733878,
                    3285377520
                  ]);
                },
                _doProcessBlock: function(e4, t4) {
                  for (var r4 = 0; r4 < 16; r4++) {
                    var n2 = t4 + r4, a2 = e4[n2];
                    e4[n2] = 16711935 & (a2 << 8 | a2 >>> 24) | 4278255360 & (a2 << 24 | a2 >>> 8);
                  }
                  var i2, s2, h2, b, S, w, T, E, R, P, C, k = this._hash.words, O = l.words, x = u.words, D = o.words, I = c.words, L = d.words, M = p.words;
                  for (w = i2 = k[0], T = s2 = k[1], E = h2 = k[2], R = b = k[3], P = S = k[4], r4 = 0; r4 < 80; r4 += 1)
                    C = i2 + e4[t4 + D[r4]] | 0, C += r4 < 16 ? m(s2, h2, b) + O[0] : r4 < 32 ? f(s2, h2, b) + O[1] : r4 < 48 ? _(s2, h2, b) + O[2] : r4 < 64 ? g(s2, h2, b) + O[3] : v(s2, h2, b) + O[4], C = (C = y(C |= 0, L[r4])) + S | 0, i2 = S, S = b, b = y(h2, 10), h2 = s2, s2 = C, C = w + e4[t4 + I[r4]] | 0, C += r4 < 16 ? v(T, E, R) + x[0] : r4 < 32 ? g(T, E, R) + x[1] : r4 < 48 ? _(T, E, R) + x[2] : r4 < 64 ? f(T, E, R) + x[3] : m(T, E, R) + x[4], C = (C = y(C |= 0, M[r4])) + P | 0, w = P, P = R, R = y(E, 10), E = T, T = C;
                  C = k[1] + h2 + R | 0, k[1] = k[2] + b + P | 0, k[2] = k[3] + S + w | 0, k[3] = k[4] + i2 + T | 0, k[4] = k[0] + s2 + E | 0, k[0] = C;
                },
                _doFinalize: function() {
                  var e4 = this._data, t4 = e4.words, r4 = 8 * this._nDataBytes, n2 = 8 * e4.sigBytes;
                  t4[n2 >>> 5] |= 128 << 24 - n2 % 32, t4[14 + (n2 + 64 >>> 9 << 4)] = 16711935 & (r4 << 8 | r4 >>> 24) | 4278255360 & (r4 << 24 | r4 >>> 8), e4.sigBytes = 4 * (t4.length + 1), this._process();
                  for (var a2 = this._hash, i2 = a2.words, s2 = 0; s2 < 5; s2++) {
                    var o2 = i2[s2];
                    i2[s2] = 16711935 & (o2 << 8 | o2 >>> 24) | 4278255360 & (o2 << 24 | o2 >>> 8);
                  }
                  return a2;
                },
                clone: function() {
                  var e4 = i.clone.call(this);
                  return e4._hash = this._hash.clone(), e4;
                }
              });
              function m(e4, t4, r4) {
                return e4 ^ t4 ^ r4;
              }
              function f(e4, t4, r4) {
                return e4 & t4 | ~e4 & r4;
              }
              function _(e4, t4, r4) {
                return (e4 | ~t4) ^ r4;
              }
              function g(e4, t4, r4) {
                return e4 & r4 | t4 & ~r4;
              }
              function v(e4, t4, r4) {
                return e4 ^ (t4 | ~r4);
              }
              function y(e4, t4) {
                return e4 << t4 | e4 >>> 32 - t4;
              }
              t3.RIPEMD160 = i._createHelper(h), t3.HmacRIPEMD160 = i._createHmacHelper(h);
            }(Math), n.RIPEMD160);
          },
          2783: function(e2, t2, r2) {
            var n, a, i, s, o, c, d, p;
            e2.exports = (p = r2(8249), a = (n = p).lib, i = a.WordArray, s = a.Hasher, o = n.algo, c = [], d = o.SHA1 = s.extend({
              _doReset: function() {
                this._hash = new i.init([
                  1732584193,
                  4023233417,
                  2562383102,
                  271733878,
                  3285377520
                ]);
              },
              _doProcessBlock: function(e3, t3) {
                for (var r3 = this._hash.words, n2 = r3[0], a2 = r3[1], i2 = r3[2], s2 = r3[3], o2 = r3[4], d2 = 0; d2 < 80; d2++) {
                  if (d2 < 16)
                    c[d2] = 0 | e3[t3 + d2];
                  else {
                    var p2 = c[d2 - 3] ^ c[d2 - 8] ^ c[d2 - 14] ^ c[d2 - 16];
                    c[d2] = p2 << 1 | p2 >>> 31;
                  }
                  var l = (n2 << 5 | n2 >>> 27) + o2 + c[d2];
                  l += d2 < 20 ? 1518500249 + (a2 & i2 | ~a2 & s2) : d2 < 40 ? 1859775393 + (a2 ^ i2 ^ s2) : d2 < 60 ? (a2 & i2 | a2 & s2 | i2 & s2) - 1894007588 : (a2 ^ i2 ^ s2) - 899497514, o2 = s2, s2 = i2, i2 = a2 << 30 | a2 >>> 2, a2 = n2, n2 = l;
                }
                r3[0] = r3[0] + n2 | 0, r3[1] = r3[1] + a2 | 0, r3[2] = r3[2] + i2 | 0, r3[3] = r3[3] + s2 | 0, r3[4] = r3[4] + o2 | 0;
              },
              _doFinalize: function() {
                var e3 = this._data, t3 = e3.words, r3 = 8 * this._nDataBytes, n2 = 8 * e3.sigBytes;
                return t3[n2 >>> 5] |= 128 << 24 - n2 % 32, t3[14 + (n2 + 64 >>> 9 << 4)] = Math.floor(
                  r3 / 4294967296
                ), t3[15 + (n2 + 64 >>> 9 << 4)] = r3, e3.sigBytes = 4 * t3.length, this._process(), this._hash;
              },
              clone: function() {
                var e3 = s.clone.call(this);
                return e3._hash = this._hash.clone(), e3;
              }
            }), n.SHA1 = s._createHelper(d), n.HmacSHA1 = s._createHmacHelper(d), p.SHA1);
          },
          7792: function(e2, t2, r2) {
            var n, a, i, s, o, c;
            e2.exports = (c = r2(8249), r2(2153), a = (n = c).lib.WordArray, i = n.algo, s = i.SHA256, o = i.SHA224 = s.extend({
              _doReset: function() {
                this._hash = new a.init([
                  3238371032,
                  914150663,
                  812702999,
                  4144912697,
                  4290775857,
                  1750603025,
                  1694076839,
                  3204075428
                ]);
              },
              _doFinalize: function() {
                var e3 = s._doFinalize.call(this);
                return e3.sigBytes -= 4, e3;
              }
            }), n.SHA224 = s._createHelper(o), n.HmacSHA224 = s._createHmacHelper(o), c.SHA224);
          },
          2153: function(e2, t2, r2) {
            var n;
            e2.exports = (n = r2(8249), function(e3) {
              var t3 = n, r3 = t3.lib, a = r3.WordArray, i = r3.Hasher, s = t3.algo, o = [], c = [];
              !function() {
                function t4(t5) {
                  for (var r5 = e3.sqrt(t5), n3 = 2; n3 <= r5; n3++)
                    if (!(t5 % n3))
                      return false;
                  return true;
                }
                function r4(e4) {
                  return 4294967296 * (e4 - (0 | e4)) | 0;
                }
                for (var n2 = 2, a2 = 0; a2 < 64; )
                  t4(n2) && (a2 < 8 && (o[a2] = r4(e3.pow(n2, 0.5))), c[a2] = r4(e3.pow(n2, 1 / 3)), a2++), n2++;
              }();
              var d = [], p = s.SHA256 = i.extend({
                _doReset: function() {
                  this._hash = new a.init(o.slice(0));
                },
                _doProcessBlock: function(e4, t4) {
                  for (var r4 = this._hash.words, n2 = r4[0], a2 = r4[1], i2 = r4[2], s2 = r4[3], o2 = r4[4], p2 = r4[5], l = r4[6], u = r4[7], h = 0; h < 64; h++) {
                    if (h < 16)
                      d[h] = 0 | e4[t4 + h];
                    else {
                      var m = d[h - 15], f = (m << 25 | m >>> 7) ^ (m << 14 | m >>> 18) ^ m >>> 3, _ = d[h - 2], g = (_ << 15 | _ >>> 17) ^ (_ << 13 | _ >>> 19) ^ _ >>> 10;
                      d[h] = f + d[h - 7] + g + d[h - 16];
                    }
                    var v = n2 & a2 ^ n2 & i2 ^ a2 & i2, y = (n2 << 30 | n2 >>> 2) ^ (n2 << 19 | n2 >>> 13) ^ (n2 << 10 | n2 >>> 22), b = u + ((o2 << 26 | o2 >>> 6) ^ (o2 << 21 | o2 >>> 11) ^ (o2 << 7 | o2 >>> 25)) + (o2 & p2 ^ ~o2 & l) + c[h] + d[h];
                    u = l, l = p2, p2 = o2, o2 = s2 + b | 0, s2 = i2, i2 = a2, a2 = n2, n2 = b + (y + v) | 0;
                  }
                  r4[0] = r4[0] + n2 | 0, r4[1] = r4[1] + a2 | 0, r4[2] = r4[2] + i2 | 0, r4[3] = r4[3] + s2 | 0, r4[4] = r4[4] + o2 | 0, r4[5] = r4[5] + p2 | 0, r4[6] = r4[6] + l | 0, r4[7] = r4[7] + u | 0;
                },
                _doFinalize: function() {
                  var t4 = this._data, r4 = t4.words, n2 = 8 * this._nDataBytes, a2 = 8 * t4.sigBytes;
                  return r4[a2 >>> 5] |= 128 << 24 - a2 % 32, r4[14 + (a2 + 64 >>> 9 << 4)] = e3.floor(
                    n2 / 4294967296
                  ), r4[15 + (a2 + 64 >>> 9 << 4)] = n2, t4.sigBytes = 4 * r4.length, this._process(), this._hash;
                },
                clone: function() {
                  var e4 = i.clone.call(this);
                  return e4._hash = this._hash.clone(), e4;
                }
              });
              t3.SHA256 = i._createHelper(p), t3.HmacSHA256 = i._createHmacHelper(p);
            }(Math), n.SHA256);
          },
          3327: function(e2, t2, r2) {
            var n;
            e2.exports = (n = r2(8249), r2(4938), function(e3) {
              var t3 = n, r3 = t3.lib, a = r3.WordArray, i = r3.Hasher, s = t3.x64.Word, o = t3.algo, c = [], d = [], p = [];
              !function() {
                for (var e4 = 1, t4 = 0, r4 = 0; r4 < 24; r4++) {
                  c[e4 + 5 * t4] = (r4 + 1) * (r4 + 2) / 2 % 64;
                  var n2 = (2 * e4 + 3 * t4) % 5;
                  e4 = t4 % 5, t4 = n2;
                }
                for (e4 = 0; e4 < 5; e4++)
                  for (t4 = 0; t4 < 5; t4++)
                    d[e4 + 5 * t4] = t4 + (2 * e4 + 3 * t4) % 5 * 5;
                for (var a2 = 1, i2 = 0; i2 < 24; i2++) {
                  for (var o2 = 0, l2 = 0, u2 = 0; u2 < 7; u2++) {
                    if (1 & a2) {
                      var h = (1 << u2) - 1;
                      h < 32 ? l2 ^= 1 << h : o2 ^= 1 << h - 32;
                    }
                    128 & a2 ? a2 = a2 << 1 ^ 113 : a2 <<= 1;
                  }
                  p[i2] = s.create(o2, l2);
                }
              }();
              var l = [];
              !function() {
                for (var e4 = 0; e4 < 25; e4++)
                  l[e4] = s.create();
              }();
              var u = o.SHA3 = i.extend({
                cfg: i.cfg.extend({ outputLength: 512 }),
                _doReset: function() {
                  for (var e4 = this._state = [], t4 = 0; t4 < 25; t4++)
                    e4[t4] = new s.init();
                  this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
                },
                _doProcessBlock: function(e4, t4) {
                  for (var r4 = this._state, n2 = this.blockSize / 2, a2 = 0; a2 < n2; a2++) {
                    var i2 = e4[t4 + 2 * a2], s2 = e4[t4 + 2 * a2 + 1];
                    i2 = 16711935 & (i2 << 8 | i2 >>> 24) | 4278255360 & (i2 << 24 | i2 >>> 8), s2 = 16711935 & (s2 << 8 | s2 >>> 24) | 4278255360 & (s2 << 24 | s2 >>> 8), (k = r4[a2]).high ^= s2, k.low ^= i2;
                  }
                  for (var o2 = 0; o2 < 24; o2++) {
                    for (var u2 = 0; u2 < 5; u2++) {
                      for (var h = 0, m = 0, f = 0; f < 5; f++)
                        h ^= (k = r4[u2 + 5 * f]).high, m ^= k.low;
                      var _ = l[u2];
                      _.high = h, _.low = m;
                    }
                    for (u2 = 0; u2 < 5; u2++) {
                      var g = l[(u2 + 4) % 5], v = l[(u2 + 1) % 5], y = v.high, b = v.low;
                      for (h = g.high ^ (y << 1 | b >>> 31), m = g.low ^ (b << 1 | y >>> 31), f = 0; f < 5; f++)
                        (k = r4[u2 + 5 * f]).high ^= h, k.low ^= m;
                    }
                    for (var S = 1; S < 25; S++) {
                      var w = (k = r4[S]).high, T = k.low, E = c[S];
                      E < 32 ? (h = w << E | T >>> 32 - E, m = T << E | w >>> 32 - E) : (h = T << E - 32 | w >>> 64 - E, m = w << E - 32 | T >>> 64 - E);
                      var R = l[d[S]];
                      R.high = h, R.low = m;
                    }
                    var P = l[0], C = r4[0];
                    for (P.high = C.high, P.low = C.low, u2 = 0; u2 < 5; u2++)
                      for (f = 0; f < 5; f++) {
                        var k = r4[S = u2 + 5 * f], O = l[S], x = l[(u2 + 1) % 5 + 5 * f], D = l[(u2 + 2) % 5 + 5 * f];
                        k.high = O.high ^ ~x.high & D.high, k.low = O.low ^ ~x.low & D.low;
                      }
                    k = r4[0];
                    var I = p[o2];
                    k.high ^= I.high, k.low ^= I.low;
                  }
                },
                _doFinalize: function() {
                  var t4 = this._data, r4 = t4.words, n2 = (this._nDataBytes, 8 * t4.sigBytes), i2 = 32 * this.blockSize;
                  r4[n2 >>> 5] |= 1 << 24 - n2 % 32, r4[(e3.ceil((n2 + 1) / i2) * i2 >>> 5) - 1] |= 128, t4.sigBytes = 4 * r4.length, this._process();
                  for (var s2 = this._state, o2 = this.cfg.outputLength / 8, c2 = o2 / 8, d2 = [], p2 = 0; p2 < c2; p2++) {
                    var l2 = s2[p2], u2 = l2.high, h = l2.low;
                    u2 = 16711935 & (u2 << 8 | u2 >>> 24) | 4278255360 & (u2 << 24 | u2 >>> 8), h = 16711935 & (h << 8 | h >>> 24) | 4278255360 & (h << 24 | h >>> 8), d2.push(h), d2.push(u2);
                  }
                  return new a.init(d2, o2);
                },
                clone: function() {
                  for (var e4 = i.clone.call(this), t4 = e4._state = this._state.slice(0), r4 = 0; r4 < 25; r4++)
                    t4[r4] = t4[r4].clone();
                  return e4;
                }
              });
              t3.SHA3 = i._createHelper(u), t3.HmacSHA3 = i._createHmacHelper(u);
            }(Math), n.SHA3);
          },
          7460: function(e2, t2, r2) {
            var n, a, i, s, o, c, d, p;
            e2.exports = (p = r2(8249), r2(4938), r2(34), a = (n = p).x64, i = a.Word, s = a.WordArray, o = n.algo, c = o.SHA512, d = o.SHA384 = c.extend({
              _doReset: function() {
                this._hash = new s.init([
                  new i.init(3418070365, 3238371032),
                  new i.init(1654270250, 914150663),
                  new i.init(2438529370, 812702999),
                  new i.init(355462360, 4144912697),
                  new i.init(1731405415, 4290775857),
                  new i.init(2394180231, 1750603025),
                  new i.init(3675008525, 1694076839),
                  new i.init(1203062813, 3204075428)
                ]);
              },
              _doFinalize: function() {
                var e3 = c._doFinalize.call(this);
                return e3.sigBytes -= 16, e3;
              }
            }), n.SHA384 = c._createHelper(d), n.HmacSHA384 = c._createHmacHelper(d), p.SHA384);
          },
          34: function(e2, t2, r2) {
            var n;
            e2.exports = (n = r2(8249), r2(4938), function() {
              var e3 = n, t3 = e3.lib.Hasher, r3 = e3.x64, a = r3.Word, i = r3.WordArray, s = e3.algo;
              function o() {
                return a.create.apply(a, arguments);
              }
              var c = [
                o(1116352408, 3609767458),
                o(1899447441, 602891725),
                o(3049323471, 3964484399),
                o(3921009573, 2173295548),
                o(961987163, 4081628472),
                o(1508970993, 3053834265),
                o(2453635748, 2937671579),
                o(2870763221, 3664609560),
                o(3624381080, 2734883394),
                o(310598401, 1164996542),
                o(607225278, 1323610764),
                o(1426881987, 3590304994),
                o(1925078388, 4068182383),
                o(2162078206, 991336113),
                o(2614888103, 633803317),
                o(3248222580, 3479774868),
                o(3835390401, 2666613458),
                o(4022224774, 944711139),
                o(264347078, 2341262773),
                o(604807628, 2007800933),
                o(770255983, 1495990901),
                o(1249150122, 1856431235),
                o(1555081692, 3175218132),
                o(1996064986, 2198950837),
                o(2554220882, 3999719339),
                o(2821834349, 766784016),
                o(2952996808, 2566594879),
                o(3210313671, 3203337956),
                o(3336571891, 1034457026),
                o(3584528711, 2466948901),
                o(113926993, 3758326383),
                o(338241895, 168717936),
                o(666307205, 1188179964),
                o(773529912, 1546045734),
                o(1294757372, 1522805485),
                o(1396182291, 2643833823),
                o(1695183700, 2343527390),
                o(1986661051, 1014477480),
                o(2177026350, 1206759142),
                o(2456956037, 344077627),
                o(2730485921, 1290863460),
                o(2820302411, 3158454273),
                o(3259730800, 3505952657),
                o(3345764771, 106217008),
                o(3516065817, 3606008344),
                o(3600352804, 1432725776),
                o(4094571909, 1467031594),
                o(275423344, 851169720),
                o(430227734, 3100823752),
                o(506948616, 1363258195),
                o(659060556, 3750685593),
                o(883997877, 3785050280),
                o(958139571, 3318307427),
                o(1322822218, 3812723403),
                o(1537002063, 2003034995),
                o(1747873779, 3602036899),
                o(1955562222, 1575990012),
                o(2024104815, 1125592928),
                o(2227730452, 2716904306),
                o(2361852424, 442776044),
                o(2428436474, 593698344),
                o(2756734187, 3733110249),
                o(3204031479, 2999351573),
                o(3329325298, 3815920427),
                o(3391569614, 3928383900),
                o(3515267271, 566280711),
                o(3940187606, 3454069534),
                o(4118630271, 4000239992),
                o(116418474, 1914138554),
                o(174292421, 2731055270),
                o(289380356, 3203993006),
                o(460393269, 320620315),
                o(685471733, 587496836),
                o(852142971, 1086792851),
                o(1017036298, 365543100),
                o(1126000580, 2618297676),
                o(1288033470, 3409855158),
                o(1501505948, 4234509866),
                o(1607167915, 987167468),
                o(1816402316, 1246189591)
              ], d = [];
              !function() {
                for (var e4 = 0; e4 < 80; e4++)
                  d[e4] = o();
              }();
              var p = s.SHA512 = t3.extend({
                _doReset: function() {
                  this._hash = new i.init([
                    new a.init(1779033703, 4089235720),
                    new a.init(3144134277, 2227873595),
                    new a.init(1013904242, 4271175723),
                    new a.init(2773480762, 1595750129),
                    new a.init(1359893119, 2917565137),
                    new a.init(2600822924, 725511199),
                    new a.init(528734635, 4215389547),
                    new a.init(1541459225, 327033209)
                  ]);
                },
                _doProcessBlock: function(e4, t4) {
                  for (var r4 = this._hash.words, n2 = r4[0], a2 = r4[1], i2 = r4[2], s2 = r4[3], o2 = r4[4], p2 = r4[5], l = r4[6], u = r4[7], h = n2.high, m = n2.low, f = a2.high, _ = a2.low, g = i2.high, v = i2.low, y = s2.high, b = s2.low, S = o2.high, w = o2.low, T = p2.high, E = p2.low, R = l.high, P = l.low, C = u.high, k = u.low, O = h, x = m, D = f, I = _, L = g, M = v, A = y, N = b, j = S, F = w, B = T, U = E, Z = R, H = P, z = C, V = k, W = 0; W < 80; W++) {
                    var G, q, K = d[W];
                    if (W < 16)
                      q = K.high = 0 | e4[t4 + 2 * W], G = K.low = 0 | e4[t4 + 2 * W + 1];
                    else {
                      var $ = d[W - 15], X = $.high, J = $.low, Q = (X >>> 1 | J << 31) ^ (X >>> 8 | J << 24) ^ X >>> 7, Y = (J >>> 1 | X << 31) ^ (J >>> 8 | X << 24) ^ (J >>> 7 | X << 25), ee = d[W - 2], te = ee.high, re = ee.low, ne = (te >>> 19 | re << 13) ^ (te << 3 | re >>> 29) ^ te >>> 6, ae = (re >>> 19 | te << 13) ^ (re << 3 | te >>> 29) ^ (re >>> 6 | te << 26), ie = d[W - 7], se = ie.high, oe = ie.low, ce = d[W - 16], de = ce.high, pe = ce.low;
                      q = (q = (q = Q + se + ((G = Y + oe) >>> 0 < Y >>> 0 ? 1 : 0)) + ne + ((G += ae) >>> 0 < ae >>> 0 ? 1 : 0)) + de + ((G += pe) >>> 0 < pe >>> 0 ? 1 : 0), K.high = q, K.low = G;
                    }
                    var le, ue = j & B ^ ~j & Z, he = F & U ^ ~F & H, me = O & D ^ O & L ^ D & L, fe = x & I ^ x & M ^ I & M, _e = (O >>> 28 | x << 4) ^ (O << 30 | x >>> 2) ^ (O << 25 | x >>> 7), ge = (x >>> 28 | O << 4) ^ (x << 30 | O >>> 2) ^ (x << 25 | O >>> 7), ve = (j >>> 14 | F << 18) ^ (j >>> 18 | F << 14) ^ (j << 23 | F >>> 9), ye = (F >>> 14 | j << 18) ^ (F >>> 18 | j << 14) ^ (F << 23 | j >>> 9), be = c[W], Se = be.high, we = be.low, Te = z + ve + ((le = V + ye) >>> 0 < V >>> 0 ? 1 : 0), Ee = ge + fe;
                    z = Z, V = H, Z = B, H = U, B = j, U = F, j = A + (Te = (Te = (Te = Te + ue + ((le += he) >>> 0 < he >>> 0 ? 1 : 0)) + Se + ((le += we) >>> 0 < we >>> 0 ? 1 : 0)) + q + ((le += G) >>> 0 < G >>> 0 ? 1 : 0)) + ((F = N + le | 0) >>> 0 < N >>> 0 ? 1 : 0) | 0, A = L, N = M, L = D, M = I, D = O, I = x, O = Te + (_e + me + (Ee >>> 0 < ge >>> 0 ? 1 : 0)) + ((x = le + Ee | 0) >>> 0 < le >>> 0 ? 1 : 0) | 0;
                  }
                  m = n2.low = m + x, n2.high = h + O + (m >>> 0 < x >>> 0 ? 1 : 0), _ = a2.low = _ + I, a2.high = f + D + (_ >>> 0 < I >>> 0 ? 1 : 0), v = i2.low = v + M, i2.high = g + L + (v >>> 0 < M >>> 0 ? 1 : 0), b = s2.low = b + N, s2.high = y + A + (b >>> 0 < N >>> 0 ? 1 : 0), w = o2.low = w + F, o2.high = S + j + (w >>> 0 < F >>> 0 ? 1 : 0), E = p2.low = E + U, p2.high = T + B + (E >>> 0 < U >>> 0 ? 1 : 0), P = l.low = P + H, l.high = R + Z + (P >>> 0 < H >>> 0 ? 1 : 0), k = u.low = k + V, u.high = C + z + (k >>> 0 < V >>> 0 ? 1 : 0);
                },
                _doFinalize: function() {
                  var e4 = this._data, t4 = e4.words, r4 = 8 * this._nDataBytes, n2 = 8 * e4.sigBytes;
                  return t4[n2 >>> 5] |= 128 << 24 - n2 % 32, t4[30 + (n2 + 128 >>> 10 << 5)] = Math.floor(
                    r4 / 4294967296
                  ), t4[31 + (n2 + 128 >>> 10 << 5)] = r4, e4.sigBytes = 4 * t4.length, this._process(), this._hash.toX32();
                },
                clone: function() {
                  var e4 = t3.clone.call(this);
                  return e4._hash = this._hash.clone(), e4;
                },
                blockSize: 32
              });
              e3.SHA512 = t3._createHelper(p), e3.HmacSHA512 = t3._createHmacHelper(p);
            }(), n.SHA512);
          },
          4253: function(e2, t2, r2) {
            var n;
            e2.exports = (n = r2(8249), r2(8269), r2(8214), r2(888), r2(5109), function() {
              var e3 = n, t3 = e3.lib, r3 = t3.WordArray, a = t3.BlockCipher, i = e3.algo, s = [
                57,
                49,
                41,
                33,
                25,
                17,
                9,
                1,
                58,
                50,
                42,
                34,
                26,
                18,
                10,
                2,
                59,
                51,
                43,
                35,
                27,
                19,
                11,
                3,
                60,
                52,
                44,
                36,
                63,
                55,
                47,
                39,
                31,
                23,
                15,
                7,
                62,
                54,
                46,
                38,
                30,
                22,
                14,
                6,
                61,
                53,
                45,
                37,
                29,
                21,
                13,
                5,
                28,
                20,
                12,
                4
              ], o = [
                14,
                17,
                11,
                24,
                1,
                5,
                3,
                28,
                15,
                6,
                21,
                10,
                23,
                19,
                12,
                4,
                26,
                8,
                16,
                7,
                27,
                20,
                13,
                2,
                41,
                52,
                31,
                37,
                47,
                55,
                30,
                40,
                51,
                45,
                33,
                48,
                44,
                49,
                39,
                56,
                34,
                53,
                46,
                42,
                50,
                36,
                29,
                32
              ], c = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28], d = [
                {
                  0: 8421888,
                  268435456: 32768,
                  536870912: 8421378,
                  805306368: 2,
                  1073741824: 512,
                  1342177280: 8421890,
                  1610612736: 8389122,
                  1879048192: 8388608,
                  2147483648: 514,
                  2415919104: 8389120,
                  2684354560: 33280,
                  2952790016: 8421376,
                  3221225472: 32770,
                  3489660928: 8388610,
                  3758096384: 0,
                  4026531840: 33282,
                  134217728: 0,
                  402653184: 8421890,
                  671088640: 33282,
                  939524096: 32768,
                  1207959552: 8421888,
                  1476395008: 512,
                  1744830464: 8421378,
                  2013265920: 2,
                  2281701376: 8389120,
                  2550136832: 33280,
                  2818572288: 8421376,
                  3087007744: 8389122,
                  3355443200: 8388610,
                  3623878656: 32770,
                  3892314112: 514,
                  4160749568: 8388608,
                  1: 32768,
                  268435457: 2,
                  536870913: 8421888,
                  805306369: 8388608,
                  1073741825: 8421378,
                  1342177281: 33280,
                  1610612737: 512,
                  1879048193: 8389122,
                  2147483649: 8421890,
                  2415919105: 8421376,
                  2684354561: 8388610,
                  2952790017: 33282,
                  3221225473: 514,
                  3489660929: 8389120,
                  3758096385: 32770,
                  4026531841: 0,
                  134217729: 8421890,
                  402653185: 8421376,
                  671088641: 8388608,
                  939524097: 512,
                  1207959553: 32768,
                  1476395009: 8388610,
                  1744830465: 2,
                  2013265921: 33282,
                  2281701377: 32770,
                  2550136833: 8389122,
                  2818572289: 514,
                  3087007745: 8421888,
                  3355443201: 8389120,
                  3623878657: 0,
                  3892314113: 33280,
                  4160749569: 8421378
                },
                {
                  0: 1074282512,
                  16777216: 16384,
                  33554432: 524288,
                  50331648: 1074266128,
                  67108864: 1073741840,
                  83886080: 1074282496,
                  100663296: 1073758208,
                  117440512: 16,
                  134217728: 540672,
                  150994944: 1073758224,
                  167772160: 1073741824,
                  184549376: 540688,
                  201326592: 524304,
                  218103808: 0,
                  234881024: 16400,
                  251658240: 1074266112,
                  8388608: 1073758208,
                  25165824: 540688,
                  41943040: 16,
                  58720256: 1073758224,
                  75497472: 1074282512,
                  92274688: 1073741824,
                  109051904: 524288,
                  125829120: 1074266128,
                  142606336: 524304,
                  159383552: 0,
                  176160768: 16384,
                  192937984: 1074266112,
                  209715200: 1073741840,
                  226492416: 540672,
                  243269632: 1074282496,
                  260046848: 16400,
                  268435456: 0,
                  285212672: 1074266128,
                  301989888: 1073758224,
                  318767104: 1074282496,
                  335544320: 1074266112,
                  352321536: 16,
                  369098752: 540688,
                  385875968: 16384,
                  402653184: 16400,
                  419430400: 524288,
                  436207616: 524304,
                  452984832: 1073741840,
                  469762048: 540672,
                  486539264: 1073758208,
                  503316480: 1073741824,
                  520093696: 1074282512,
                  276824064: 540688,
                  293601280: 524288,
                  310378496: 1074266112,
                  327155712: 16384,
                  343932928: 1073758208,
                  360710144: 1074282512,
                  377487360: 16,
                  394264576: 1073741824,
                  411041792: 1074282496,
                  427819008: 1073741840,
                  444596224: 1073758224,
                  461373440: 524304,
                  478150656: 0,
                  494927872: 16400,
                  511705088: 1074266128,
                  528482304: 540672
                },
                {
                  0: 260,
                  1048576: 0,
                  2097152: 67109120,
                  3145728: 65796,
                  4194304: 65540,
                  5242880: 67108868,
                  6291456: 67174660,
                  7340032: 67174400,
                  8388608: 67108864,
                  9437184: 67174656,
                  10485760: 65792,
                  11534336: 67174404,
                  12582912: 67109124,
                  13631488: 65536,
                  14680064: 4,
                  15728640: 256,
                  524288: 67174656,
                  1572864: 67174404,
                  2621440: 0,
                  3670016: 67109120,
                  4718592: 67108868,
                  5767168: 65536,
                  6815744: 65540,
                  7864320: 260,
                  8912896: 4,
                  9961472: 256,
                  11010048: 67174400,
                  12058624: 65796,
                  13107200: 65792,
                  14155776: 67109124,
                  15204352: 67174660,
                  16252928: 67108864,
                  16777216: 67174656,
                  17825792: 65540,
                  18874368: 65536,
                  19922944: 67109120,
                  20971520: 256,
                  22020096: 67174660,
                  23068672: 67108868,
                  24117248: 0,
                  25165824: 67109124,
                  26214400: 67108864,
                  27262976: 4,
                  28311552: 65792,
                  29360128: 67174400,
                  30408704: 260,
                  31457280: 65796,
                  32505856: 67174404,
                  17301504: 67108864,
                  18350080: 260,
                  19398656: 67174656,
                  20447232: 0,
                  21495808: 65540,
                  22544384: 67109120,
                  23592960: 256,
                  24641536: 67174404,
                  25690112: 65536,
                  26738688: 67174660,
                  27787264: 65796,
                  28835840: 67108868,
                  29884416: 67109124,
                  30932992: 67174400,
                  31981568: 4,
                  33030144: 65792
                },
                {
                  0: 2151682048,
                  65536: 2147487808,
                  131072: 4198464,
                  196608: 2151677952,
                  262144: 0,
                  327680: 4198400,
                  393216: 2147483712,
                  458752: 4194368,
                  524288: 2147483648,
                  589824: 4194304,
                  655360: 64,
                  720896: 2147487744,
                  786432: 2151678016,
                  851968: 4160,
                  917504: 4096,
                  983040: 2151682112,
                  32768: 2147487808,
                  98304: 64,
                  163840: 2151678016,
                  229376: 2147487744,
                  294912: 4198400,
                  360448: 2151682112,
                  425984: 0,
                  491520: 2151677952,
                  557056: 4096,
                  622592: 2151682048,
                  688128: 4194304,
                  753664: 4160,
                  819200: 2147483648,
                  884736: 4194368,
                  950272: 4198464,
                  1015808: 2147483712,
                  1048576: 4194368,
                  1114112: 4198400,
                  1179648: 2147483712,
                  1245184: 0,
                  1310720: 4160,
                  1376256: 2151678016,
                  1441792: 2151682048,
                  1507328: 2147487808,
                  1572864: 2151682112,
                  1638400: 2147483648,
                  1703936: 2151677952,
                  1769472: 4198464,
                  1835008: 2147487744,
                  1900544: 4194304,
                  1966080: 64,
                  2031616: 4096,
                  1081344: 2151677952,
                  1146880: 2151682112,
                  1212416: 0,
                  1277952: 4198400,
                  1343488: 4194368,
                  1409024: 2147483648,
                  1474560: 2147487808,
                  1540096: 64,
                  1605632: 2147483712,
                  1671168: 4096,
                  1736704: 2147487744,
                  1802240: 2151678016,
                  1867776: 4160,
                  1933312: 2151682048,
                  1998848: 4194304,
                  2064384: 4198464
                },
                {
                  0: 128,
                  4096: 17039360,
                  8192: 262144,
                  12288: 536870912,
                  16384: 537133184,
                  20480: 16777344,
                  24576: 553648256,
                  28672: 262272,
                  32768: 16777216,
                  36864: 537133056,
                  40960: 536871040,
                  45056: 553910400,
                  49152: 553910272,
                  53248: 0,
                  57344: 17039488,
                  61440: 553648128,
                  2048: 17039488,
                  6144: 553648256,
                  10240: 128,
                  14336: 17039360,
                  18432: 262144,
                  22528: 537133184,
                  26624: 553910272,
                  30720: 536870912,
                  34816: 537133056,
                  38912: 0,
                  43008: 553910400,
                  47104: 16777344,
                  51200: 536871040,
                  55296: 553648128,
                  59392: 16777216,
                  63488: 262272,
                  65536: 262144,
                  69632: 128,
                  73728: 536870912,
                  77824: 553648256,
                  81920: 16777344,
                  86016: 553910272,
                  90112: 537133184,
                  94208: 16777216,
                  98304: 553910400,
                  102400: 553648128,
                  106496: 17039360,
                  110592: 537133056,
                  114688: 262272,
                  118784: 536871040,
                  122880: 0,
                  126976: 17039488,
                  67584: 553648256,
                  71680: 16777216,
                  75776: 17039360,
                  79872: 537133184,
                  83968: 536870912,
                  88064: 17039488,
                  92160: 128,
                  96256: 553910272,
                  100352: 262272,
                  104448: 553910400,
                  108544: 0,
                  112640: 553648128,
                  116736: 16777344,
                  120832: 262144,
                  124928: 537133056,
                  129024: 536871040
                },
                {
                  0: 268435464,
                  256: 8192,
                  512: 270532608,
                  768: 270540808,
                  1024: 268443648,
                  1280: 2097152,
                  1536: 2097160,
                  1792: 268435456,
                  2048: 0,
                  2304: 268443656,
                  2560: 2105344,
                  2816: 8,
                  3072: 270532616,
                  3328: 2105352,
                  3584: 8200,
                  3840: 270540800,
                  128: 270532608,
                  384: 270540808,
                  640: 8,
                  896: 2097152,
                  1152: 2105352,
                  1408: 268435464,
                  1664: 268443648,
                  1920: 8200,
                  2176: 2097160,
                  2432: 8192,
                  2688: 268443656,
                  2944: 270532616,
                  3200: 0,
                  3456: 270540800,
                  3712: 2105344,
                  3968: 268435456,
                  4096: 268443648,
                  4352: 270532616,
                  4608: 270540808,
                  4864: 8200,
                  5120: 2097152,
                  5376: 268435456,
                  5632: 268435464,
                  5888: 2105344,
                  6144: 2105352,
                  6400: 0,
                  6656: 8,
                  6912: 270532608,
                  7168: 8192,
                  7424: 268443656,
                  7680: 270540800,
                  7936: 2097160,
                  4224: 8,
                  4480: 2105344,
                  4736: 2097152,
                  4992: 268435464,
                  5248: 268443648,
                  5504: 8200,
                  5760: 270540808,
                  6016: 270532608,
                  6272: 270540800,
                  6528: 270532616,
                  6784: 8192,
                  7040: 2105352,
                  7296: 2097160,
                  7552: 0,
                  7808: 268435456,
                  8064: 268443656
                },
                {
                  0: 1048576,
                  16: 33555457,
                  32: 1024,
                  48: 1049601,
                  64: 34604033,
                  80: 0,
                  96: 1,
                  112: 34603009,
                  128: 33555456,
                  144: 1048577,
                  160: 33554433,
                  176: 34604032,
                  192: 34603008,
                  208: 1025,
                  224: 1049600,
                  240: 33554432,
                  8: 34603009,
                  24: 0,
                  40: 33555457,
                  56: 34604032,
                  72: 1048576,
                  88: 33554433,
                  104: 33554432,
                  120: 1025,
                  136: 1049601,
                  152: 33555456,
                  168: 34603008,
                  184: 1048577,
                  200: 1024,
                  216: 34604033,
                  232: 1,
                  248: 1049600,
                  256: 33554432,
                  272: 1048576,
                  288: 33555457,
                  304: 34603009,
                  320: 1048577,
                  336: 33555456,
                  352: 34604032,
                  368: 1049601,
                  384: 1025,
                  400: 34604033,
                  416: 1049600,
                  432: 1,
                  448: 0,
                  464: 34603008,
                  480: 33554433,
                  496: 1024,
                  264: 1049600,
                  280: 33555457,
                  296: 34603009,
                  312: 1,
                  328: 33554432,
                  344: 1048576,
                  360: 1025,
                  376: 34604032,
                  392: 33554433,
                  408: 34603008,
                  424: 0,
                  440: 34604033,
                  456: 1049601,
                  472: 1024,
                  488: 33555456,
                  504: 1048577
                },
                {
                  0: 134219808,
                  1: 131072,
                  2: 134217728,
                  3: 32,
                  4: 131104,
                  5: 134350880,
                  6: 134350848,
                  7: 2048,
                  8: 134348800,
                  9: 134219776,
                  10: 133120,
                  11: 134348832,
                  12: 2080,
                  13: 0,
                  14: 134217760,
                  15: 133152,
                  2147483648: 2048,
                  2147483649: 134350880,
                  2147483650: 134219808,
                  2147483651: 134217728,
                  2147483652: 134348800,
                  2147483653: 133120,
                  2147483654: 133152,
                  2147483655: 32,
                  2147483656: 134217760,
                  2147483657: 2080,
                  2147483658: 131104,
                  2147483659: 134350848,
                  2147483660: 0,
                  2147483661: 134348832,
                  2147483662: 134219776,
                  2147483663: 131072,
                  16: 133152,
                  17: 134350848,
                  18: 32,
                  19: 2048,
                  20: 134219776,
                  21: 134217760,
                  22: 134348832,
                  23: 131072,
                  24: 0,
                  25: 131104,
                  26: 134348800,
                  27: 134219808,
                  28: 134350880,
                  29: 133120,
                  30: 2080,
                  31: 134217728,
                  2147483664: 131072,
                  2147483665: 2048,
                  2147483666: 134348832,
                  2147483667: 133152,
                  2147483668: 32,
                  2147483669: 134348800,
                  2147483670: 134217728,
                  2147483671: 134219808,
                  2147483672: 134350880,
                  2147483673: 134217760,
                  2147483674: 134219776,
                  2147483675: 0,
                  2147483676: 133120,
                  2147483677: 2080,
                  2147483678: 131104,
                  2147483679: 134350848
                }
              ], p = [
                4160749569,
                528482304,
                33030144,
                2064384,
                129024,
                8064,
                504,
                2147483679
              ], l = i.DES = a.extend({
                _doReset: function() {
                  for (var e4 = this._key.words, t4 = [], r4 = 0; r4 < 56; r4++) {
                    var n2 = s[r4] - 1;
                    t4[r4] = e4[n2 >>> 5] >>> 31 - n2 % 32 & 1;
                  }
                  for (var a2 = this._subKeys = [], i2 = 0; i2 < 16; i2++) {
                    var d2 = a2[i2] = [], p2 = c[i2];
                    for (r4 = 0; r4 < 24; r4++)
                      d2[r4 / 6 | 0] |= t4[(o[r4] - 1 + p2) % 28] << 31 - r4 % 6, d2[4 + (r4 / 6 | 0)] |= t4[28 + (o[r4 + 24] - 1 + p2) % 28] << 31 - r4 % 6;
                    for (d2[0] = d2[0] << 1 | d2[0] >>> 31, r4 = 1; r4 < 7; r4++)
                      d2[r4] = d2[r4] >>> 4 * (r4 - 1) + 3;
                    d2[7] = d2[7] << 5 | d2[7] >>> 27;
                  }
                  var l2 = this._invSubKeys = [];
                  for (r4 = 0; r4 < 16; r4++)
                    l2[r4] = a2[15 - r4];
                },
                encryptBlock: function(e4, t4) {
                  this._doCryptBlock(e4, t4, this._subKeys);
                },
                decryptBlock: function(e4, t4) {
                  this._doCryptBlock(e4, t4, this._invSubKeys);
                },
                _doCryptBlock: function(e4, t4, r4) {
                  this._lBlock = e4[t4], this._rBlock = e4[t4 + 1], u.call(this, 4, 252645135), u.call(this, 16, 65535), h.call(this, 2, 858993459), h.call(this, 8, 16711935), u.call(this, 1, 1431655765);
                  for (var n2 = 0; n2 < 16; n2++) {
                    for (var a2 = r4[n2], i2 = this._lBlock, s2 = this._rBlock, o2 = 0, c2 = 0; c2 < 8; c2++)
                      o2 |= d[c2][((s2 ^ a2[c2]) & p[c2]) >>> 0];
                    this._lBlock = s2, this._rBlock = i2 ^ o2;
                  }
                  var l2 = this._lBlock;
                  this._lBlock = this._rBlock, this._rBlock = l2, u.call(this, 1, 1431655765), h.call(this, 8, 16711935), h.call(this, 2, 858993459), u.call(this, 16, 65535), u.call(this, 4, 252645135), e4[t4] = this._lBlock, e4[t4 + 1] = this._rBlock;
                },
                keySize: 2,
                ivSize: 2,
                blockSize: 2
              });
              function u(e4, t4) {
                var r4 = (this._lBlock >>> e4 ^ this._rBlock) & t4;
                this._rBlock ^= r4, this._lBlock ^= r4 << e4;
              }
              function h(e4, t4) {
                var r4 = (this._rBlock >>> e4 ^ this._lBlock) & t4;
                this._lBlock ^= r4, this._rBlock ^= r4 << e4;
              }
              e3.DES = a._createHelper(l);
              var m = i.TripleDES = a.extend({
                _doReset: function() {
                  var e4 = this._key.words;
                  if (2 !== e4.length && 4 !== e4.length && e4.length < 6)
                    throw new Error(
                      "Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192."
                    );
                  var t4 = e4.slice(0, 2), n2 = e4.length < 4 ? e4.slice(0, 2) : e4.slice(2, 4), a2 = e4.length < 6 ? e4.slice(0, 2) : e4.slice(4, 6);
                  this._des1 = l.createEncryptor(r3.create(t4)), this._des2 = l.createEncryptor(r3.create(n2)), this._des3 = l.createEncryptor(r3.create(a2));
                },
                encryptBlock: function(e4, t4) {
                  this._des1.encryptBlock(e4, t4), this._des2.decryptBlock(e4, t4), this._des3.encryptBlock(e4, t4);
                },
                decryptBlock: function(e4, t4) {
                  this._des3.decryptBlock(e4, t4), this._des2.encryptBlock(e4, t4), this._des1.decryptBlock(e4, t4);
                },
                keySize: 6,
                ivSize: 2,
                blockSize: 2
              });
              e3.TripleDES = a._createHelper(m);
            }(), n.TripleDES);
          },
          4938: function(e2, t2, r2) {
            var n;
            e2.exports = (n = r2(8249), function(e3) {
              var t3 = n, r3 = t3.lib, a = r3.Base, i = r3.WordArray, s = t3.x64 = {};
              s.Word = a.extend({
                init: function(e4, t4) {
                  this.high = e4, this.low = t4;
                }
              }), s.WordArray = a.extend({
                init: function(t4, r4) {
                  t4 = this.words = t4 || [], this.sigBytes = r4 != e3 ? r4 : 8 * t4.length;
                },
                toX32: function() {
                  for (var e4 = this.words, t4 = e4.length, r4 = [], n2 = 0; n2 < t4; n2++) {
                    var a2 = e4[n2];
                    r4.push(a2.high), r4.push(a2.low);
                  }
                  return i.create(r4, this.sigBytes);
                },
                clone: function() {
                  for (var e4 = a.clone.call(this), t4 = e4.words = this.words.slice(0), r4 = t4.length, n2 = 0; n2 < r4; n2++)
                    t4[n2] = t4[n2].clone();
                  return e4;
                }
              });
            }(), n);
          },
          1227: (e2, t2, r2) => {
            t2.formatArgs = function(t3) {
              if (t3[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + t3[0] + (this.useColors ? "%c " : " ") + "+" + e2.exports.humanize(this.diff), !this.useColors)
                return;
              const r3 = "color: " + this.color;
              t3.splice(1, 0, r3, "color: inherit");
              let n2 = 0, a = 0;
              t3[0].replace(/%[a-zA-Z%]/g, (e3) => {
                "%%" !== e3 && (n2++, "%c" === e3 && (a = n2));
              }), t3.splice(a, 0, r3);
            }, t2.save = function(e3) {
              try {
                e3 ? t2.storage.setItem("debug", e3) : t2.storage.removeItem("debug");
              } catch (e4) {
              }
            }, t2.load = function() {
              let e3;
              try {
                e3 = t2.storage.getItem("debug");
              } catch (e4) {
              }
              !e3 && "undefined" != typeof process && "env" in process && (e3 = process.env.DEBUG);
              return e3;
            }, t2.useColors = function() {
              if ("undefined" != typeof window && window.process && ("renderer" === window.process.type || window.process.__nwjs))
                return true;
              if ("undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))
                return false;
              return "undefined" != typeof document && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || "undefined" != typeof window && window.console && (window.console.firebug || window.console.exception && window.console.table) || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
            }, t2.storage = function() {
              try {
                return localStorage;
              } catch (e3) {
              }
            }(), t2.destroy = (() => {
              let e3 = false;
              return () => {
                e3 || (e3 = true, console.warn(
                  "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."
                ));
              };
            })(), t2.colors = [
              "#0000CC",
              "#0000FF",
              "#0033CC",
              "#0033FF",
              "#0066CC",
              "#0066FF",
              "#0099CC",
              "#0099FF",
              "#00CC00",
              "#00CC33",
              "#00CC66",
              "#00CC99",
              "#00CCCC",
              "#00CCFF",
              "#3300CC",
              "#3300FF",
              "#3333CC",
              "#3333FF",
              "#3366CC",
              "#3366FF",
              "#3399CC",
              "#3399FF",
              "#33CC00",
              "#33CC33",
              "#33CC66",
              "#33CC99",
              "#33CCCC",
              "#33CCFF",
              "#6600CC",
              "#6600FF",
              "#6633CC",
              "#6633FF",
              "#66CC00",
              "#66CC33",
              "#9900CC",
              "#9900FF",
              "#9933CC",
              "#9933FF",
              "#99CC00",
              "#99CC33",
              "#CC0000",
              "#CC0033",
              "#CC0066",
              "#CC0099",
              "#CC00CC",
              "#CC00FF",
              "#CC3300",
              "#CC3333",
              "#CC3366",
              "#CC3399",
              "#CC33CC",
              "#CC33FF",
              "#CC6600",
              "#CC6633",
              "#CC9900",
              "#CC9933",
              "#CCCC00",
              "#CCCC33",
              "#FF0000",
              "#FF0033",
              "#FF0066",
              "#FF0099",
              "#FF00CC",
              "#FF00FF",
              "#FF3300",
              "#FF3333",
              "#FF3366",
              "#FF3399",
              "#FF33CC",
              "#FF33FF",
              "#FF6600",
              "#FF6633",
              "#FF9900",
              "#FF9933",
              "#FFCC00",
              "#FFCC33"
            ], t2.log = console.debug || console.log || (() => {
            }), e2.exports = r2(2447)(t2);
            const { formatters: n } = e2.exports;
            n.j = function(e3) {
              try {
                return JSON.stringify(e3);
              } catch (e4) {
                return "[UnexpectedJSONParseError]: " + e4.message;
              }
            };
          },
          2447: (e2, t2, r2) => {
            e2.exports = function(e3) {
              function t3(e4) {
                let r3, a2, i, s = null;
                function o(...e5) {
                  if (!o.enabled)
                    return;
                  const n2 = o, a3 = Number(/* @__PURE__ */ new Date()), i2 = a3 - (r3 || a3);
                  n2.diff = i2, n2.prev = r3, n2.curr = a3, r3 = a3, e5[0] = t3.coerce(e5[0]), "string" != typeof e5[0] && e5.unshift("%O");
                  let s2 = 0;
                  e5[0] = e5[0].replace(/%([a-zA-Z%])/g, (r4, a4) => {
                    if ("%%" === r4)
                      return "%";
                    s2++;
                    const i3 = t3.formatters[a4];
                    if ("function" == typeof i3) {
                      const t4 = e5[s2];
                      r4 = i3.call(n2, t4), e5.splice(s2, 1), s2--;
                    }
                    return r4;
                  }), t3.formatArgs.call(n2, e5);
                  (n2.log || t3.log).apply(n2, e5);
                }
                return o.namespace = e4, o.useColors = t3.useColors(), o.color = t3.selectColor(e4), o.extend = n, o.destroy = t3.destroy, Object.defineProperty(o, "enabled", {
                  enumerable: true,
                  configurable: false,
                  get: () => null !== s ? s : (a2 !== t3.namespaces && (a2 = t3.namespaces, i = t3.enabled(e4)), i),
                  set: (e5) => {
                    s = e5;
                  }
                }), "function" == typeof t3.init && t3.init(o), o;
              }
              function n(e4, r3) {
                const n2 = t3(this.namespace + (void 0 === r3 ? ":" : r3) + e4);
                return n2.log = this.log, n2;
              }
              function a(e4) {
                return e4.toString().substring(2, e4.toString().length - 2).replace(/\.\*\?$/, "*");
              }
              return t3.debug = t3, t3.default = t3, t3.coerce = function(e4) {
                if (e4 instanceof Error)
                  return e4.stack || e4.message;
                return e4;
              }, t3.disable = function() {
                const e4 = [
                  ...t3.names.map(a),
                  ...t3.skips.map(a).map((e5) => "-" + e5)
                ].join(",");
                return t3.enable(""), e4;
              }, t3.enable = function(e4) {
                let r3;
                t3.save(e4), t3.namespaces = e4, t3.names = [], t3.skips = [];
                const n2 = ("string" == typeof e4 ? e4 : "").split(/[\s,]+/), a2 = n2.length;
                for (r3 = 0; r3 < a2; r3++)
                  n2[r3] && ("-" === (e4 = n2[r3].replace(/\*/g, ".*?"))[0] ? t3.skips.push(new RegExp("^" + e4.substr(1) + "$")) : t3.names.push(new RegExp("^" + e4 + "$")));
              }, t3.enabled = function(e4) {
                if ("*" === e4[e4.length - 1])
                  return true;
                let r3, n2;
                for (r3 = 0, n2 = t3.skips.length; r3 < n2; r3++)
                  if (t3.skips[r3].test(e4))
                    return false;
                for (r3 = 0, n2 = t3.names.length; r3 < n2; r3++)
                  if (t3.names[r3].test(e4))
                    return true;
                return false;
              }, t3.humanize = r2(7824), t3.destroy = function() {
                console.warn(
                  "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."
                );
              }, Object.keys(e3).forEach((r3) => {
                t3[r3] = e3[r3];
              }), t3.names = [], t3.skips = [], t3.formatters = {}, t3.selectColor = function(e4) {
                let r3 = 0;
                for (let t4 = 0; t4 < e4.length; t4++)
                  r3 = (r3 << 5) - r3 + e4.charCodeAt(t4), r3 |= 0;
                return t3.colors[Math.abs(r3) % t3.colors.length];
              }, t3.enable(t3.load()), t3;
            };
          },
          284: (e2) => {
            var t2 = function() {
              if ("object" == typeof self && self)
                return self;
              if ("object" == typeof window && window)
                return window;
              throw new Error("Unable to resolve global `this`");
            };
            e2.exports = function() {
              if (this)
                return this;
              if ("object" == typeof globalThis && globalThis)
                return globalThis;
              try {
                Object.defineProperty(Object.prototype, "__global__", {
                  get: function() {
                    return this;
                  },
                  configurable: true
                });
              } catch (e3) {
                return t2();
              }
              try {
                return __global__ || t2();
              } finally {
                delete Object.prototype.__global__;
              }
            }();
          },
          7187: (e2) => {
            "use strict";
            var t2, r2 = "object" == typeof Reflect ? Reflect : null, n = r2 && "function" == typeof r2.apply ? r2.apply : function(e3, t3, r3) {
              return Function.prototype.apply.call(e3, t3, r3);
            };
            t2 = r2 && "function" == typeof r2.ownKeys ? r2.ownKeys : Object.getOwnPropertySymbols ? function(e3) {
              return Object.getOwnPropertyNames(e3).concat(
                Object.getOwnPropertySymbols(e3)
              );
            } : function(e3) {
              return Object.getOwnPropertyNames(e3);
            };
            var a = Number.isNaN || function(e3) {
              return e3 != e3;
            };
            function i() {
              i.init.call(this);
            }
            e2.exports = i, e2.exports.once = function(e3, t3) {
              return new Promise(function(r3, n2) {
                function a2(r4) {
                  e3.removeListener(t3, i2), n2(r4);
                }
                function i2() {
                  "function" == typeof e3.removeListener && e3.removeListener("error", a2), r3([].slice.call(arguments));
                }
                f(e3, t3, i2, { once: true }), "error" !== t3 && function(e4, t4, r4) {
                  "function" == typeof e4.on && f(e4, "error", t4, r4);
                }(e3, a2, { once: true });
              });
            }, i.EventEmitter = i, i.prototype._events = void 0, i.prototype._eventsCount = 0, i.prototype._maxListeners = void 0;
            var s = 10;
            function o(e3) {
              if ("function" != typeof e3)
                throw new TypeError(
                  'The "listener" argument must be of type Function. Received type ' + typeof e3
                );
            }
            function c(e3) {
              return void 0 === e3._maxListeners ? i.defaultMaxListeners : e3._maxListeners;
            }
            function d(e3, t3, r3, n2) {
              var a2, i2, s2, d2;
              if (o(r3), void 0 === (i2 = e3._events) ? (i2 = e3._events = /* @__PURE__ */ Object.create(null), e3._eventsCount = 0) : (void 0 !== i2.newListener && (e3.emit("newListener", t3, r3.listener ? r3.listener : r3), i2 = e3._events), s2 = i2[t3]), void 0 === s2)
                s2 = i2[t3] = r3, ++e3._eventsCount;
              else if ("function" == typeof s2 ? s2 = i2[t3] = n2 ? [r3, s2] : [s2, r3] : n2 ? s2.unshift(r3) : s2.push(r3), (a2 = c(e3)) > 0 && s2.length > a2 && !s2.warned) {
                s2.warned = true;
                var p2 = new Error(
                  "Possible EventEmitter memory leak detected. " + s2.length + " " + String(t3) + " listeners added. Use emitter.setMaxListeners() to increase limit"
                );
                p2.name = "MaxListenersExceededWarning", p2.emitter = e3, p2.type = t3, p2.count = s2.length, d2 = p2, console && console.warn && console.warn(d2);
              }
              return e3;
            }
            function p() {
              if (!this.fired)
                return this.target.removeListener(this.type, this.wrapFn), this.fired = true, 0 === arguments.length ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
            }
            function l(e3, t3, r3) {
              var n2 = {
                fired: false,
                wrapFn: void 0,
                target: e3,
                type: t3,
                listener: r3
              }, a2 = p.bind(n2);
              return a2.listener = r3, n2.wrapFn = a2, a2;
            }
            function u(e3, t3, r3) {
              var n2 = e3._events;
              if (void 0 === n2)
                return [];
              var a2 = n2[t3];
              return void 0 === a2 ? [] : "function" == typeof a2 ? r3 ? [a2.listener || a2] : [a2] : r3 ? function(e4) {
                for (var t4 = new Array(e4.length), r4 = 0; r4 < t4.length; ++r4)
                  t4[r4] = e4[r4].listener || e4[r4];
                return t4;
              }(a2) : m(a2, a2.length);
            }
            function h(e3) {
              var t3 = this._events;
              if (void 0 !== t3) {
                var r3 = t3[e3];
                if ("function" == typeof r3)
                  return 1;
                if (void 0 !== r3)
                  return r3.length;
              }
              return 0;
            }
            function m(e3, t3) {
              for (var r3 = new Array(t3), n2 = 0; n2 < t3; ++n2)
                r3[n2] = e3[n2];
              return r3;
            }
            function f(e3, t3, r3, n2) {
              if ("function" == typeof e3.on)
                n2.once ? e3.once(t3, r3) : e3.on(t3, r3);
              else {
                if ("function" != typeof e3.addEventListener)
                  throw new TypeError(
                    'The "emitter" argument must be of type EventEmitter. Received type ' + typeof e3
                  );
                e3.addEventListener(t3, function a2(i2) {
                  n2.once && e3.removeEventListener(t3, a2), r3(i2);
                });
              }
            }
            Object.defineProperty(i, "defaultMaxListeners", {
              enumerable: true,
              get: function() {
                return s;
              },
              set: function(e3) {
                if ("number" != typeof e3 || e3 < 0 || a(e3))
                  throw new RangeError(
                    'The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + e3 + "."
                  );
                s = e3;
              }
            }), i.init = function() {
              void 0 !== this._events && this._events !== Object.getPrototypeOf(this)._events || (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
            }, i.prototype.setMaxListeners = function(e3) {
              if ("number" != typeof e3 || e3 < 0 || a(e3))
                throw new RangeError(
                  'The value of "n" is out of range. It must be a non-negative number. Received ' + e3 + "."
                );
              return this._maxListeners = e3, this;
            }, i.prototype.getMaxListeners = function() {
              return c(this);
            }, i.prototype.emit = function(e3) {
              for (var t3 = [], r3 = 1; r3 < arguments.length; r3++)
                t3.push(arguments[r3]);
              var a2 = "error" === e3, i2 = this._events;
              if (void 0 !== i2)
                a2 = a2 && void 0 === i2.error;
              else if (!a2)
                return false;
              if (a2) {
                var s2;
                if (t3.length > 0 && (s2 = t3[0]), s2 instanceof Error)
                  throw s2;
                var o2 = new Error(
                  "Unhandled error." + (s2 ? " (" + s2.message + ")" : "")
                );
                throw o2.context = s2, o2;
              }
              var c2 = i2[e3];
              if (void 0 === c2)
                return false;
              if ("function" == typeof c2)
                n(c2, this, t3);
              else {
                var d2 = c2.length, p2 = m(c2, d2);
                for (r3 = 0; r3 < d2; ++r3)
                  n(p2[r3], this, t3);
              }
              return true;
            }, i.prototype.addListener = function(e3, t3) {
              return d(this, e3, t3, false);
            }, i.prototype.on = i.prototype.addListener, i.prototype.prependListener = function(e3, t3) {
              return d(this, e3, t3, true);
            }, i.prototype.once = function(e3, t3) {
              return o(t3), this.on(e3, l(this, e3, t3)), this;
            }, i.prototype.prependOnceListener = function(e3, t3) {
              return o(t3), this.prependListener(e3, l(this, e3, t3)), this;
            }, i.prototype.removeListener = function(e3, t3) {
              var r3, n2, a2, i2, s2;
              if (o(t3), void 0 === (n2 = this._events))
                return this;
              if (void 0 === (r3 = n2[e3]))
                return this;
              if (r3 === t3 || r3.listener === t3)
                0 == --this._eventsCount ? this._events = /* @__PURE__ */ Object.create(null) : (delete n2[e3], n2.removeListener && this.emit("removeListener", e3, r3.listener || t3));
              else if ("function" != typeof r3) {
                for (a2 = -1, i2 = r3.length - 1; i2 >= 0; i2--)
                  if (r3[i2] === t3 || r3[i2].listener === t3) {
                    s2 = r3[i2].listener, a2 = i2;
                    break;
                  }
                if (a2 < 0)
                  return this;
                0 === a2 ? r3.shift() : function(e4, t4) {
                  for (; t4 + 1 < e4.length; t4++)
                    e4[t4] = e4[t4 + 1];
                  e4.pop();
                }(r3, a2), 1 === r3.length && (n2[e3] = r3[0]), void 0 !== n2.removeListener && this.emit("removeListener", e3, s2 || t3);
              }
              return this;
            }, i.prototype.off = i.prototype.removeListener, i.prototype.removeAllListeners = function(e3) {
              var t3, r3, n2;
              if (void 0 === (r3 = this._events))
                return this;
              if (void 0 === r3.removeListener)
                return 0 === arguments.length ? (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0) : void 0 !== r3[e3] && (0 == --this._eventsCount ? this._events = /* @__PURE__ */ Object.create(null) : delete r3[e3]), this;
              if (0 === arguments.length) {
                var a2, i2 = Object.keys(r3);
                for (n2 = 0; n2 < i2.length; ++n2)
                  "removeListener" !== (a2 = i2[n2]) && this.removeAllListeners(a2);
                return this.removeAllListeners("removeListener"), this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0, this;
              }
              if ("function" == typeof (t3 = r3[e3]))
                this.removeListener(e3, t3);
              else if (void 0 !== t3)
                for (n2 = t3.length - 1; n2 >= 0; n2--)
                  this.removeListener(e3, t3[n2]);
              return this;
            }, i.prototype.listeners = function(e3) {
              return u(this, e3, true);
            }, i.prototype.rawListeners = function(e3) {
              return u(this, e3, false);
            }, i.listenerCount = function(e3, t3) {
              return "function" == typeof e3.listenerCount ? e3.listenerCount(t3) : h.call(e3, t3);
            }, i.prototype.listenerCount = h, i.prototype.eventNames = function() {
              return this._eventsCount > 0 ? t2(this._events) : [];
            };
          },
          7855: (e2, t2, r2) => {
            const n = r2(1227)("h264-profile-level-id");
            n.log = console.info.bind(console);
            t2.ProfileConstrainedBaseline = 1, t2.ProfileBaseline = 2, t2.ProfileMain = 3, t2.ProfileConstrainedHigh = 4, t2.ProfileHigh = 5;
            const a = 10;
            t2.Level1_b = 0, t2.Level1 = 10, t2.Level1_1 = 11, t2.Level1_2 = 12, t2.Level1_3 = 13, t2.Level2 = 20, t2.Level2_1 = 21, t2.Level2_2 = 22, t2.Level3 = 30, t2.Level3_1 = 31, t2.Level3_2 = 32, t2.Level4 = 40, t2.Level4_1 = 41, t2.Level4_2 = 42, t2.Level5 = 50, t2.Level5_1 = 51, t2.Level5_2 = 52;
            class i {
              constructor(e3, t3) {
                this.profile = e3, this.level = t3;
              }
            }
            t2.ProfileLevelId = i;
            const s = new i(1, 31);
            class o {
              constructor(e3) {
                this._mask = ~p("x", e3), this._maskedValue = p("1", e3);
              }
              isMatch(e3) {
                return this._maskedValue === (e3 & this._mask);
              }
            }
            class c {
              constructor(e3, t3, r3) {
                this.profile_idc = e3, this.profile_iop = t3, this.profile = r3;
              }
            }
            const d = [
              new c(66, new o("x1xx0000"), 1),
              new c(77, new o("1xxx0000"), 1),
              new c(88, new o("11xx0000"), 1),
              new c(66, new o("x0xx0000"), 2),
              new c(88, new o("10xx0000"), 2),
              new c(77, new o("0x0x0000"), 3),
              new c(100, new o("00000000"), 5),
              new c(100, new o("00001100"), 4)
            ];
            function p(e3, t3) {
              return (t3[0] === e3) << 7 | (t3[1] === e3) << 6 | (t3[2] === e3) << 5 | (t3[3] === e3) << 4 | (t3[4] === e3) << 3 | (t3[5] === e3) << 2 | (t3[6] === e3) << 1 | (t3[7] === e3) << 0;
            }
            function l(e3 = {}) {
              const t3 = e3["level-asymmetry-allowed"];
              return 1 === t3 || "1" === t3;
            }
            t2.parseProfileLevelId = function(e3) {
              if ("string" != typeof e3 || 6 !== e3.length)
                return null;
              const t3 = parseInt(e3, 16);
              if (0 === t3)
                return null;
              const r3 = 255 & t3, a2 = t3 >> 8 & 255, s2 = t3 >> 16 & 255;
              let o2;
              switch (r3) {
                case 11:
                  o2 = 0 != (16 & a2) ? 0 : 11;
                  break;
                case 10:
                case 12:
                case 13:
                case 20:
                case 21:
                case 22:
                case 30:
                case 31:
                case 32:
                case 40:
                case 41:
                case 42:
                case 50:
                case 51:
                case 52:
                  o2 = r3;
                  break;
                default:
                  return n("parseProfileLevelId() | unrecognized level_idc:%s", r3), null;
              }
              for (const e4 of d)
                if (s2 === e4.profile_idc && e4.profile_iop.isMatch(a2))
                  return new i(e4.profile, o2);
              return n(
                "parseProfileLevelId() | unrecognized profile_idc/profile_iop combination"
              ), null;
            }, t2.profileLevelIdToString = function(e3) {
              if (0 == e3.level)
                switch (e3.profile) {
                  case 1:
                    return "42f00b";
                  case 2:
                    return "42100b";
                  case 3:
                    return "4d100b";
                  default:
                    return n(
                      "profileLevelIdToString() | Level 1_b not is allowed for profile:%s",
                      e3.profile
                    ), null;
                }
              let t3;
              switch (e3.profile) {
                case 1:
                  t3 = "42e0";
                  break;
                case 2:
                  t3 = "4200";
                  break;
                case 3:
                  t3 = "4d00";
                  break;
                case 4:
                  t3 = "640c";
                  break;
                case 5:
                  t3 = "6400";
                  break;
                default:
                  return n(
                    "profileLevelIdToString() | unrecognized profile:%s",
                    e3.profile
                  ), null;
              }
              let r3 = e3.level.toString(16);
              return 1 === r3.length && (r3 = `0${r3}`), `${t3}${r3}`;
            }, t2.parseSdpProfileLevelId = function(e3 = {}) {
              const r3 = e3["profile-level-id"];
              return r3 ? t2.parseProfileLevelId(r3) : s;
            }, t2.isSameProfile = function(e3 = {}, r3 = {}) {
              const n2 = t2.parseSdpProfileLevelId(e3), a2 = t2.parseSdpProfileLevelId(r3);
              return Boolean(n2 && a2 && n2.profile === a2.profile);
            }, t2.generateProfileLevelIdForAnswer = function(e3 = {}, r3 = {}) {
              if (!e3["profile-level-id"] && !r3["profile-level-id"])
                return n(
                  "generateProfileLevelIdForAnswer() | no profile-level-id in local and remote params"
                ), null;
              const s2 = t2.parseSdpProfileLevelId(e3), o2 = t2.parseSdpProfileLevelId(r3);
              if (!s2)
                throw new TypeError("invalid local_profile_level_id");
              if (!o2)
                throw new TypeError("invalid remote_profile_level_id");
              if (s2.profile !== o2.profile)
                throw new TypeError("H264 Profile mismatch");
              const c2 = l(e3) && l(r3), d2 = s2.level, p2 = o2.level, u = function(e4, t3) {
                return 0 === e4 ? t3 !== a && 0 !== t3 : 0 === t3 ? e4 !== a : e4 < t3;
              }(h = d2, m = p2) ? h : m;
              var h, m;
              const f = c2 ? d2 : u;
              return n(
                "generateProfileLevelIdForAnswer() | result: [profile:%s, level:%s]",
                s2.profile,
                f
              ), t2.profileLevelIdToString(new i(s2.profile, f));
            };
          },
          6808: (e2, t2, r2) => {
            var n, a;
            !function(i) {
              if (void 0 === (a = "function" == typeof (n = i) ? n.call(t2, r2, t2, e2) : n) || (e2.exports = a), true, e2.exports = i(), false) {
                var s = window.Cookies, o = window.Cookies = i();
                o.noConflict = function() {
                  return window.Cookies = s, o;
                };
              }
            }(function() {
              function e3() {
                for (var e4 = 0, t4 = {}; e4 < arguments.length; e4++) {
                  var r3 = arguments[e4];
                  for (var n2 in r3)
                    t4[n2] = r3[n2];
                }
                return t4;
              }
              function t3(e4) {
                return e4.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
              }
              return function r3(n2) {
                function a2() {
                }
                function i(t4, r4, i2) {
                  if ("undefined" != typeof document) {
                    "number" == typeof (i2 = e3({ path: "/" }, a2.defaults, i2)).expires && (i2.expires = new Date(1 * /* @__PURE__ */ new Date() + 864e5 * i2.expires)), i2.expires = i2.expires ? i2.expires.toUTCString() : "";
                    try {
                      var s2 = JSON.stringify(r4);
                      /^[\{\[]/.test(s2) && (r4 = s2);
                    } catch (e4) {
                    }
                    r4 = n2.write ? n2.write(r4, t4) : encodeURIComponent(String(r4)).replace(
                      /%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g,
                      decodeURIComponent
                    ), t4 = encodeURIComponent(String(t4)).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent).replace(/[\(\)]/g, escape);
                    var o = "";
                    for (var c in i2)
                      i2[c] && (o += "; " + c, true !== i2[c] && (o += "=" + i2[c].split(";")[0]));
                    return document.cookie = t4 + "=" + r4 + o;
                  }
                }
                function s(e4, r4) {
                  if ("undefined" != typeof document) {
                    for (var a3 = {}, i2 = document.cookie ? document.cookie.split("; ") : [], s2 = 0; s2 < i2.length; s2++) {
                      var o = i2[s2].split("="), c = o.slice(1).join("=");
                      r4 || '"' !== c.charAt(0) || (c = c.slice(1, -1));
                      try {
                        var d = t3(o[0]);
                        if (c = (n2.read || n2)(c, d) || t3(c), r4)
                          try {
                            c = JSON.parse(c);
                          } catch (e5) {
                          }
                        if (a3[d] = c, e4 === d)
                          break;
                      } catch (e5) {
                      }
                    }
                    return e4 ? a3[e4] : a3;
                  }
                }
                return a2.set = i, a2.get = function(e4) {
                  return s(e4, false);
                }, a2.getJSON = function(e4) {
                  return s(e4, true);
                }, a2.remove = function(t4, r4) {
                  i(t4, "", e3(r4, { expires: -1 }));
                }, a2.defaults = {}, a2.withConverter = r3, a2;
              }(function() {
              });
            });
          },
          9514: (e2, t2, r2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Consumer = void 0;
            const n = r2(8562), a = r2(4493), i = r2(9992), s = new n.Logger("Consumer");
            class o extends a.EnhancedEventEmitter {
              constructor({
                id: e3,
                localId: t3,
                producerId: r3,
                rtpReceiver: n2,
                track: i2,
                rtpParameters: o2,
                appData: c
              }) {
                super(), this._closed = false, this._observer = new a.EnhancedEventEmitter(), s.debug("constructor()"), this._id = e3, this._localId = t3, this._producerId = r3, this._rtpReceiver = n2, this._track = i2, this._rtpParameters = o2, this._paused = !i2.enabled, this._appData = c || {}, this.onTrackEnded = this.onTrackEnded.bind(this), this.handleTrack();
              }
              get id() {
                return this._id;
              }
              get localId() {
                return this._localId;
              }
              get producerId() {
                return this._producerId;
              }
              get closed() {
                return this._closed;
              }
              get kind() {
                return this._track.kind;
              }
              get rtpReceiver() {
                return this._rtpReceiver;
              }
              get track() {
                return this._track;
              }
              get rtpParameters() {
                return this._rtpParameters;
              }
              get paused() {
                return this._paused;
              }
              get appData() {
                return this._appData;
              }
              set appData(e3) {
                this._appData = e3;
              }
              get observer() {
                return this._observer;
              }
              close() {
                this._closed || (s.debug("close()"), this._closed = true, this.destroyTrack(), this.emit("@close"), this._observer.safeEmit("close"));
              }
              transportClosed() {
                this._closed || (s.debug("transportClosed()"), this._closed = true, this.destroyTrack(), this.safeEmit("transportclose"), this._observer.safeEmit("close"));
              }
              async getStats() {
                if (this._closed)
                  throw new i.InvalidStateError("closed");
                return new Promise((e3, t3) => {
                  this.safeEmit("@getstats", e3, t3);
                });
              }
              pause() {
                s.debug("pause()"), this._closed ? s.error("pause() | Consumer closed") : this._paused ? s.debug("pause() | Consumer is already paused") : (this._paused = true, this._track.enabled = false, this.emit("@pause"), this._observer.safeEmit("pause"));
              }
              resume() {
                s.debug("resume()"), this._closed ? s.error("resume() | Consumer closed") : this._paused ? (this._paused = false, this._track.enabled = true, this.emit("@resume"), this._observer.safeEmit("resume")) : s.debug("resume() | Consumer is already resumed");
              }
              onTrackEnded() {
                s.debug('track "ended" event'), this.safeEmit("trackended"), this._observer.safeEmit("trackended");
              }
              handleTrack() {
                this._track.addEventListener("ended", this.onTrackEnded);
              }
              destroyTrack() {
                try {
                  this._track.removeEventListener("ended", this.onTrackEnded), this._track.stop();
                } catch (e3) {
                }
              }
            }
            t2.Consumer = o;
          },
          1623: (e2, t2, r2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.DataConsumer = void 0;
            const n = r2(8562), a = r2(4493), i = new n.Logger("DataConsumer");
            class s extends a.EnhancedEventEmitter {
              constructor({
                id: e3,
                dataProducerId: t3,
                dataChannel: r3,
                sctpStreamParameters: n2,
                appData: s2
              }) {
                super(), this._closed = false, this._observer = new a.EnhancedEventEmitter(), i.debug("constructor()"), this._id = e3, this._dataProducerId = t3, this._dataChannel = r3, this._sctpStreamParameters = n2, this._appData = s2 || {}, this.handleDataChannel();
              }
              get id() {
                return this._id;
              }
              get dataProducerId() {
                return this._dataProducerId;
              }
              get closed() {
                return this._closed;
              }
              get sctpStreamParameters() {
                return this._sctpStreamParameters;
              }
              get readyState() {
                return this._dataChannel.readyState;
              }
              get label() {
                return this._dataChannel.label;
              }
              get protocol() {
                return this._dataChannel.protocol;
              }
              get binaryType() {
                return this._dataChannel.binaryType;
              }
              set binaryType(e3) {
                this._dataChannel.binaryType = e3;
              }
              get appData() {
                return this._appData;
              }
              set appData(e3) {
                this._appData = e3;
              }
              get observer() {
                return this._observer;
              }
              close() {
                this._closed || (i.debug("close()"), this._closed = true, this._dataChannel.close(), this.emit("@close"), this._observer.safeEmit("close"));
              }
              transportClosed() {
                this._closed || (i.debug("transportClosed()"), this._closed = true, this._dataChannel.close(), this.safeEmit("transportclose"), this._observer.safeEmit("close"));
              }
              handleDataChannel() {
                this._dataChannel.addEventListener("open", () => {
                  this._closed || (i.debug('DataChannel "open" event'), this.safeEmit("open"));
                }), this._dataChannel.addEventListener("error", (e3) => {
                  if (this._closed)
                    return;
                  let { error: t3 } = e3;
                  t3 || (t3 = new Error("unknown DataChannel error")), "sctp-failure" === t3.errorDetail ? i.error(
                    "DataChannel SCTP error [sctpCauseCode:%s]: %s",
                    t3.sctpCauseCode,
                    t3.message
                  ) : i.error('DataChannel "error" event: %o', t3), this.safeEmit("error", t3);
                }), this._dataChannel.addEventListener("close", () => {
                  this._closed || (i.warn('DataChannel "close" event'), this._closed = true, this.emit("@close"), this.safeEmit("close"), this._observer.safeEmit("close"));
                }), this._dataChannel.addEventListener("message", (e3) => {
                  this._closed || this.safeEmit("message", e3.data);
                });
              }
            }
            t2.DataConsumer = s;
          },
          5504: (e2, t2, r2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.DataProducer = void 0;
            const n = r2(8562), a = r2(4493), i = r2(9992), s = new n.Logger("DataProducer");
            class o extends a.EnhancedEventEmitter {
              constructor({
                id: e3,
                dataChannel: t3,
                sctpStreamParameters: r3,
                appData: n2
              }) {
                super(), this._closed = false, this._observer = new a.EnhancedEventEmitter(), s.debug("constructor()"), this._id = e3, this._dataChannel = t3, this._sctpStreamParameters = r3, this._appData = n2 || {}, this.handleDataChannel();
              }
              get id() {
                return this._id;
              }
              get closed() {
                return this._closed;
              }
              get sctpStreamParameters() {
                return this._sctpStreamParameters;
              }
              get readyState() {
                return this._dataChannel.readyState;
              }
              get label() {
                return this._dataChannel.label;
              }
              get protocol() {
                return this._dataChannel.protocol;
              }
              get bufferedAmount() {
                return this._dataChannel.bufferedAmount;
              }
              get bufferedAmountLowThreshold() {
                return this._dataChannel.bufferedAmountLowThreshold;
              }
              set bufferedAmountLowThreshold(e3) {
                this._dataChannel.bufferedAmountLowThreshold = e3;
              }
              get appData() {
                return this._appData;
              }
              set appData(e3) {
                this._appData = e3;
              }
              get observer() {
                return this._observer;
              }
              close() {
                this._closed || (s.debug("close()"), this._closed = true, this._dataChannel.close(), this.emit("@close"), this._observer.safeEmit("close"));
              }
              transportClosed() {
                this._closed || (s.debug("transportClosed()"), this._closed = true, this._dataChannel.close(), this.safeEmit("transportclose"), this._observer.safeEmit("close"));
              }
              send(e3) {
                if (s.debug("send()"), this._closed)
                  throw new i.InvalidStateError("closed");
                this._dataChannel.send(e3);
              }
              handleDataChannel() {
                this._dataChannel.addEventListener("open", () => {
                  this._closed || (s.debug('DataChannel "open" event'), this.safeEmit("open"));
                }), this._dataChannel.addEventListener("error", (e3) => {
                  if (this._closed)
                    return;
                  let { error: t3 } = e3;
                  t3 || (t3 = new Error("unknown DataChannel error")), "sctp-failure" === t3.errorDetail ? s.error(
                    "DataChannel SCTP error [sctpCauseCode:%s]: %s",
                    t3.sctpCauseCode,
                    t3.message
                  ) : s.error('DataChannel "error" event: %o', t3), this.safeEmit("error", t3);
                }), this._dataChannel.addEventListener("close", () => {
                  this._closed || (s.warn('DataChannel "close" event'), this._closed = true, this.emit("@close"), this.safeEmit("close"), this._observer.safeEmit("close"));
                }), this._dataChannel.addEventListener("message", () => {
                  this._closed || s.warn(
                    'DataChannel "message" event in a DataProducer, message discarded'
                  );
                }), this._dataChannel.addEventListener("bufferedamountlow", () => {
                  this._closed || this.safeEmit("bufferedamountlow");
                });
              }
            }
            t2.DataProducer = o;
          },
          3120: function(e2, t2, r2) {
            "use strict";
            var n = this && this.__createBinding || (Object.create ? function(e3, t3, r3, n2) {
              void 0 === n2 && (n2 = r3);
              var a2 = Object.getOwnPropertyDescriptor(t3, r3);
              a2 && !("get" in a2 ? !t3.__esModule : a2.writable || a2.configurable) || (a2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, n2, a2);
            } : function(e3, t3, r3, n2) {
              void 0 === n2 && (n2 = r3), e3[n2] = t3[r3];
            }), a = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), i = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule)
                return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && n(t3, e3, r3);
              return a(t3, e3), t3;
            }, s = this && this.__importDefault || function(e3) {
              return e3 && e3.__esModule ? e3 : { default: e3 };
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Device = t2.detectDevice = void 0;
            const o = s(r2(1206)), c = r2(8562), d = r2(4493), p = r2(9992), l = i(r2(3347)), u = i(r2(5280)), h = r2(5202), m = r2(2960), f = r2(6656), _ = r2(5372), g = r2(5697), v = r2(564), y = r2(1419), b = r2(9862), S = r2(2205), w = r2(7392), T = r2(3433), E = r2(4770), R = new c.Logger("Device");
            function P() {
              if ("object" == typeof navigator && "ReactNative" === navigator.product)
                return "undefined" == typeof RTCPeerConnection ? void R.warn(
                  "this._detectDevice() | unsupported react-native-webrtc without RTCPeerConnection, forgot to call registerGlobals()?"
                ) : "undefined" != typeof RTCRtpTransceiver ? (R.debug(
                  "this._detectDevice() | ReactNative UnifiedPlan handler chosen"
                ), "ReactNativeUnifiedPlan") : (R.debug(
                  "this._detectDevice() | ReactNative PlanB handler chosen"
                ), "ReactNative");
              if ("object" != typeof navigator || "string" != typeof navigator.userAgent)
                R.warn("this._detectDevice() | unknown device");
              else {
                const e3 = navigator.userAgent, t3 = o.default.getParser(e3), r3 = t3.getEngine();
                if (t3.satisfies({
                  chrome: ">=111",
                  chromium: ">=111",
                  "microsoft edge": ">=111"
                }))
                  return "Chrome111";
                if (t3.satisfies({
                  chrome: ">=74",
                  chromium: ">=74",
                  "microsoft edge": ">=88"
                }))
                  return "Chrome74";
                if (t3.satisfies({ chrome: ">=70", chromium: ">=70" }))
                  return "Chrome70";
                if (t3.satisfies({ chrome: ">=67", chromium: ">=67" }))
                  return "Chrome67";
                if (t3.satisfies({ chrome: ">=55", chromium: ">=55" }))
                  return "Chrome55";
                if (t3.satisfies({ firefox: ">=60" }))
                  return "Firefox60";
                if (t3.satisfies({ ios: { OS: ">=14.3", firefox: ">=30.0" } }))
                  return "Safari12";
                if (t3.satisfies({ safari: ">=12.0" }) && "undefined" != typeof RTCRtpTransceiver && RTCRtpTransceiver.prototype.hasOwnProperty("currentDirection"))
                  return "Safari12";
                if (t3.satisfies({ safari: ">=11" }))
                  return "Safari11";
                if (t3.satisfies({ "microsoft edge": ">=11" }) && t3.satisfies({ "microsoft edge": "<=18" }))
                  return "Edge11";
                if (r3.name && "blink" === r3.name.toLowerCase()) {
                  const t4 = e3.match(/(?:(?:Chrome|Chromium))[ /](\w+)/i);
                  if (t4) {
                    const e4 = Number(t4[1]);
                    return e4 >= 111 ? "Chrome111" : e4 >= 74 ? "Chrome74" : e4 >= 70 ? "Chrome70" : e4 >= 67 ? "Chrome67" : "Chrome55";
                  }
                  return "Chrome111";
                }
                R.warn(
                  "this._detectDevice() | browser not supported [name:%s, version:%s]",
                  t3.getBrowserName(),
                  t3.getBrowserVersion()
                );
              }
            }
            t2.detectDevice = P;
            t2.Device = class {
              constructor({
                handlerName: e3,
                handlerFactory: t3,
                Handler: r3
              } = {}) {
                if (this._loaded = false, this._observer = new d.EnhancedEventEmitter(), R.debug("constructor()"), r3) {
                  if (R.warn(
                    "constructor() | Handler option is DEPRECATED, use handlerName or handlerFactory instead"
                  ), "string" != typeof r3)
                    throw new TypeError(
                      "non string Handler option no longer supported, use handlerFactory instead"
                    );
                  e3 = r3;
                }
                if (e3 && t3)
                  throw new TypeError(
                    "just one of handlerName or handlerInterface can be given"
                  );
                if (t3)
                  this._handlerFactory = t3;
                else {
                  if (e3)
                    R.debug("constructor() | handler given: %s", e3);
                  else {
                    if (!(e3 = P()))
                      throw new p.UnsupportedError("device not supported");
                    R.debug("constructor() | detected handler: %s", e3);
                  }
                  switch (e3) {
                    case "Chrome111":
                      this._handlerFactory = m.Chrome111.createFactory();
                      break;
                    case "Chrome74":
                      this._handlerFactory = f.Chrome74.createFactory();
                      break;
                    case "Chrome70":
                      this._handlerFactory = _.Chrome70.createFactory();
                      break;
                    case "Chrome67":
                      this._handlerFactory = g.Chrome67.createFactory();
                      break;
                    case "Chrome55":
                      this._handlerFactory = v.Chrome55.createFactory();
                      break;
                    case "Firefox60":
                      this._handlerFactory = y.Firefox60.createFactory();
                      break;
                    case "Safari12":
                      this._handlerFactory = b.Safari12.createFactory();
                      break;
                    case "Safari11":
                      this._handlerFactory = S.Safari11.createFactory();
                      break;
                    case "Edge11":
                      this._handlerFactory = w.Edge11.createFactory();
                      break;
                    case "ReactNativeUnifiedPlan":
                      this._handlerFactory = T.ReactNativeUnifiedPlan.createFactory();
                      break;
                    case "ReactNative":
                      this._handlerFactory = E.ReactNative.createFactory();
                      break;
                    default:
                      throw new TypeError(`unknown handlerName "${e3}"`);
                  }
                }
                const n2 = this._handlerFactory();
                this._handlerName = n2.name, n2.close(), this._extendedRtpCapabilities = void 0, this._recvRtpCapabilities = void 0, this._canProduceByKind = { audio: false, video: false }, this._sctpCapabilities = void 0;
              }
              get handlerName() {
                return this._handlerName;
              }
              get loaded() {
                return this._loaded;
              }
              get rtpCapabilities() {
                if (!this._loaded)
                  throw new p.InvalidStateError("not loaded");
                return this._recvRtpCapabilities;
              }
              get sctpCapabilities() {
                if (!this._loaded)
                  throw new p.InvalidStateError("not loaded");
                return this._sctpCapabilities;
              }
              get observer() {
                return this._observer;
              }
              async load({ routerRtpCapabilities: e3 }) {
                let t3;
                R.debug("load() [routerRtpCapabilities:%o]", e3), e3 = l.clone(e3, void 0);
                try {
                  if (this._loaded)
                    throw new p.InvalidStateError("already loaded");
                  u.validateRtpCapabilities(e3), t3 = this._handlerFactory();
                  const r3 = await t3.getNativeRtpCapabilities();
                  R.debug("load() | got native RTP capabilities:%o", r3), u.validateRtpCapabilities(r3), this._extendedRtpCapabilities = u.getExtendedRtpCapabilities(
                    r3,
                    e3
                  ), R.debug(
                    "load() | got extended RTP capabilities:%o",
                    this._extendedRtpCapabilities
                  ), this._canProduceByKind.audio = u.canSend(
                    "audio",
                    this._extendedRtpCapabilities
                  ), this._canProduceByKind.video = u.canSend(
                    "video",
                    this._extendedRtpCapabilities
                  ), this._recvRtpCapabilities = u.getRecvRtpCapabilities(
                    this._extendedRtpCapabilities
                  ), u.validateRtpCapabilities(this._recvRtpCapabilities), R.debug(
                    "load() | got receiving RTP capabilities:%o",
                    this._recvRtpCapabilities
                  ), this._sctpCapabilities = await t3.getNativeSctpCapabilities(), R.debug(
                    "load() | got native SCTP capabilities:%o",
                    this._sctpCapabilities
                  ), u.validateSctpCapabilities(this._sctpCapabilities), R.debug("load() succeeded"), this._loaded = true, t3.close();
                } catch (e4) {
                  throw t3 && t3.close(), e4;
                }
              }
              canProduce(e3) {
                if (!this._loaded)
                  throw new p.InvalidStateError("not loaded");
                if ("audio" !== e3 && "video" !== e3)
                  throw new TypeError(`invalid kind "${e3}"`);
                return this._canProduceByKind[e3];
              }
              createSendTransport({
                id: e3,
                iceParameters: t3,
                iceCandidates: r3,
                dtlsParameters: n2,
                sctpParameters: a2,
                iceServers: i2,
                iceTransportPolicy: s2,
                additionalSettings: o2,
                proprietaryConstraints: c2,
                appData: d2
              }) {
                return R.debug("createSendTransport()"), this.createTransport({
                  direction: "send",
                  id: e3,
                  iceParameters: t3,
                  iceCandidates: r3,
                  dtlsParameters: n2,
                  sctpParameters: a2,
                  iceServers: i2,
                  iceTransportPolicy: s2,
                  additionalSettings: o2,
                  proprietaryConstraints: c2,
                  appData: d2
                });
              }
              createRecvTransport({
                id: e3,
                iceParameters: t3,
                iceCandidates: r3,
                dtlsParameters: n2,
                sctpParameters: a2,
                iceServers: i2,
                iceTransportPolicy: s2,
                additionalSettings: o2,
                proprietaryConstraints: c2,
                appData: d2
              }) {
                return R.debug("createRecvTransport()"), this.createTransport({
                  direction: "recv",
                  id: e3,
                  iceParameters: t3,
                  iceCandidates: r3,
                  dtlsParameters: n2,
                  sctpParameters: a2,
                  iceServers: i2,
                  iceTransportPolicy: s2,
                  additionalSettings: o2,
                  proprietaryConstraints: c2,
                  appData: d2
                });
              }
              createTransport({
                direction: e3,
                id: t3,
                iceParameters: r3,
                iceCandidates: n2,
                dtlsParameters: a2,
                sctpParameters: i2,
                iceServers: s2,
                iceTransportPolicy: o2,
                additionalSettings: c2,
                proprietaryConstraints: d2,
                appData: l2
              }) {
                if (!this._loaded)
                  throw new p.InvalidStateError("not loaded");
                if ("string" != typeof t3)
                  throw new TypeError("missing id");
                if ("object" != typeof r3)
                  throw new TypeError("missing iceParameters");
                if (!Array.isArray(n2))
                  throw new TypeError("missing iceCandidates");
                if ("object" != typeof a2)
                  throw new TypeError("missing dtlsParameters");
                if (i2 && "object" != typeof i2)
                  throw new TypeError("wrong sctpParameters");
                if (l2 && "object" != typeof l2)
                  throw new TypeError("if given, appData must be an object");
                const u2 = new h.Transport({
                  direction: e3,
                  id: t3,
                  iceParameters: r3,
                  iceCandidates: n2,
                  dtlsParameters: a2,
                  sctpParameters: i2,
                  iceServers: s2,
                  iceTransportPolicy: o2,
                  additionalSettings: c2,
                  proprietaryConstraints: d2,
                  appData: l2,
                  handlerFactory: this._handlerFactory,
                  extendedRtpCapabilities: this._extendedRtpCapabilities,
                  canProduceByKind: this._canProduceByKind
                });
                return this._observer.safeEmit("newtransport", u2), u2;
              }
            };
          },
          4493: (e2, t2, r2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.EnhancedEventEmitter = void 0;
            const n = r2(7187), a = new (r2(8562)).Logger("EnhancedEventEmitter");
            class i extends n.EventEmitter {
              constructor() {
                super(), this.setMaxListeners(1 / 0);
              }
              emit(e3, ...t3) {
                return super.emit(e3, ...t3);
              }
              safeEmit(e3, ...t3) {
                const r3 = super.listenerCount(e3);
                try {
                  return super.emit(e3, ...t3);
                } catch (t4) {
                  return a.error(
                    "safeEmit() | event listener threw an error [eventName:%s]:%o",
                    e3,
                    t4
                  ), Boolean(r3);
                }
              }
              on(e3, t3) {
                return super.on(e3, t3), this;
              }
              off(e3, t3) {
                return super.off(e3, t3), this;
              }
              addListener(e3, t3) {
                return super.on(e3, t3), this;
              }
              prependListener(e3, t3) {
                return super.prependListener(e3, t3), this;
              }
              once(e3, t3) {
                return super.once(e3, t3), this;
              }
              prependOnceListener(e3, t3) {
                return super.prependOnceListener(e3, t3), this;
              }
              removeListener(e3, t3) {
                return super.off(e3, t3), this;
              }
              removeAllListeners(e3) {
                return super.removeAllListeners(e3), this;
              }
              listenerCount(e3) {
                return super.listenerCount(e3);
              }
              listeners(e3) {
                return super.listeners(e3);
              }
              rawListeners(e3) {
                return super.rawListeners(e3);
              }
            }
            t2.EnhancedEventEmitter = i;
          },
          8562: function(e2, t2, r2) {
            "use strict";
            var n = this && this.__importDefault || function(e3) {
              return e3 && e3.__esModule ? e3 : { default: e3 };
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Logger = void 0;
            const a = n(r2(388)), i = "mediasoup-client";
            t2.Logger = class {
              constructor(e3) {
                e3 ? (this._debug = (0, a.default)(`${i}:${e3}`), this._warn = (0, a.default)(`${i}:WARN:${e3}`), this._error = (0, a.default)(`${i}:ERROR:${e3}`)) : (this._debug = (0, a.default)(i), this._warn = (0, a.default)(`${i}:WARN`), this._error = (0, a.default)(`${i}:ERROR`)), this._debug.log = console.info.bind(console), this._warn.log = console.warn.bind(console), this._error.log = console.error.bind(console);
              }
              get debug() {
                return this._debug;
              }
              get warn() {
                return this._warn;
              }
              get error() {
                return this._error;
              }
            };
          },
          6569: (e2, t2, r2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Producer = void 0;
            const n = r2(8562), a = r2(4493), i = r2(9992), s = new n.Logger("Producer");
            class o extends a.EnhancedEventEmitter {
              constructor({
                id: e3,
                localId: t3,
                rtpSender: r3,
                track: n2,
                rtpParameters: i2,
                stopTracks: o2,
                disableTrackOnPause: c,
                zeroRtpOnPause: d,
                appData: p
              }) {
                super(), this._closed = false, this._observer = new a.EnhancedEventEmitter(), s.debug("constructor()"), this._id = e3, this._localId = t3, this._rtpSender = r3, this._track = n2, this._kind = n2.kind, this._rtpParameters = i2, this._paused = !!c && !n2.enabled, this._maxSpatialLayer = void 0, this._stopTracks = o2, this._disableTrackOnPause = c, this._zeroRtpOnPause = d, this._appData = p || {}, this.onTrackEnded = this.onTrackEnded.bind(this), this.handleTrack();
              }
              get id() {
                return this._id;
              }
              get localId() {
                return this._localId;
              }
              get closed() {
                return this._closed;
              }
              get kind() {
                return this._kind;
              }
              get rtpSender() {
                return this._rtpSender;
              }
              get track() {
                return this._track;
              }
              get rtpParameters() {
                return this._rtpParameters;
              }
              get paused() {
                return this._paused;
              }
              get maxSpatialLayer() {
                return this._maxSpatialLayer;
              }
              get appData() {
                return this._appData;
              }
              set appData(e3) {
                this._appData = e3;
              }
              get observer() {
                return this._observer;
              }
              close() {
                this._closed || (s.debug("close()"), this._closed = true, this.destroyTrack(), this.emit("@close"), this._observer.safeEmit("close"));
              }
              transportClosed() {
                this._closed || (s.debug("transportClosed()"), this._closed = true, this.destroyTrack(), this.safeEmit("transportclose"), this._observer.safeEmit("close"));
              }
              async getStats() {
                if (this._closed)
                  throw new i.InvalidStateError("closed");
                return new Promise((e3, t3) => {
                  this.safeEmit("@getstats", e3, t3);
                });
              }
              pause() {
                s.debug("pause()"), this._closed ? s.error("pause() | Producer closed") : (this._paused = true, this._track && this._disableTrackOnPause && (this._track.enabled = false), this._zeroRtpOnPause && new Promise((e3, t3) => {
                  this.safeEmit("@pause", e3, t3);
                }).catch(() => {
                }), this._observer.safeEmit("pause"));
              }
              resume() {
                s.debug("resume()"), this._closed ? s.error("resume() | Producer closed") : (this._paused = false, this._track && this._disableTrackOnPause && (this._track.enabled = true), this._zeroRtpOnPause && new Promise((e3, t3) => {
                  this.safeEmit("@resume", e3, t3);
                }).catch(() => {
                }), this._observer.safeEmit("resume"));
              }
              async replaceTrack({ track: e3 }) {
                if (s.debug("replaceTrack() [track:%o]", e3), this._closed) {
                  if (e3 && this._stopTracks)
                    try {
                      e3.stop();
                    } catch (e4) {
                    }
                  throw new i.InvalidStateError("closed");
                }
                if (e3 && "ended" === e3.readyState)
                  throw new i.InvalidStateError("track ended");
                e3 !== this._track ? (await new Promise((t3, r3) => {
                  this.safeEmit("@replacetrack", e3, t3, r3);
                }), this.destroyTrack(), this._track = e3, this._track && this._disableTrackOnPause && (this._paused ? this._paused && (this._track.enabled = false) : this._track.enabled = true), this.handleTrack()) : s.debug("replaceTrack() | same track, ignored");
              }
              async setMaxSpatialLayer(e3) {
                if (this._closed)
                  throw new i.InvalidStateError("closed");
                if ("video" !== this._kind)
                  throw new i.UnsupportedError("not a video Producer");
                if ("number" != typeof e3)
                  throw new TypeError("invalid spatialLayer");
                e3 !== this._maxSpatialLayer && (await new Promise((t3, r3) => {
                  this.safeEmit("@setmaxspatiallayer", e3, t3, r3);
                }).catch(() => {
                }), this._maxSpatialLayer = e3);
              }
              async setRtpEncodingParameters(e3) {
                if (this._closed)
                  throw new i.InvalidStateError("closed");
                if ("object" != typeof e3)
                  throw new TypeError("invalid params");
                await new Promise((t3, r3) => {
                  this.safeEmit("@setrtpencodingparameters", e3, t3, r3);
                });
              }
              onTrackEnded() {
                s.debug('track "ended" event'), this.safeEmit("trackended"), this._observer.safeEmit("trackended");
              }
              handleTrack() {
                this._track && this._track.addEventListener("ended", this.onTrackEnded);
              }
              destroyTrack() {
                if (this._track)
                  try {
                    this._track.removeEventListener("ended", this.onTrackEnded), this._stopTracks && this._track.stop();
                  } catch (e3) {
                  }
              }
            }
            t2.Producer = o;
          },
          4879: (e2, t2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true });
          },
          7669: (e2, t2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true });
          },
          5202: function(e2, t2, r2) {
            "use strict";
            var n = this && this.__createBinding || (Object.create ? function(e3, t3, r3, n2) {
              void 0 === n2 && (n2 = r3);
              var a2 = Object.getOwnPropertyDescriptor(t3, r3);
              a2 && !("get" in a2 ? !t3.__esModule : a2.writable || a2.configurable) || (a2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, n2, a2);
            } : function(e3, t3, r3, n2) {
              void 0 === n2 && (n2 = r3), e3[n2] = t3[r3];
            }), a = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), i = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule)
                return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && n(t3, e3, r3);
              return a(t3, e3), t3;
            }, s = this && this.__importDefault || function(e3) {
              return e3 && e3.__esModule ? e3 : { default: e3 };
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Transport = void 0;
            const o = r2(2186), c = s(r2(4375)), d = r2(8562), p = r2(4493), l = r2(9992), u = i(r2(3347)), h = i(r2(5280)), m = r2(6569), f = r2(9514), _ = r2(5504), g = r2(1623), v = new d.Logger("Transport");
            class y {
              constructor(e3) {
                this.consumerOptions = e3, this.promise = new Promise((e4, t3) => {
                  this.resolve = e4, this.reject = t3;
                });
              }
            }
            class b extends p.EnhancedEventEmitter {
              constructor({
                direction: e3,
                id: t3,
                iceParameters: r3,
                iceCandidates: n2,
                dtlsParameters: a2,
                sctpParameters: i2,
                iceServers: s2,
                iceTransportPolicy: c2,
                additionalSettings: d2,
                proprietaryConstraints: l2,
                appData: h2,
                handlerFactory: m2,
                extendedRtpCapabilities: f2,
                canProduceByKind: _2
              }) {
                super(), this._closed = false, this._connectionState = "new", this._producers = /* @__PURE__ */ new Map(), this._consumers = /* @__PURE__ */ new Map(), this._dataProducers = /* @__PURE__ */ new Map(), this._dataConsumers = /* @__PURE__ */ new Map(), this._probatorConsumerCreated = false, this._awaitQueue = new o.AwaitQueue(), this._pendingConsumerTasks = [], this._consumerCreationInProgress = false, this._pendingPauseConsumers = /* @__PURE__ */ new Map(), this._consumerPauseInProgress = false, this._pendingResumeConsumers = /* @__PURE__ */ new Map(), this._consumerResumeInProgress = false, this._pendingCloseConsumers = /* @__PURE__ */ new Map(), this._consumerCloseInProgress = false, this._observer = new p.EnhancedEventEmitter(), v.debug("constructor() [id:%s, direction:%s]", t3, e3), this._id = t3, this._direction = e3, this._extendedRtpCapabilities = f2, this._canProduceByKind = _2, this._maxSctpMessageSize = i2 ? i2.maxMessageSize : null, delete (d2 = u.clone(d2, {})).iceServers, delete d2.iceTransportPolicy, delete d2.bundlePolicy, delete d2.rtcpMuxPolicy, delete d2.sdpSemantics, this._handler = m2(), this._handler.run({
                  direction: e3,
                  iceParameters: r3,
                  iceCandidates: n2,
                  dtlsParameters: a2,
                  sctpParameters: i2,
                  iceServers: s2,
                  iceTransportPolicy: c2,
                  additionalSettings: d2,
                  proprietaryConstraints: l2,
                  extendedRtpCapabilities: f2
                }), this._appData = h2 || {}, this.handleHandler();
              }
              get id() {
                return this._id;
              }
              get closed() {
                return this._closed;
              }
              get direction() {
                return this._direction;
              }
              get handler() {
                return this._handler;
              }
              get connectionState() {
                return this._connectionState;
              }
              get appData() {
                return this._appData;
              }
              set appData(e3) {
                this._appData = e3;
              }
              get observer() {
                return this._observer;
              }
              close() {
                if (!this._closed) {
                  v.debug("close()"), this._closed = true, this._awaitQueue.stop(), this._handler.close();
                  for (const e3 of this._producers.values())
                    e3.transportClosed();
                  this._producers.clear();
                  for (const e3 of this._consumers.values())
                    e3.transportClosed();
                  this._consumers.clear();
                  for (const e3 of this._dataProducers.values())
                    e3.transportClosed();
                  this._dataProducers.clear();
                  for (const e3 of this._dataConsumers.values())
                    e3.transportClosed();
                  this._dataConsumers.clear(), this._observer.safeEmit("close");
                }
              }
              async getStats() {
                if (this._closed)
                  throw new l.InvalidStateError("closed");
                return this._handler.getTransportStats();
              }
              async restartIce({ iceParameters: e3 }) {
                if (v.debug("restartIce()"), this._closed)
                  throw new l.InvalidStateError("closed");
                if (!e3)
                  throw new TypeError("missing iceParameters");
                return this._awaitQueue.push(
                  async () => this._handler.restartIce(e3),
                  "transport.restartIce()"
                );
              }
              async updateIceServers({ iceServers: e3 } = {}) {
                if (v.debug("updateIceServers()"), this._closed)
                  throw new l.InvalidStateError("closed");
                if (!Array.isArray(e3))
                  throw new TypeError("missing iceServers");
                return this._awaitQueue.push(
                  async () => this._handler.updateIceServers(e3),
                  "transport.updateIceServers()"
                );
              }
              async produce({
                track: e3,
                encodings: t3,
                codecOptions: r3,
                codec: n2,
                stopTracks: a2 = true,
                disableTrackOnPause: i2 = true,
                zeroRtpOnPause: s2 = false,
                appData: o2 = {}
              } = {}) {
                if (v.debug("produce() [track:%o]", e3), this._closed)
                  throw new l.InvalidStateError("closed");
                if (!e3)
                  throw new TypeError("missing track");
                if ("send" !== this._direction)
                  throw new l.UnsupportedError("not a sending Transport");
                if (!this._canProduceByKind[e3.kind])
                  throw new l.UnsupportedError(`cannot produce ${e3.kind}`);
                if ("ended" === e3.readyState)
                  throw new l.InvalidStateError("track ended");
                if (0 === this.listenerCount("connect") && "new" === this._connectionState)
                  throw new TypeError(
                    'no "connect" listener set into this transport'
                  );
                if (0 === this.listenerCount("produce"))
                  throw new TypeError(
                    'no "produce" listener set into this transport'
                  );
                if (o2 && "object" != typeof o2)
                  throw new TypeError("if given, appData must be an object");
                return this._awaitQueue.push(async () => {
                  let c2;
                  if (t3 && !Array.isArray(t3))
                    throw TypeError("encodings must be an array");
                  t3 && 0 === t3.length ? c2 = void 0 : t3 && (c2 = t3.map((e4) => {
                    const t4 = { active: true };
                    return false === e4.active && (t4.active = false), "boolean" == typeof e4.dtx && (t4.dtx = e4.dtx), "string" == typeof e4.scalabilityMode && (t4.scalabilityMode = e4.scalabilityMode), "number" == typeof e4.scaleResolutionDownBy && (t4.scaleResolutionDownBy = e4.scaleResolutionDownBy), "number" == typeof e4.maxBitrate && (t4.maxBitrate = e4.maxBitrate), "number" == typeof e4.maxFramerate && (t4.maxFramerate = e4.maxFramerate), "boolean" == typeof e4.adaptivePtime && (t4.adaptivePtime = e4.adaptivePtime), "string" == typeof e4.priority && (t4.priority = e4.priority), "string" == typeof e4.networkPriority && (t4.networkPriority = e4.networkPriority), t4;
                  }));
                  const {
                    localId: d2,
                    rtpParameters: p2,
                    rtpSender: l2
                  } = await this._handler.send({
                    track: e3,
                    encodings: c2,
                    codecOptions: r3,
                    codec: n2
                  });
                  try {
                    h.validateRtpParameters(p2);
                    const { id: t4 } = await new Promise((t5, r5) => {
                      this.safeEmit(
                        "produce",
                        { kind: e3.kind, rtpParameters: p2, appData: o2 },
                        t5,
                        r5
                      );
                    }), r4 = new m.Producer({
                      id: t4,
                      localId: d2,
                      rtpSender: l2,
                      track: e3,
                      rtpParameters: p2,
                      stopTracks: a2,
                      disableTrackOnPause: i2,
                      zeroRtpOnPause: s2,
                      appData: o2
                    });
                    return this._producers.set(r4.id, r4), this.handleProducer(r4), this._observer.safeEmit("newproducer", r4), r4;
                  } catch (e4) {
                    throw this._handler.stopSending(d2).catch(() => {
                    }), e4;
                  }
                }, "transport.produce()").catch((t4) => {
                  if (a2)
                    try {
                      e3.stop();
                    } catch (e4) {
                    }
                  throw t4;
                });
              }
              async consume({
                id: e3,
                producerId: t3,
                kind: r3,
                rtpParameters: n2,
                streamId: a2,
                appData: i2 = {}
              }) {
                if (v.debug("consume()"), n2 = u.clone(n2, void 0), this._closed)
                  throw new l.InvalidStateError("closed");
                if ("recv" !== this._direction)
                  throw new l.UnsupportedError("not a receiving Transport");
                if ("string" != typeof e3)
                  throw new TypeError("missing id");
                if ("string" != typeof t3)
                  throw new TypeError("missing producerId");
                if ("audio" !== r3 && "video" !== r3)
                  throw new TypeError(`invalid kind '${r3}'`);
                if (0 === this.listenerCount("connect") && "new" === this._connectionState)
                  throw new TypeError(
                    'no "connect" listener set into this transport'
                  );
                if (i2 && "object" != typeof i2)
                  throw new TypeError("if given, appData must be an object");
                if (!h.canReceive(n2, this._extendedRtpCapabilities))
                  throw new l.UnsupportedError("cannot consume this Producer");
                const s2 = new y({
                  id: e3,
                  producerId: t3,
                  kind: r3,
                  rtpParameters: n2,
                  streamId: a2,
                  appData: i2
                });
                return this._pendingConsumerTasks.push(s2), (0, c.default)(() => {
                  this._closed || false === this._consumerCreationInProgress && this.createPendingConsumers();
                }), s2.promise;
              }
              async produceData({
                ordered: e3 = true,
                maxPacketLifeTime: t3,
                maxRetransmits: r3,
                label: n2 = "",
                protocol: a2 = "",
                appData: i2 = {}
              } = {}) {
                if (v.debug("produceData()"), this._closed)
                  throw new l.InvalidStateError("closed");
                if ("send" !== this._direction)
                  throw new l.UnsupportedError("not a sending Transport");
                if (!this._maxSctpMessageSize)
                  throw new l.UnsupportedError(
                    "SCTP not enabled by remote Transport"
                  );
                if (0 === this.listenerCount("connect") && "new" === this._connectionState)
                  throw new TypeError(
                    'no "connect" listener set into this transport'
                  );
                if (0 === this.listenerCount("producedata"))
                  throw new TypeError(
                    'no "producedata" listener set into this transport'
                  );
                if (i2 && "object" != typeof i2)
                  throw new TypeError("if given, appData must be an object");
                return (t3 || r3) && (e3 = false), this._awaitQueue.push(async () => {
                  const { dataChannel: s2, sctpStreamParameters: o2 } = await this._handler.sendDataChannel({
                    ordered: e3,
                    maxPacketLifeTime: t3,
                    maxRetransmits: r3,
                    label: n2,
                    protocol: a2
                  });
                  h.validateSctpStreamParameters(o2);
                  const { id: c2 } = await new Promise((e4, t4) => {
                    this.safeEmit(
                      "producedata",
                      {
                        sctpStreamParameters: o2,
                        label: n2,
                        protocol: a2,
                        appData: i2
                      },
                      e4,
                      t4
                    );
                  }), d2 = new _.DataProducer({
                    id: c2,
                    dataChannel: s2,
                    sctpStreamParameters: o2,
                    appData: i2
                  });
                  return this._dataProducers.set(d2.id, d2), this.handleDataProducer(d2), this._observer.safeEmit("newdataproducer", d2), d2;
                }, "transport.produceData()");
              }
              async consumeData({
                id: e3,
                dataProducerId: t3,
                sctpStreamParameters: r3,
                label: n2 = "",
                protocol: a2 = "",
                appData: i2 = {}
              }) {
                if (v.debug("consumeData()"), r3 = u.clone(r3, void 0), this._closed)
                  throw new l.InvalidStateError("closed");
                if ("recv" !== this._direction)
                  throw new l.UnsupportedError("not a receiving Transport");
                if (!this._maxSctpMessageSize)
                  throw new l.UnsupportedError(
                    "SCTP not enabled by remote Transport"
                  );
                if ("string" != typeof e3)
                  throw new TypeError("missing id");
                if ("string" != typeof t3)
                  throw new TypeError("missing dataProducerId");
                if (0 === this.listenerCount("connect") && "new" === this._connectionState)
                  throw new TypeError(
                    'no "connect" listener set into this transport'
                  );
                if (i2 && "object" != typeof i2)
                  throw new TypeError("if given, appData must be an object");
                return h.validateSctpStreamParameters(r3), this._awaitQueue.push(async () => {
                  const { dataChannel: s2 } = await this._handler.receiveDataChannel({
                    sctpStreamParameters: r3,
                    label: n2,
                    protocol: a2
                  }), o2 = new g.DataConsumer({
                    id: e3,
                    dataProducerId: t3,
                    dataChannel: s2,
                    sctpStreamParameters: r3,
                    appData: i2
                  });
                  return this._dataConsumers.set(o2.id, o2), this.handleDataConsumer(o2), this._observer.safeEmit("newdataconsumer", o2), o2;
                }, "transport.consumeData()");
              }
              async createPendingConsumers() {
                this._consumerCreationInProgress = true, this._awaitQueue.push(async () => {
                  if (0 === this._pendingConsumerTasks.length)
                    return void v.debug(
                      "createPendingConsumers() | there is no Consumer to be created"
                    );
                  const e3 = [...this._pendingConsumerTasks];
                  let t3;
                  this._pendingConsumerTasks = [];
                  const r3 = [];
                  for (const t4 of e3) {
                    const {
                      id: e4,
                      kind: n2,
                      rtpParameters: a2,
                      streamId: i2
                    } = t4.consumerOptions;
                    r3.push({
                      trackId: e4,
                      kind: n2,
                      rtpParameters: a2,
                      streamId: i2
                    });
                  }
                  try {
                    const n2 = await this._handler.receive(r3);
                    for (let r4 = 0; r4 < n2.length; ++r4) {
                      const a2 = e3[r4], i2 = n2[r4], {
                        id: s2,
                        producerId: o2,
                        kind: c2,
                        rtpParameters: d2,
                        appData: p2
                      } = a2.consumerOptions, { localId: l2, rtpReceiver: u2, track: h2 } = i2, m2 = new f.Consumer({
                        id: s2,
                        localId: l2,
                        producerId: o2,
                        rtpReceiver: u2,
                        track: h2,
                        rtpParameters: d2,
                        appData: p2
                      });
                      this._consumers.set(m2.id, m2), this.handleConsumer(m2), this._probatorConsumerCreated || t3 || "video" !== c2 || (t3 = m2), this._observer.safeEmit("newconsumer", m2), a2.resolve(m2);
                    }
                  } catch (t4) {
                    for (const r4 of e3)
                      r4.reject(t4);
                  }
                  if (t3)
                    try {
                      const e4 = h.generateProbatorRtpParameters(
                        t3.rtpParameters
                      );
                      await this._handler.receive([
                        {
                          trackId: "probator",
                          kind: "video",
                          rtpParameters: e4
                        }
                      ]), v.debug(
                        "createPendingConsumers() | Consumer for RTP probation created"
                      ), this._probatorConsumerCreated = true;
                    } catch (e4) {
                      v.error(
                        "createPendingConsumers() | failed to create Consumer for RTP probation:%o",
                        e4
                      );
                    }
                }, "transport.createPendingConsumers()").then(() => {
                  this._consumerCreationInProgress = false, this._pendingConsumerTasks.length > 0 && this.createPendingConsumers();
                }).catch(() => {
                });
              }
              pausePendingConsumers() {
                this._consumerPauseInProgress = true, this._awaitQueue.push(async () => {
                  if (0 === this._pendingPauseConsumers.size)
                    return void v.debug(
                      "pausePendingConsumers() | there is no Consumer to be paused"
                    );
                  const e3 = Array.from(this._pendingPauseConsumers.values());
                  this._pendingPauseConsumers.clear();
                  try {
                    const t3 = e3.map((e4) => e4.localId);
                    await this._handler.pauseReceiving(t3);
                  } catch (e4) {
                    v.error(
                      "pausePendingConsumers() | failed to pause Consumers:",
                      e4
                    );
                  }
                }, "transport.pausePendingConsumers").then(() => {
                  this._consumerPauseInProgress = false, this._pendingPauseConsumers.size > 0 && this.pausePendingConsumers();
                }).catch(() => {
                });
              }
              resumePendingConsumers() {
                this._consumerResumeInProgress = true, this._awaitQueue.push(async () => {
                  if (0 === this._pendingResumeConsumers.size)
                    return void v.debug(
                      "resumePendingConsumers() | there is no Consumer to be resumed"
                    );
                  const e3 = Array.from(this._pendingResumeConsumers.values());
                  this._pendingResumeConsumers.clear();
                  try {
                    const t3 = e3.map((e4) => e4.localId);
                    await this._handler.resumeReceiving(t3);
                  } catch (e4) {
                    v.error(
                      "resumePendingConsumers() | failed to resume Consumers:",
                      e4
                    );
                  }
                }, "transport.resumePendingConsumers").then(() => {
                  this._consumerResumeInProgress = false, this._pendingResumeConsumers.size > 0 && this.resumePendingConsumers();
                }).catch(() => {
                });
              }
              closePendingConsumers() {
                this._consumerCloseInProgress = true, this._awaitQueue.push(async () => {
                  if (0 === this._pendingCloseConsumers.size)
                    return void v.debug(
                      "closePendingConsumers() | there is no Consumer to be closed"
                    );
                  const e3 = Array.from(this._pendingCloseConsumers.values());
                  this._pendingCloseConsumers.clear();
                  try {
                    await this._handler.stopReceiving(
                      e3.map((e4) => e4.localId)
                    );
                  } catch (e4) {
                    v.error(
                      "closePendingConsumers() | failed to close Consumers:",
                      e4
                    );
                  }
                }, "transport.closePendingConsumers").then(() => {
                  this._consumerCloseInProgress = false, this._pendingCloseConsumers.size > 0 && this.closePendingConsumers();
                }).catch(() => {
                });
              }
              handleHandler() {
                const e3 = this._handler;
                e3.on("@connect", ({ dtlsParameters: e4 }, t3, r3) => {
                  this._closed ? r3(new l.InvalidStateError("closed")) : this.safeEmit("connect", { dtlsParameters: e4 }, t3, r3);
                }), e3.on("@connectionstatechange", (e4) => {
                  e4 !== this._connectionState && (v.debug("connection state changed to %s", e4), this._connectionState = e4, this._closed || this.safeEmit("connectionstatechange", e4));
                });
              }
              handleProducer(e3) {
                e3.on("@close", () => {
                  this._producers.delete(e3.id), this._closed || this._awaitQueue.push(
                    async () => this._handler.stopSending(e3.localId),
                    "producer @close event"
                  ).catch((e4) => v.warn("producer.close() failed:%o", e4));
                }), e3.on("@pause", (t3, r3) => {
                  this._awaitQueue.push(
                    async () => this._handler.pauseSending(e3.localId),
                    "producer @pause event"
                  ).then(t3).catch(r3);
                }), e3.on("@resume", (t3, r3) => {
                  this._awaitQueue.push(
                    async () => this._handler.resumeSending(e3.localId),
                    "producer @resume event"
                  ).then(t3).catch(r3);
                }), e3.on("@replacetrack", (t3, r3, n2) => {
                  this._awaitQueue.push(
                    async () => this._handler.replaceTrack(e3.localId, t3),
                    "producer @replacetrack event"
                  ).then(r3).catch(n2);
                }), e3.on("@setmaxspatiallayer", (t3, r3, n2) => {
                  this._awaitQueue.push(
                    async () => this._handler.setMaxSpatialLayer(e3.localId, t3),
                    "producer @setmaxspatiallayer event"
                  ).then(r3).catch(n2);
                }), e3.on("@setrtpencodingparameters", (t3, r3, n2) => {
                  this._awaitQueue.push(
                    async () => this._handler.setRtpEncodingParameters(e3.localId, t3),
                    "producer @setrtpencodingparameters event"
                  ).then(r3).catch(n2);
                }), e3.on("@getstats", (t3, r3) => {
                  if (this._closed)
                    return r3(new l.InvalidStateError("closed"));
                  this._handler.getSenderStats(e3.localId).then(t3).catch(r3);
                });
              }
              handleConsumer(e3) {
                e3.on("@close", () => {
                  this._consumers.delete(e3.id), this._pendingPauseConsumers.delete(e3.id), this._pendingResumeConsumers.delete(e3.id), this._closed || (this._pendingCloseConsumers.set(e3.id, e3), false === this._consumerCloseInProgress && this.closePendingConsumers());
                }), e3.on("@pause", () => {
                  this._pendingResumeConsumers.has(e3.id) && this._pendingResumeConsumers.delete(e3.id), this._pendingPauseConsumers.set(e3.id, e3), (0, c.default)(() => {
                    this._closed || false === this._consumerPauseInProgress && this.pausePendingConsumers();
                  });
                }), e3.on("@resume", () => {
                  this._pendingPauseConsumers.has(e3.id) && this._pendingPauseConsumers.delete(e3.id), this._pendingResumeConsumers.set(e3.id, e3), (0, c.default)(() => {
                    this._closed || false === this._consumerResumeInProgress && this.resumePendingConsumers();
                  });
                }), e3.on("@getstats", (t3, r3) => {
                  if (this._closed)
                    return r3(new l.InvalidStateError("closed"));
                  this._handler.getReceiverStats(e3.localId).then(t3).catch(r3);
                });
              }
              handleDataProducer(e3) {
                e3.on("@close", () => {
                  this._dataProducers.delete(e3.id);
                });
              }
              handleDataConsumer(e3) {
                e3.on("@close", () => {
                  this._dataConsumers.delete(e3.id);
                });
              }
            }
            t2.Transport = b;
          },
          9992: (e2, t2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.InvalidStateError = t2.UnsupportedError = void 0;
            class r2 extends Error {
              constructor(e3) {
                super(e3), this.name = "UnsupportedError", Error.hasOwnProperty("captureStackTrace") ? Error.captureStackTrace(this, r2) : this.stack = new Error(e3).stack;
              }
            }
            t2.UnsupportedError = r2;
            class n extends Error {
              constructor(e3) {
                super(e3), this.name = "InvalidStateError", Error.hasOwnProperty("captureStackTrace") ? Error.captureStackTrace(this, n) : this.stack = new Error(e3).stack;
              }
            }
            t2.InvalidStateError = n;
          },
          2960: function(e2, t2, r2) {
            "use strict";
            var n = this && this.__createBinding || (Object.create ? function(e3, t3, r3, n2) {
              void 0 === n2 && (n2 = r3);
              var a2 = Object.getOwnPropertyDescriptor(t3, r3);
              a2 && !("get" in a2 ? !t3.__esModule : a2.writable || a2.configurable) || (a2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, n2, a2);
            } : function(e3, t3, r3, n2) {
              void 0 === n2 && (n2 = r3), e3[n2] = t3[r3];
            }), a = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), i = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule)
                return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && n(t3, e3, r3);
              return a(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Chrome111 = void 0;
            const s = i(r2(766)), o = r2(8562), c = i(r2(3347)), d = i(r2(5280)), p = i(r2(2267)), l = i(r2(9072)), u = i(r2(8954)), h = r2(9316), m = r2(7910), f = r2(2770), _ = new o.Logger("Chrome111"), g = { OS: 1024, MIS: 1024 };
            class v extends h.HandlerInterface {
              static createFactory() {
                return () => new v();
              }
              constructor() {
                super(), this._mapMidTransceiver = /* @__PURE__ */ new Map(), this._sendStream = new MediaStream(), this._hasDataChannelMediaSection = false, this._nextSendSctpStreamId = 0, this._transportReady = false;
              }
              get name() {
                return "Chrome111";
              }
              close() {
                if (_.debug("close()"), this._pc)
                  try {
                    this._pc.close();
                  } catch (e3) {
                  }
                this.emit("@close");
              }
              async getNativeRtpCapabilities() {
                _.debug("getNativeRtpCapabilities()");
                const e3 = new RTCPeerConnection({
                  iceServers: [],
                  iceTransportPolicy: "all",
                  bundlePolicy: "max-bundle",
                  rtcpMuxPolicy: "require",
                  sdpSemantics: "unified-plan"
                });
                try {
                  e3.addTransceiver("audio"), e3.addTransceiver("video");
                  const t3 = await e3.createOffer();
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  const r3 = s.parse(t3.sdp), n2 = p.extractRtpCapabilities({ sdpObject: r3 });
                  return u.addNackSuppportForOpus(n2), n2;
                } catch (t3) {
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  throw t3;
                }
              }
              async getNativeSctpCapabilities() {
                return _.debug("getNativeSctpCapabilities()"), { numStreams: g };
              }
              run({
                direction: e3,
                iceParameters: t3,
                iceCandidates: r3,
                dtlsParameters: n2,
                sctpParameters: a2,
                iceServers: i2,
                iceTransportPolicy: s2,
                additionalSettings: o2,
                proprietaryConstraints: c2,
                extendedRtpCapabilities: p2
              }) {
                _.debug("run()"), this._direction = e3, this._remoteSdp = new m.RemoteSdp({
                  iceParameters: t3,
                  iceCandidates: r3,
                  dtlsParameters: n2,
                  sctpParameters: a2
                }), this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", p2),
                  video: d.getSendingRtpParameters("video", p2)
                }, this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", p2),
                  video: d.getSendingRemoteRtpParameters("video", p2)
                }, n2.role && "auto" !== n2.role && (this._forcedLocalDtlsRole = "server" === n2.role ? "client" : "server"), this._pc = new RTCPeerConnection(
                  {
                    iceServers: i2 || [],
                    iceTransportPolicy: s2 || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "unified-plan",
                    ...o2
                  },
                  c2
                ), this._pc.connectionState ? this._pc.addEventListener("connectionstatechange", () => {
                  this.emit(
                    "@connectionstatechange",
                    this._pc.connectionState
                  );
                }) : (_.warn(
                  "run() | pc.connectionState not supported, using pc.iceConnectionState"
                ), this._pc.addEventListener(
                  "iceconnectionstatechange",
                  () => {
                    switch (this._pc.iceConnectionState) {
                      case "checking":
                        this.emit("@connectionstatechange", "connecting");
                        break;
                      case "connected":
                      case "completed":
                        this.emit("@connectionstatechange", "connected");
                        break;
                      case "failed":
                        this.emit("@connectionstatechange", "failed");
                        break;
                      case "disconnected":
                        this.emit("@connectionstatechange", "disconnected");
                        break;
                      case "closed":
                        this.emit("@connectionstatechange", "closed");
                    }
                  }
                ));
              }
              async updateIceServers(e3) {
                _.debug("updateIceServers()");
                const t3 = this._pc.getConfiguration();
                t3.iceServers = e3, this._pc.setConfiguration(t3);
              }
              async restartIce(e3) {
                if (_.debug("restartIce()"), this._remoteSdp.updateIceParameters(e3), this._transportReady)
                  if ("send" === this._direction) {
                    const e4 = await this._pc.createOffer({ iceRestart: true });
                    _.debug(
                      "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                      e4
                    ), await this._pc.setLocalDescription(e4);
                    const t3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                    _.debug(
                      "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                      t3
                    ), await this._pc.setRemoteDescription(t3);
                  } else {
                    const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                    _.debug(
                      "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                      e4
                    ), await this._pc.setRemoteDescription(e4);
                    const t3 = await this._pc.createAnswer();
                    _.debug(
                      "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                      t3
                    ), await this._pc.setLocalDescription(t3);
                  }
              }
              async getTransportStats() {
                return this._pc.getStats();
              }
              async send({ track: e3, encodings: t3, codecOptions: r3, codec: n2 }) {
                var a2;
                if (this.assertSendDirection(), _.debug("send() [kind:%s, track.id:%s]", e3.kind, e3.id), t3 && t3.length > 1) {
                  t3.forEach((e5, t4) => {
                    e5.rid = `r${t4}`;
                  });
                  let e4 = 1, r4 = 1;
                  for (const e5 of t3) {
                    const t4 = e5.scalabilityMode ? (0, f.parse)(e5.scalabilityMode).temporalLayers : 3;
                    t4 > r4 && (r4 = t4);
                  }
                  for (const n3 of t3)
                    n3.rid = "r" + e4++, n3.scalabilityMode = `L1T${r4}`;
                }
                const i2 = c.clone(this._sendingRtpParametersByKind[e3.kind], {});
                i2.codecs = d.reduceCodecs(i2.codecs, n2);
                const o2 = c.clone(
                  this._sendingRemoteRtpParametersByKind[e3.kind],
                  {}
                );
                o2.codecs = d.reduceCodecs(o2.codecs, n2);
                const u2 = this._remoteSdp.getNextMediaSectionIdx(), h2 = this._pc.addTransceiver(e3, {
                  direction: "sendonly",
                  streams: [this._sendStream],
                  sendEncodings: t3
                }), m2 = await this._pc.createOffer();
                let g2 = s.parse(m2.sdp);
                this._transportReady || await this.setupTransport({
                  localDtlsRole: null !== (a2 = this._forcedLocalDtlsRole) && void 0 !== a2 ? a2 : "client",
                  localSdpObject: g2
                }), _.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  m2
                ), await this._pc.setLocalDescription(m2);
                const v2 = h2.mid;
                i2.mid = v2, g2 = s.parse(this._pc.localDescription.sdp);
                const y = g2.media[u2.idx];
                if (i2.rtcp.cname = p.getCname({ offerMediaObject: y }), t3)
                  if (1 === t3.length) {
                    const e4 = l.getRtpEncodings({ offerMediaObject: y });
                    Object.assign(e4[0], t3[0]), i2.encodings = e4;
                  } else
                    i2.encodings = t3;
                else
                  i2.encodings = l.getRtpEncodings({ offerMediaObject: y });
                this._remoteSdp.send({
                  offerMediaObject: y,
                  reuseMid: u2.reuseMid,
                  offerRtpParameters: i2,
                  answerRtpParameters: o2,
                  codecOptions: r3,
                  extmapAllowMixed: true
                });
                const b = { type: "answer", sdp: this._remoteSdp.getSdp() };
                return _.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  b
                ), await this._pc.setRemoteDescription(b), this._mapMidTransceiver.set(v2, h2), { localId: v2, rtpParameters: i2, rtpSender: h2.sender };
              }
              async stopSending(e3) {
                this.assertSendDirection(), _.debug("stopSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3)
                  throw new Error("associated RTCRtpTransceiver not found");
                t3.sender.replaceTrack(null), this._pc.removeTrack(t3.sender);
                if (this._remoteSdp.closeMediaSection(t3.mid))
                  try {
                    t3.stop();
                  } catch (e4) {
                  }
                const r3 = await this._pc.createOffer();
                _.debug(
                  "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const n2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n2
                ), await this._pc.setRemoteDescription(n2), this._mapMidTransceiver.delete(e3);
              }
              async pauseSending(e3) {
                this.assertSendDirection(), _.debug("pauseSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3)
                  throw new Error("associated RTCRtpTransceiver not found");
                t3.direction = "inactive", this._remoteSdp.pauseMediaSection(e3);
                const r3 = await this._pc.createOffer();
                _.debug(
                  "pauseSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const n2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "pauseSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n2
                ), await this._pc.setRemoteDescription(n2);
              }
              async resumeSending(e3) {
                this.assertSendDirection(), _.debug("resumeSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (this._remoteSdp.resumeSendingMediaSection(e3), !t3)
                  throw new Error("associated RTCRtpTransceiver not found");
                t3.direction = "sendonly";
                const r3 = await this._pc.createOffer();
                _.debug(
                  "resumeSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const n2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "resumeSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n2
                ), await this._pc.setRemoteDescription(n2);
              }
              async replaceTrack(e3, t3) {
                this.assertSendDirection(), t3 ? _.debug("replaceTrack() [localId:%s, track.id:%s]", e3, t3.id) : _.debug("replaceTrack() [localId:%s, no track]", e3);
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3)
                  throw new Error("associated RTCRtpTransceiver not found");
                await r3.sender.replaceTrack(t3);
              }
              async setMaxSpatialLayer(e3, t3) {
                this.assertSendDirection(), _.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e3,
                  t3
                );
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3)
                  throw new Error("associated RTCRtpTransceiver not found");
                const n2 = r3.sender.getParameters();
                n2.encodings.forEach((e4, r4) => {
                  e4.active = r4 <= t3;
                }), await r3.sender.setParameters(n2), this._remoteSdp.muxMediaSectionSimulcast(e3, n2.encodings);
                const a2 = await this._pc.createOffer();
                _.debug(
                  "setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]",
                  a2
                ), await this._pc.setLocalDescription(a2);
                const i2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]",
                  i2
                ), await this._pc.setRemoteDescription(i2);
              }
              async setRtpEncodingParameters(e3, t3) {
                this.assertSendDirection(), _.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e3,
                  t3
                );
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3)
                  throw new Error("associated RTCRtpTransceiver not found");
                const n2 = r3.sender.getParameters();
                n2.encodings.forEach((e4, r4) => {
                  n2.encodings[r4] = { ...e4, ...t3 };
                }), await r3.sender.setParameters(n2), this._remoteSdp.muxMediaSectionSimulcast(e3, n2.encodings);
                const a2 = await this._pc.createOffer();
                _.debug(
                  "setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]",
                  a2
                ), await this._pc.setLocalDescription(a2);
                const i2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]",
                  i2
                ), await this._pc.setRemoteDescription(i2);
              }
              async getSenderStats(e3) {
                this.assertSendDirection();
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3)
                  throw new Error("associated RTCRtpTransceiver not found");
                return t3.sender.getStats();
              }
              async sendDataChannel({
                ordered: e3,
                maxPacketLifeTime: t3,
                maxRetransmits: r3,
                label: n2,
                protocol: a2
              }) {
                var i2;
                this.assertSendDirection();
                const o2 = {
                  negotiated: true,
                  id: this._nextSendSctpStreamId,
                  ordered: e3,
                  maxPacketLifeTime: t3,
                  maxRetransmits: r3,
                  protocol: a2
                };
                _.debug("sendDataChannel() [options:%o]", o2);
                const c2 = this._pc.createDataChannel(n2, o2);
                if (this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % g.MIS, !this._hasDataChannelMediaSection) {
                  const e4 = await this._pc.createOffer(), t4 = s.parse(e4.sdp), r4 = t4.media.find((e5) => "application" === e5.type);
                  this._transportReady || await this.setupTransport({
                    localDtlsRole: null !== (i2 = this._forcedLocalDtlsRole) && void 0 !== i2 ? i2 : "client",
                    localSdpObject: t4
                  }), _.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e4
                  ), await this._pc.setLocalDescription(e4), this._remoteSdp.sendSctpAssociation({ offerMediaObject: r4 });
                  const n3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  _.debug(
                    "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    n3
                  ), await this._pc.setRemoteDescription(n3), this._hasDataChannelMediaSection = true;
                }
                return {
                  dataChannel: c2,
                  sctpStreamParameters: {
                    streamId: o2.id,
                    ordered: o2.ordered,
                    maxPacketLifeTime: o2.maxPacketLifeTime,
                    maxRetransmits: o2.maxRetransmits
                  }
                };
              }
              async receive(e3) {
                var t3;
                this.assertRecvDirection();
                const r3 = [], n2 = /* @__PURE__ */ new Map();
                for (const t4 of e3) {
                  const {
                    trackId: e4,
                    kind: r4,
                    rtpParameters: a3,
                    streamId: i3
                  } = t4;
                  _.debug("receive() [trackId:%s, kind:%s]", e4, r4);
                  const s2 = a3.mid || String(this._mapMidTransceiver.size);
                  n2.set(e4, s2), this._remoteSdp.receive({
                    mid: s2,
                    kind: r4,
                    offerRtpParameters: a3,
                    streamId: i3 || a3.rtcp.cname,
                    trackId: e4
                  });
                }
                const a2 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "receive() | calling pc.setRemoteDescription() [offer:%o]",
                  a2
                ), await this._pc.setRemoteDescription(a2);
                let i2 = await this._pc.createAnswer();
                const o2 = s.parse(i2.sdp);
                for (const t4 of e3) {
                  const { trackId: e4, rtpParameters: r4 } = t4, a3 = n2.get(e4), i3 = o2.media.find((e5) => String(e5.mid) === a3);
                  p.applyCodecParameters({
                    offerRtpParameters: r4,
                    answerMediaObject: i3
                  });
                }
                i2 = { type: "answer", sdp: s.write(o2) }, this._transportReady || await this.setupTransport({
                  localDtlsRole: null !== (t3 = this._forcedLocalDtlsRole) && void 0 !== t3 ? t3 : "client",
                  localSdpObject: o2
                }), _.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  i2
                ), await this._pc.setLocalDescription(i2);
                for (const t4 of e3) {
                  const { trackId: e4 } = t4, a3 = n2.get(e4), i3 = this._pc.getTransceivers().find((e5) => e5.mid === a3);
                  if (!i3)
                    throw new Error("new RTCRtpTransceiver not found");
                  this._mapMidTransceiver.set(a3, i3), r3.push({
                    localId: a3,
                    track: i3.receiver.track,
                    rtpReceiver: i3.receiver
                  });
                }
                return r3;
              }
              async stopReceiving(e3) {
                this.assertRecvDirection();
                for (const t4 of e3) {
                  _.debug("stopReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  this._remoteSdp.closeMediaSection(e4.mid);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                _.debug(
                  "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                for (const t4 of e3)
                  this._mapMidTransceiver.delete(t4);
              }
              async pauseReceiving(e3) {
                this.assertRecvDirection();
                for (const t4 of e3) {
                  _.debug("pauseReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  e4.direction = "inactive", this._remoteSdp.pauseMediaSection(t4);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                _.debug(
                  "pauseReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async resumeReceiving(e3) {
                this.assertRecvDirection();
                for (const t4 of e3) {
                  _.debug("resumeReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  e4.direction = "recvonly", this._remoteSdp.resumeReceivingMediaSection(t4);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                _.debug(
                  "resumeReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async getReceiverStats(e3) {
                this.assertRecvDirection();
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3)
                  throw new Error("associated RTCRtpTransceiver not found");
                return t3.receiver.getStats();
              }
              async receiveDataChannel({
                sctpStreamParameters: e3,
                label: t3,
                protocol: r3
              }) {
                var n2;
                this.assertRecvDirection();
                const {
                  streamId: a2,
                  ordered: i2,
                  maxPacketLifeTime: o2,
                  maxRetransmits: c2
                } = e3, d2 = {
                  negotiated: true,
                  id: a2,
                  ordered: i2,
                  maxPacketLifeTime: o2,
                  maxRetransmits: c2,
                  protocol: r3
                };
                _.debug("receiveDataChannel() [options:%o]", d2);
                const p2 = this._pc.createDataChannel(t3, d2);
                if (!this._hasDataChannelMediaSection) {
                  this._remoteSdp.receiveSctpAssociation();
                  const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  _.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                    e4
                  ), await this._pc.setRemoteDescription(e4);
                  const t4 = await this._pc.createAnswer();
                  if (!this._transportReady) {
                    const e5 = s.parse(t4.sdp);
                    await this.setupTransport({
                      localDtlsRole: null !== (n2 = this._forcedLocalDtlsRole) && void 0 !== n2 ? n2 : "client",
                      localSdpObject: e5
                    });
                  }
                  _.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    t4
                  ), await this._pc.setLocalDescription(t4), this._hasDataChannelMediaSection = true;
                }
                return { dataChannel: p2 };
              }
              async setupTransport({ localDtlsRole: e3, localSdpObject: t3 }) {
                t3 || (t3 = s.parse(this._pc.localDescription.sdp));
                const r3 = p.extractDtlsParameters({ sdpObject: t3 });
                r3.role = e3, this._remoteSdp.updateDtlsRole(
                  "client" === e3 ? "server" : "client"
                ), await new Promise((e4, t4) => {
                  this.safeEmit("@connect", { dtlsParameters: r3 }, e4, t4);
                }), this._transportReady = true;
              }
              assertSendDirection() {
                if ("send" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "send" direction'
                  );
              }
              assertRecvDirection() {
                if ("recv" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "recv" direction'
                  );
              }
            }
            t2.Chrome111 = v;
          },
          564: function(e2, t2, r2) {
            "use strict";
            var n = this && this.__createBinding || (Object.create ? function(e3, t3, r3, n2) {
              void 0 === n2 && (n2 = r3);
              var a2 = Object.getOwnPropertyDescriptor(t3, r3);
              a2 && !("get" in a2 ? !t3.__esModule : a2.writable || a2.configurable) || (a2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, n2, a2);
            } : function(e3, t3, r3, n2) {
              void 0 === n2 && (n2 = r3), e3[n2] = t3[r3];
            }), a = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), i = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule)
                return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && n(t3, e3, r3);
              return a(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Chrome55 = void 0;
            const s = i(r2(766)), o = r2(8562), c = r2(9992), d = i(r2(3347)), p = i(r2(5280)), l = i(r2(2267)), u = i(r2(9875)), h = r2(9316), m = r2(7910), f = new o.Logger("Chrome55"), _ = { OS: 1024, MIS: 1024 };
            class g extends h.HandlerInterface {
              static createFactory() {
                return () => new g();
              }
              constructor() {
                super(), this._sendStream = new MediaStream(), this._mapSendLocalIdTrack = /* @__PURE__ */ new Map(), this._nextSendLocalId = 0, this._mapRecvLocalIdInfo = /* @__PURE__ */ new Map(), this._hasDataChannelMediaSection = false, this._nextSendSctpStreamId = 0, this._transportReady = false;
              }
              get name() {
                return "Chrome55";
              }
              close() {
                if (f.debug("close()"), this._pc)
                  try {
                    this._pc.close();
                  } catch (e3) {
                  }
                this.emit("@close");
              }
              async getNativeRtpCapabilities() {
                f.debug("getNativeRtpCapabilities()");
                const e3 = new RTCPeerConnection({
                  iceServers: [],
                  iceTransportPolicy: "all",
                  bundlePolicy: "max-bundle",
                  rtcpMuxPolicy: "require",
                  sdpSemantics: "plan-b"
                });
                try {
                  const t3 = await e3.createOffer({
                    offerToReceiveAudio: true,
                    offerToReceiveVideo: true
                  });
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  const r3 = s.parse(t3.sdp);
                  return l.extractRtpCapabilities({ sdpObject: r3 });
                } catch (t3) {
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  throw t3;
                }
              }
              async getNativeSctpCapabilities() {
                return f.debug("getNativeSctpCapabilities()"), { numStreams: _ };
              }
              run({
                direction: e3,
                iceParameters: t3,
                iceCandidates: r3,
                dtlsParameters: n2,
                sctpParameters: a2,
                iceServers: i2,
                iceTransportPolicy: s2,
                additionalSettings: o2,
                proprietaryConstraints: c2,
                extendedRtpCapabilities: d2
              }) {
                f.debug("run()"), this._direction = e3, this._remoteSdp = new m.RemoteSdp({
                  iceParameters: t3,
                  iceCandidates: r3,
                  dtlsParameters: n2,
                  sctpParameters: a2,
                  planB: true
                }), this._sendingRtpParametersByKind = {
                  audio: p.getSendingRtpParameters("audio", d2),
                  video: p.getSendingRtpParameters("video", d2)
                }, this._sendingRemoteRtpParametersByKind = {
                  audio: p.getSendingRemoteRtpParameters("audio", d2),
                  video: p.getSendingRemoteRtpParameters("video", d2)
                }, n2.role && "auto" !== n2.role && (this._forcedLocalDtlsRole = "server" === n2.role ? "client" : "server"), this._pc = new RTCPeerConnection(
                  {
                    iceServers: i2 || [],
                    iceTransportPolicy: s2 || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "plan-b",
                    ...o2
                  },
                  c2
                ), this._pc.connectionState ? this._pc.addEventListener("connectionstatechange", () => {
                  this.emit(
                    "@connectionstatechange",
                    this._pc.connectionState
                  );
                }) : this._pc.addEventListener(
                  "iceconnectionstatechange",
                  () => {
                    switch (f.warn(
                      "run() | pc.connectionState not supported, using pc.iceConnectionState"
                    ), this._pc.iceConnectionState) {
                      case "checking":
                        this.emit("@connectionstatechange", "connecting");
                        break;
                      case "connected":
                      case "completed":
                        this.emit("@connectionstatechange", "connected");
                        break;
                      case "failed":
                        this.emit("@connectionstatechange", "failed");
                        break;
                      case "disconnected":
                        this.emit("@connectionstatechange", "disconnected");
                        break;
                      case "closed":
                        this.emit("@connectionstatechange", "closed");
                    }
                  }
                );
              }
              async updateIceServers(e3) {
                f.debug("updateIceServers()");
                const t3 = this._pc.getConfiguration();
                t3.iceServers = e3, this._pc.setConfiguration(t3);
              }
              async restartIce(e3) {
                if (f.debug("restartIce()"), this._remoteSdp.updateIceParameters(e3), this._transportReady)
                  if ("send" === this._direction) {
                    const e4 = await this._pc.createOffer({ iceRestart: true });
                    f.debug(
                      "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                      e4
                    ), await this._pc.setLocalDescription(e4);
                    const t3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                    f.debug(
                      "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                      t3
                    ), await this._pc.setRemoteDescription(t3);
                  } else {
                    const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                    f.debug(
                      "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                      e4
                    ), await this._pc.setRemoteDescription(e4);
                    const t3 = await this._pc.createAnswer();
                    f.debug(
                      "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                      t3
                    ), await this._pc.setLocalDescription(t3);
                  }
              }
              async getTransportStats() {
                return this._pc.getStats();
              }
              async send({ track: e3, encodings: t3, codecOptions: r3, codec: n2 }) {
                var a2;
                this.assertSendDirection(), f.debug("send() [kind:%s, track.id:%s]", e3.kind, e3.id), n2 && f.warn(
                  "send() | codec selection is not available in %s handler",
                  this.name
                ), this._sendStream.addTrack(e3), this._pc.addStream(this._sendStream);
                let i2, o2 = await this._pc.createOffer(), c2 = s.parse(o2.sdp);
                const h2 = d.clone(this._sendingRtpParametersByKind[e3.kind], {});
                h2.codecs = p.reduceCodecs(h2.codecs);
                const m2 = d.clone(
                  this._sendingRemoteRtpParametersByKind[e3.kind],
                  {}
                );
                if (m2.codecs = p.reduceCodecs(m2.codecs), this._transportReady || await this.setupTransport({
                  localDtlsRole: null !== (a2 = this._forcedLocalDtlsRole) && void 0 !== a2 ? a2 : "client",
                  localSdpObject: c2
                }), "video" === e3.kind && t3 && t3.length > 1 && (f.debug("send() | enabling simulcast"), c2 = s.parse(o2.sdp), i2 = c2.media.find((e4) => "video" === e4.type), u.addLegacySimulcast({
                  offerMediaObject: i2,
                  track: e3,
                  numStreams: t3.length
                }), o2 = { type: "offer", sdp: s.write(c2) }), f.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  o2
                ), await this._pc.setLocalDescription(o2), c2 = s.parse(this._pc.localDescription.sdp), i2 = c2.media.find((t4) => t4.type === e3.kind), h2.rtcp.cname = l.getCname({ offerMediaObject: i2 }), h2.encodings = u.getRtpEncodings({
                  offerMediaObject: i2,
                  track: e3
                }), t3)
                  for (let e4 = 0; e4 < h2.encodings.length; ++e4)
                    t3[e4] && Object.assign(h2.encodings[e4], t3[e4]);
                if (h2.encodings.length > 1 && "video/vp8" === h2.codecs[0].mimeType.toLowerCase())
                  for (const e4 of h2.encodings)
                    e4.scalabilityMode = "L1T3";
                this._remoteSdp.send({
                  offerMediaObject: i2,
                  offerRtpParameters: h2,
                  answerRtpParameters: m2,
                  codecOptions: r3
                });
                const _2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  _2
                ), await this._pc.setRemoteDescription(_2);
                const g2 = String(this._nextSendLocalId);
                return this._nextSendLocalId++, this._mapSendLocalIdTrack.set(g2, e3), { localId: g2, rtpParameters: h2 };
              }
              async stopSending(e3) {
                this.assertSendDirection(), f.debug("stopSending() [localId:%s]", e3);
                const t3 = this._mapSendLocalIdTrack.get(e3);
                if (!t3)
                  throw new Error("track not found");
                this._mapSendLocalIdTrack.delete(e3), this._sendStream.removeTrack(t3), this._pc.addStream(this._sendStream);
                const r3 = await this._pc.createOffer();
                f.debug(
                  "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                );
                try {
                  await this._pc.setLocalDescription(r3);
                } catch (e4) {
                  if (0 === this._sendStream.getTracks().length)
                    return void f.warn(
                      "stopSending() | ignoring expected error due no sending tracks: %s",
                      e4.toString()
                    );
                  throw e4;
                }
                if ("stable" === this._pc.signalingState)
                  return;
                const n2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n2
                ), await this._pc.setRemoteDescription(n2);
              }
              async pauseSending(e3) {
              }
              async resumeSending(e3) {
              }
              async replaceTrack(e3, t3) {
                throw new c.UnsupportedError("not implemented");
              }
              async setMaxSpatialLayer(e3, t3) {
                throw new c.UnsupportedError(" not implemented");
              }
              async setRtpEncodingParameters(e3, t3) {
                throw new c.UnsupportedError("not supported");
              }
              async getSenderStats(e3) {
                throw new c.UnsupportedError("not implemented");
              }
              async sendDataChannel({
                ordered: e3,
                maxPacketLifeTime: t3,
                maxRetransmits: r3,
                label: n2,
                protocol: a2
              }) {
                var i2;
                this.assertSendDirection();
                const o2 = {
                  negotiated: true,
                  id: this._nextSendSctpStreamId,
                  ordered: e3,
                  maxPacketLifeTime: t3,
                  maxRetransmitTime: t3,
                  maxRetransmits: r3,
                  protocol: a2
                };
                f.debug("sendDataChannel() [options:%o]", o2);
                const c2 = this._pc.createDataChannel(n2, o2);
                if (this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % _.MIS, !this._hasDataChannelMediaSection) {
                  const e4 = await this._pc.createOffer(), t4 = s.parse(e4.sdp), r4 = t4.media.find((e5) => "application" === e5.type);
                  this._transportReady || await this.setupTransport({
                    localDtlsRole: null !== (i2 = this._forcedLocalDtlsRole) && void 0 !== i2 ? i2 : "client",
                    localSdpObject: t4
                  }), f.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e4
                  ), await this._pc.setLocalDescription(e4), this._remoteSdp.sendSctpAssociation({ offerMediaObject: r4 });
                  const n3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    n3
                  ), await this._pc.setRemoteDescription(n3), this._hasDataChannelMediaSection = true;
                }
                return {
                  dataChannel: c2,
                  sctpStreamParameters: {
                    streamId: o2.id,
                    ordered: o2.ordered,
                    maxPacketLifeTime: o2.maxPacketLifeTime,
                    maxRetransmits: o2.maxRetransmits
                  }
                };
              }
              async receive(e3) {
                var t3;
                this.assertRecvDirection();
                const r3 = [];
                for (const t4 of e3) {
                  const {
                    trackId: e4,
                    kind: r4,
                    rtpParameters: n3,
                    streamId: a3
                  } = t4;
                  f.debug("receive() [trackId:%s, kind:%s]", e4, r4);
                  const i3 = r4;
                  this._remoteSdp.receive({
                    mid: i3,
                    kind: r4,
                    offerRtpParameters: n3,
                    streamId: a3 || n3.rtcp.cname,
                    trackId: e4
                  });
                }
                const n2 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "receive() | calling pc.setRemoteDescription() [offer:%o]",
                  n2
                ), await this._pc.setRemoteDescription(n2);
                let a2 = await this._pc.createAnswer();
                const i2 = s.parse(a2.sdp);
                for (const t4 of e3) {
                  const { kind: e4, rtpParameters: r4 } = t4, n3 = e4, a3 = i2.media.find((e5) => String(e5.mid) === n3);
                  l.applyCodecParameters({
                    offerRtpParameters: r4,
                    answerMediaObject: a3
                  });
                }
                a2 = { type: "answer", sdp: s.write(i2) }, this._transportReady || await this.setupTransport({
                  localDtlsRole: null !== (t3 = this._forcedLocalDtlsRole) && void 0 !== t3 ? t3 : "client",
                  localSdpObject: i2
                }), f.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  a2
                ), await this._pc.setLocalDescription(a2);
                for (const t4 of e3) {
                  const { kind: e4, trackId: n3, rtpParameters: a3 } = t4, i3 = e4, s2 = n3, o2 = t4.streamId || a3.rtcp.cname, c2 = this._pc.getRemoteStreams().find((e5) => e5.id === o2).getTrackById(s2);
                  if (!c2)
                    throw new Error("remote track not found");
                  this._mapRecvLocalIdInfo.set(s2, { mid: i3, rtpParameters: a3 }), r3.push({ localId: s2, track: c2 });
                }
                return r3;
              }
              async stopReceiving(e3) {
                this.assertRecvDirection();
                for (const t4 of e3) {
                  f.debug("stopReceiving() [localId:%s]", t4);
                  const { mid: e4, rtpParameters: r4 } = this._mapRecvLocalIdInfo.get(t4) || {};
                  this._mapRecvLocalIdInfo.delete(t4), this._remoteSdp.planBStopReceiving({
                    mid: e4,
                    offerRtpParameters: r4
                  });
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                f.debug(
                  "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async pauseReceiving(e3) {
              }
              async resumeReceiving(e3) {
              }
              async getReceiverStats(e3) {
                throw new c.UnsupportedError("not implemented");
              }
              async receiveDataChannel({
                sctpStreamParameters: e3,
                label: t3,
                protocol: r3
              }) {
                var n2;
                this.assertRecvDirection();
                const {
                  streamId: a2,
                  ordered: i2,
                  maxPacketLifeTime: o2,
                  maxRetransmits: c2
                } = e3, d2 = {
                  negotiated: true,
                  id: a2,
                  ordered: i2,
                  maxPacketLifeTime: o2,
                  maxRetransmitTime: o2,
                  maxRetransmits: c2,
                  protocol: r3
                };
                f.debug("receiveDataChannel() [options:%o]", d2);
                const p2 = this._pc.createDataChannel(t3, d2);
                if (!this._hasDataChannelMediaSection) {
                  this._remoteSdp.receiveSctpAssociation({
                    oldDataChannelSpec: true
                  });
                  const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                    e4
                  ), await this._pc.setRemoteDescription(e4);
                  const t4 = await this._pc.createAnswer();
                  if (!this._transportReady) {
                    const e5 = s.parse(t4.sdp);
                    await this.setupTransport({
                      localDtlsRole: null !== (n2 = this._forcedLocalDtlsRole) && void 0 !== n2 ? n2 : "client",
                      localSdpObject: e5
                    });
                  }
                  f.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    t4
                  ), await this._pc.setLocalDescription(t4), this._hasDataChannelMediaSection = true;
                }
                return { dataChannel: p2 };
              }
              async setupTransport({ localDtlsRole: e3, localSdpObject: t3 }) {
                t3 || (t3 = s.parse(this._pc.localDescription.sdp));
                const r3 = l.extractDtlsParameters({ sdpObject: t3 });
                r3.role = e3, this._remoteSdp.updateDtlsRole(
                  "client" === e3 ? "server" : "client"
                ), await new Promise((e4, t4) => {
                  this.safeEmit("@connect", { dtlsParameters: r3 }, e4, t4);
                }), this._transportReady = true;
              }
              assertSendDirection() {
                if ("send" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "send" direction'
                  );
              }
              assertRecvDirection() {
                if ("recv" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "recv" direction'
                  );
              }
            }
            t2.Chrome55 = g;
          },
          5697: function(e2, t2, r2) {
            "use strict";
            var n = this && this.__createBinding || (Object.create ? function(e3, t3, r3, n2) {
              void 0 === n2 && (n2 = r3);
              var a2 = Object.getOwnPropertyDescriptor(t3, r3);
              a2 && !("get" in a2 ? !t3.__esModule : a2.writable || a2.configurable) || (a2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, n2, a2);
            } : function(e3, t3, r3, n2) {
              void 0 === n2 && (n2 = r3), e3[n2] = t3[r3];
            }), a = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), i = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule)
                return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && n(t3, e3, r3);
              return a(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Chrome67 = void 0;
            const s = i(r2(766)), o = r2(8562), c = i(r2(3347)), d = i(r2(5280)), p = i(r2(2267)), l = i(r2(9875)), u = r2(9316), h = r2(7910), m = new o.Logger("Chrome67"), f = { OS: 1024, MIS: 1024 };
            class _ extends u.HandlerInterface {
              static createFactory() {
                return () => new _();
              }
              constructor() {
                super(), this._sendStream = new MediaStream(), this._mapSendLocalIdRtpSender = /* @__PURE__ */ new Map(), this._nextSendLocalId = 0, this._mapRecvLocalIdInfo = /* @__PURE__ */ new Map(), this._hasDataChannelMediaSection = false, this._nextSendSctpStreamId = 0, this._transportReady = false;
              }
              get name() {
                return "Chrome67";
              }
              close() {
                if (m.debug("close()"), this._pc)
                  try {
                    this._pc.close();
                  } catch (e3) {
                  }
                this.emit("@close");
              }
              async getNativeRtpCapabilities() {
                m.debug("getNativeRtpCapabilities()");
                const e3 = new RTCPeerConnection({
                  iceServers: [],
                  iceTransportPolicy: "all",
                  bundlePolicy: "max-bundle",
                  rtcpMuxPolicy: "require",
                  sdpSemantics: "plan-b"
                });
                try {
                  const t3 = await e3.createOffer({
                    offerToReceiveAudio: true,
                    offerToReceiveVideo: true
                  });
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  const r3 = s.parse(t3.sdp);
                  return p.extractRtpCapabilities({ sdpObject: r3 });
                } catch (t3) {
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  throw t3;
                }
              }
              async getNativeSctpCapabilities() {
                return m.debug("getNativeSctpCapabilities()"), { numStreams: f };
              }
              run({
                direction: e3,
                iceParameters: t3,
                iceCandidates: r3,
                dtlsParameters: n2,
                sctpParameters: a2,
                iceServers: i2,
                iceTransportPolicy: s2,
                additionalSettings: o2,
                proprietaryConstraints: c2,
                extendedRtpCapabilities: p2
              }) {
                m.debug("run()"), this._direction = e3, this._remoteSdp = new h.RemoteSdp({
                  iceParameters: t3,
                  iceCandidates: r3,
                  dtlsParameters: n2,
                  sctpParameters: a2,
                  planB: true
                }), this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", p2),
                  video: d.getSendingRtpParameters("video", p2)
                }, this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", p2),
                  video: d.getSendingRemoteRtpParameters("video", p2)
                }, n2.role && "auto" !== n2.role && (this._forcedLocalDtlsRole = "server" === n2.role ? "client" : "server"), this._pc = new RTCPeerConnection(
                  {
                    iceServers: i2 || [],
                    iceTransportPolicy: s2 || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "plan-b",
                    ...o2
                  },
                  c2
                ), this._pc.connectionState ? this._pc.addEventListener("connectionstatechange", () => {
                  this.emit(
                    "@connectionstatechange",
                    this._pc.connectionState
                  );
                }) : this._pc.addEventListener(
                  "iceconnectionstatechange",
                  () => {
                    switch (m.warn(
                      "run() | pc.connectionState not supported, using pc.iceConnectionState"
                    ), this._pc.iceConnectionState) {
                      case "checking":
                        this.emit("@connectionstatechange", "connecting");
                        break;
                      case "connected":
                      case "completed":
                        this.emit("@connectionstatechange", "connected");
                        break;
                      case "failed":
                        this.emit("@connectionstatechange", "failed");
                        break;
                      case "disconnected":
                        this.emit("@connectionstatechange", "disconnected");
                        break;
                      case "closed":
                        this.emit("@connectionstatechange", "closed");
                    }
                  }
                );
              }
              async updateIceServers(e3) {
                m.debug("updateIceServers()");
                const t3 = this._pc.getConfiguration();
                t3.iceServers = e3, this._pc.setConfiguration(t3);
              }
              async restartIce(e3) {
                if (m.debug("restartIce()"), this._remoteSdp.updateIceParameters(e3), this._transportReady)
                  if ("send" === this._direction) {
                    const e4 = await this._pc.createOffer({ iceRestart: true });
                    m.debug(
                      "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                      e4
                    ), await this._pc.setLocalDescription(e4);
                    const t3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                    m.debug(
                      "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                      t3
                    ), await this._pc.setRemoteDescription(t3);
                  } else {
                    const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                    m.debug(
                      "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                      e4
                    ), await this._pc.setRemoteDescription(e4);
                    const t3 = await this._pc.createAnswer();
                    m.debug(
                      "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                      t3
                    ), await this._pc.setLocalDescription(t3);
                  }
              }
              async getTransportStats() {
                return this._pc.getStats();
              }
              async send({ track: e3, encodings: t3, codecOptions: r3, codec: n2 }) {
                var a2;
                this.assertSendDirection(), m.debug("send() [kind:%s, track.id:%s]", e3.kind, e3.id), n2 && m.warn(
                  "send() | codec selection is not available in %s handler",
                  this.name
                ), this._sendStream.addTrack(e3), this._pc.addTrack(e3, this._sendStream);
                let i2, o2 = await this._pc.createOffer(), u2 = s.parse(o2.sdp);
                const h2 = c.clone(this._sendingRtpParametersByKind[e3.kind], {});
                h2.codecs = d.reduceCodecs(h2.codecs);
                const f2 = c.clone(
                  this._sendingRemoteRtpParametersByKind[e3.kind],
                  {}
                );
                if (f2.codecs = d.reduceCodecs(f2.codecs), this._transportReady || await this.setupTransport({
                  localDtlsRole: null !== (a2 = this._forcedLocalDtlsRole) && void 0 !== a2 ? a2 : "client",
                  localSdpObject: u2
                }), "video" === e3.kind && t3 && t3.length > 1 && (m.debug("send() | enabling simulcast"), u2 = s.parse(o2.sdp), i2 = u2.media.find((e4) => "video" === e4.type), l.addLegacySimulcast({
                  offerMediaObject: i2,
                  track: e3,
                  numStreams: t3.length
                }), o2 = { type: "offer", sdp: s.write(u2) }), m.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  o2
                ), await this._pc.setLocalDescription(o2), u2 = s.parse(this._pc.localDescription.sdp), i2 = u2.media.find((t4) => t4.type === e3.kind), h2.rtcp.cname = p.getCname({ offerMediaObject: i2 }), h2.encodings = l.getRtpEncodings({
                  offerMediaObject: i2,
                  track: e3
                }), t3)
                  for (let e4 = 0; e4 < h2.encodings.length; ++e4)
                    t3[e4] && Object.assign(h2.encodings[e4], t3[e4]);
                if (h2.encodings.length > 1 && "video/vp8" === h2.codecs[0].mimeType.toLowerCase())
                  for (const e4 of h2.encodings)
                    e4.scalabilityMode = "L1T3";
                this._remoteSdp.send({
                  offerMediaObject: i2,
                  offerRtpParameters: h2,
                  answerRtpParameters: f2,
                  codecOptions: r3
                });
                const _2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                m.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  _2
                ), await this._pc.setRemoteDescription(_2);
                const g = String(this._nextSendLocalId);
                this._nextSendLocalId++;
                const v = this._pc.getSenders().find((t4) => t4.track === e3);
                return this._mapSendLocalIdRtpSender.set(g, v), { localId: g, rtpParameters: h2, rtpSender: v };
              }
              async stopSending(e3) {
                this.assertSendDirection(), m.debug("stopSending() [localId:%s]", e3);
                const t3 = this._mapSendLocalIdRtpSender.get(e3);
                if (!t3)
                  throw new Error("associated RTCRtpSender not found");
                this._pc.removeTrack(t3), t3.track && this._sendStream.removeTrack(t3.track), this._mapSendLocalIdRtpSender.delete(e3);
                const r3 = await this._pc.createOffer();
                m.debug(
                  "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                );
                try {
                  await this._pc.setLocalDescription(r3);
                } catch (e4) {
                  if (0 === this._sendStream.getTracks().length)
                    return void m.warn(
                      "stopSending() | ignoring expected error due no sending tracks: %s",
                      e4.toString()
                    );
                  throw e4;
                }
                if ("stable" === this._pc.signalingState)
                  return;
                const n2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                m.debug(
                  "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n2
                ), await this._pc.setRemoteDescription(n2);
              }
              async pauseSending(e3) {
              }
              async resumeSending(e3) {
              }
              async replaceTrack(e3, t3) {
                this.assertSendDirection(), t3 ? m.debug("replaceTrack() [localId:%s, track.id:%s]", e3, t3.id) : m.debug("replaceTrack() [localId:%s, no track]", e3);
                const r3 = this._mapSendLocalIdRtpSender.get(e3);
                if (!r3)
                  throw new Error("associated RTCRtpSender not found");
                const n2 = r3.track;
                await r3.replaceTrack(t3), n2 && this._sendStream.removeTrack(n2), t3 && this._sendStream.addTrack(t3);
              }
              async setMaxSpatialLayer(e3, t3) {
                this.assertSendDirection(), m.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e3,
                  t3
                );
                const r3 = this._mapSendLocalIdRtpSender.get(e3);
                if (!r3)
                  throw new Error("associated RTCRtpSender not found");
                const n2 = r3.getParameters();
                n2.encodings.forEach((e4, r4) => {
                  e4.active = r4 <= t3;
                }), await r3.setParameters(n2);
              }
              async setRtpEncodingParameters(e3, t3) {
                this.assertSendDirection(), m.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e3,
                  t3
                );
                const r3 = this._mapSendLocalIdRtpSender.get(e3);
                if (!r3)
                  throw new Error("associated RTCRtpSender not found");
                const n2 = r3.getParameters();
                n2.encodings.forEach((e4, r4) => {
                  n2.encodings[r4] = { ...e4, ...t3 };
                }), await r3.setParameters(n2);
              }
              async getSenderStats(e3) {
                this.assertSendDirection();
                const t3 = this._mapSendLocalIdRtpSender.get(e3);
                if (!t3)
                  throw new Error("associated RTCRtpSender not found");
                return t3.getStats();
              }
              async sendDataChannel({
                ordered: e3,
                maxPacketLifeTime: t3,
                maxRetransmits: r3,
                label: n2,
                protocol: a2
              }) {
                var i2;
                this.assertSendDirection();
                const o2 = {
                  negotiated: true,
                  id: this._nextSendSctpStreamId,
                  ordered: e3,
                  maxPacketLifeTime: t3,
                  maxRetransmitTime: t3,
                  maxRetransmits: r3,
                  protocol: a2
                };
                m.debug("sendDataChannel() [options:%o]", o2);
                const c2 = this._pc.createDataChannel(n2, o2);
                if (this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % f.MIS, !this._hasDataChannelMediaSection) {
                  const e4 = await this._pc.createOffer(), t4 = s.parse(e4.sdp), r4 = t4.media.find((e5) => "application" === e5.type);
                  this._transportReady || await this.setupTransport({
                    localDtlsRole: null !== (i2 = this._forcedLocalDtlsRole) && void 0 !== i2 ? i2 : "client",
                    localSdpObject: t4
                  }), m.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e4
                  ), await this._pc.setLocalDescription(e4), this._remoteSdp.sendSctpAssociation({ offerMediaObject: r4 });
                  const n3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  m.debug(
                    "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    n3
                  ), await this._pc.setRemoteDescription(n3), this._hasDataChannelMediaSection = true;
                }
                return {
                  dataChannel: c2,
                  sctpStreamParameters: {
                    streamId: o2.id,
                    ordered: o2.ordered,
                    maxPacketLifeTime: o2.maxPacketLifeTime,
                    maxRetransmits: o2.maxRetransmits
                  }
                };
              }
              async receive(e3) {
                var t3;
                this.assertRecvDirection();
                const r3 = [];
                for (const t4 of e3) {
                  const {
                    trackId: e4,
                    kind: r4,
                    rtpParameters: n3,
                    streamId: a3
                  } = t4;
                  m.debug("receive() [trackId:%s, kind:%s]", e4, r4);
                  const i3 = r4;
                  this._remoteSdp.receive({
                    mid: i3,
                    kind: r4,
                    offerRtpParameters: n3,
                    streamId: a3 || n3.rtcp.cname,
                    trackId: e4
                  });
                }
                const n2 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                m.debug(
                  "receive() | calling pc.setRemoteDescription() [offer:%o]",
                  n2
                ), await this._pc.setRemoteDescription(n2);
                let a2 = await this._pc.createAnswer();
                const i2 = s.parse(a2.sdp);
                for (const t4 of e3) {
                  const { kind: e4, rtpParameters: r4 } = t4, n3 = e4, a3 = i2.media.find((e5) => String(e5.mid) === n3);
                  p.applyCodecParameters({
                    offerRtpParameters: r4,
                    answerMediaObject: a3
                  });
                }
                a2 = { type: "answer", sdp: s.write(i2) }, this._transportReady || await this.setupTransport({
                  localDtlsRole: null !== (t3 = this._forcedLocalDtlsRole) && void 0 !== t3 ? t3 : "client",
                  localSdpObject: i2
                }), m.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  a2
                ), await this._pc.setLocalDescription(a2);
                for (const t4 of e3) {
                  const { kind: e4, trackId: n3, rtpParameters: a3 } = t4, i3 = n3, s2 = e4, o2 = this._pc.getReceivers().find((e5) => e5.track && e5.track.id === i3);
                  if (!o2)
                    throw new Error("new RTCRtpReceiver not");
                  this._mapRecvLocalIdInfo.set(i3, {
                    mid: s2,
                    rtpParameters: a3,
                    rtpReceiver: o2
                  }), r3.push({ localId: i3, track: o2.track, rtpReceiver: o2 });
                }
                return r3;
              }
              async stopReceiving(e3) {
                this.assertRecvDirection();
                for (const t4 of e3) {
                  m.debug("stopReceiving() [localId:%s]", t4);
                  const { mid: e4, rtpParameters: r4 } = this._mapRecvLocalIdInfo.get(t4) || {};
                  this._mapRecvLocalIdInfo.delete(t4), this._remoteSdp.planBStopReceiving({
                    mid: e4,
                    offerRtpParameters: r4
                  });
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                m.debug(
                  "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                m.debug(
                  "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async pauseReceiving(e3) {
              }
              async resumeReceiving(e3) {
              }
              async getReceiverStats(e3) {
                this.assertRecvDirection();
                const { rtpReceiver: t3 } = this._mapRecvLocalIdInfo.get(e3) || {};
                if (!t3)
                  throw new Error("associated RTCRtpReceiver not found");
                return t3.getStats();
              }
              async receiveDataChannel({
                sctpStreamParameters: e3,
                label: t3,
                protocol: r3
              }) {
                var n2;
                this.assertRecvDirection();
                const {
                  streamId: a2,
                  ordered: i2,
                  maxPacketLifeTime: o2,
                  maxRetransmits: c2
                } = e3, d2 = {
                  negotiated: true,
                  id: a2,
                  ordered: i2,
                  maxPacketLifeTime: o2,
                  maxRetransmitTime: o2,
                  maxRetransmits: c2,
                  protocol: r3
                };
                m.debug("receiveDataChannel() [options:%o]", d2);
                const p2 = this._pc.createDataChannel(t3, d2);
                if (!this._hasDataChannelMediaSection) {
                  this._remoteSdp.receiveSctpAssociation({
                    oldDataChannelSpec: true
                  });
                  const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  m.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                    e4
                  ), await this._pc.setRemoteDescription(e4);
                  const t4 = await this._pc.createAnswer();
                  if (!this._transportReady) {
                    const e5 = s.parse(t4.sdp);
                    await this.setupTransport({
                      localDtlsRole: null !== (n2 = this._forcedLocalDtlsRole) && void 0 !== n2 ? n2 : "client",
                      localSdpObject: e5
                    });
                  }
                  m.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    t4
                  ), await this._pc.setLocalDescription(t4), this._hasDataChannelMediaSection = true;
                }
                return { dataChannel: p2 };
              }
              async setupTransport({ localDtlsRole: e3, localSdpObject: t3 }) {
                t3 || (t3 = s.parse(this._pc.localDescription.sdp));
                const r3 = p.extractDtlsParameters({ sdpObject: t3 });
                r3.role = e3, this._remoteSdp.updateDtlsRole(
                  "client" === e3 ? "server" : "client"
                ), await new Promise((e4, t4) => {
                  this.safeEmit("@connect", { dtlsParameters: r3 }, e4, t4);
                }), this._transportReady = true;
              }
              assertSendDirection() {
                if ("send" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "send" direction'
                  );
              }
              assertRecvDirection() {
                if ("recv" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "recv" direction'
                  );
              }
            }
            t2.Chrome67 = _;
          },
          5372: function(e2, t2, r2) {
            "use strict";
            var n = this && this.__createBinding || (Object.create ? function(e3, t3, r3, n2) {
              void 0 === n2 && (n2 = r3);
              var a2 = Object.getOwnPropertyDescriptor(t3, r3);
              a2 && !("get" in a2 ? !t3.__esModule : a2.writable || a2.configurable) || (a2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, n2, a2);
            } : function(e3, t3, r3, n2) {
              void 0 === n2 && (n2 = r3), e3[n2] = t3[r3];
            }), a = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), i = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule)
                return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && n(t3, e3, r3);
              return a(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Chrome70 = void 0;
            const s = i(r2(766)), o = r2(8562), c = i(r2(3347)), d = i(r2(5280)), p = i(r2(2267)), l = i(r2(9072)), u = r2(9316), h = r2(7910), m = r2(2770), f = new o.Logger("Chrome70"), _ = { OS: 1024, MIS: 1024 };
            class g extends u.HandlerInterface {
              static createFactory() {
                return () => new g();
              }
              constructor() {
                super(), this._mapMidTransceiver = /* @__PURE__ */ new Map(), this._sendStream = new MediaStream(), this._hasDataChannelMediaSection = false, this._nextSendSctpStreamId = 0, this._transportReady = false;
              }
              get name() {
                return "Chrome70";
              }
              close() {
                if (f.debug("close()"), this._pc)
                  try {
                    this._pc.close();
                  } catch (e3) {
                  }
                this.emit("@close");
              }
              async getNativeRtpCapabilities() {
                f.debug("getNativeRtpCapabilities()");
                const e3 = new RTCPeerConnection({
                  iceServers: [],
                  iceTransportPolicy: "all",
                  bundlePolicy: "max-bundle",
                  rtcpMuxPolicy: "require",
                  sdpSemantics: "unified-plan"
                });
                try {
                  e3.addTransceiver("audio"), e3.addTransceiver("video");
                  const t3 = await e3.createOffer();
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  const r3 = s.parse(t3.sdp);
                  return p.extractRtpCapabilities({ sdpObject: r3 });
                } catch (t3) {
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  throw t3;
                }
              }
              async getNativeSctpCapabilities() {
                return f.debug("getNativeSctpCapabilities()"), { numStreams: _ };
              }
              run({
                direction: e3,
                iceParameters: t3,
                iceCandidates: r3,
                dtlsParameters: n2,
                sctpParameters: a2,
                iceServers: i2,
                iceTransportPolicy: s2,
                additionalSettings: o2,
                proprietaryConstraints: c2,
                extendedRtpCapabilities: p2
              }) {
                f.debug("run()"), this._direction = e3, this._remoteSdp = new h.RemoteSdp({
                  iceParameters: t3,
                  iceCandidates: r3,
                  dtlsParameters: n2,
                  sctpParameters: a2
                }), this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", p2),
                  video: d.getSendingRtpParameters("video", p2)
                }, this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", p2),
                  video: d.getSendingRemoteRtpParameters("video", p2)
                }, n2.role && "auto" !== n2.role && (this._forcedLocalDtlsRole = "server" === n2.role ? "client" : "server"), this._pc = new RTCPeerConnection(
                  {
                    iceServers: i2 || [],
                    iceTransportPolicy: s2 || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "unified-plan",
                    ...o2
                  },
                  c2
                ), this._pc.connectionState ? this._pc.addEventListener("connectionstatechange", () => {
                  this.emit(
                    "@connectionstatechange",
                    this._pc.connectionState
                  );
                }) : this._pc.addEventListener(
                  "iceconnectionstatechange",
                  () => {
                    switch (f.warn(
                      "run() | pc.connectionState not supported, using pc.iceConnectionState"
                    ), this._pc.iceConnectionState) {
                      case "checking":
                        this.emit("@connectionstatechange", "connecting");
                        break;
                      case "connected":
                      case "completed":
                        this.emit("@connectionstatechange", "connected");
                        break;
                      case "failed":
                        this.emit("@connectionstatechange", "failed");
                        break;
                      case "disconnected":
                        this.emit("@connectionstatechange", "disconnected");
                        break;
                      case "closed":
                        this.emit("@connectionstatechange", "closed");
                    }
                  }
                );
              }
              async updateIceServers(e3) {
                f.debug("updateIceServers()");
                const t3 = this._pc.getConfiguration();
                t3.iceServers = e3, this._pc.setConfiguration(t3);
              }
              async restartIce(e3) {
                if (f.debug("restartIce()"), this._remoteSdp.updateIceParameters(e3), this._transportReady)
                  if ("send" === this._direction) {
                    const e4 = await this._pc.createOffer({ iceRestart: true });
                    f.debug(
                      "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                      e4
                    ), await this._pc.setLocalDescription(e4);
                    const t3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                    f.debug(
                      "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                      t3
                    ), await this._pc.setRemoteDescription(t3);
                  } else {
                    const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                    f.debug(
                      "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                      e4
                    ), await this._pc.setRemoteDescription(e4);
                    const t3 = await this._pc.createAnswer();
                    f.debug(
                      "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                      t3
                    ), await this._pc.setLocalDescription(t3);
                  }
              }
              async getTransportStats() {
                return this._pc.getStats();
              }
              async send({ track: e3, encodings: t3, codecOptions: r3, codec: n2 }) {
                var a2;
                this.assertSendDirection(), f.debug("send() [kind:%s, track.id:%s]", e3.kind, e3.id);
                const i2 = c.clone(this._sendingRtpParametersByKind[e3.kind], {});
                i2.codecs = d.reduceCodecs(i2.codecs, n2);
                const o2 = c.clone(
                  this._sendingRemoteRtpParametersByKind[e3.kind],
                  {}
                );
                o2.codecs = d.reduceCodecs(o2.codecs, n2);
                const u2 = this._remoteSdp.getNextMediaSectionIdx(), h2 = this._pc.addTransceiver(e3, {
                  direction: "sendonly",
                  streams: [this._sendStream]
                });
                let _2, g2 = await this._pc.createOffer(), v = s.parse(g2.sdp);
                this._transportReady || await this.setupTransport({
                  localDtlsRole: null !== (a2 = this._forcedLocalDtlsRole) && void 0 !== a2 ? a2 : "client",
                  localSdpObject: v
                }), t3 && t3.length > 1 && (f.debug("send() | enabling legacy simulcast"), v = s.parse(g2.sdp), _2 = v.media[u2.idx], l.addLegacySimulcast({
                  offerMediaObject: _2,
                  numStreams: t3.length
                }), g2 = { type: "offer", sdp: s.write(v) });
                let y = false;
                const b = (0, m.parse)((t3 || [{}])[0].scalabilityMode);
                if (t3 && 1 === t3.length && b.spatialLayers > 1 && "video/vp9" === i2.codecs[0].mimeType.toLowerCase() && (f.debug("send() | enabling legacy simulcast for VP9 SVC"), y = true, v = s.parse(g2.sdp), _2 = v.media[u2.idx], l.addLegacySimulcast({
                  offerMediaObject: _2,
                  numStreams: b.spatialLayers
                }), g2 = { type: "offer", sdp: s.write(v) }), f.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  g2
                ), await this._pc.setLocalDescription(g2), t3) {
                  f.debug("send() | applying given encodings");
                  const e4 = h2.sender.getParameters();
                  for (let r4 = 0; r4 < (e4.encodings || []).length; ++r4) {
                    const n3 = e4.encodings[r4], a3 = t3[r4];
                    if (!a3)
                      break;
                    e4.encodings[r4] = Object.assign(n3, a3);
                  }
                  await h2.sender.setParameters(e4);
                }
                const S = h2.mid;
                if (i2.mid = S, v = s.parse(this._pc.localDescription.sdp), _2 = v.media[u2.idx], i2.rtcp.cname = p.getCname({ offerMediaObject: _2 }), i2.encodings = l.getRtpEncodings({ offerMediaObject: _2 }), t3)
                  for (let e4 = 0; e4 < i2.encodings.length; ++e4)
                    t3[e4] && Object.assign(i2.encodings[e4], t3[e4]);
                if (y && (i2.encodings = [i2.encodings[0]]), i2.encodings.length > 1 && ("video/vp8" === i2.codecs[0].mimeType.toLowerCase() || "video/h264" === i2.codecs[0].mimeType.toLowerCase()))
                  for (const e4 of i2.encodings)
                    e4.scalabilityMode = "L1T3";
                this._remoteSdp.send({
                  offerMediaObject: _2,
                  reuseMid: u2.reuseMid,
                  offerRtpParameters: i2,
                  answerRtpParameters: o2,
                  codecOptions: r3
                });
                const w = { type: "answer", sdp: this._remoteSdp.getSdp() };
                return f.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  w
                ), await this._pc.setRemoteDescription(w), this._mapMidTransceiver.set(S, h2), { localId: S, rtpParameters: i2, rtpSender: h2.sender };
              }
              async stopSending(e3) {
                this.assertSendDirection(), f.debug("stopSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3)
                  throw new Error("associated RTCRtpTransceiver not found");
                t3.sender.replaceTrack(null), this._pc.removeTrack(t3.sender);
                if (this._remoteSdp.closeMediaSection(t3.mid))
                  try {
                    t3.stop();
                  } catch (e4) {
                  }
                const r3 = await this._pc.createOffer();
                f.debug(
                  "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const n2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n2
                ), await this._pc.setRemoteDescription(n2), this._mapMidTransceiver.delete(e3);
              }
              async pauseSending(e3) {
              }
              async resumeSending(e3) {
              }
              async replaceTrack(e3, t3) {
                this.assertSendDirection(), t3 ? f.debug("replaceTrack() [localId:%s, track.id:%s]", e3, t3.id) : f.debug("replaceTrack() [localId:%s, no track]", e3);
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3)
                  throw new Error("associated RTCRtpTransceiver not found");
                await r3.sender.replaceTrack(t3);
              }
              async setMaxSpatialLayer(e3, t3) {
                this.assertSendDirection(), f.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e3,
                  t3
                );
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3)
                  throw new Error("associated RTCRtpTransceiver not found");
                const n2 = r3.sender.getParameters();
                n2.encodings.forEach((e4, r4) => {
                  e4.active = r4 <= t3;
                }), await r3.sender.setParameters(n2), this._remoteSdp.muxMediaSectionSimulcast(e3, n2.encodings);
                const a2 = await this._pc.createOffer();
                f.debug(
                  "setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]",
                  a2
                ), await this._pc.setLocalDescription(a2);
                const i2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]",
                  i2
                ), await this._pc.setRemoteDescription(i2);
              }
              async setRtpEncodingParameters(e3, t3) {
                this.assertSendDirection(), f.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e3,
                  t3
                );
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3)
                  throw new Error("associated RTCRtpTransceiver not found");
                const n2 = r3.sender.getParameters();
                n2.encodings.forEach((e4, r4) => {
                  n2.encodings[r4] = { ...e4, ...t3 };
                }), await r3.sender.setParameters(n2), this._remoteSdp.muxMediaSectionSimulcast(e3, n2.encodings);
                const a2 = await this._pc.createOffer();
                f.debug(
                  "setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]",
                  a2
                ), await this._pc.setLocalDescription(a2);
                const i2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]",
                  i2
                ), await this._pc.setRemoteDescription(i2);
              }
              async getSenderStats(e3) {
                this.assertSendDirection();
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3)
                  throw new Error("associated RTCRtpTransceiver not found");
                return t3.sender.getStats();
              }
              async sendDataChannel({
                ordered: e3,
                maxPacketLifeTime: t3,
                maxRetransmits: r3,
                label: n2,
                protocol: a2
              }) {
                var i2;
                this.assertSendDirection();
                const o2 = {
                  negotiated: true,
                  id: this._nextSendSctpStreamId,
                  ordered: e3,
                  maxPacketLifeTime: t3,
                  maxRetransmitTime: t3,
                  maxRetransmits: r3,
                  protocol: a2
                };
                f.debug("sendDataChannel() [options:%o]", o2);
                const c2 = this._pc.createDataChannel(n2, o2);
                if (this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % _.MIS, !this._hasDataChannelMediaSection) {
                  const e4 = await this._pc.createOffer(), t4 = s.parse(e4.sdp), r4 = t4.media.find((e5) => "application" === e5.type);
                  this._transportReady || await this.setupTransport({
                    localDtlsRole: null !== (i2 = this._forcedLocalDtlsRole) && void 0 !== i2 ? i2 : "client",
                    localSdpObject: t4
                  }), f.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e4
                  ), await this._pc.setLocalDescription(e4), this._remoteSdp.sendSctpAssociation({ offerMediaObject: r4 });
                  const n3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    n3
                  ), await this._pc.setRemoteDescription(n3), this._hasDataChannelMediaSection = true;
                }
                return {
                  dataChannel: c2,
                  sctpStreamParameters: {
                    streamId: o2.id,
                    ordered: o2.ordered,
                    maxPacketLifeTime: o2.maxPacketLifeTime,
                    maxRetransmits: o2.maxRetransmits
                  }
                };
              }
              async receive(e3) {
                var t3;
                this.assertRecvDirection();
                const r3 = [], n2 = /* @__PURE__ */ new Map();
                for (const t4 of e3) {
                  const {
                    trackId: e4,
                    kind: r4,
                    rtpParameters: a3,
                    streamId: i3
                  } = t4;
                  f.debug("receive() [trackId:%s, kind:%s]", e4, r4);
                  const s2 = a3.mid || String(this._mapMidTransceiver.size);
                  n2.set(e4, s2), this._remoteSdp.receive({
                    mid: s2,
                    kind: r4,
                    offerRtpParameters: a3,
                    streamId: i3 || a3.rtcp.cname,
                    trackId: e4
                  });
                }
                const a2 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "receive() | calling pc.setRemoteDescription() [offer:%o]",
                  a2
                ), await this._pc.setRemoteDescription(a2);
                let i2 = await this._pc.createAnswer();
                const o2 = s.parse(i2.sdp);
                for (const t4 of e3) {
                  const { trackId: e4, rtpParameters: r4 } = t4, a3 = n2.get(e4), i3 = o2.media.find((e5) => String(e5.mid) === a3);
                  p.applyCodecParameters({
                    offerRtpParameters: r4,
                    answerMediaObject: i3
                  });
                }
                i2 = { type: "answer", sdp: s.write(o2) }, this._transportReady || await this.setupTransport({
                  localDtlsRole: null !== (t3 = this._forcedLocalDtlsRole) && void 0 !== t3 ? t3 : "client",
                  localSdpObject: o2
                }), f.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  i2
                ), await this._pc.setLocalDescription(i2);
                for (const t4 of e3) {
                  const { trackId: e4 } = t4, a3 = n2.get(e4), i3 = this._pc.getTransceivers().find((e5) => e5.mid === a3);
                  if (!i3)
                    throw new Error("new RTCRtpTransceiver not found");
                  this._mapMidTransceiver.set(a3, i3), r3.push({
                    localId: a3,
                    track: i3.receiver.track,
                    rtpReceiver: i3.receiver
                  });
                }
                return r3;
              }
              async stopReceiving(e3) {
                this.assertRecvDirection();
                for (const t4 of e3) {
                  f.debug("stopReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  this._remoteSdp.closeMediaSection(e4.mid);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                f.debug(
                  "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                for (const t4 of e3)
                  this._mapMidTransceiver.delete(t4);
              }
              async pauseReceiving(e3) {
              }
              async resumeReceiving(e3) {
              }
              async getReceiverStats(e3) {
                this.assertRecvDirection();
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3)
                  throw new Error("associated RTCRtpTransceiver not found");
                return t3.receiver.getStats();
              }
              async receiveDataChannel({
                sctpStreamParameters: e3,
                label: t3,
                protocol: r3
              }) {
                var n2;
                this.assertRecvDirection();
                const {
                  streamId: a2,
                  ordered: i2,
                  maxPacketLifeTime: o2,
                  maxRetransmits: c2
                } = e3, d2 = {
                  negotiated: true,
                  id: a2,
                  ordered: i2,
                  maxPacketLifeTime: o2,
                  maxRetransmitTime: o2,
                  maxRetransmits: c2,
                  protocol: r3
                };
                f.debug("receiveDataChannel() [options:%o]", d2);
                const p2 = this._pc.createDataChannel(t3, d2);
                if (!this._hasDataChannelMediaSection) {
                  this._remoteSdp.receiveSctpAssociation();
                  const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                    e4
                  ), await this._pc.setRemoteDescription(e4);
                  const t4 = await this._pc.createAnswer();
                  if (!this._transportReady) {
                    const e5 = s.parse(t4.sdp);
                    await this.setupTransport({
                      localDtlsRole: null !== (n2 = this._forcedLocalDtlsRole) && void 0 !== n2 ? n2 : "client",
                      localSdpObject: e5
                    });
                  }
                  f.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    t4
                  ), await this._pc.setLocalDescription(t4), this._hasDataChannelMediaSection = true;
                }
                return { dataChannel: p2 };
              }
              async setupTransport({ localDtlsRole: e3, localSdpObject: t3 }) {
                t3 || (t3 = s.parse(this._pc.localDescription.sdp));
                const r3 = p.extractDtlsParameters({ sdpObject: t3 });
                r3.role = e3, this._remoteSdp.updateDtlsRole(
                  "client" === e3 ? "server" : "client"
                ), await new Promise((e4, t4) => {
                  this.safeEmit("@connect", { dtlsParameters: r3 }, e4, t4);
                }), this._transportReady = true;
              }
              assertSendDirection() {
                if ("send" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "send" direction'
                  );
              }
              assertRecvDirection() {
                if ("recv" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "recv" direction'
                  );
              }
            }
            t2.Chrome70 = g;
          },
          6656: function(e2, t2, r2) {
            "use strict";
            var n = this && this.__createBinding || (Object.create ? function(e3, t3, r3, n2) {
              void 0 === n2 && (n2 = r3);
              var a2 = Object.getOwnPropertyDescriptor(t3, r3);
              a2 && !("get" in a2 ? !t3.__esModule : a2.writable || a2.configurable) || (a2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, n2, a2);
            } : function(e3, t3, r3, n2) {
              void 0 === n2 && (n2 = r3), e3[n2] = t3[r3];
            }), a = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), i = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule)
                return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && n(t3, e3, r3);
              return a(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Chrome74 = void 0;
            const s = i(r2(766)), o = r2(8562), c = i(r2(3347)), d = i(r2(5280)), p = i(r2(2267)), l = i(r2(9072)), u = i(r2(8954)), h = r2(9316), m = r2(7910), f = r2(2770), _ = new o.Logger("Chrome74"), g = { OS: 1024, MIS: 1024 };
            class v extends h.HandlerInterface {
              static createFactory() {
                return () => new v();
              }
              constructor() {
                super(), this._mapMidTransceiver = /* @__PURE__ */ new Map(), this._sendStream = new MediaStream(), this._hasDataChannelMediaSection = false, this._nextSendSctpStreamId = 0, this._transportReady = false;
              }
              get name() {
                return "Chrome74";
              }
              close() {
                if (_.debug("close()"), this._pc)
                  try {
                    this._pc.close();
                  } catch (e3) {
                  }
                this.emit("@close");
              }
              async getNativeRtpCapabilities() {
                _.debug("getNativeRtpCapabilities()");
                const e3 = new RTCPeerConnection({
                  iceServers: [],
                  iceTransportPolicy: "all",
                  bundlePolicy: "max-bundle",
                  rtcpMuxPolicy: "require",
                  sdpSemantics: "unified-plan"
                });
                try {
                  e3.addTransceiver("audio"), e3.addTransceiver("video");
                  const t3 = await e3.createOffer();
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  const r3 = s.parse(t3.sdp), n2 = p.extractRtpCapabilities({ sdpObject: r3 });
                  return u.addNackSuppportForOpus(n2), n2;
                } catch (t3) {
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  throw t3;
                }
              }
              async getNativeSctpCapabilities() {
                return _.debug("getNativeSctpCapabilities()"), { numStreams: g };
              }
              run({
                direction: e3,
                iceParameters: t3,
                iceCandidates: r3,
                dtlsParameters: n2,
                sctpParameters: a2,
                iceServers: i2,
                iceTransportPolicy: s2,
                additionalSettings: o2,
                proprietaryConstraints: c2,
                extendedRtpCapabilities: p2
              }) {
                _.debug("run()"), this._direction = e3, this._remoteSdp = new m.RemoteSdp({
                  iceParameters: t3,
                  iceCandidates: r3,
                  dtlsParameters: n2,
                  sctpParameters: a2
                }), this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", p2),
                  video: d.getSendingRtpParameters("video", p2)
                }, this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", p2),
                  video: d.getSendingRemoteRtpParameters("video", p2)
                }, n2.role && "auto" !== n2.role && (this._forcedLocalDtlsRole = "server" === n2.role ? "client" : "server"), this._pc = new RTCPeerConnection(
                  {
                    iceServers: i2 || [],
                    iceTransportPolicy: s2 || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "unified-plan",
                    ...o2
                  },
                  c2
                ), this._pc.connectionState ? this._pc.addEventListener("connectionstatechange", () => {
                  this.emit(
                    "@connectionstatechange",
                    this._pc.connectionState
                  );
                }) : (_.warn(
                  "run() | pc.connectionState not supported, using pc.iceConnectionState"
                ), this._pc.addEventListener(
                  "iceconnectionstatechange",
                  () => {
                    switch (this._pc.iceConnectionState) {
                      case "checking":
                        this.emit("@connectionstatechange", "connecting");
                        break;
                      case "connected":
                      case "completed":
                        this.emit("@connectionstatechange", "connected");
                        break;
                      case "failed":
                        this.emit("@connectionstatechange", "failed");
                        break;
                      case "disconnected":
                        this.emit("@connectionstatechange", "disconnected");
                        break;
                      case "closed":
                        this.emit("@connectionstatechange", "closed");
                    }
                  }
                ));
              }
              async updateIceServers(e3) {
                _.debug("updateIceServers()");
                const t3 = this._pc.getConfiguration();
                t3.iceServers = e3, this._pc.setConfiguration(t3);
              }
              async restartIce(e3) {
                if (_.debug("restartIce()"), this._remoteSdp.updateIceParameters(e3), this._transportReady)
                  if ("send" === this._direction) {
                    const e4 = await this._pc.createOffer({ iceRestart: true });
                    _.debug(
                      "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                      e4
                    ), await this._pc.setLocalDescription(e4);
                    const t3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                    _.debug(
                      "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                      t3
                    ), await this._pc.setRemoteDescription(t3);
                  } else {
                    const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                    _.debug(
                      "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                      e4
                    ), await this._pc.setRemoteDescription(e4);
                    const t3 = await this._pc.createAnswer();
                    _.debug(
                      "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                      t3
                    ), await this._pc.setLocalDescription(t3);
                  }
              }
              async getTransportStats() {
                return this._pc.getStats();
              }
              async send({ track: e3, encodings: t3, codecOptions: r3, codec: n2 }) {
                var a2;
                this.assertSendDirection(), _.debug("send() [kind:%s, track.id:%s]", e3.kind, e3.id), t3 && t3.length > 1 && t3.forEach((e4, t4) => {
                  e4.rid = `r${t4}`;
                });
                const i2 = c.clone(this._sendingRtpParametersByKind[e3.kind], {});
                i2.codecs = d.reduceCodecs(i2.codecs, n2);
                const o2 = c.clone(
                  this._sendingRemoteRtpParametersByKind[e3.kind],
                  {}
                );
                o2.codecs = d.reduceCodecs(o2.codecs, n2);
                const u2 = this._remoteSdp.getNextMediaSectionIdx(), h2 = this._pc.addTransceiver(e3, {
                  direction: "sendonly",
                  streams: [this._sendStream],
                  sendEncodings: t3
                });
                let m2, g2 = await this._pc.createOffer(), v2 = s.parse(g2.sdp);
                this._transportReady || await this.setupTransport({
                  localDtlsRole: null !== (a2 = this._forcedLocalDtlsRole) && void 0 !== a2 ? a2 : "client",
                  localSdpObject: v2
                });
                let y = false;
                const b = (0, f.parse)((t3 || [{}])[0].scalabilityMode);
                t3 && 1 === t3.length && b.spatialLayers > 1 && "video/vp9" === i2.codecs[0].mimeType.toLowerCase() && (_.debug("send() | enabling legacy simulcast for VP9 SVC"), y = true, v2 = s.parse(g2.sdp), m2 = v2.media[u2.idx], l.addLegacySimulcast({
                  offerMediaObject: m2,
                  numStreams: b.spatialLayers
                }), g2 = { type: "offer", sdp: s.write(v2) }), _.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  g2
                ), await this._pc.setLocalDescription(g2);
                const S = h2.mid;
                if (i2.mid = S, v2 = s.parse(this._pc.localDescription.sdp), m2 = v2.media[u2.idx], i2.rtcp.cname = p.getCname({ offerMediaObject: m2 }), t3)
                  if (1 === t3.length) {
                    let e4 = l.getRtpEncodings({ offerMediaObject: m2 });
                    Object.assign(e4[0], t3[0]), y && (e4 = [e4[0]]), i2.encodings = e4;
                  } else
                    i2.encodings = t3;
                else
                  i2.encodings = l.getRtpEncodings({ offerMediaObject: m2 });
                if (i2.encodings.length > 1 && ("video/vp8" === i2.codecs[0].mimeType.toLowerCase() || "video/h264" === i2.codecs[0].mimeType.toLowerCase()))
                  for (const e4 of i2.encodings)
                    e4.scalabilityMode ? e4.scalabilityMode = `L1T${b.temporalLayers}` : e4.scalabilityMode = "L1T3";
                this._remoteSdp.send({
                  offerMediaObject: m2,
                  reuseMid: u2.reuseMid,
                  offerRtpParameters: i2,
                  answerRtpParameters: o2,
                  codecOptions: r3,
                  extmapAllowMixed: true
                });
                const w = { type: "answer", sdp: this._remoteSdp.getSdp() };
                return _.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  w
                ), await this._pc.setRemoteDescription(w), this._mapMidTransceiver.set(S, h2), { localId: S, rtpParameters: i2, rtpSender: h2.sender };
              }
              async stopSending(e3) {
                this.assertSendDirection(), _.debug("stopSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3)
                  throw new Error("associated RTCRtpTransceiver not found");
                t3.sender.replaceTrack(null), this._pc.removeTrack(t3.sender);
                if (this._remoteSdp.closeMediaSection(t3.mid))
                  try {
                    t3.stop();
                  } catch (e4) {
                  }
                const r3 = await this._pc.createOffer();
                _.debug(
                  "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const n2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n2
                ), await this._pc.setRemoteDescription(n2), this._mapMidTransceiver.delete(e3);
              }
              async pauseSending(e3) {
                this.assertSendDirection(), _.debug("pauseSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3)
                  throw new Error("associated RTCRtpTransceiver not found");
                t3.direction = "inactive", this._remoteSdp.pauseMediaSection(e3);
                const r3 = await this._pc.createOffer();
                _.debug(
                  "pauseSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const n2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "pauseSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n2
                ), await this._pc.setRemoteDescription(n2);
              }
              async resumeSending(e3) {
                this.assertSendDirection(), _.debug("resumeSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (this._remoteSdp.resumeSendingMediaSection(e3), !t3)
                  throw new Error("associated RTCRtpTransceiver not found");
                t3.direction = "sendonly";
                const r3 = await this._pc.createOffer();
                _.debug(
                  "resumeSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const n2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "resumeSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n2
                ), await this._pc.setRemoteDescription(n2);
              }
              async replaceTrack(e3, t3) {
                this.assertSendDirection(), t3 ? _.debug("replaceTrack() [localId:%s, track.id:%s]", e3, t3.id) : _.debug("replaceTrack() [localId:%s, no track]", e3);
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3)
                  throw new Error("associated RTCRtpTransceiver not found");
                await r3.sender.replaceTrack(t3);
              }
              async setMaxSpatialLayer(e3, t3) {
                this.assertSendDirection(), _.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e3,
                  t3
                );
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3)
                  throw new Error("associated RTCRtpTransceiver not found");
                const n2 = r3.sender.getParameters();
                n2.encodings.forEach((e4, r4) => {
                  e4.active = r4 <= t3;
                }), await r3.sender.setParameters(n2), this._remoteSdp.muxMediaSectionSimulcast(e3, n2.encodings);
                const a2 = await this._pc.createOffer();
                _.debug(
                  "setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]",
                  a2
                ), await this._pc.setLocalDescription(a2);
                const i2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]",
                  i2
                ), await this._pc.setRemoteDescription(i2);
              }
              async setRtpEncodingParameters(e3, t3) {
                this.assertSendDirection(), _.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e3,
                  t3
                );
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3)
                  throw new Error("associated RTCRtpTransceiver not found");
                const n2 = r3.sender.getParameters();
                n2.encodings.forEach((e4, r4) => {
                  n2.encodings[r4] = { ...e4, ...t3 };
                }), await r3.sender.setParameters(n2), this._remoteSdp.muxMediaSectionSimulcast(e3, n2.encodings);
                const a2 = await this._pc.createOffer();
                _.debug(
                  "setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]",
                  a2
                ), await this._pc.setLocalDescription(a2);
                const i2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]",
                  i2
                ), await this._pc.setRemoteDescription(i2);
              }
              async getSenderStats(e3) {
                this.assertSendDirection();
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3)
                  throw new Error("associated RTCRtpTransceiver not found");
                return t3.sender.getStats();
              }
              async sendDataChannel({
                ordered: e3,
                maxPacketLifeTime: t3,
                maxRetransmits: r3,
                label: n2,
                protocol: a2
              }) {
                var i2;
                this.assertSendDirection();
                const o2 = {
                  negotiated: true,
                  id: this._nextSendSctpStreamId,
                  ordered: e3,
                  maxPacketLifeTime: t3,
                  maxRetransmits: r3,
                  protocol: a2
                };
                _.debug("sendDataChannel() [options:%o]", o2);
                const c2 = this._pc.createDataChannel(n2, o2);
                if (this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % g.MIS, !this._hasDataChannelMediaSection) {
                  const e4 = await this._pc.createOffer(), t4 = s.parse(e4.sdp), r4 = t4.media.find((e5) => "application" === e5.type);
                  this._transportReady || await this.setupTransport({
                    localDtlsRole: null !== (i2 = this._forcedLocalDtlsRole) && void 0 !== i2 ? i2 : "client",
                    localSdpObject: t4
                  }), _.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e4
                  ), await this._pc.setLocalDescription(e4), this._remoteSdp.sendSctpAssociation({ offerMediaObject: r4 });
                  const n3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  _.debug(
                    "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    n3
                  ), await this._pc.setRemoteDescription(n3), this._hasDataChannelMediaSection = true;
                }
                return {
                  dataChannel: c2,
                  sctpStreamParameters: {
                    streamId: o2.id,
                    ordered: o2.ordered,
                    maxPacketLifeTime: o2.maxPacketLifeTime,
                    maxRetransmits: o2.maxRetransmits
                  }
                };
              }
              async receive(e3) {
                var t3;
                this.assertRecvDirection();
                const r3 = [], n2 = /* @__PURE__ */ new Map();
                for (const t4 of e3) {
                  const {
                    trackId: e4,
                    kind: r4,
                    rtpParameters: a3,
                    streamId: i3
                  } = t4;
                  _.debug("receive() [trackId:%s, kind:%s]", e4, r4);
                  const s2 = a3.mid || String(this._mapMidTransceiver.size);
                  n2.set(e4, s2), this._remoteSdp.receive({
                    mid: s2,
                    kind: r4,
                    offerRtpParameters: a3,
                    streamId: i3 || a3.rtcp.cname,
                    trackId: e4
                  });
                }
                const a2 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "receive() | calling pc.setRemoteDescription() [offer:%o]",
                  a2
                ), await this._pc.setRemoteDescription(a2);
                let i2 = await this._pc.createAnswer();
                const o2 = s.parse(i2.sdp);
                for (const t4 of e3) {
                  const { trackId: e4, rtpParameters: r4 } = t4, a3 = n2.get(e4), i3 = o2.media.find((e5) => String(e5.mid) === a3);
                  p.applyCodecParameters({
                    offerRtpParameters: r4,
                    answerMediaObject: i3
                  });
                }
                i2 = { type: "answer", sdp: s.write(o2) }, this._transportReady || await this.setupTransport({
                  localDtlsRole: null !== (t3 = this._forcedLocalDtlsRole) && void 0 !== t3 ? t3 : "client",
                  localSdpObject: o2
                }), _.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  i2
                ), await this._pc.setLocalDescription(i2);
                for (const t4 of e3) {
                  const { trackId: e4 } = t4, a3 = n2.get(e4), i3 = this._pc.getTransceivers().find((e5) => e5.mid === a3);
                  if (!i3)
                    throw new Error("new RTCRtpTransceiver not found");
                  this._mapMidTransceiver.set(a3, i3), r3.push({
                    localId: a3,
                    track: i3.receiver.track,
                    rtpReceiver: i3.receiver
                  });
                }
                return r3;
              }
              async stopReceiving(e3) {
                this.assertRecvDirection();
                for (const t4 of e3) {
                  _.debug("stopReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  this._remoteSdp.closeMediaSection(e4.mid);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                _.debug(
                  "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                for (const t4 of e3)
                  this._mapMidTransceiver.delete(t4);
              }
              async pauseReceiving(e3) {
                this.assertRecvDirection();
                for (const t4 of e3) {
                  _.debug("pauseReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  e4.direction = "inactive", this._remoteSdp.pauseMediaSection(t4);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                _.debug(
                  "pauseReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async resumeReceiving(e3) {
                this.assertRecvDirection();
                for (const t4 of e3) {
                  _.debug("resumeReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  e4.direction = "recvonly", this._remoteSdp.resumeReceivingMediaSection(t4);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                _.debug(
                  "resumeReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async getReceiverStats(e3) {
                this.assertRecvDirection();
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3)
                  throw new Error("associated RTCRtpTransceiver not found");
                return t3.receiver.getStats();
              }
              async receiveDataChannel({
                sctpStreamParameters: e3,
                label: t3,
                protocol: r3
              }) {
                var n2;
                this.assertRecvDirection();
                const {
                  streamId: a2,
                  ordered: i2,
                  maxPacketLifeTime: o2,
                  maxRetransmits: c2
                } = e3, d2 = {
                  negotiated: true,
                  id: a2,
                  ordered: i2,
                  maxPacketLifeTime: o2,
                  maxRetransmits: c2,
                  protocol: r3
                };
                _.debug("receiveDataChannel() [options:%o]", d2);
                const p2 = this._pc.createDataChannel(t3, d2);
                if (!this._hasDataChannelMediaSection) {
                  this._remoteSdp.receiveSctpAssociation();
                  const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  _.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                    e4
                  ), await this._pc.setRemoteDescription(e4);
                  const t4 = await this._pc.createAnswer();
                  if (!this._transportReady) {
                    const e5 = s.parse(t4.sdp);
                    await this.setupTransport({
                      localDtlsRole: null !== (n2 = this._forcedLocalDtlsRole) && void 0 !== n2 ? n2 : "client",
                      localSdpObject: e5
                    });
                  }
                  _.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    t4
                  ), await this._pc.setLocalDescription(t4), this._hasDataChannelMediaSection = true;
                }
                return { dataChannel: p2 };
              }
              async setupTransport({ localDtlsRole: e3, localSdpObject: t3 }) {
                t3 || (t3 = s.parse(this._pc.localDescription.sdp));
                const r3 = p.extractDtlsParameters({ sdpObject: t3 });
                r3.role = e3, this._remoteSdp.updateDtlsRole(
                  "client" === e3 ? "server" : "client"
                ), await new Promise((e4, t4) => {
                  this.safeEmit("@connect", { dtlsParameters: r3 }, e4, t4);
                }), this._transportReady = true;
              }
              assertSendDirection() {
                if ("send" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "send" direction'
                  );
              }
              assertRecvDirection() {
                if ("recv" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "recv" direction'
                  );
              }
            }
            t2.Chrome74 = v;
          },
          7392: function(e2, t2, r2) {
            "use strict";
            var n = this && this.__createBinding || (Object.create ? function(e3, t3, r3, n2) {
              void 0 === n2 && (n2 = r3);
              var a2 = Object.getOwnPropertyDescriptor(t3, r3);
              a2 && !("get" in a2 ? !t3.__esModule : a2.writable || a2.configurable) || (a2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, n2, a2);
            } : function(e3, t3, r3, n2) {
              void 0 === n2 && (n2 = r3), e3[n2] = t3[r3];
            }), a = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), i = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule)
                return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && n(t3, e3, r3);
              return a(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Edge11 = void 0;
            const s = r2(8562), o = r2(9992), c = i(r2(3347)), d = i(r2(5280)), p = i(r2(3635)), l = r2(9316), u = new s.Logger("Edge11");
            class h extends l.HandlerInterface {
              static createFactory() {
                return () => new h();
              }
              constructor() {
                super(), this._rtpSenders = /* @__PURE__ */ new Map(), this._rtpReceivers = /* @__PURE__ */ new Map(), this._nextSendLocalId = 0, this._transportReady = false;
              }
              get name() {
                return "Edge11";
              }
              close() {
                u.debug("close()");
                try {
                  this._iceGatherer.close();
                } catch (e3) {
                }
                try {
                  this._iceTransport.stop();
                } catch (e3) {
                }
                try {
                  this._dtlsTransport.stop();
                } catch (e3) {
                }
                for (const e3 of this._rtpSenders.values())
                  try {
                    e3.stop();
                  } catch (e4) {
                  }
                for (const e3 of this._rtpReceivers.values())
                  try {
                    e3.stop();
                  } catch (e4) {
                  }
                this.emit("@close");
              }
              async getNativeRtpCapabilities() {
                return u.debug("getNativeRtpCapabilities()"), p.getCapabilities();
              }
              async getNativeSctpCapabilities() {
                return u.debug("getNativeSctpCapabilities()"), { numStreams: { OS: 0, MIS: 0 } };
              }
              run({
                direction: e3,
                iceParameters: t3,
                iceCandidates: r3,
                dtlsParameters: n2,
                sctpParameters: a2,
                iceServers: i2,
                iceTransportPolicy: s2,
                additionalSettings: o2,
                proprietaryConstraints: p2,
                extendedRtpCapabilities: l2
              }) {
                u.debug("run()"), this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", l2),
                  video: d.getSendingRtpParameters("video", l2)
                }, this._remoteIceParameters = t3, this._remoteIceCandidates = r3, this._remoteDtlsParameters = n2, this._cname = `CNAME-${c.generateRandomNumber()}`, this.setIceGatherer({ iceServers: i2, iceTransportPolicy: s2 }), this.setIceTransport(), this.setDtlsTransport();
              }
              async updateIceServers(e3) {
                throw new o.UnsupportedError("not supported");
              }
              async restartIce(e3) {
                if (u.debug("restartIce()"), this._remoteIceParameters = e3, this._transportReady) {
                  u.debug("restartIce() | calling iceTransport.start()"), this._iceTransport.start(this._iceGatherer, e3, "controlling");
                  for (const e4 of this._remoteIceCandidates)
                    this._iceTransport.addRemoteCandidate(e4);
                  this._iceTransport.addRemoteCandidate({});
                }
              }
              async getTransportStats() {
                return this._iceTransport.getStats();
              }
              async send({ track: e3, encodings: t3, codecOptions: r3, codec: n2 }) {
                u.debug("send() [kind:%s, track.id:%s]", e3.kind, e3.id), this._transportReady || await this.setupTransport({ localDtlsRole: "server" }), u.debug("send() | calling new RTCRtpSender()");
                const a2 = new RTCRtpSender(e3, this._dtlsTransport), i2 = c.clone(this._sendingRtpParametersByKind[e3.kind], {});
                i2.codecs = d.reduceCodecs(i2.codecs, n2);
                const s2 = i2.codecs.some((e4) => /.+\/rtx$/i.test(e4.mimeType));
                t3 || (t3 = [{}]);
                for (const e4 of t3)
                  e4.ssrc = c.generateRandomNumber(), s2 && (e4.rtx = { ssrc: c.generateRandomNumber() });
                i2.encodings = t3, i2.rtcp = { cname: this._cname, reducedSize: true, mux: true };
                const o2 = p.mangleRtpParameters(i2);
                u.debug("send() | calling rtpSender.send() [params:%o]", o2), await a2.send(o2);
                const l2 = String(this._nextSendLocalId);
                return this._nextSendLocalId++, this._rtpSenders.set(l2, a2), { localId: l2, rtpParameters: i2, rtpSender: a2 };
              }
              async stopSending(e3) {
                u.debug("stopSending() [localId:%s]", e3);
                const t3 = this._rtpSenders.get(e3);
                if (!t3)
                  throw new Error("RTCRtpSender not found");
                this._rtpSenders.delete(e3);
                try {
                  u.debug("stopSending() | calling rtpSender.stop()"), t3.stop();
                } catch (e4) {
                  throw u.warn("stopSending() | rtpSender.stop() failed:%o", e4), e4;
                }
              }
              async pauseSending(e3) {
              }
              async resumeSending(e3) {
              }
              async replaceTrack(e3, t3) {
                t3 ? u.debug("replaceTrack() [localId:%s, track.id:%s]", e3, t3.id) : u.debug("replaceTrack() [localId:%s, no track]", e3);
                const r3 = this._rtpSenders.get(e3);
                if (!r3)
                  throw new Error("RTCRtpSender not found");
                r3.setTrack(t3);
              }
              async setMaxSpatialLayer(e3, t3) {
                u.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e3,
                  t3
                );
                const r3 = this._rtpSenders.get(e3);
                if (!r3)
                  throw new Error("RTCRtpSender not found");
                const n2 = r3.getParameters();
                n2.encodings.forEach((e4, r4) => {
                  e4.active = r4 <= t3;
                }), await r3.setParameters(n2);
              }
              async setRtpEncodingParameters(e3, t3) {
                u.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e3,
                  t3
                );
                const r3 = this._rtpSenders.get(e3);
                if (!r3)
                  throw new Error("RTCRtpSender not found");
                const n2 = r3.getParameters();
                n2.encodings.forEach((e4, r4) => {
                  n2.encodings[r4] = { ...e4, ...t3 };
                }), await r3.setParameters(n2);
              }
              async getSenderStats(e3) {
                const t3 = this._rtpSenders.get(e3);
                if (!t3)
                  throw new Error("RTCRtpSender not found");
                return t3.getStats();
              }
              async sendDataChannel(e3) {
                throw new o.UnsupportedError("not implemented");
              }
              async receive(e3) {
                const t3 = [];
                for (const t4 of e3) {
                  const { trackId: e4, kind: r3 } = t4;
                  u.debug("receive() [trackId:%s, kind:%s]", e4, r3);
                }
                this._transportReady || await this.setupTransport({ localDtlsRole: "server" });
                for (const r3 of e3) {
                  const { trackId: e4, kind: n2, rtpParameters: a2 } = r3;
                  u.debug("receive() | calling new RTCRtpReceiver()");
                  const i2 = new RTCRtpReceiver(this._dtlsTransport, n2);
                  i2.addEventListener("error", (e5) => {
                    u.error('rtpReceiver "error" event [event:%o]', e5);
                  });
                  const s2 = p.mangleRtpParameters(a2);
                  u.debug(
                    "receive() | calling rtpReceiver.receive() [params:%o]",
                    s2
                  ), await i2.receive(s2);
                  const o2 = e4;
                  this._rtpReceivers.set(o2, i2), t3.push({ localId: o2, track: i2.track, rtpReceiver: i2 });
                }
                return t3;
              }
              async stopReceiving(e3) {
                for (const t3 of e3) {
                  u.debug("stopReceiving() [localId:%s]", t3);
                  const e4 = this._rtpReceivers.get(t3);
                  if (!e4)
                    throw new Error("RTCRtpReceiver not found");
                  this._rtpReceivers.delete(t3);
                  try {
                    u.debug("stopReceiving() | calling rtpReceiver.stop()"), e4.stop();
                  } catch (e5) {
                    u.warn("stopReceiving() | rtpReceiver.stop() failed:%o", e5);
                  }
                }
              }
              async pauseReceiving(e3) {
              }
              async resumeReceiving(e3) {
              }
              async getReceiverStats(e3) {
                const t3 = this._rtpReceivers.get(e3);
                if (!t3)
                  throw new Error("RTCRtpReceiver not found");
                return t3.getStats();
              }
              async receiveDataChannel(e3) {
                throw new o.UnsupportedError("not implemented");
              }
              setIceGatherer({ iceServers: e3, iceTransportPolicy: t3 }) {
                const r3 = new RTCIceGatherer({
                  iceServers: e3 || [],
                  gatherPolicy: t3 || "all"
                });
                r3.addEventListener("error", (e4) => {
                  u.error('iceGatherer "error" event [event:%o]', e4);
                });
                try {
                  r3.gather();
                } catch (e4) {
                  u.debug(
                    "setIceGatherer() | iceGatherer.gather() failed: %s",
                    e4.toString()
                  );
                }
                this._iceGatherer = r3;
              }
              setIceTransport() {
                const e3 = new RTCIceTransport(this._iceGatherer);
                e3.addEventListener("statechange", () => {
                  switch (e3.state) {
                    case "checking":
                      this.emit("@connectionstatechange", "connecting");
                      break;
                    case "connected":
                    case "completed":
                      this.emit("@connectionstatechange", "connected");
                      break;
                    case "failed":
                      this.emit("@connectionstatechange", "failed");
                      break;
                    case "disconnected":
                      this.emit("@connectionstatechange", "disconnected");
                      break;
                    case "closed":
                      this.emit("@connectionstatechange", "closed");
                  }
                }), e3.addEventListener("icestatechange", () => {
                  switch (e3.state) {
                    case "checking":
                      this.emit("@connectionstatechange", "connecting");
                      break;
                    case "connected":
                    case "completed":
                      this.emit("@connectionstatechange", "connected");
                      break;
                    case "failed":
                      this.emit("@connectionstatechange", "failed");
                      break;
                    case "disconnected":
                      this.emit("@connectionstatechange", "disconnected");
                      break;
                    case "closed":
                      this.emit("@connectionstatechange", "closed");
                  }
                }), e3.addEventListener("candidatepairchange", (e4) => {
                  u.debug(
                    'iceTransport "candidatepairchange" event [pair:%o]',
                    e4.pair
                  );
                }), this._iceTransport = e3;
              }
              setDtlsTransport() {
                const e3 = new RTCDtlsTransport(this._iceTransport);
                e3.addEventListener("statechange", () => {
                  u.debug(
                    'dtlsTransport "statechange" event [state:%s]',
                    e3.state
                  );
                }), e3.addEventListener("dtlsstatechange", () => {
                  u.debug(
                    'dtlsTransport "dtlsstatechange" event [state:%s]',
                    e3.state
                  ), "closed" === e3.state && this.emit("@connectionstatechange", "closed");
                }), e3.addEventListener("error", (e4) => {
                  u.error('dtlsTransport "error" event [event:%o]', e4);
                }), this._dtlsTransport = e3;
              }
              async setupTransport({ localDtlsRole: e3 }) {
                u.debug("setupTransport()");
                const t3 = this._dtlsTransport.getLocalParameters();
                t3.role = e3, await new Promise((e4, r3) => {
                  this.safeEmit("@connect", { dtlsParameters: t3 }, e4, r3);
                }), this._iceTransport.start(
                  this._iceGatherer,
                  this._remoteIceParameters,
                  "controlling"
                );
                for (const e4 of this._remoteIceCandidates)
                  this._iceTransport.addRemoteCandidate(e4);
                this._iceTransport.addRemoteCandidate({}), this._remoteDtlsParameters.fingerprints = this._remoteDtlsParameters.fingerprints.filter(
                  (e4) => "sha-256" === e4.algorithm || "sha-384" === e4.algorithm || "sha-512" === e4.algorithm
                ), this._dtlsTransport.start(this._remoteDtlsParameters), this._transportReady = true;
              }
            }
            t2.Edge11 = h;
          },
          1419: function(e2, t2, r2) {
            "use strict";
            var n = this && this.__createBinding || (Object.create ? function(e3, t3, r3, n2) {
              void 0 === n2 && (n2 = r3);
              var a2 = Object.getOwnPropertyDescriptor(t3, r3);
              a2 && !("get" in a2 ? !t3.__esModule : a2.writable || a2.configurable) || (a2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, n2, a2);
            } : function(e3, t3, r3, n2) {
              void 0 === n2 && (n2 = r3), e3[n2] = t3[r3];
            }), a = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), i = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule)
                return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && n(t3, e3, r3);
              return a(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Firefox60 = void 0;
            const s = i(r2(766)), o = r2(8562), c = r2(9992), d = i(r2(3347)), p = i(r2(5280)), l = i(r2(2267)), u = i(r2(9072)), h = r2(9316), m = r2(7910), f = r2(2770), _ = new o.Logger("Firefox60"), g = { OS: 16, MIS: 2048 };
            class v extends h.HandlerInterface {
              static createFactory() {
                return () => new v();
              }
              constructor() {
                super(), this._mapMidTransceiver = /* @__PURE__ */ new Map(), this._sendStream = new MediaStream(), this._hasDataChannelMediaSection = false, this._nextSendSctpStreamId = 0, this._transportReady = false;
              }
              get name() {
                return "Firefox60";
              }
              close() {
                if (_.debug("close()"), this._pc)
                  try {
                    this._pc.close();
                  } catch (e3) {
                  }
                this.emit("@close");
              }
              async getNativeRtpCapabilities() {
                _.debug("getNativeRtpCapabilities()");
                const e3 = new RTCPeerConnection({
                  iceServers: [],
                  iceTransportPolicy: "all",
                  bundlePolicy: "max-bundle",
                  rtcpMuxPolicy: "require"
                }), t3 = document.createElement("canvas");
                t3.getContext("2d");
                const r3 = t3.captureStream().getVideoTracks()[0];
                try {
                  e3.addTransceiver("audio", { direction: "sendrecv" });
                  const n2 = e3.addTransceiver(r3, { direction: "sendrecv" }), a2 = n2.sender.getParameters(), i2 = [
                    { rid: "r0", maxBitrate: 1e5 },
                    { rid: "r1", maxBitrate: 5e5 }
                  ];
                  a2.encodings = i2, await n2.sender.setParameters(a2);
                  const o2 = await e3.createOffer();
                  try {
                    t3.remove();
                  } catch (e4) {
                  }
                  try {
                    r3.stop();
                  } catch (e4) {
                  }
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  const c2 = s.parse(o2.sdp);
                  return l.extractRtpCapabilities({ sdpObject: c2 });
                } catch (n2) {
                  try {
                    t3.remove();
                  } catch (e4) {
                  }
                  try {
                    r3.stop();
                  } catch (e4) {
                  }
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  throw n2;
                }
              }
              async getNativeSctpCapabilities() {
                return _.debug("getNativeSctpCapabilities()"), { numStreams: g };
              }
              run({
                direction: e3,
                iceParameters: t3,
                iceCandidates: r3,
                dtlsParameters: n2,
                sctpParameters: a2,
                iceServers: i2,
                iceTransportPolicy: s2,
                additionalSettings: o2,
                proprietaryConstraints: c2,
                extendedRtpCapabilities: d2
              }) {
                _.debug("run()"), this._direction = e3, this._remoteSdp = new m.RemoteSdp({
                  iceParameters: t3,
                  iceCandidates: r3,
                  dtlsParameters: n2,
                  sctpParameters: a2
                }), this._sendingRtpParametersByKind = {
                  audio: p.getSendingRtpParameters("audio", d2),
                  video: p.getSendingRtpParameters("video", d2)
                }, this._sendingRemoteRtpParametersByKind = {
                  audio: p.getSendingRemoteRtpParameters("audio", d2),
                  video: p.getSendingRemoteRtpParameters("video", d2)
                }, this._pc = new RTCPeerConnection(
                  {
                    iceServers: i2 || [],
                    iceTransportPolicy: s2 || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    ...o2
                  },
                  c2
                ), this._pc.connectionState ? this._pc.addEventListener("connectionstatechange", () => {
                  this.emit(
                    "@connectionstatechange",
                    this._pc.connectionState
                  );
                }) : this._pc.addEventListener(
                  "iceconnectionstatechange",
                  () => {
                    switch (_.warn(
                      "run() | pc.connectionState not supported, using pc.iceConnectionState"
                    ), this._pc.iceConnectionState) {
                      case "checking":
                        this.emit("@connectionstatechange", "connecting");
                        break;
                      case "connected":
                      case "completed":
                        this.emit("@connectionstatechange", "connected");
                        break;
                      case "failed":
                        this.emit("@connectionstatechange", "failed");
                        break;
                      case "disconnected":
                        this.emit("@connectionstatechange", "disconnected");
                        break;
                      case "closed":
                        this.emit("@connectionstatechange", "closed");
                    }
                  }
                );
              }
              async updateIceServers(e3) {
                throw new c.UnsupportedError("not supported");
              }
              async restartIce(e3) {
                if (_.debug("restartIce()"), this._remoteSdp.updateIceParameters(e3), this._transportReady)
                  if ("send" === this._direction) {
                    const e4 = await this._pc.createOffer({ iceRestart: true });
                    _.debug(
                      "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                      e4
                    ), await this._pc.setLocalDescription(e4);
                    const t3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                    _.debug(
                      "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                      t3
                    ), await this._pc.setRemoteDescription(t3);
                  } else {
                    const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                    _.debug(
                      "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                      e4
                    ), await this._pc.setRemoteDescription(e4);
                    const t3 = await this._pc.createAnswer();
                    _.debug(
                      "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                      t3
                    ), await this._pc.setLocalDescription(t3);
                  }
              }
              async getTransportStats() {
                return this._pc.getStats();
              }
              async send({ track: e3, encodings: t3, codecOptions: r3, codec: n2 }) {
                this.assertSendDirection(), _.debug("send() [kind:%s, track.id:%s]", e3.kind, e3.id), t3 && (t3 = d.clone(t3, [])).length > 1 && (t3.forEach((e4, t4) => {
                  e4.rid = `r${t4}`;
                }), t3.reverse());
                const a2 = d.clone(this._sendingRtpParametersByKind[e3.kind], {});
                a2.codecs = p.reduceCodecs(a2.codecs, n2);
                const i2 = d.clone(
                  this._sendingRemoteRtpParametersByKind[e3.kind],
                  {}
                );
                i2.codecs = p.reduceCodecs(i2.codecs, n2);
                const o2 = this._pc.addTransceiver(e3, {
                  direction: "sendonly",
                  streams: [this._sendStream]
                });
                if (t3) {
                  const e4 = o2.sender.getParameters();
                  e4.encodings = t3, await o2.sender.setParameters(e4);
                }
                const c2 = await this._pc.createOffer();
                let h2 = s.parse(c2.sdp);
                this._transportReady || await this.setupTransport({
                  localDtlsRole: "client",
                  localSdpObject: h2
                });
                const m2 = (0, f.parse)((t3 || [{}])[0].scalabilityMode);
                _.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  c2
                ), await this._pc.setLocalDescription(c2);
                const g2 = o2.mid;
                a2.mid = g2, h2 = s.parse(this._pc.localDescription.sdp);
                const v2 = h2.media[h2.media.length - 1];
                if (a2.rtcp.cname = l.getCname({ offerMediaObject: v2 }), t3)
                  if (1 === t3.length) {
                    const e4 = u.getRtpEncodings({ offerMediaObject: v2 });
                    Object.assign(e4[0], t3[0]), a2.encodings = e4;
                  } else
                    a2.encodings = t3.reverse();
                else
                  a2.encodings = u.getRtpEncodings({ offerMediaObject: v2 });
                if (a2.encodings.length > 1 && ("video/vp8" === a2.codecs[0].mimeType.toLowerCase() || "video/h264" === a2.codecs[0].mimeType.toLowerCase()))
                  for (const e4 of a2.encodings)
                    e4.scalabilityMode ? e4.scalabilityMode = `L1T${m2.temporalLayers}` : e4.scalabilityMode = "L1T3";
                this._remoteSdp.send({
                  offerMediaObject: v2,
                  offerRtpParameters: a2,
                  answerRtpParameters: i2,
                  codecOptions: r3,
                  extmapAllowMixed: true
                });
                const y = { type: "answer", sdp: this._remoteSdp.getSdp() };
                return _.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  y
                ), await this._pc.setRemoteDescription(y), this._mapMidTransceiver.set(g2, o2), { localId: g2, rtpParameters: a2, rtpSender: o2.sender };
              }
              async stopSending(e3) {
                _.debug("stopSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3)
                  throw new Error("associated transceiver not found");
                t3.sender.replaceTrack(null), this._pc.removeTrack(t3.sender), this._remoteSdp.disableMediaSection(t3.mid);
                const r3 = await this._pc.createOffer();
                _.debug(
                  "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const n2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n2
                ), await this._pc.setRemoteDescription(n2), this._mapMidTransceiver.delete(e3);
              }
              async pauseSending(e3) {
                this.assertSendDirection(), _.debug("pauseSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3)
                  throw new Error("associated RTCRtpTransceiver not found");
                t3.direction = "inactive", this._remoteSdp.pauseMediaSection(e3);
                const r3 = await this._pc.createOffer();
                _.debug(
                  "pauseSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const n2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "pauseSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n2
                ), await this._pc.setRemoteDescription(n2);
              }
              async resumeSending(e3) {
                this.assertSendDirection(), _.debug("resumeSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3)
                  throw new Error("associated RTCRtpTransceiver not found");
                t3.direction = "sendonly", this._remoteSdp.resumeSendingMediaSection(e3);
                const r3 = await this._pc.createOffer();
                _.debug(
                  "resumeSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const n2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "resumeSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n2
                ), await this._pc.setRemoteDescription(n2);
              }
              async replaceTrack(e3, t3) {
                this.assertSendDirection(), t3 ? _.debug("replaceTrack() [localId:%s, track.id:%s]", e3, t3.id) : _.debug("replaceTrack() [localId:%s, no track]", e3);
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3)
                  throw new Error("associated RTCRtpTransceiver not found");
                await r3.sender.replaceTrack(t3);
              }
              async setMaxSpatialLayer(e3, t3) {
                this.assertSendDirection(), _.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e3,
                  t3
                );
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3)
                  throw new Error("associated transceiver not found");
                const n2 = r3.sender.getParameters();
                t3 = n2.encodings.length - 1 - t3, n2.encodings.forEach((e4, r4) => {
                  e4.active = r4 >= t3;
                }), await r3.sender.setParameters(n2), this._remoteSdp.muxMediaSectionSimulcast(e3, n2.encodings);
                const a2 = await this._pc.createOffer();
                _.debug(
                  "setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]",
                  a2
                ), await this._pc.setLocalDescription(a2);
                const i2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]",
                  i2
                ), await this._pc.setRemoteDescription(i2);
              }
              async setRtpEncodingParameters(e3, t3) {
                this.assertSendDirection(), _.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e3,
                  t3
                );
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3)
                  throw new Error("associated RTCRtpTransceiver not found");
                const n2 = r3.sender.getParameters();
                n2.encodings.forEach((e4, r4) => {
                  n2.encodings[r4] = { ...e4, ...t3 };
                }), await r3.sender.setParameters(n2), this._remoteSdp.muxMediaSectionSimulcast(e3, n2.encodings);
                const a2 = await this._pc.createOffer();
                _.debug(
                  "setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]",
                  a2
                ), await this._pc.setLocalDescription(a2);
                const i2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]",
                  i2
                ), await this._pc.setRemoteDescription(i2);
              }
              async getSenderStats(e3) {
                this.assertSendDirection();
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3)
                  throw new Error("associated RTCRtpTransceiver not found");
                return t3.sender.getStats();
              }
              async sendDataChannel({
                ordered: e3,
                maxPacketLifeTime: t3,
                maxRetransmits: r3,
                label: n2,
                protocol: a2
              }) {
                this.assertSendDirection();
                const i2 = {
                  negotiated: true,
                  id: this._nextSendSctpStreamId,
                  ordered: e3,
                  maxPacketLifeTime: t3,
                  maxRetransmits: r3,
                  protocol: a2
                };
                _.debug("sendDataChannel() [options:%o]", i2);
                const o2 = this._pc.createDataChannel(n2, i2);
                if (this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % g.MIS, !this._hasDataChannelMediaSection) {
                  const e4 = await this._pc.createOffer(), t4 = s.parse(e4.sdp), r4 = t4.media.find((e5) => "application" === e5.type);
                  this._transportReady || await this.setupTransport({
                    localDtlsRole: "client",
                    localSdpObject: t4
                  }), _.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e4
                  ), await this._pc.setLocalDescription(e4), this._remoteSdp.sendSctpAssociation({ offerMediaObject: r4 });
                  const n3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  _.debug(
                    "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    n3
                  ), await this._pc.setRemoteDescription(n3), this._hasDataChannelMediaSection = true;
                }
                return {
                  dataChannel: o2,
                  sctpStreamParameters: {
                    streamId: i2.id,
                    ordered: i2.ordered,
                    maxPacketLifeTime: i2.maxPacketLifeTime,
                    maxRetransmits: i2.maxRetransmits
                  }
                };
              }
              async receive(e3) {
                this.assertRecvDirection();
                const t3 = [], r3 = /* @__PURE__ */ new Map();
                for (const t4 of e3) {
                  const {
                    trackId: e4,
                    kind: n3,
                    rtpParameters: a3,
                    streamId: i3
                  } = t4;
                  _.debug("receive() [trackId:%s, kind:%s]", e4, n3);
                  const s2 = a3.mid || String(this._mapMidTransceiver.size);
                  r3.set(e4, s2), this._remoteSdp.receive({
                    mid: s2,
                    kind: n3,
                    offerRtpParameters: a3,
                    streamId: i3 || a3.rtcp.cname,
                    trackId: e4
                  });
                }
                const n2 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "receive() | calling pc.setRemoteDescription() [offer:%o]",
                  n2
                ), await this._pc.setRemoteDescription(n2);
                let a2 = await this._pc.createAnswer();
                const i2 = s.parse(a2.sdp);
                for (const t4 of e3) {
                  const { trackId: e4, rtpParameters: n3 } = t4, o2 = r3.get(e4), c2 = i2.media.find((e5) => String(e5.mid) === o2);
                  l.applyCodecParameters({
                    offerRtpParameters: n3,
                    answerMediaObject: c2
                  }), a2 = { type: "answer", sdp: s.write(i2) };
                }
                this._transportReady || await this.setupTransport({
                  localDtlsRole: "client",
                  localSdpObject: i2
                }), _.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  a2
                ), await this._pc.setLocalDescription(a2);
                for (const n3 of e3) {
                  const { trackId: e4 } = n3, a3 = r3.get(e4), i3 = this._pc.getTransceivers().find((e5) => e5.mid === a3);
                  if (!i3)
                    throw new Error("new RTCRtpTransceiver not found");
                  this._mapMidTransceiver.set(a3, i3), t3.push({
                    localId: a3,
                    track: i3.receiver.track,
                    rtpReceiver: i3.receiver
                  });
                }
                return t3;
              }
              async stopReceiving(e3) {
                this.assertRecvDirection();
                for (const t4 of e3) {
                  _.debug("stopReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  this._remoteSdp.closeMediaSection(e4.mid);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                _.debug(
                  "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                for (const t4 of e3)
                  this._mapMidTransceiver.delete(t4);
              }
              async pauseReceiving(e3) {
                this.assertRecvDirection();
                for (const t4 of e3) {
                  _.debug("pauseReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  e4.direction = "inactive", this._remoteSdp.pauseMediaSection(t4);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                _.debug(
                  "pauseReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async resumeReceiving(e3) {
                this.assertRecvDirection();
                for (const t4 of e3) {
                  _.debug("resumeReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  e4.direction = "recvonly", this._remoteSdp.resumeReceivingMediaSection(t4);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                _.debug(
                  "resumeReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async getReceiverStats(e3) {
                this.assertRecvDirection();
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3)
                  throw new Error("associated RTCRtpTransceiver not found");
                return t3.receiver.getStats();
              }
              async receiveDataChannel({
                sctpStreamParameters: e3,
                label: t3,
                protocol: r3
              }) {
                this.assertRecvDirection();
                const {
                  streamId: n2,
                  ordered: a2,
                  maxPacketLifeTime: i2,
                  maxRetransmits: o2
                } = e3, c2 = {
                  negotiated: true,
                  id: n2,
                  ordered: a2,
                  maxPacketLifeTime: i2,
                  maxRetransmits: o2,
                  protocol: r3
                };
                _.debug("receiveDataChannel() [options:%o]", c2);
                const d2 = this._pc.createDataChannel(t3, c2);
                if (!this._hasDataChannelMediaSection) {
                  this._remoteSdp.receiveSctpAssociation();
                  const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  _.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                    e4
                  ), await this._pc.setRemoteDescription(e4);
                  const t4 = await this._pc.createAnswer();
                  if (!this._transportReady) {
                    const e5 = s.parse(t4.sdp);
                    await this.setupTransport({
                      localDtlsRole: "client",
                      localSdpObject: e5
                    });
                  }
                  _.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    t4
                  ), await this._pc.setLocalDescription(t4), this._hasDataChannelMediaSection = true;
                }
                return { dataChannel: d2 };
              }
              async setupTransport({ localDtlsRole: e3, localSdpObject: t3 }) {
                t3 || (t3 = s.parse(this._pc.localDescription.sdp));
                const r3 = l.extractDtlsParameters({ sdpObject: t3 });
                r3.role = e3, this._remoteSdp.updateDtlsRole(
                  "client" === e3 ? "server" : "client"
                ), await new Promise((e4, t4) => {
                  this.safeEmit("@connect", { dtlsParameters: r3 }, e4, t4);
                }), this._transportReady = true;
              }
              assertSendDirection() {
                if ("send" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "send" direction'
                  );
              }
              assertRecvDirection() {
                if ("recv" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "recv" direction'
                  );
              }
            }
            t2.Firefox60 = v;
          },
          9316: (e2, t2, r2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.HandlerInterface = void 0;
            const n = r2(4493);
            class a extends n.EnhancedEventEmitter {
              constructor() {
                super();
              }
            }
            t2.HandlerInterface = a;
          },
          4770: function(e2, t2, r2) {
            "use strict";
            var n = this && this.__createBinding || (Object.create ? function(e3, t3, r3, n2) {
              void 0 === n2 && (n2 = r3);
              var a2 = Object.getOwnPropertyDescriptor(t3, r3);
              a2 && !("get" in a2 ? !t3.__esModule : a2.writable || a2.configurable) || (a2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, n2, a2);
            } : function(e3, t3, r3, n2) {
              void 0 === n2 && (n2 = r3), e3[n2] = t3[r3];
            }), a = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), i = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule)
                return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && n(t3, e3, r3);
              return a(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.ReactNative = void 0;
            const s = i(r2(766)), o = r2(8562), c = r2(9992), d = i(r2(3347)), p = i(r2(5280)), l = i(r2(2267)), u = i(r2(9875)), h = r2(9316), m = r2(7910), f = new o.Logger("ReactNative"), _ = { OS: 1024, MIS: 1024 };
            class g extends h.HandlerInterface {
              static createFactory() {
                return () => new g();
              }
              constructor() {
                super(), this._sendStream = new MediaStream(), this._mapSendLocalIdTrack = /* @__PURE__ */ new Map(), this._nextSendLocalId = 0, this._mapRecvLocalIdInfo = /* @__PURE__ */ new Map(), this._hasDataChannelMediaSection = false, this._nextSendSctpStreamId = 0, this._transportReady = false;
              }
              get name() {
                return "ReactNative";
              }
              close() {
                if (f.debug("close()"), this._sendStream.release(false), this._pc)
                  try {
                    this._pc.close();
                  } catch (e3) {
                  }
                this.emit("@close");
              }
              async getNativeRtpCapabilities() {
                f.debug("getNativeRtpCapabilities()");
                const e3 = new RTCPeerConnection({
                  iceServers: [],
                  iceTransportPolicy: "all",
                  bundlePolicy: "max-bundle",
                  rtcpMuxPolicy: "require",
                  sdpSemantics: "plan-b"
                });
                try {
                  const t3 = await e3.createOffer({
                    offerToReceiveAudio: true,
                    offerToReceiveVideo: true
                  });
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  const r3 = s.parse(t3.sdp);
                  return l.extractRtpCapabilities({ sdpObject: r3 });
                } catch (t3) {
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  throw t3;
                }
              }
              async getNativeSctpCapabilities() {
                return f.debug("getNativeSctpCapabilities()"), { numStreams: _ };
              }
              run({
                direction: e3,
                iceParameters: t3,
                iceCandidates: r3,
                dtlsParameters: n2,
                sctpParameters: a2,
                iceServers: i2,
                iceTransportPolicy: s2,
                additionalSettings: o2,
                proprietaryConstraints: c2,
                extendedRtpCapabilities: d2
              }) {
                f.debug("run()"), this._direction = e3, this._remoteSdp = new m.RemoteSdp({
                  iceParameters: t3,
                  iceCandidates: r3,
                  dtlsParameters: n2,
                  sctpParameters: a2,
                  planB: true
                }), this._sendingRtpParametersByKind = {
                  audio: p.getSendingRtpParameters("audio", d2),
                  video: p.getSendingRtpParameters("video", d2)
                }, this._sendingRemoteRtpParametersByKind = {
                  audio: p.getSendingRemoteRtpParameters("audio", d2),
                  video: p.getSendingRemoteRtpParameters("video", d2)
                }, n2.role && "auto" !== n2.role && (this._forcedLocalDtlsRole = "server" === n2.role ? "client" : "server"), this._pc = new RTCPeerConnection(
                  {
                    iceServers: i2 || [],
                    iceTransportPolicy: s2 || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "plan-b",
                    ...o2
                  },
                  c2
                ), this._pc.connectionState ? this._pc.addEventListener("connectionstatechange", () => {
                  this.emit(
                    "@connectionstatechange",
                    this._pc.connectionState
                  );
                }) : this._pc.addEventListener(
                  "iceconnectionstatechange",
                  () => {
                    switch (f.warn(
                      "run() | pc.connectionState not supported, using pc.iceConnectionState"
                    ), this._pc.iceConnectionState) {
                      case "checking":
                        this.emit("@connectionstatechange", "connecting");
                        break;
                      case "connected":
                      case "completed":
                        this.emit("@connectionstatechange", "connected");
                        break;
                      case "failed":
                        this.emit("@connectionstatechange", "failed");
                        break;
                      case "disconnected":
                        this.emit("@connectionstatechange", "disconnected");
                        break;
                      case "closed":
                        this.emit("@connectionstatechange", "closed");
                    }
                  }
                );
              }
              async updateIceServers(e3) {
                f.debug("updateIceServers()");
                const t3 = this._pc.getConfiguration();
                t3.iceServers = e3, this._pc.setConfiguration(t3);
              }
              async restartIce(e3) {
                if (f.debug("restartIce()"), this._remoteSdp.updateIceParameters(e3), this._transportReady)
                  if ("send" === this._direction) {
                    const e4 = await this._pc.createOffer({ iceRestart: true });
                    f.debug(
                      "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                      e4
                    ), await this._pc.setLocalDescription(e4);
                    const t3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                    f.debug(
                      "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                      t3
                    ), await this._pc.setRemoteDescription(t3);
                  } else {
                    const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                    f.debug(
                      "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                      e4
                    ), await this._pc.setRemoteDescription(e4);
                    const t3 = await this._pc.createAnswer();
                    f.debug(
                      "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                      t3
                    ), await this._pc.setLocalDescription(t3);
                  }
              }
              async getTransportStats() {
                return this._pc.getStats();
              }
              async send({ track: e3, encodings: t3, codecOptions: r3, codec: n2 }) {
                var a2;
                this.assertSendDirection(), f.debug("send() [kind:%s, track.id:%s]", e3.kind, e3.id), n2 && f.warn(
                  "send() | codec selection is not available in %s handler",
                  this.name
                ), this._sendStream.addTrack(e3), this._pc.addStream(this._sendStream);
                let i2, o2 = await this._pc.createOffer(), c2 = s.parse(o2.sdp);
                const h2 = d.clone(this._sendingRtpParametersByKind[e3.kind], {});
                h2.codecs = p.reduceCodecs(h2.codecs);
                const m2 = d.clone(
                  this._sendingRemoteRtpParametersByKind[e3.kind],
                  {}
                );
                if (m2.codecs = p.reduceCodecs(m2.codecs), this._transportReady || await this.setupTransport({
                  localDtlsRole: null !== (a2 = this._forcedLocalDtlsRole) && void 0 !== a2 ? a2 : "client",
                  localSdpObject: c2
                }), "video" === e3.kind && t3 && t3.length > 1 && (f.debug("send() | enabling simulcast"), c2 = s.parse(o2.sdp), i2 = c2.media.find((e4) => "video" === e4.type), u.addLegacySimulcast({
                  offerMediaObject: i2,
                  track: e3,
                  numStreams: t3.length
                }), o2 = { type: "offer", sdp: s.write(c2) }), f.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  o2
                ), await this._pc.setLocalDescription(o2), c2 = s.parse(this._pc.localDescription.sdp), i2 = c2.media.find((t4) => t4.type === e3.kind), h2.rtcp.cname = l.getCname({ offerMediaObject: i2 }), h2.encodings = u.getRtpEncodings({
                  offerMediaObject: i2,
                  track: e3
                }), t3)
                  for (let e4 = 0; e4 < h2.encodings.length; ++e4)
                    t3[e4] && Object.assign(h2.encodings[e4], t3[e4]);
                if (h2.encodings.length > 1 && ("video/vp8" === h2.codecs[0].mimeType.toLowerCase() || "video/h264" === h2.codecs[0].mimeType.toLowerCase()))
                  for (const e4 of h2.encodings)
                    e4.scalabilityMode = "L1T3";
                this._remoteSdp.send({
                  offerMediaObject: i2,
                  offerRtpParameters: h2,
                  answerRtpParameters: m2,
                  codecOptions: r3
                });
                const _2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  _2
                ), await this._pc.setRemoteDescription(_2);
                const g2 = String(this._nextSendLocalId);
                return this._nextSendLocalId++, this._mapSendLocalIdTrack.set(g2, e3), { localId: g2, rtpParameters: h2 };
              }
              async stopSending(e3) {
                this.assertSendDirection(), f.debug("stopSending() [localId:%s]", e3);
                const t3 = this._mapSendLocalIdTrack.get(e3);
                if (!t3)
                  throw new Error("track not found");
                this._mapSendLocalIdTrack.delete(e3), this._sendStream.removeTrack(t3), this._pc.addStream(this._sendStream);
                const r3 = await this._pc.createOffer();
                f.debug(
                  "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                );
                try {
                  await this._pc.setLocalDescription(r3);
                } catch (e4) {
                  if (0 === this._sendStream.getTracks().length)
                    return void f.warn(
                      "stopSending() | ignoring expected error due no sending tracks: %s",
                      e4.toString()
                    );
                  throw e4;
                }
                if ("stable" === this._pc.signalingState)
                  return;
                const n2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n2
                ), await this._pc.setRemoteDescription(n2);
              }
              async pauseSending(e3) {
              }
              async resumeSending(e3) {
              }
              async replaceTrack(e3, t3) {
                throw new c.UnsupportedError("not implemented");
              }
              async setMaxSpatialLayer(e3, t3) {
                throw new c.UnsupportedError("not implemented");
              }
              async setRtpEncodingParameters(e3, t3) {
                throw new c.UnsupportedError("not implemented");
              }
              async getSenderStats(e3) {
                throw new c.UnsupportedError("not implemented");
              }
              async sendDataChannel({
                ordered: e3,
                maxPacketLifeTime: t3,
                maxRetransmits: r3,
                label: n2,
                protocol: a2
              }) {
                var i2;
                this.assertSendDirection();
                const o2 = {
                  negotiated: true,
                  id: this._nextSendSctpStreamId,
                  ordered: e3,
                  maxPacketLifeTime: t3,
                  maxRetransmitTime: t3,
                  maxRetransmits: r3,
                  protocol: a2
                };
                f.debug("sendDataChannel() [options:%o]", o2);
                const c2 = this._pc.createDataChannel(n2, o2);
                if (this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % _.MIS, !this._hasDataChannelMediaSection) {
                  const e4 = await this._pc.createOffer(), t4 = s.parse(e4.sdp), r4 = t4.media.find((e5) => "application" === e5.type);
                  this._transportReady || await this.setupTransport({
                    localDtlsRole: null !== (i2 = this._forcedLocalDtlsRole) && void 0 !== i2 ? i2 : "client",
                    localSdpObject: t4
                  }), f.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e4
                  ), await this._pc.setLocalDescription(e4), this._remoteSdp.sendSctpAssociation({ offerMediaObject: r4 });
                  const n3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    n3
                  ), await this._pc.setRemoteDescription(n3), this._hasDataChannelMediaSection = true;
                }
                return {
                  dataChannel: c2,
                  sctpStreamParameters: {
                    streamId: o2.id,
                    ordered: o2.ordered,
                    maxPacketLifeTime: o2.maxPacketLifeTime,
                    maxRetransmits: o2.maxRetransmits
                  }
                };
              }
              async receive(e3) {
                var t3;
                this.assertRecvDirection();
                const r3 = [], n2 = /* @__PURE__ */ new Map();
                for (const t4 of e3) {
                  const { trackId: e4, kind: r4, rtpParameters: a3 } = t4;
                  f.debug("receive() [trackId:%s, kind:%s]", e4, r4);
                  const i3 = r4;
                  let s2 = t4.streamId || a3.rtcp.cname;
                  f.debug(
                    "receive() | forcing a random remote streamId to avoid well known bug in react-native-webrtc"
                  ), s2 += `-hack-${d.generateRandomNumber()}`, n2.set(e4, s2), this._remoteSdp.receive({
                    mid: i3,
                    kind: r4,
                    offerRtpParameters: a3,
                    streamId: s2,
                    trackId: e4
                  });
                }
                const a2 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "receive() | calling pc.setRemoteDescription() [offer:%o]",
                  a2
                ), await this._pc.setRemoteDescription(a2);
                let i2 = await this._pc.createAnswer();
                const o2 = s.parse(i2.sdp);
                for (const t4 of e3) {
                  const { kind: e4, rtpParameters: r4 } = t4, n3 = e4, a3 = o2.media.find((e5) => String(e5.mid) === n3);
                  l.applyCodecParameters({
                    offerRtpParameters: r4,
                    answerMediaObject: a3
                  });
                }
                i2 = { type: "answer", sdp: s.write(o2) }, this._transportReady || await this.setupTransport({
                  localDtlsRole: null !== (t3 = this._forcedLocalDtlsRole) && void 0 !== t3 ? t3 : "client",
                  localSdpObject: o2
                }), f.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  i2
                ), await this._pc.setLocalDescription(i2);
                for (const t4 of e3) {
                  const { kind: e4, trackId: a3, rtpParameters: i3 } = t4, s2 = a3, o3 = e4, c2 = n2.get(a3), d2 = this._pc.getRemoteStreams().find((e5) => e5.id === c2).getTrackById(s2);
                  if (!d2)
                    throw new Error("remote track not found");
                  this._mapRecvLocalIdInfo.set(s2, { mid: o3, rtpParameters: i3 }), r3.push({ localId: s2, track: d2 });
                }
                return r3;
              }
              async stopReceiving(e3) {
                this.assertRecvDirection();
                for (const t4 of e3) {
                  f.debug("stopReceiving() [localId:%s]", t4);
                  const { mid: e4, rtpParameters: r4 } = this._mapRecvLocalIdInfo.get(t4) || {};
                  this._mapRecvLocalIdInfo.delete(t4), this._remoteSdp.planBStopReceiving({
                    mid: e4,
                    offerRtpParameters: r4
                  });
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                f.debug(
                  "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async pauseReceiving(e3) {
              }
              async resumeReceiving(e3) {
              }
              async getReceiverStats(e3) {
                throw new c.UnsupportedError("not implemented");
              }
              async receiveDataChannel({
                sctpStreamParameters: e3,
                label: t3,
                protocol: r3
              }) {
                var n2;
                this.assertRecvDirection();
                const {
                  streamId: a2,
                  ordered: i2,
                  maxPacketLifeTime: o2,
                  maxRetransmits: c2
                } = e3, d2 = {
                  negotiated: true,
                  id: a2,
                  ordered: i2,
                  maxPacketLifeTime: o2,
                  maxRetransmitTime: o2,
                  maxRetransmits: c2,
                  protocol: r3
                };
                f.debug("receiveDataChannel() [options:%o]", d2);
                const p2 = this._pc.createDataChannel(t3, d2);
                if (!this._hasDataChannelMediaSection) {
                  this._remoteSdp.receiveSctpAssociation({
                    oldDataChannelSpec: true
                  });
                  const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                    e4
                  ), await this._pc.setRemoteDescription(e4);
                  const t4 = await this._pc.createAnswer();
                  if (!this._transportReady) {
                    const e5 = s.parse(t4.sdp);
                    await this.setupTransport({
                      localDtlsRole: null !== (n2 = this._forcedLocalDtlsRole) && void 0 !== n2 ? n2 : "client",
                      localSdpObject: e5
                    });
                  }
                  f.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    t4
                  ), await this._pc.setLocalDescription(t4), this._hasDataChannelMediaSection = true;
                }
                return { dataChannel: p2 };
              }
              async setupTransport({ localDtlsRole: e3, localSdpObject: t3 }) {
                t3 || (t3 = s.parse(this._pc.localDescription.sdp));
                const r3 = l.extractDtlsParameters({ sdpObject: t3 });
                r3.role = e3, this._remoteSdp.updateDtlsRole(
                  "client" === e3 ? "server" : "client"
                ), await new Promise((e4, t4) => {
                  this.safeEmit("@connect", { dtlsParameters: r3 }, e4, t4);
                }), this._transportReady = true;
              }
              assertSendDirection() {
                if ("send" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "send" direction'
                  );
              }
              assertRecvDirection() {
                if ("recv" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "recv" direction'
                  );
              }
            }
            t2.ReactNative = g;
          },
          3433: function(e2, t2, r2) {
            "use strict";
            var n = this && this.__createBinding || (Object.create ? function(e3, t3, r3, n2) {
              void 0 === n2 && (n2 = r3);
              var a2 = Object.getOwnPropertyDescriptor(t3, r3);
              a2 && !("get" in a2 ? !t3.__esModule : a2.writable || a2.configurable) || (a2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, n2, a2);
            } : function(e3, t3, r3, n2) {
              void 0 === n2 && (n2 = r3), e3[n2] = t3[r3];
            }), a = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), i = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule)
                return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && n(t3, e3, r3);
              return a(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.ReactNativeUnifiedPlan = void 0;
            const s = i(r2(766)), o = r2(8562), c = i(r2(3347)), d = i(r2(5280)), p = i(r2(2267)), l = i(r2(9072)), u = i(r2(8954)), h = r2(9316), m = r2(7910), f = r2(2770), _ = new o.Logger("ReactNativeUnifiedPlan"), g = { OS: 1024, MIS: 1024 };
            class v extends h.HandlerInterface {
              static createFactory() {
                return () => new v();
              }
              constructor() {
                super(), this._mapMidTransceiver = /* @__PURE__ */ new Map(), this._sendStream = new MediaStream(), this._hasDataChannelMediaSection = false, this._nextSendSctpStreamId = 0, this._transportReady = false;
              }
              get name() {
                return "ReactNativeUnifiedPlan";
              }
              close() {
                if (_.debug("close()"), this._sendStream.release(false), this._pc)
                  try {
                    this._pc.close();
                  } catch (e3) {
                  }
                this.emit("@close");
              }
              async getNativeRtpCapabilities() {
                _.debug("getNativeRtpCapabilities()");
                const e3 = new RTCPeerConnection({
                  iceServers: [],
                  iceTransportPolicy: "all",
                  bundlePolicy: "max-bundle",
                  rtcpMuxPolicy: "require",
                  sdpSemantics: "unified-plan"
                });
                try {
                  e3.addTransceiver("audio"), e3.addTransceiver("video");
                  const t3 = await e3.createOffer();
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  const r3 = s.parse(t3.sdp), n2 = p.extractRtpCapabilities({ sdpObject: r3 });
                  return u.addNackSuppportForOpus(n2), n2;
                } catch (t3) {
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  throw t3;
                }
              }
              async getNativeSctpCapabilities() {
                return _.debug("getNativeSctpCapabilities()"), { numStreams: g };
              }
              run({
                direction: e3,
                iceParameters: t3,
                iceCandidates: r3,
                dtlsParameters: n2,
                sctpParameters: a2,
                iceServers: i2,
                iceTransportPolicy: s2,
                additionalSettings: o2,
                proprietaryConstraints: c2,
                extendedRtpCapabilities: p2
              }) {
                _.debug("run()"), this._direction = e3, this._remoteSdp = new m.RemoteSdp({
                  iceParameters: t3,
                  iceCandidates: r3,
                  dtlsParameters: n2,
                  sctpParameters: a2
                }), this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", p2),
                  video: d.getSendingRtpParameters("video", p2)
                }, this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", p2),
                  video: d.getSendingRemoteRtpParameters("video", p2)
                }, n2.role && "auto" !== n2.role && (this._forcedLocalDtlsRole = "server" === n2.role ? "client" : "server"), this._pc = new RTCPeerConnection(
                  {
                    iceServers: i2 || [],
                    iceTransportPolicy: s2 || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "unified-plan",
                    ...o2
                  },
                  c2
                ), this._pc.connectionState ? this._pc.addEventListener("connectionstatechange", () => {
                  this.emit(
                    "@connectionstatechange",
                    this._pc.connectionState
                  );
                }) : this._pc.addEventListener(
                  "iceconnectionstatechange",
                  () => {
                    switch (_.warn(
                      "run() | pc.connectionState not supported, using pc.iceConnectionState"
                    ), this._pc.iceConnectionState) {
                      case "checking":
                        this.emit("@connectionstatechange", "connecting");
                        break;
                      case "connected":
                      case "completed":
                        this.emit("@connectionstatechange", "connected");
                        break;
                      case "failed":
                        this.emit("@connectionstatechange", "failed");
                        break;
                      case "disconnected":
                        this.emit("@connectionstatechange", "disconnected");
                        break;
                      case "closed":
                        this.emit("@connectionstatechange", "closed");
                    }
                  }
                );
              }
              async updateIceServers(e3) {
                _.debug("updateIceServers()");
                const t3 = this._pc.getConfiguration();
                t3.iceServers = e3, this._pc.setConfiguration(t3);
              }
              async restartIce(e3) {
                if (_.debug("restartIce()"), this._remoteSdp.updateIceParameters(e3), this._transportReady)
                  if ("send" === this._direction) {
                    const e4 = await this._pc.createOffer({ iceRestart: true });
                    _.debug(
                      "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                      e4
                    ), await this._pc.setLocalDescription(e4);
                    const t3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                    _.debug(
                      "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                      t3
                    ), await this._pc.setRemoteDescription(t3);
                  } else {
                    const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                    _.debug(
                      "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                      e4
                    ), await this._pc.setRemoteDescription(e4);
                    const t3 = await this._pc.createAnswer();
                    _.debug(
                      "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                      t3
                    ), await this._pc.setLocalDescription(t3);
                  }
              }
              async getTransportStats() {
                return this._pc.getStats();
              }
              async send({ track: e3, encodings: t3, codecOptions: r3, codec: n2 }) {
                var a2;
                this.assertSendDirection(), _.debug("send() [kind:%s, track.id:%s]", e3.kind, e3.id), t3 && t3.length > 1 && t3.forEach((e4, t4) => {
                  e4.rid = `r${t4}`;
                });
                const i2 = c.clone(this._sendingRtpParametersByKind[e3.kind], {});
                i2.codecs = d.reduceCodecs(i2.codecs, n2);
                const o2 = c.clone(
                  this._sendingRemoteRtpParametersByKind[e3.kind],
                  {}
                );
                o2.codecs = d.reduceCodecs(o2.codecs, n2);
                const u2 = this._remoteSdp.getNextMediaSectionIdx(), h2 = this._pc.addTransceiver(e3, {
                  direction: "sendonly",
                  streams: [this._sendStream],
                  sendEncodings: t3
                });
                let m2, g2 = await this._pc.createOffer(), v2 = s.parse(g2.sdp);
                this._transportReady || await this.setupTransport({
                  localDtlsRole: null !== (a2 = this._forcedLocalDtlsRole) && void 0 !== a2 ? a2 : "client",
                  localSdpObject: v2
                });
                let y = false;
                const b = (0, f.parse)((t3 || [{}])[0].scalabilityMode);
                t3 && 1 === t3.length && b.spatialLayers > 1 && "video/vp9" === i2.codecs[0].mimeType.toLowerCase() && (_.debug("send() | enabling legacy simulcast for VP9 SVC"), y = true, v2 = s.parse(g2.sdp), m2 = v2.media[u2.idx], l.addLegacySimulcast({
                  offerMediaObject: m2,
                  numStreams: b.spatialLayers
                }), g2 = { type: "offer", sdp: s.write(v2) }), _.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  g2
                ), await this._pc.setLocalDescription(g2);
                const S = h2.mid;
                if (i2.mid = S, v2 = s.parse(this._pc.localDescription.sdp), m2 = v2.media[u2.idx], i2.rtcp.cname = p.getCname({ offerMediaObject: m2 }), t3)
                  if (1 === t3.length) {
                    let e4 = l.getRtpEncodings({ offerMediaObject: m2 });
                    Object.assign(e4[0], t3[0]), y && (e4 = [e4[0]]), i2.encodings = e4;
                  } else
                    i2.encodings = t3;
                else
                  i2.encodings = l.getRtpEncodings({ offerMediaObject: m2 });
                if (i2.encodings.length > 1 && ("video/vp8" === i2.codecs[0].mimeType.toLowerCase() || "video/h264" === i2.codecs[0].mimeType.toLowerCase()))
                  for (const e4 of i2.encodings)
                    e4.scalabilityMode ? e4.scalabilityMode = `L1T${b.temporalLayers}` : e4.scalabilityMode = "L1T3";
                this._remoteSdp.send({
                  offerMediaObject: m2,
                  reuseMid: u2.reuseMid,
                  offerRtpParameters: i2,
                  answerRtpParameters: o2,
                  codecOptions: r3,
                  extmapAllowMixed: true
                });
                const w = { type: "answer", sdp: this._remoteSdp.getSdp() };
                return _.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  w
                ), await this._pc.setRemoteDescription(w), this._mapMidTransceiver.set(S, h2), { localId: S, rtpParameters: i2, rtpSender: h2.sender };
              }
              async stopSending(e3) {
                this.assertSendDirection(), _.debug("stopSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3)
                  throw new Error("associated RTCRtpTransceiver not found");
                t3.sender.replaceTrack(null), this._pc.removeTrack(t3.sender);
                if (this._remoteSdp.closeMediaSection(t3.mid))
                  try {
                    t3.stop();
                  } catch (e4) {
                  }
                const r3 = await this._pc.createOffer();
                _.debug(
                  "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const n2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n2
                ), await this._pc.setRemoteDescription(n2), this._mapMidTransceiver.delete(e3);
              }
              async pauseSending(e3) {
                this.assertSendDirection(), _.debug("pauseSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3)
                  throw new Error("associated RTCRtpTransceiver not found");
                t3.direction = "inactive", this._remoteSdp.pauseMediaSection(e3);
                const r3 = await this._pc.createOffer();
                _.debug(
                  "pauseSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const n2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "pauseSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n2
                ), await this._pc.setRemoteDescription(n2);
              }
              async resumeSending(e3) {
                this.assertSendDirection(), _.debug("resumeSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (this._remoteSdp.resumeSendingMediaSection(e3), !t3)
                  throw new Error("associated RTCRtpTransceiver not found");
                t3.direction = "sendonly";
                const r3 = await this._pc.createOffer();
                _.debug(
                  "resumeSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const n2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "resumeSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n2
                ), await this._pc.setRemoteDescription(n2);
              }
              async replaceTrack(e3, t3) {
                this.assertSendDirection(), t3 ? _.debug("replaceTrack() [localId:%s, track.id:%s]", e3, t3.id) : _.debug("replaceTrack() [localId:%s, no track]", e3);
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3)
                  throw new Error("associated RTCRtpTransceiver not found");
                await r3.sender.replaceTrack(t3);
              }
              async setMaxSpatialLayer(e3, t3) {
                this.assertSendDirection(), _.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e3,
                  t3
                );
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3)
                  throw new Error("associated RTCRtpTransceiver not found");
                const n2 = r3.sender.getParameters();
                n2.encodings.forEach((e4, r4) => {
                  e4.active = r4 <= t3;
                }), await r3.sender.setParameters(n2), this._remoteSdp.muxMediaSectionSimulcast(e3, n2.encodings);
                const a2 = await this._pc.createOffer();
                _.debug(
                  "setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]",
                  a2
                ), await this._pc.setLocalDescription(a2);
                const i2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]",
                  i2
                ), await this._pc.setRemoteDescription(i2);
              }
              async setRtpEncodingParameters(e3, t3) {
                this.assertSendDirection(), _.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e3,
                  t3
                );
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3)
                  throw new Error("associated RTCRtpTransceiver not found");
                const n2 = r3.sender.getParameters();
                n2.encodings.forEach((e4, r4) => {
                  n2.encodings[r4] = { ...e4, ...t3 };
                }), await r3.sender.setParameters(n2), this._remoteSdp.muxMediaSectionSimulcast(e3, n2.encodings);
                const a2 = await this._pc.createOffer();
                _.debug(
                  "setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]",
                  a2
                ), await this._pc.setLocalDescription(a2);
                const i2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]",
                  i2
                ), await this._pc.setRemoteDescription(i2);
              }
              async getSenderStats(e3) {
                this.assertSendDirection();
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3)
                  throw new Error("associated RTCRtpTransceiver not found");
                return t3.sender.getStats();
              }
              async sendDataChannel({
                ordered: e3,
                maxPacketLifeTime: t3,
                maxRetransmits: r3,
                label: n2,
                protocol: a2
              }) {
                var i2;
                this.assertSendDirection();
                const o2 = {
                  negotiated: true,
                  id: this._nextSendSctpStreamId,
                  ordered: e3,
                  maxPacketLifeTime: t3,
                  maxRetransmits: r3,
                  protocol: a2
                };
                _.debug("sendDataChannel() [options:%o]", o2);
                const c2 = this._pc.createDataChannel(n2, o2);
                if (this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % g.MIS, !this._hasDataChannelMediaSection) {
                  const e4 = await this._pc.createOffer(), t4 = s.parse(e4.sdp), r4 = t4.media.find((e5) => "application" === e5.type);
                  this._transportReady || await this.setupTransport({
                    localDtlsRole: null !== (i2 = this._forcedLocalDtlsRole) && void 0 !== i2 ? i2 : "client",
                    localSdpObject: t4
                  }), _.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e4
                  ), await this._pc.setLocalDescription(e4), this._remoteSdp.sendSctpAssociation({ offerMediaObject: r4 });
                  const n3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  _.debug(
                    "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    n3
                  ), await this._pc.setRemoteDescription(n3), this._hasDataChannelMediaSection = true;
                }
                return {
                  dataChannel: c2,
                  sctpStreamParameters: {
                    streamId: o2.id,
                    ordered: o2.ordered,
                    maxPacketLifeTime: o2.maxPacketLifeTime,
                    maxRetransmits: o2.maxRetransmits
                  }
                };
              }
              async receive(e3) {
                var t3;
                this.assertRecvDirection();
                const r3 = [], n2 = /* @__PURE__ */ new Map();
                for (const t4 of e3) {
                  const {
                    trackId: e4,
                    kind: r4,
                    rtpParameters: a3,
                    streamId: i3
                  } = t4;
                  _.debug("receive() [trackId:%s, kind:%s]", e4, r4);
                  const s2 = a3.mid || String(this._mapMidTransceiver.size);
                  n2.set(e4, s2), this._remoteSdp.receive({
                    mid: s2,
                    kind: r4,
                    offerRtpParameters: a3,
                    streamId: i3 || a3.rtcp.cname,
                    trackId: e4
                  });
                }
                const a2 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "receive() | calling pc.setRemoteDescription() [offer:%o]",
                  a2
                ), await this._pc.setRemoteDescription(a2);
                let i2 = await this._pc.createAnswer();
                const o2 = s.parse(i2.sdp);
                for (const t4 of e3) {
                  const { trackId: e4, rtpParameters: r4 } = t4, a3 = n2.get(e4), i3 = o2.media.find((e5) => String(e5.mid) === a3);
                  p.applyCodecParameters({
                    offerRtpParameters: r4,
                    answerMediaObject: i3
                  });
                }
                i2 = { type: "answer", sdp: s.write(o2) }, this._transportReady || await this.setupTransport({
                  localDtlsRole: null !== (t3 = this._forcedLocalDtlsRole) && void 0 !== t3 ? t3 : "client",
                  localSdpObject: o2
                }), _.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  i2
                ), await this._pc.setLocalDescription(i2);
                for (const t4 of e3) {
                  const { trackId: e4 } = t4, a3 = n2.get(e4), i3 = this._pc.getTransceivers().find((e5) => e5.mid === a3);
                  if (!i3)
                    throw new Error("new RTCRtpTransceiver not found");
                  this._mapMidTransceiver.set(a3, i3), r3.push({
                    localId: a3,
                    track: i3.receiver.track,
                    rtpReceiver: i3.receiver
                  });
                }
                return r3;
              }
              async stopReceiving(e3) {
                this.assertRecvDirection();
                for (const t4 of e3) {
                  _.debug("stopReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  this._remoteSdp.closeMediaSection(e4.mid);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                _.debug(
                  "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                for (const t4 of e3)
                  this._mapMidTransceiver.delete(t4);
              }
              async pauseReceiving(e3) {
                this.assertRecvDirection();
                for (const t4 of e3) {
                  _.debug("pauseReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  e4.direction = "inactive", this._remoteSdp.pauseMediaSection(t4);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                _.debug(
                  "pauseReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async resumeReceiving(e3) {
                this.assertRecvDirection();
                for (const t4 of e3) {
                  _.debug("resumeReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  e4.direction = "recvonly", this._remoteSdp.resumeReceivingMediaSection(t4);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                _.debug(
                  "resumeReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async getReceiverStats(e3) {
                this.assertRecvDirection();
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3)
                  throw new Error("associated RTCRtpTransceiver not found");
                return t3.receiver.getStats();
              }
              async receiveDataChannel({
                sctpStreamParameters: e3,
                label: t3,
                protocol: r3
              }) {
                var n2;
                this.assertRecvDirection();
                const {
                  streamId: a2,
                  ordered: i2,
                  maxPacketLifeTime: o2,
                  maxRetransmits: c2
                } = e3, d2 = {
                  negotiated: true,
                  id: a2,
                  ordered: i2,
                  maxPacketLifeTime: o2,
                  maxRetransmits: c2,
                  protocol: r3
                };
                _.debug("receiveDataChannel() [options:%o]", d2);
                const p2 = this._pc.createDataChannel(t3, d2);
                if (!this._hasDataChannelMediaSection) {
                  this._remoteSdp.receiveSctpAssociation();
                  const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  _.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                    e4
                  ), await this._pc.setRemoteDescription(e4);
                  const t4 = await this._pc.createAnswer();
                  if (!this._transportReady) {
                    const e5 = s.parse(t4.sdp);
                    await this.setupTransport({
                      localDtlsRole: null !== (n2 = this._forcedLocalDtlsRole) && void 0 !== n2 ? n2 : "client",
                      localSdpObject: e5
                    });
                  }
                  _.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    t4
                  ), await this._pc.setLocalDescription(t4), this._hasDataChannelMediaSection = true;
                }
                return { dataChannel: p2 };
              }
              async setupTransport({ localDtlsRole: e3, localSdpObject: t3 }) {
                t3 || (t3 = s.parse(this._pc.localDescription.sdp));
                const r3 = p.extractDtlsParameters({ sdpObject: t3 });
                r3.role = e3, this._remoteSdp.updateDtlsRole(
                  "client" === e3 ? "server" : "client"
                ), await new Promise((e4, t4) => {
                  this.safeEmit("@connect", { dtlsParameters: r3 }, e4, t4);
                }), this._transportReady = true;
              }
              assertSendDirection() {
                if ("send" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "send" direction'
                  );
              }
              assertRecvDirection() {
                if ("recv" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "recv" direction'
                  );
              }
            }
            t2.ReactNativeUnifiedPlan = v;
          },
          2205: function(e2, t2, r2) {
            "use strict";
            var n = this && this.__createBinding || (Object.create ? function(e3, t3, r3, n2) {
              void 0 === n2 && (n2 = r3);
              var a2 = Object.getOwnPropertyDescriptor(t3, r3);
              a2 && !("get" in a2 ? !t3.__esModule : a2.writable || a2.configurable) || (a2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, n2, a2);
            } : function(e3, t3, r3, n2) {
              void 0 === n2 && (n2 = r3), e3[n2] = t3[r3];
            }), a = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), i = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule)
                return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && n(t3, e3, r3);
              return a(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Safari11 = void 0;
            const s = i(r2(766)), o = r2(8562), c = i(r2(3347)), d = i(r2(5280)), p = i(r2(2267)), l = i(r2(9875)), u = r2(9316), h = r2(7910), m = new o.Logger("Safari11"), f = { OS: 1024, MIS: 1024 };
            class _ extends u.HandlerInterface {
              static createFactory() {
                return () => new _();
              }
              constructor() {
                super(), this._sendStream = new MediaStream(), this._mapSendLocalIdRtpSender = /* @__PURE__ */ new Map(), this._nextSendLocalId = 0, this._mapRecvLocalIdInfo = /* @__PURE__ */ new Map(), this._hasDataChannelMediaSection = false, this._nextSendSctpStreamId = 0, this._transportReady = false;
              }
              get name() {
                return "Safari11";
              }
              close() {
                if (m.debug("close()"), this._pc)
                  try {
                    this._pc.close();
                  } catch (e3) {
                  }
                this.emit("@close");
              }
              async getNativeRtpCapabilities() {
                m.debug("getNativeRtpCapabilities()");
                const e3 = new RTCPeerConnection({
                  iceServers: [],
                  iceTransportPolicy: "all",
                  bundlePolicy: "max-bundle",
                  rtcpMuxPolicy: "require",
                  sdpSemantics: "plan-b"
                });
                try {
                  const t3 = await e3.createOffer({
                    offerToReceiveAudio: true,
                    offerToReceiveVideo: true
                  });
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  const r3 = s.parse(t3.sdp);
                  return p.extractRtpCapabilities({ sdpObject: r3 });
                } catch (t3) {
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  throw t3;
                }
              }
              async getNativeSctpCapabilities() {
                return m.debug("getNativeSctpCapabilities()"), { numStreams: f };
              }
              run({
                direction: e3,
                iceParameters: t3,
                iceCandidates: r3,
                dtlsParameters: n2,
                sctpParameters: a2,
                iceServers: i2,
                iceTransportPolicy: s2,
                additionalSettings: o2,
                proprietaryConstraints: c2,
                extendedRtpCapabilities: p2
              }) {
                m.debug("run()"), this._direction = e3, this._remoteSdp = new h.RemoteSdp({
                  iceParameters: t3,
                  iceCandidates: r3,
                  dtlsParameters: n2,
                  sctpParameters: a2,
                  planB: true
                }), this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", p2),
                  video: d.getSendingRtpParameters("video", p2)
                }, this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", p2),
                  video: d.getSendingRemoteRtpParameters("video", p2)
                }, n2.role && "auto" !== n2.role && (this._forcedLocalDtlsRole = "server" === n2.role ? "client" : "server"), this._pc = new RTCPeerConnection(
                  {
                    iceServers: i2 || [],
                    iceTransportPolicy: s2 || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    ...o2
                  },
                  c2
                ), this._pc.connectionState ? this._pc.addEventListener("connectionstatechange", () => {
                  this.emit(
                    "@connectionstatechange",
                    this._pc.connectionState
                  );
                }) : this._pc.addEventListener(
                  "iceconnectionstatechange",
                  () => {
                    switch (m.warn(
                      "run() | pc.connectionState not supported, using pc.iceConnectionState"
                    ), this._pc.iceConnectionState) {
                      case "checking":
                        this.emit("@connectionstatechange", "connecting");
                        break;
                      case "connected":
                      case "completed":
                        this.emit("@connectionstatechange", "connected");
                        break;
                      case "failed":
                        this.emit("@connectionstatechange", "failed");
                        break;
                      case "disconnected":
                        this.emit("@connectionstatechange", "disconnected");
                        break;
                      case "closed":
                        this.emit("@connectionstatechange", "closed");
                    }
                  }
                );
              }
              async updateIceServers(e3) {
                m.debug("updateIceServers()");
                const t3 = this._pc.getConfiguration();
                t3.iceServers = e3, this._pc.setConfiguration(t3);
              }
              async restartIce(e3) {
                if (m.debug("restartIce()"), this._remoteSdp.updateIceParameters(e3), this._transportReady)
                  if ("send" === this._direction) {
                    const e4 = await this._pc.createOffer({ iceRestart: true });
                    m.debug(
                      "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                      e4
                    ), await this._pc.setLocalDescription(e4);
                    const t3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                    m.debug(
                      "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                      t3
                    ), await this._pc.setRemoteDescription(t3);
                  } else {
                    const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                    m.debug(
                      "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                      e4
                    ), await this._pc.setRemoteDescription(e4);
                    const t3 = await this._pc.createAnswer();
                    m.debug(
                      "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                      t3
                    ), await this._pc.setLocalDescription(t3);
                  }
              }
              async getTransportStats() {
                return this._pc.getStats();
              }
              async send({ track: e3, encodings: t3, codecOptions: r3, codec: n2 }) {
                var a2;
                this.assertSendDirection(), m.debug("send() [kind:%s, track.id:%s]", e3.kind, e3.id), n2 && m.warn(
                  "send() | codec selection is not available in %s handler",
                  this.name
                ), this._sendStream.addTrack(e3), this._pc.addTrack(e3, this._sendStream);
                let i2, o2 = await this._pc.createOffer(), u2 = s.parse(o2.sdp);
                const h2 = c.clone(this._sendingRtpParametersByKind[e3.kind], {});
                h2.codecs = d.reduceCodecs(h2.codecs);
                const f2 = c.clone(
                  this._sendingRemoteRtpParametersByKind[e3.kind],
                  {}
                );
                if (f2.codecs = d.reduceCodecs(f2.codecs), this._transportReady || await this.setupTransport({
                  localDtlsRole: null !== (a2 = this._forcedLocalDtlsRole) && void 0 !== a2 ? a2 : "client",
                  localSdpObject: u2
                }), "video" === e3.kind && t3 && t3.length > 1 && (m.debug("send() | enabling simulcast"), u2 = s.parse(o2.sdp), i2 = u2.media.find((e4) => "video" === e4.type), l.addLegacySimulcast({
                  offerMediaObject: i2,
                  track: e3,
                  numStreams: t3.length
                }), o2 = { type: "offer", sdp: s.write(u2) }), m.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  o2
                ), await this._pc.setLocalDescription(o2), u2 = s.parse(this._pc.localDescription.sdp), i2 = u2.media.find((t4) => t4.type === e3.kind), h2.rtcp.cname = p.getCname({ offerMediaObject: i2 }), h2.encodings = l.getRtpEncodings({
                  offerMediaObject: i2,
                  track: e3
                }), t3)
                  for (let e4 = 0; e4 < h2.encodings.length; ++e4)
                    t3[e4] && Object.assign(h2.encodings[e4], t3[e4]);
                if (h2.encodings.length > 1 && "video/vp8" === h2.codecs[0].mimeType.toLowerCase())
                  for (const e4 of h2.encodings)
                    e4.scalabilityMode = "L1T3";
                this._remoteSdp.send({
                  offerMediaObject: i2,
                  offerRtpParameters: h2,
                  answerRtpParameters: f2,
                  codecOptions: r3
                });
                const _2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                m.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  _2
                ), await this._pc.setRemoteDescription(_2);
                const g = String(this._nextSendLocalId);
                this._nextSendLocalId++;
                const v = this._pc.getSenders().find((t4) => t4.track === e3);
                return this._mapSendLocalIdRtpSender.set(g, v), { localId: g, rtpParameters: h2, rtpSender: v };
              }
              async stopSending(e3) {
                this.assertSendDirection();
                const t3 = this._mapSendLocalIdRtpSender.get(e3);
                if (!t3)
                  throw new Error("associated RTCRtpSender not found");
                t3.track && this._sendStream.removeTrack(t3.track), this._mapSendLocalIdRtpSender.delete(e3);
                const r3 = await this._pc.createOffer();
                m.debug(
                  "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                );
                try {
                  await this._pc.setLocalDescription(r3);
                } catch (e4) {
                  if (0 === this._sendStream.getTracks().length)
                    return void m.warn(
                      "stopSending() | ignoring expected error due no sending tracks: %s",
                      e4.toString()
                    );
                  throw e4;
                }
                if ("stable" === this._pc.signalingState)
                  return;
                const n2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                m.debug(
                  "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n2
                ), await this._pc.setRemoteDescription(n2);
              }
              async pauseSending(e3) {
              }
              async resumeSending(e3) {
              }
              async replaceTrack(e3, t3) {
                this.assertSendDirection(), t3 ? m.debug("replaceTrack() [localId:%s, track.id:%s]", e3, t3.id) : m.debug("replaceTrack() [localId:%s, no track]", e3);
                const r3 = this._mapSendLocalIdRtpSender.get(e3);
                if (!r3)
                  throw new Error("associated RTCRtpSender not found");
                const n2 = r3.track;
                await r3.replaceTrack(t3), n2 && this._sendStream.removeTrack(n2), t3 && this._sendStream.addTrack(t3);
              }
              async setMaxSpatialLayer(e3, t3) {
                this.assertSendDirection(), m.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e3,
                  t3
                );
                const r3 = this._mapSendLocalIdRtpSender.get(e3);
                if (!r3)
                  throw new Error("associated RTCRtpSender not found");
                const n2 = r3.getParameters();
                n2.encodings.forEach((e4, r4) => {
                  e4.active = r4 <= t3;
                }), await r3.setParameters(n2);
              }
              async setRtpEncodingParameters(e3, t3) {
                this.assertSendDirection(), m.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e3,
                  t3
                );
                const r3 = this._mapSendLocalIdRtpSender.get(e3);
                if (!r3)
                  throw new Error("associated RTCRtpSender not found");
                const n2 = r3.getParameters();
                n2.encodings.forEach((e4, r4) => {
                  n2.encodings[r4] = { ...e4, ...t3 };
                }), await r3.setParameters(n2);
              }
              async getSenderStats(e3) {
                this.assertSendDirection();
                const t3 = this._mapSendLocalIdRtpSender.get(e3);
                if (!t3)
                  throw new Error("associated RTCRtpSender not found");
                return t3.getStats();
              }
              async sendDataChannel({
                ordered: e3,
                maxPacketLifeTime: t3,
                maxRetransmits: r3,
                label: n2,
                protocol: a2
              }) {
                var i2;
                this.assertSendDirection();
                const o2 = {
                  negotiated: true,
                  id: this._nextSendSctpStreamId,
                  ordered: e3,
                  maxPacketLifeTime: t3,
                  maxRetransmits: r3,
                  protocol: a2
                };
                m.debug("sendDataChannel() [options:%o]", o2);
                const c2 = this._pc.createDataChannel(n2, o2);
                if (this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % f.MIS, !this._hasDataChannelMediaSection) {
                  const e4 = await this._pc.createOffer(), t4 = s.parse(e4.sdp), r4 = t4.media.find((e5) => "application" === e5.type);
                  this._transportReady || await this.setupTransport({
                    localDtlsRole: null !== (i2 = this._forcedLocalDtlsRole) && void 0 !== i2 ? i2 : "client",
                    localSdpObject: t4
                  }), m.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e4
                  ), await this._pc.setLocalDescription(e4), this._remoteSdp.sendSctpAssociation({ offerMediaObject: r4 });
                  const n3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  m.debug(
                    "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    n3
                  ), await this._pc.setRemoteDescription(n3), this._hasDataChannelMediaSection = true;
                }
                return {
                  dataChannel: c2,
                  sctpStreamParameters: {
                    streamId: o2.id,
                    ordered: o2.ordered,
                    maxPacketLifeTime: o2.maxPacketLifeTime,
                    maxRetransmits: o2.maxRetransmits
                  }
                };
              }
              async receive(e3) {
                var t3;
                this.assertRecvDirection();
                const r3 = [];
                for (const t4 of e3) {
                  const {
                    trackId: e4,
                    kind: r4,
                    rtpParameters: n3,
                    streamId: a3
                  } = t4;
                  m.debug("receive() [trackId:%s, kind:%s]", e4, r4);
                  const i3 = r4;
                  this._remoteSdp.receive({
                    mid: i3,
                    kind: r4,
                    offerRtpParameters: n3,
                    streamId: a3 || n3.rtcp.cname,
                    trackId: e4
                  });
                }
                const n2 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                m.debug(
                  "receive() | calling pc.setRemoteDescription() [offer:%o]",
                  n2
                ), await this._pc.setRemoteDescription(n2);
                let a2 = await this._pc.createAnswer();
                const i2 = s.parse(a2.sdp);
                for (const t4 of e3) {
                  const { kind: e4, rtpParameters: r4 } = t4, n3 = e4, a3 = i2.media.find((e5) => String(e5.mid) === n3);
                  p.applyCodecParameters({
                    offerRtpParameters: r4,
                    answerMediaObject: a3
                  });
                }
                a2 = { type: "answer", sdp: s.write(i2) }, this._transportReady || await this.setupTransport({
                  localDtlsRole: null !== (t3 = this._forcedLocalDtlsRole) && void 0 !== t3 ? t3 : "client",
                  localSdpObject: i2
                }), m.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  a2
                ), await this._pc.setLocalDescription(a2);
                for (const t4 of e3) {
                  const { kind: e4, trackId: n3, rtpParameters: a3 } = t4, i3 = e4, s2 = n3, o2 = this._pc.getReceivers().find((e5) => e5.track && e5.track.id === s2);
                  if (!o2)
                    throw new Error("new RTCRtpReceiver not");
                  this._mapRecvLocalIdInfo.set(s2, {
                    mid: i3,
                    rtpParameters: a3,
                    rtpReceiver: o2
                  }), r3.push({ localId: s2, track: o2.track, rtpReceiver: o2 });
                }
                return r3;
              }
              async stopReceiving(e3) {
                this.assertRecvDirection();
                for (const t4 of e3) {
                  m.debug("stopReceiving() [localId:%s]", t4);
                  const { mid: e4, rtpParameters: r4 } = this._mapRecvLocalIdInfo.get(t4) || {};
                  this._mapRecvLocalIdInfo.delete(t4), this._remoteSdp.planBStopReceiving({
                    mid: e4,
                    offerRtpParameters: r4
                  });
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                m.debug(
                  "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                m.debug(
                  "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async getReceiverStats(e3) {
                this.assertRecvDirection();
                const { rtpReceiver: t3 } = this._mapRecvLocalIdInfo.get(e3) || {};
                if (!t3)
                  throw new Error("associated RTCRtpReceiver not found");
                return t3.getStats();
              }
              async pauseReceiving(e3) {
              }
              async resumeReceiving(e3) {
              }
              async receiveDataChannel({
                sctpStreamParameters: e3,
                label: t3,
                protocol: r3
              }) {
                var n2;
                this.assertRecvDirection();
                const {
                  streamId: a2,
                  ordered: i2,
                  maxPacketLifeTime: o2,
                  maxRetransmits: c2
                } = e3, d2 = {
                  negotiated: true,
                  id: a2,
                  ordered: i2,
                  maxPacketLifeTime: o2,
                  maxRetransmits: c2,
                  protocol: r3
                };
                m.debug("receiveDataChannel() [options:%o]", d2);
                const p2 = this._pc.createDataChannel(t3, d2);
                if (!this._hasDataChannelMediaSection) {
                  this._remoteSdp.receiveSctpAssociation({
                    oldDataChannelSpec: true
                  });
                  const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  m.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                    e4
                  ), await this._pc.setRemoteDescription(e4);
                  const t4 = await this._pc.createAnswer();
                  if (!this._transportReady) {
                    const e5 = s.parse(t4.sdp);
                    await this.setupTransport({
                      localDtlsRole: null !== (n2 = this._forcedLocalDtlsRole) && void 0 !== n2 ? n2 : "client",
                      localSdpObject: e5
                    });
                  }
                  m.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    t4
                  ), await this._pc.setLocalDescription(t4), this._hasDataChannelMediaSection = true;
                }
                return { dataChannel: p2 };
              }
              async setupTransport({ localDtlsRole: e3, localSdpObject: t3 }) {
                t3 || (t3 = s.parse(this._pc.localDescription.sdp));
                const r3 = p.extractDtlsParameters({ sdpObject: t3 });
                r3.role = e3, this._remoteSdp.updateDtlsRole(
                  "client" === e3 ? "server" : "client"
                ), await new Promise((e4, t4) => {
                  this.safeEmit("@connect", { dtlsParameters: r3 }, e4, t4);
                }), this._transportReady = true;
              }
              assertSendDirection() {
                if ("send" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "send" direction'
                  );
              }
              assertRecvDirection() {
                if ("recv" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "recv" direction'
                  );
              }
            }
            t2.Safari11 = _;
          },
          9862: function(e2, t2, r2) {
            "use strict";
            var n = this && this.__createBinding || (Object.create ? function(e3, t3, r3, n2) {
              void 0 === n2 && (n2 = r3);
              var a2 = Object.getOwnPropertyDescriptor(t3, r3);
              a2 && !("get" in a2 ? !t3.__esModule : a2.writable || a2.configurable) || (a2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, n2, a2);
            } : function(e3, t3, r3, n2) {
              void 0 === n2 && (n2 = r3), e3[n2] = t3[r3];
            }), a = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), i = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule)
                return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && n(t3, e3, r3);
              return a(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.Safari12 = void 0;
            const s = i(r2(766)), o = r2(8562), c = i(r2(3347)), d = i(r2(5280)), p = i(r2(2267)), l = i(r2(9072)), u = i(r2(8954)), h = r2(9316), m = r2(7910), f = r2(2770), _ = new o.Logger("Safari12"), g = { OS: 1024, MIS: 1024 };
            class v extends h.HandlerInterface {
              static createFactory() {
                return () => new v();
              }
              constructor() {
                super(), this._mapMidTransceiver = /* @__PURE__ */ new Map(), this._sendStream = new MediaStream(), this._hasDataChannelMediaSection = false, this._nextSendSctpStreamId = 0, this._transportReady = false;
              }
              get name() {
                return "Safari12";
              }
              close() {
                if (_.debug("close()"), this._pc)
                  try {
                    this._pc.close();
                  } catch (e3) {
                  }
                this.emit("@close");
              }
              async getNativeRtpCapabilities() {
                _.debug("getNativeRtpCapabilities()");
                const e3 = new RTCPeerConnection({
                  iceServers: [],
                  iceTransportPolicy: "all",
                  bundlePolicy: "max-bundle",
                  rtcpMuxPolicy: "require"
                });
                try {
                  e3.addTransceiver("audio"), e3.addTransceiver("video");
                  const t3 = await e3.createOffer();
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  const r3 = s.parse(t3.sdp), n2 = p.extractRtpCapabilities({ sdpObject: r3 });
                  return u.addNackSuppportForOpus(n2), n2;
                } catch (t3) {
                  try {
                    e3.close();
                  } catch (e4) {
                  }
                  throw t3;
                }
              }
              async getNativeSctpCapabilities() {
                return _.debug("getNativeSctpCapabilities()"), { numStreams: g };
              }
              run({
                direction: e3,
                iceParameters: t3,
                iceCandidates: r3,
                dtlsParameters: n2,
                sctpParameters: a2,
                iceServers: i2,
                iceTransportPolicy: s2,
                additionalSettings: o2,
                proprietaryConstraints: c2,
                extendedRtpCapabilities: p2
              }) {
                _.debug("run()"), this._direction = e3, this._remoteSdp = new m.RemoteSdp({
                  iceParameters: t3,
                  iceCandidates: r3,
                  dtlsParameters: n2,
                  sctpParameters: a2
                }), this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", p2),
                  video: d.getSendingRtpParameters("video", p2)
                }, this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", p2),
                  video: d.getSendingRemoteRtpParameters("video", p2)
                }, n2.role && "auto" !== n2.role && (this._forcedLocalDtlsRole = "server" === n2.role ? "client" : "server"), this._pc = new RTCPeerConnection(
                  {
                    iceServers: i2 || [],
                    iceTransportPolicy: s2 || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    ...o2
                  },
                  c2
                ), this._pc.connectionState ? this._pc.addEventListener("connectionstatechange", () => {
                  this.emit(
                    "@connectionstatechange",
                    this._pc.connectionState
                  );
                }) : this._pc.addEventListener(
                  "iceconnectionstatechange",
                  () => {
                    switch (_.warn(
                      "run() | pc.connectionState not supported, using pc.iceConnectionState"
                    ), this._pc.iceConnectionState) {
                      case "checking":
                        this.emit("@connectionstatechange", "connecting");
                        break;
                      case "connected":
                      case "completed":
                        this.emit("@connectionstatechange", "connected");
                        break;
                      case "failed":
                        this.emit("@connectionstatechange", "failed");
                        break;
                      case "disconnected":
                        this.emit("@connectionstatechange", "disconnected");
                        break;
                      case "closed":
                        this.emit("@connectionstatechange", "closed");
                    }
                  }
                );
              }
              async updateIceServers(e3) {
                _.debug("updateIceServers()");
                const t3 = this._pc.getConfiguration();
                t3.iceServers = e3, this._pc.setConfiguration(t3);
              }
              async restartIce(e3) {
                if (_.debug("restartIce()"), this._remoteSdp.updateIceParameters(e3), this._transportReady)
                  if ("send" === this._direction) {
                    const e4 = await this._pc.createOffer({ iceRestart: true });
                    _.debug(
                      "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                      e4
                    ), await this._pc.setLocalDescription(e4);
                    const t3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                    _.debug(
                      "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                      t3
                    ), await this._pc.setRemoteDescription(t3);
                  } else {
                    const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                    _.debug(
                      "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                      e4
                    ), await this._pc.setRemoteDescription(e4);
                    const t3 = await this._pc.createAnswer();
                    _.debug(
                      "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                      t3
                    ), await this._pc.setLocalDescription(t3);
                  }
              }
              async getTransportStats() {
                return this._pc.getStats();
              }
              async send({ track: e3, encodings: t3, codecOptions: r3, codec: n2 }) {
                var a2;
                this.assertSendDirection(), _.debug("send() [kind:%s, track.id:%s]", e3.kind, e3.id);
                const i2 = c.clone(this._sendingRtpParametersByKind[e3.kind], {});
                i2.codecs = d.reduceCodecs(i2.codecs, n2);
                const o2 = c.clone(
                  this._sendingRemoteRtpParametersByKind[e3.kind],
                  {}
                );
                o2.codecs = d.reduceCodecs(o2.codecs, n2);
                const u2 = this._remoteSdp.getNextMediaSectionIdx(), h2 = this._pc.addTransceiver(e3, {
                  direction: "sendonly",
                  streams: [this._sendStream]
                });
                let m2, g2 = await this._pc.createOffer(), v2 = s.parse(g2.sdp);
                this._transportReady || await this.setupTransport({
                  localDtlsRole: null !== (a2 = this._forcedLocalDtlsRole) && void 0 !== a2 ? a2 : "client",
                  localSdpObject: v2
                });
                const y = (0, f.parse)((t3 || [{}])[0].scalabilityMode);
                t3 && t3.length > 1 && (_.debug("send() | enabling legacy simulcast"), v2 = s.parse(g2.sdp), m2 = v2.media[u2.idx], l.addLegacySimulcast({
                  offerMediaObject: m2,
                  numStreams: t3.length
                }), g2 = { type: "offer", sdp: s.write(v2) }), _.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  g2
                ), await this._pc.setLocalDescription(g2);
                const b = h2.mid;
                if (i2.mid = b, v2 = s.parse(this._pc.localDescription.sdp), m2 = v2.media[u2.idx], i2.rtcp.cname = p.getCname({ offerMediaObject: m2 }), i2.encodings = l.getRtpEncodings({ offerMediaObject: m2 }), t3)
                  for (let e4 = 0; e4 < i2.encodings.length; ++e4)
                    t3[e4] && Object.assign(i2.encodings[e4], t3[e4]);
                if (i2.encodings.length > 1 && ("video/vp8" === i2.codecs[0].mimeType.toLowerCase() || "video/h264" === i2.codecs[0].mimeType.toLowerCase()))
                  for (const e4 of i2.encodings)
                    e4.scalabilityMode ? e4.scalabilityMode = `L1T${y.temporalLayers}` : e4.scalabilityMode = "L1T3";
                this._remoteSdp.send({
                  offerMediaObject: m2,
                  reuseMid: u2.reuseMid,
                  offerRtpParameters: i2,
                  answerRtpParameters: o2,
                  codecOptions: r3
                });
                const S = { type: "answer", sdp: this._remoteSdp.getSdp() };
                return _.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  S
                ), await this._pc.setRemoteDescription(S), this._mapMidTransceiver.set(b, h2), { localId: b, rtpParameters: i2, rtpSender: h2.sender };
              }
              async stopSending(e3) {
                this.assertSendDirection(), _.debug("stopSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3)
                  throw new Error("associated RTCRtpTransceiver not found");
                t3.sender.replaceTrack(null), this._pc.removeTrack(t3.sender);
                if (this._remoteSdp.closeMediaSection(t3.mid))
                  try {
                    t3.stop();
                  } catch (e4) {
                  }
                const r3 = await this._pc.createOffer();
                _.debug(
                  "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const n2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n2
                ), await this._pc.setRemoteDescription(n2), this._mapMidTransceiver.delete(e3);
              }
              async pauseSending(e3) {
                this.assertSendDirection(), _.debug("pauseSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3)
                  throw new Error("associated RTCRtpTransceiver not found");
                t3.direction = "inactive", this._remoteSdp.pauseMediaSection(e3);
                const r3 = await this._pc.createOffer();
                _.debug(
                  "pauseSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const n2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "pauseSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n2
                ), await this._pc.setRemoteDescription(n2);
              }
              async resumeSending(e3) {
                this.assertSendDirection(), _.debug("resumeSending() [localId:%s]", e3);
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3)
                  throw new Error("associated RTCRtpTransceiver not found");
                t3.direction = "sendonly", this._remoteSdp.resumeSendingMediaSection(e3);
                const r3 = await this._pc.createOffer();
                _.debug(
                  "resumeSending() | calling pc.setLocalDescription() [offer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                const n2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "resumeSending() | calling pc.setRemoteDescription() [answer:%o]",
                  n2
                ), await this._pc.setRemoteDescription(n2);
              }
              async replaceTrack(e3, t3) {
                this.assertSendDirection(), t3 ? _.debug("replaceTrack() [localId:%s, track.id:%s]", e3, t3.id) : _.debug("replaceTrack() [localId:%s, no track]", e3);
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3)
                  throw new Error("associated RTCRtpTransceiver not found");
                await r3.sender.replaceTrack(t3);
              }
              async setMaxSpatialLayer(e3, t3) {
                this.assertSendDirection(), _.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e3,
                  t3
                );
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3)
                  throw new Error("associated RTCRtpTransceiver not found");
                const n2 = r3.sender.getParameters();
                n2.encodings.forEach((e4, r4) => {
                  e4.active = r4 <= t3;
                }), await r3.sender.setParameters(n2), this._remoteSdp.muxMediaSectionSimulcast(e3, n2.encodings);
                const a2 = await this._pc.createOffer();
                _.debug(
                  "setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]",
                  a2
                ), await this._pc.setLocalDescription(a2);
                const i2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]",
                  i2
                ), await this._pc.setRemoteDescription(i2);
              }
              async setRtpEncodingParameters(e3, t3) {
                this.assertSendDirection(), _.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e3,
                  t3
                );
                const r3 = this._mapMidTransceiver.get(e3);
                if (!r3)
                  throw new Error("associated RTCRtpTransceiver not found");
                const n2 = r3.sender.getParameters();
                n2.encodings.forEach((e4, r4) => {
                  n2.encodings[r4] = { ...e4, ...t3 };
                }), await r3.sender.setParameters(n2), this._remoteSdp.muxMediaSectionSimulcast(e3, n2.encodings);
                const a2 = await this._pc.createOffer();
                _.debug(
                  "setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]",
                  a2
                ), await this._pc.setLocalDescription(a2);
                const i2 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]",
                  i2
                ), await this._pc.setRemoteDescription(i2);
              }
              async getSenderStats(e3) {
                this.assertSendDirection();
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3)
                  throw new Error("associated RTCRtpTransceiver not found");
                return t3.sender.getStats();
              }
              async sendDataChannel({
                ordered: e3,
                maxPacketLifeTime: t3,
                maxRetransmits: r3,
                label: n2,
                protocol: a2
              }) {
                var i2;
                this.assertSendDirection();
                const o2 = {
                  negotiated: true,
                  id: this._nextSendSctpStreamId,
                  ordered: e3,
                  maxPacketLifeTime: t3,
                  maxRetransmits: r3,
                  protocol: a2
                };
                _.debug("sendDataChannel() [options:%o]", o2);
                const c2 = this._pc.createDataChannel(n2, o2);
                if (this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % g.MIS, !this._hasDataChannelMediaSection) {
                  const e4 = await this._pc.createOffer(), t4 = s.parse(e4.sdp), r4 = t4.media.find((e5) => "application" === e5.type);
                  this._transportReady || await this.setupTransport({
                    localDtlsRole: null !== (i2 = this._forcedLocalDtlsRole) && void 0 !== i2 ? i2 : "client",
                    localSdpObject: t4
                  }), _.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e4
                  ), await this._pc.setLocalDescription(e4), this._remoteSdp.sendSctpAssociation({ offerMediaObject: r4 });
                  const n3 = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  _.debug(
                    "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    n3
                  ), await this._pc.setRemoteDescription(n3), this._hasDataChannelMediaSection = true;
                }
                return {
                  dataChannel: c2,
                  sctpStreamParameters: {
                    streamId: o2.id,
                    ordered: o2.ordered,
                    maxPacketLifeTime: o2.maxPacketLifeTime,
                    maxRetransmits: o2.maxRetransmits
                  }
                };
              }
              async receive(e3) {
                var t3;
                this.assertRecvDirection();
                const r3 = [], n2 = /* @__PURE__ */ new Map();
                for (const t4 of e3) {
                  const {
                    trackId: e4,
                    kind: r4,
                    rtpParameters: a3,
                    streamId: i3
                  } = t4;
                  _.debug("receive() [trackId:%s, kind:%s]", e4, r4);
                  const s2 = a3.mid || String(this._mapMidTransceiver.size);
                  n2.set(e4, s2), this._remoteSdp.receive({
                    mid: s2,
                    kind: r4,
                    offerRtpParameters: a3,
                    streamId: i3 || a3.rtcp.cname,
                    trackId: e4
                  });
                }
                const a2 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "receive() | calling pc.setRemoteDescription() [offer:%o]",
                  a2
                ), await this._pc.setRemoteDescription(a2);
                let i2 = await this._pc.createAnswer();
                const o2 = s.parse(i2.sdp);
                for (const t4 of e3) {
                  const { trackId: e4, rtpParameters: r4 } = t4, a3 = n2.get(e4), i3 = o2.media.find((e5) => String(e5.mid) === a3);
                  p.applyCodecParameters({
                    offerRtpParameters: r4,
                    answerMediaObject: i3
                  });
                }
                i2 = { type: "answer", sdp: s.write(o2) }, this._transportReady || await this.setupTransport({
                  localDtlsRole: null !== (t3 = this._forcedLocalDtlsRole) && void 0 !== t3 ? t3 : "client",
                  localSdpObject: o2
                }), _.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  i2
                ), await this._pc.setLocalDescription(i2);
                for (const t4 of e3) {
                  const { trackId: e4 } = t4, a3 = n2.get(e4), i3 = this._pc.getTransceivers().find((e5) => e5.mid === a3);
                  if (!i3)
                    throw new Error("new RTCRtpTransceiver not found");
                  this._mapMidTransceiver.set(a3, i3), r3.push({
                    localId: a3,
                    track: i3.receiver.track,
                    rtpReceiver: i3.receiver
                  });
                }
                return r3;
              }
              async stopReceiving(e3) {
                this.assertRecvDirection();
                for (const t4 of e3) {
                  _.debug("stopReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  this._remoteSdp.closeMediaSection(e4.mid);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                _.debug(
                  "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
                for (const t4 of e3)
                  this._mapMidTransceiver.delete(t4);
              }
              async pauseReceiving(e3) {
                this.assertRecvDirection();
                for (const t4 of e3) {
                  _.debug("pauseReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  e4.direction = "inactive", this._remoteSdp.pauseMediaSection(t4);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                _.debug(
                  "pauseReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async resumeReceiving(e3) {
                this.assertRecvDirection();
                for (const t4 of e3) {
                  _.debug("resumeReceiving() [localId:%s]", t4);
                  const e4 = this._mapMidTransceiver.get(t4);
                  if (!e4)
                    throw new Error("associated RTCRtpTransceiver not found");
                  e4.direction = "recvonly", this._remoteSdp.resumeReceivingMediaSection(t4);
                }
                const t3 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                  t3
                ), await this._pc.setRemoteDescription(t3);
                const r3 = await this._pc.createAnswer();
                _.debug(
                  "resumeReceiving() | calling pc.setLocalDescription() [answer:%o]",
                  r3
                ), await this._pc.setLocalDescription(r3);
              }
              async getReceiverStats(e3) {
                this.assertRecvDirection();
                const t3 = this._mapMidTransceiver.get(e3);
                if (!t3)
                  throw new Error("associated RTCRtpTransceiver not found");
                return t3.receiver.getStats();
              }
              async receiveDataChannel({
                sctpStreamParameters: e3,
                label: t3,
                protocol: r3
              }) {
                var n2;
                this.assertRecvDirection();
                const {
                  streamId: a2,
                  ordered: i2,
                  maxPacketLifeTime: o2,
                  maxRetransmits: c2
                } = e3, d2 = {
                  negotiated: true,
                  id: a2,
                  ordered: i2,
                  maxPacketLifeTime: o2,
                  maxRetransmits: c2,
                  protocol: r3
                };
                _.debug("receiveDataChannel() [options:%o]", d2);
                const p2 = this._pc.createDataChannel(t3, d2);
                if (!this._hasDataChannelMediaSection) {
                  this._remoteSdp.receiveSctpAssociation();
                  const e4 = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  _.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                    e4
                  ), await this._pc.setRemoteDescription(e4);
                  const t4 = await this._pc.createAnswer();
                  if (!this._transportReady) {
                    const e5 = s.parse(t4.sdp);
                    await this.setupTransport({
                      localDtlsRole: null !== (n2 = this._forcedLocalDtlsRole) && void 0 !== n2 ? n2 : "client",
                      localSdpObject: e5
                    });
                  }
                  _.debug(
                    "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                    t4
                  ), await this._pc.setLocalDescription(t4), this._hasDataChannelMediaSection = true;
                }
                return { dataChannel: p2 };
              }
              async setupTransport({ localDtlsRole: e3, localSdpObject: t3 }) {
                t3 || (t3 = s.parse(this._pc.localDescription.sdp));
                const r3 = p.extractDtlsParameters({ sdpObject: t3 });
                r3.role = e3, this._remoteSdp.updateDtlsRole(
                  "client" === e3 ? "server" : "client"
                ), await new Promise((e4, t4) => {
                  this.safeEmit("@connect", { dtlsParameters: r3 }, e4, t4);
                }), this._transportReady = true;
              }
              assertSendDirection() {
                if ("send" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "send" direction'
                  );
              }
              assertRecvDirection() {
                if ("recv" !== this._direction)
                  throw new Error(
                    'method can just be called for handlers with "recv" direction'
                  );
              }
            }
            t2.Safari12 = v;
          },
          3635: function(e2, t2, r2) {
            "use strict";
            var n = this && this.__createBinding || (Object.create ? function(e3, t3, r3, n2) {
              void 0 === n2 && (n2 = r3);
              var a2 = Object.getOwnPropertyDescriptor(t3, r3);
              a2 && !("get" in a2 ? !t3.__esModule : a2.writable || a2.configurable) || (a2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, n2, a2);
            } : function(e3, t3, r3, n2) {
              void 0 === n2 && (n2 = r3), e3[n2] = t3[r3];
            }), a = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), i = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule)
                return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && n(t3, e3, r3);
              return a(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.mangleRtpParameters = t2.getCapabilities = void 0;
            const s = i(r2(3347));
            t2.getCapabilities = function() {
              const e3 = RTCRtpReceiver.getCapabilities(), t3 = s.clone(e3, {});
              for (const e4 of t3.codecs) {
                if (e4.channels = e4.numChannels, delete e4.numChannels, e4.mimeType = e4.mimeType || `${e4.kind}/${e4.name}`, e4.parameters) {
                  const t4 = e4.parameters;
                  t4.apt && (t4.apt = Number(t4.apt)), t4["packetization-mode"] && (t4["packetization-mode"] = Number(t4["packetization-mode"]));
                }
                for (const t4 of e4.rtcpFeedback || [])
                  t4.parameter || (t4.parameter = "");
              }
              return t3;
            }, t2.mangleRtpParameters = function(e3) {
              const t3 = s.clone(e3, {});
              t3.mid && (t3.muxId = t3.mid, delete t3.mid);
              for (const e4 of t3.codecs)
                e4.channels && (e4.numChannels = e4.channels, delete e4.channels), e4.mimeType && !e4.name && (e4.name = e4.mimeType.split("/")[1]), delete e4.mimeType;
              return t3;
            };
          },
          8954: (e2, t2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.addNackSuppportForOpus = void 0, t2.addNackSuppportForOpus = function(e3) {
              var t3;
              for (const r2 of e3.codecs || [])
                "audio/opus" !== r2.mimeType.toLowerCase() && "audio/multiopus" !== r2.mimeType.toLowerCase() || (null === (t3 = r2.rtcpFeedback) || void 0 === t3 ? void 0 : t3.some((e4) => "nack" === e4.type && !e4.parameter)) || (r2.rtcpFeedback || (r2.rtcpFeedback = []), r2.rtcpFeedback.push({ type: "nack" }));
            };
          },
          6698: function(e2, t2, r2) {
            "use strict";
            var n = this && this.__createBinding || (Object.create ? function(e3, t3, r3, n2) {
              void 0 === n2 && (n2 = r3);
              var a2 = Object.getOwnPropertyDescriptor(t3, r3);
              a2 && !("get" in a2 ? !t3.__esModule : a2.writable || a2.configurable) || (a2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, n2, a2);
            } : function(e3, t3, r3, n2) {
              void 0 === n2 && (n2 = r3), e3[n2] = t3[r3];
            }), a = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), i = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule)
                return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && n(t3, e3, r3);
              return a(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.OfferMediaSection = t2.AnswerMediaSection = t2.MediaSection = void 0;
            const s = i(r2(766)), o = i(r2(3347));
            class c {
              constructor({
                iceParameters: e3,
                iceCandidates: t3,
                dtlsParameters: r3,
                planB: n2 = false
              }) {
                if (this._mediaObject = {}, this._planB = n2, e3 && this.setIceParameters(e3), t3) {
                  this._mediaObject.candidates = [];
                  for (const e4 of t3) {
                    const t4 = { component: 1 };
                    t4.foundation = e4.foundation, t4.ip = e4.ip, t4.port = e4.port, t4.priority = e4.priority, t4.transport = e4.protocol, t4.type = e4.type, e4.tcpType && (t4.tcptype = e4.tcpType), this._mediaObject.candidates.push(t4);
                  }
                  this._mediaObject.endOfCandidates = "end-of-candidates", this._mediaObject.iceOptions = "renomination";
                }
                r3 && this.setDtlsRole(r3.role);
              }
              get mid() {
                return String(this._mediaObject.mid);
              }
              get closed() {
                return 0 === this._mediaObject.port;
              }
              getObject() {
                return this._mediaObject;
              }
              setIceParameters(e3) {
                this._mediaObject.iceUfrag = e3.usernameFragment, this._mediaObject.icePwd = e3.password;
              }
              pause() {
                this._mediaObject.direction = "inactive";
              }
              disable() {
                this.pause(), delete this._mediaObject.ext, delete this._mediaObject.ssrcs, delete this._mediaObject.ssrcGroups, delete this._mediaObject.simulcast, delete this._mediaObject.simulcast_03, delete this._mediaObject.rids, delete this._mediaObject.extmapAllowMixed;
              }
              close() {
                this.disable(), this._mediaObject.port = 0;
              }
            }
            t2.MediaSection = c;
            t2.AnswerMediaSection = class extends c {
              constructor({
                iceParameters: e3,
                iceCandidates: t3,
                dtlsParameters: r3,
                sctpParameters: n2,
                plainRtpParameters: a2,
                planB: i2 = false,
                offerMediaObject: s2,
                offerRtpParameters: c2,
                answerRtpParameters: p,
                codecOptions: l,
                extmapAllowMixed: u = false
              }) {
                switch (super({
                  iceParameters: e3,
                  iceCandidates: t3,
                  dtlsParameters: r3,
                  planB: i2
                }), this._mediaObject.mid = String(s2.mid), this._mediaObject.type = s2.type, this._mediaObject.protocol = s2.protocol, a2 ? (this._mediaObject.connection = {
                  ip: a2.ip,
                  version: a2.ipVersion
                }, this._mediaObject.port = a2.port) : (this._mediaObject.connection = {
                  ip: "127.0.0.1",
                  version: 4
                }, this._mediaObject.port = 7), s2.type) {
                  case "audio":
                  case "video":
                    this._mediaObject.direction = "recvonly", this._mediaObject.rtp = [], this._mediaObject.rtcpFb = [], this._mediaObject.fmtp = [];
                    for (const e4 of p.codecs) {
                      const t4 = {
                        payload: e4.payloadType,
                        codec: d(e4),
                        rate: e4.clockRate
                      };
                      e4.channels > 1 && (t4.encoding = e4.channels), this._mediaObject.rtp.push(t4);
                      const r4 = o.clone(e4.parameters, {});
                      let n3 = o.clone(e4.rtcpFeedback, []);
                      if (l) {
                        const {
                          opusStereo: t5,
                          opusFec: a4,
                          opusDtx: i3,
                          opusMaxPlaybackRate: s3,
                          opusMaxAverageBitrate: o2,
                          opusPtime: d2,
                          opusNack: p2,
                          videoGoogleStartBitrate: u2,
                          videoGoogleMaxBitrate: h,
                          videoGoogleMinBitrate: m
                        } = l, f = c2.codecs.find(
                          (t6) => t6.payloadType === e4.payloadType
                        );
                        switch (e4.mimeType.toLowerCase()) {
                          case "audio/opus":
                          case "audio/multiopus":
                            void 0 !== t5 && (f.parameters["sprop-stereo"] = t5 ? 1 : 0, r4.stereo = t5 ? 1 : 0), void 0 !== a4 && (f.parameters.useinbandfec = a4 ? 1 : 0, r4.useinbandfec = a4 ? 1 : 0), void 0 !== i3 && (f.parameters.usedtx = i3 ? 1 : 0, r4.usedtx = i3 ? 1 : 0), void 0 !== s3 && (r4.maxplaybackrate = s3), void 0 !== o2 && (r4.maxaveragebitrate = o2), void 0 !== d2 && (f.parameters.ptime = d2, r4.ptime = d2), p2 || (f.rtcpFeedback = f.rtcpFeedback.filter(
                              (e5) => "nack" !== e5.type || e5.parameter
                            ), n3 = n3.filter(
                              (e5) => "nack" !== e5.type || e5.parameter
                            ));
                            break;
                          case "video/vp8":
                          case "video/vp9":
                          case "video/h264":
                          case "video/h265":
                            void 0 !== u2 && (r4["x-google-start-bitrate"] = u2), void 0 !== h && (r4["x-google-max-bitrate"] = h), void 0 !== m && (r4["x-google-min-bitrate"] = m);
                        }
                      }
                      const a3 = { payload: e4.payloadType, config: "" };
                      for (const e5 of Object.keys(r4))
                        a3.config && (a3.config += ";"), a3.config += `${e5}=${r4[e5]}`;
                      a3.config && this._mediaObject.fmtp.push(a3);
                      for (const t5 of n3)
                        this._mediaObject.rtcpFb.push({
                          payload: e4.payloadType,
                          type: t5.type,
                          subtype: t5.parameter
                        });
                    }
                    this._mediaObject.payloads = p.codecs.map((e4) => e4.payloadType).join(" "), this._mediaObject.ext = [];
                    for (const e4 of p.headerExtensions) {
                      (s2.ext || []).some((t4) => t4.uri === e4.uri) && this._mediaObject.ext.push({ uri: e4.uri, value: e4.id });
                    }
                    if (u && "extmap-allow-mixed" === s2.extmapAllowMixed && (this._mediaObject.extmapAllowMixed = "extmap-allow-mixed"), s2.simulcast) {
                      this._mediaObject.simulcast = {
                        dir1: "recv",
                        list1: s2.simulcast.list1
                      }, this._mediaObject.rids = [];
                      for (const e4 of s2.rids || [])
                        "send" === e4.direction && this._mediaObject.rids.push({
                          id: e4.id,
                          direction: "recv"
                        });
                    } else if (s2.simulcast_03) {
                      this._mediaObject.simulcast_03 = {
                        value: s2.simulcast_03.value.replace(/send/g, "recv")
                      }, this._mediaObject.rids = [];
                      for (const e4 of s2.rids || [])
                        "send" === e4.direction && this._mediaObject.rids.push({
                          id: e4.id,
                          direction: "recv"
                        });
                    }
                    this._mediaObject.rtcpMux = "rtcp-mux", this._mediaObject.rtcpRsize = "rtcp-rsize", this._planB && "video" === this._mediaObject.type && (this._mediaObject.xGoogleFlag = "conference");
                    break;
                  case "application":
                    "number" == typeof s2.sctpPort ? (this._mediaObject.payloads = "webrtc-datachannel", this._mediaObject.sctpPort = n2.port, this._mediaObject.maxMessageSize = n2.maxMessageSize) : s2.sctpmap && (this._mediaObject.payloads = n2.port, this._mediaObject.sctpmap = {
                      app: "webrtc-datachannel",
                      sctpmapNumber: n2.port,
                      maxMessageSize: n2.maxMessageSize
                    });
                }
              }
              setDtlsRole(e3) {
                switch (e3) {
                  case "client":
                    this._mediaObject.setup = "active";
                    break;
                  case "server":
                    this._mediaObject.setup = "passive";
                    break;
                  case "auto":
                    this._mediaObject.setup = "actpass";
                }
              }
              resume() {
                this._mediaObject.direction = "recvonly";
              }
              muxSimulcastStreams(e3) {
                var t3;
                if (!this._mediaObject.simulcast || !this._mediaObject.simulcast.list1)
                  return;
                const r3 = {};
                for (const t4 of e3)
                  t4.rid && (r3[t4.rid] = t4);
                const n2 = this._mediaObject.simulcast.list1, a2 = s.parseSimulcastStreamList(n2);
                for (const e4 of a2)
                  for (const n3 of e4)
                    n3.paused = !(null === (t3 = r3[n3.scid]) || void 0 === t3 ? void 0 : t3.active);
                this._mediaObject.simulcast.list1 = a2.map(
                  (e4) => e4.map((e5) => `${e5.paused ? "~" : ""}${e5.scid}`).join(",")
                ).join(";");
              }
            };
            function d(e3) {
              const t3 = new RegExp("^(audio|video)/(.+)", "i").exec(e3.mimeType);
              if (!t3)
                throw new TypeError("invalid codec.mimeType");
              return t3[2];
            }
            t2.OfferMediaSection = class extends c {
              constructor({
                iceParameters: e3,
                iceCandidates: t3,
                dtlsParameters: r3,
                sctpParameters: n2,
                plainRtpParameters: a2,
                planB: i2 = false,
                mid: s2,
                kind: o2,
                offerRtpParameters: c2,
                streamId: p,
                trackId: l,
                oldDataChannelSpec: u = false
              }) {
                switch (super({
                  iceParameters: e3,
                  iceCandidates: t3,
                  dtlsParameters: r3,
                  planB: i2
                }), this._mediaObject.mid = String(s2), this._mediaObject.type = o2, a2 ? (this._mediaObject.connection = {
                  ip: a2.ip,
                  version: a2.ipVersion
                }, this._mediaObject.protocol = "RTP/AVP", this._mediaObject.port = a2.port) : (this._mediaObject.connection = {
                  ip: "127.0.0.1",
                  version: 4
                }, this._mediaObject.protocol = n2 ? "UDP/DTLS/SCTP" : "UDP/TLS/RTP/SAVPF", this._mediaObject.port = 7), o2) {
                  case "audio":
                  case "video": {
                    this._mediaObject.direction = "sendonly", this._mediaObject.rtp = [], this._mediaObject.rtcpFb = [], this._mediaObject.fmtp = [], this._planB || (this._mediaObject.msid = `${p || "-"} ${l}`);
                    for (const e5 of c2.codecs) {
                      const t5 = {
                        payload: e5.payloadType,
                        codec: d(e5),
                        rate: e5.clockRate
                      };
                      e5.channels > 1 && (t5.encoding = e5.channels), this._mediaObject.rtp.push(t5);
                      const r5 = { payload: e5.payloadType, config: "" };
                      for (const t6 of Object.keys(e5.parameters))
                        r5.config && (r5.config += ";"), r5.config += `${t6}=${e5.parameters[t6]}`;
                      r5.config && this._mediaObject.fmtp.push(r5);
                      for (const t6 of e5.rtcpFeedback)
                        this._mediaObject.rtcpFb.push({
                          payload: e5.payloadType,
                          type: t6.type,
                          subtype: t6.parameter
                        });
                    }
                    this._mediaObject.payloads = c2.codecs.map((e5) => e5.payloadType).join(" "), this._mediaObject.ext = [];
                    for (const e5 of c2.headerExtensions)
                      this._mediaObject.ext.push({ uri: e5.uri, value: e5.id });
                    this._mediaObject.rtcpMux = "rtcp-mux", this._mediaObject.rtcpRsize = "rtcp-rsize";
                    const e4 = c2.encodings[0], t4 = e4.ssrc, r4 = e4.rtx && e4.rtx.ssrc ? e4.rtx.ssrc : void 0;
                    this._mediaObject.ssrcs = [], this._mediaObject.ssrcGroups = [], c2.rtcp.cname && this._mediaObject.ssrcs.push({
                      id: t4,
                      attribute: "cname",
                      value: c2.rtcp.cname
                    }), this._planB && this._mediaObject.ssrcs.push({
                      id: t4,
                      attribute: "msid",
                      value: `${p || "-"} ${l}`
                    }), r4 && (c2.rtcp.cname && this._mediaObject.ssrcs.push({
                      id: r4,
                      attribute: "cname",
                      value: c2.rtcp.cname
                    }), this._planB && this._mediaObject.ssrcs.push({
                      id: r4,
                      attribute: "msid",
                      value: `${p || "-"} ${l}`
                    }), this._mediaObject.ssrcGroups.push({
                      semantics: "FID",
                      ssrcs: `${t4} ${r4}`
                    }));
                    break;
                  }
                  case "application":
                    u ? (this._mediaObject.payloads = n2.port, this._mediaObject.sctpmap = {
                      app: "webrtc-datachannel",
                      sctpmapNumber: n2.port,
                      maxMessageSize: n2.maxMessageSize
                    }) : (this._mediaObject.payloads = "webrtc-datachannel", this._mediaObject.sctpPort = n2.port, this._mediaObject.maxMessageSize = n2.maxMessageSize);
                }
              }
              setDtlsRole(e3) {
                this._mediaObject.setup = "actpass";
              }
              resume() {
                this._mediaObject.direction = "sendonly";
              }
              planBReceive({ offerRtpParameters: e3, streamId: t3, trackId: r3 }) {
                const n2 = e3.encodings[0], a2 = n2.ssrc, i2 = n2.rtx && n2.rtx.ssrc ? n2.rtx.ssrc : void 0, s2 = this._mediaObject.payloads.split(" ");
                for (const t4 of e3.codecs) {
                  if (s2.includes(String(t4.payloadType)))
                    continue;
                  const e4 = {
                    payload: t4.payloadType,
                    codec: d(t4),
                    rate: t4.clockRate
                  };
                  t4.channels > 1 && (e4.encoding = t4.channels), this._mediaObject.rtp.push(e4);
                  const r4 = { payload: t4.payloadType, config: "" };
                  for (const e5 of Object.keys(t4.parameters))
                    r4.config && (r4.config += ";"), r4.config += `${e5}=${t4.parameters[e5]}`;
                  r4.config && this._mediaObject.fmtp.push(r4);
                  for (const e5 of t4.rtcpFeedback)
                    this._mediaObject.rtcpFb.push({
                      payload: t4.payloadType,
                      type: e5.type,
                      subtype: e5.parameter
                    });
                }
                this._mediaObject.payloads += ` ${e3.codecs.filter(
                  (e4) => !this._mediaObject.payloads.includes(e4.payloadType)
                ).map((e4) => e4.payloadType).join(" ")}`, this._mediaObject.payloads = this._mediaObject.payloads.trim(), e3.rtcp.cname && this._mediaObject.ssrcs.push({
                  id: a2,
                  attribute: "cname",
                  value: e3.rtcp.cname
                }), this._mediaObject.ssrcs.push({
                  id: a2,
                  attribute: "msid",
                  value: `${t3 || "-"} ${r3}`
                }), i2 && (e3.rtcp.cname && this._mediaObject.ssrcs.push({
                  id: i2,
                  attribute: "cname",
                  value: e3.rtcp.cname
                }), this._mediaObject.ssrcs.push({
                  id: i2,
                  attribute: "msid",
                  value: `${t3 || "-"} ${r3}`
                }), this._mediaObject.ssrcGroups.push({
                  semantics: "FID",
                  ssrcs: `${a2} ${i2}`
                }));
              }
              planBStopReceiving({ offerRtpParameters: e3 }) {
                const t3 = e3.encodings[0], r3 = t3.ssrc, n2 = t3.rtx && t3.rtx.ssrc ? t3.rtx.ssrc : void 0;
                this._mediaObject.ssrcs = this._mediaObject.ssrcs.filter(
                  (e4) => e4.id !== r3 && e4.id !== n2
                ), n2 && (this._mediaObject.ssrcGroups = this._mediaObject.ssrcGroups.filter(
                  (e4) => e4.ssrcs !== `${r3} ${n2}`
                ));
              }
            };
          },
          7910: function(e2, t2, r2) {
            "use strict";
            var n = this && this.__createBinding || (Object.create ? function(e3, t3, r3, n2) {
              void 0 === n2 && (n2 = r3);
              var a2 = Object.getOwnPropertyDescriptor(t3, r3);
              a2 && !("get" in a2 ? !t3.__esModule : a2.writable || a2.configurable) || (a2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, n2, a2);
            } : function(e3, t3, r3, n2) {
              void 0 === n2 && (n2 = r3), e3[n2] = t3[r3];
            }), a = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), i = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule)
                return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && n(t3, e3, r3);
              return a(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.RemoteSdp = void 0;
            const s = i(r2(766)), o = r2(8562), c = r2(6698), d = new o.Logger("RemoteSdp");
            t2.RemoteSdp = class {
              constructor({
                iceParameters: e3,
                iceCandidates: t3,
                dtlsParameters: r3,
                sctpParameters: n2,
                plainRtpParameters: a2,
                planB: i2 = false
              }) {
                if (this._mediaSections = [], this._midToIndex = /* @__PURE__ */ new Map(), this._iceParameters = e3, this._iceCandidates = t3, this._dtlsParameters = r3, this._sctpParameters = n2, this._plainRtpParameters = a2, this._planB = i2, this._sdpObject = {
                  version: 0,
                  origin: {
                    address: "0.0.0.0",
                    ipVer: 4,
                    netType: "IN",
                    sessionId: 1e4,
                    sessionVersion: 0,
                    username: "mediasoup-client"
                  },
                  name: "-",
                  timing: { start: 0, stop: 0 },
                  media: []
                }, e3 && e3.iceLite && (this._sdpObject.icelite = "ice-lite"), r3) {
                  this._sdpObject.msidSemantic = { semantic: "WMS", token: "*" };
                  const e4 = this._dtlsParameters.fingerprints.length;
                  this._sdpObject.fingerprint = {
                    type: r3.fingerprints[e4 - 1].algorithm,
                    hash: r3.fingerprints[e4 - 1].value
                  }, this._sdpObject.groups = [{ type: "BUNDLE", mids: "" }];
                }
                a2 && (this._sdpObject.origin.address = a2.ip, this._sdpObject.origin.ipVer = a2.ipVersion);
              }
              updateIceParameters(e3) {
                d.debug("updateIceParameters() [iceParameters:%o]", e3), this._iceParameters = e3, this._sdpObject.icelite = e3.iceLite ? "ice-lite" : void 0;
                for (const t3 of this._mediaSections)
                  t3.setIceParameters(e3);
              }
              updateDtlsRole(e3) {
                d.debug("updateDtlsRole() [role:%s]", e3), this._dtlsParameters.role = e3;
                for (const t3 of this._mediaSections)
                  t3.setDtlsRole(e3);
              }
              getNextMediaSectionIdx() {
                for (let e3 = 0; e3 < this._mediaSections.length; ++e3) {
                  const t3 = this._mediaSections[e3];
                  if (t3.closed)
                    return { idx: e3, reuseMid: t3.mid };
                }
                return { idx: this._mediaSections.length };
              }
              send({
                offerMediaObject: e3,
                reuseMid: t3,
                offerRtpParameters: r3,
                answerRtpParameters: n2,
                codecOptions: a2,
                extmapAllowMixed: i2 = false
              }) {
                const s2 = new c.AnswerMediaSection({
                  iceParameters: this._iceParameters,
                  iceCandidates: this._iceCandidates,
                  dtlsParameters: this._dtlsParameters,
                  plainRtpParameters: this._plainRtpParameters,
                  planB: this._planB,
                  offerMediaObject: e3,
                  offerRtpParameters: r3,
                  answerRtpParameters: n2,
                  codecOptions: a2,
                  extmapAllowMixed: i2
                });
                t3 ? this._replaceMediaSection(s2, t3) : this._midToIndex.has(s2.mid) ? this._replaceMediaSection(s2) : this._addMediaSection(s2);
              }
              receive({
                mid: e3,
                kind: t3,
                offerRtpParameters: r3,
                streamId: n2,
                trackId: a2
              }) {
                const i2 = this._midToIndex.get(e3);
                let s2;
                if (void 0 !== i2 && (s2 = this._mediaSections[i2]), s2)
                  s2.planBReceive({
                    offerRtpParameters: r3,
                    streamId: n2,
                    trackId: a2
                  }), this._replaceMediaSection(s2);
                else {
                  s2 = new c.OfferMediaSection({
                    iceParameters: this._iceParameters,
                    iceCandidates: this._iceCandidates,
                    dtlsParameters: this._dtlsParameters,
                    plainRtpParameters: this._plainRtpParameters,
                    planB: this._planB,
                    mid: e3,
                    kind: t3,
                    offerRtpParameters: r3,
                    streamId: n2,
                    trackId: a2
                  });
                  const i3 = this._mediaSections.find((e4) => e4.closed);
                  i3 ? this._replaceMediaSection(s2, i3.mid) : this._addMediaSection(s2);
                }
              }
              pauseMediaSection(e3) {
                this._findMediaSection(e3).pause();
              }
              resumeSendingMediaSection(e3) {
                this._findMediaSection(e3).resume();
              }
              resumeReceivingMediaSection(e3) {
                this._findMediaSection(e3).resume();
              }
              disableMediaSection(e3) {
                this._findMediaSection(e3).disable();
              }
              closeMediaSection(e3) {
                const t3 = this._findMediaSection(e3);
                return e3 === this._firstMid ? (d.debug(
                  "closeMediaSection() | cannot close first media section, disabling it instead [mid:%s]",
                  e3
                ), this.disableMediaSection(e3), false) : (t3.close(), this._regenerateBundleMids(), true);
              }
              muxMediaSectionSimulcast(e3, t3) {
                const r3 = this._findMediaSection(e3);
                r3.muxSimulcastStreams(t3), this._replaceMediaSection(r3);
              }
              planBStopReceiving({ mid: e3, offerRtpParameters: t3 }) {
                const r3 = this._findMediaSection(e3);
                r3.planBStopReceiving({ offerRtpParameters: t3 }), this._replaceMediaSection(r3);
              }
              sendSctpAssociation({ offerMediaObject: e3 }) {
                const t3 = new c.AnswerMediaSection({
                  iceParameters: this._iceParameters,
                  iceCandidates: this._iceCandidates,
                  dtlsParameters: this._dtlsParameters,
                  sctpParameters: this._sctpParameters,
                  plainRtpParameters: this._plainRtpParameters,
                  offerMediaObject: e3
                });
                this._addMediaSection(t3);
              }
              receiveSctpAssociation({ oldDataChannelSpec: e3 = false } = {}) {
                const t3 = new c.OfferMediaSection({
                  iceParameters: this._iceParameters,
                  iceCandidates: this._iceCandidates,
                  dtlsParameters: this._dtlsParameters,
                  sctpParameters: this._sctpParameters,
                  plainRtpParameters: this._plainRtpParameters,
                  mid: "datachannel",
                  kind: "application",
                  oldDataChannelSpec: e3
                });
                this._addMediaSection(t3);
              }
              getSdp() {
                return this._sdpObject.origin.sessionVersion++, s.write(this._sdpObject);
              }
              _addMediaSection(e3) {
                this._firstMid || (this._firstMid = e3.mid), this._mediaSections.push(e3), this._midToIndex.set(e3.mid, this._mediaSections.length - 1), this._sdpObject.media.push(e3.getObject()), this._regenerateBundleMids();
              }
              _replaceMediaSection(e3, t3) {
                if ("string" == typeof t3) {
                  const r3 = this._midToIndex.get(t3);
                  if (void 0 === r3)
                    throw new Error(`no media section found for reuseMid '${t3}'`);
                  const n2 = this._mediaSections[r3];
                  this._mediaSections[r3] = e3, this._midToIndex.delete(n2.mid), this._midToIndex.set(e3.mid, r3), this._sdpObject.media[r3] = e3.getObject(), this._regenerateBundleMids();
                } else {
                  const t4 = this._midToIndex.get(e3.mid);
                  if (void 0 === t4)
                    throw new Error(`no media section found with mid '${e3.mid}'`);
                  this._mediaSections[t4] = e3, this._sdpObject.media[t4] = e3.getObject();
                }
              }
              _findMediaSection(e3) {
                const t3 = this._midToIndex.get(e3);
                if (void 0 === t3)
                  throw new Error(`no media section found with mid '${e3}'`);
                return this._mediaSections[t3];
              }
              _regenerateBundleMids() {
                this._dtlsParameters && (this._sdpObject.groups[0].mids = this._mediaSections.filter((e3) => !e3.closed).map((e3) => e3.mid).join(" "));
              }
            };
          },
          2267: function(e2, t2, r2) {
            "use strict";
            var n = this && this.__createBinding || (Object.create ? function(e3, t3, r3, n2) {
              void 0 === n2 && (n2 = r3);
              var a2 = Object.getOwnPropertyDescriptor(t3, r3);
              a2 && !("get" in a2 ? !t3.__esModule : a2.writable || a2.configurable) || (a2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, n2, a2);
            } : function(e3, t3, r3, n2) {
              void 0 === n2 && (n2 = r3), e3[n2] = t3[r3];
            }), a = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), i = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule)
                return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && n(t3, e3, r3);
              return a(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.applyCodecParameters = t2.getCname = t2.extractDtlsParameters = t2.extractRtpCapabilities = void 0;
            const s = i(r2(766));
            t2.extractRtpCapabilities = function({ sdpObject: e3 }) {
              const t3 = /* @__PURE__ */ new Map(), r3 = [];
              let n2 = false, a2 = false;
              for (const i2 of e3.media) {
                const e4 = i2.type;
                switch (e4) {
                  case "audio":
                    if (n2)
                      continue;
                    n2 = true;
                    break;
                  case "video":
                    if (a2)
                      continue;
                    a2 = true;
                    break;
                  default:
                    continue;
                }
                for (const r4 of i2.rtp) {
                  const n3 = {
                    kind: e4,
                    mimeType: `${e4}/${r4.codec}`,
                    preferredPayloadType: r4.payload,
                    clockRate: r4.rate,
                    channels: r4.encoding,
                    parameters: {},
                    rtcpFeedback: []
                  };
                  t3.set(n3.preferredPayloadType, n3);
                }
                for (const e5 of i2.fmtp || []) {
                  const r4 = s.parseParams(e5.config), n3 = t3.get(e5.payload);
                  n3 && (r4 && r4.hasOwnProperty("profile-level-id") && (r4["profile-level-id"] = String(r4["profile-level-id"])), n3.parameters = r4);
                }
                for (const r4 of i2.rtcpFb || []) {
                  const n3 = { type: r4.type, parameter: r4.subtype };
                  if (n3.parameter || delete n3.parameter, "*" !== r4.payload) {
                    const e5 = t3.get(r4.payload);
                    if (!e5)
                      continue;
                    e5.rtcpFeedback.push(n3);
                  } else
                    for (const r5 of t3.values())
                      r5.kind !== e4 || /.+\/rtx$/i.test(r5.mimeType) || r5.rtcpFeedback.push(n3);
                }
                for (const t4 of i2.ext || []) {
                  if (t4["encrypt-uri"])
                    continue;
                  const n3 = { kind: e4, uri: t4.uri, preferredId: t4.value };
                  r3.push(n3);
                }
              }
              return { codecs: Array.from(t3.values()), headerExtensions: r3 };
            }, t2.extractDtlsParameters = function({ sdpObject: e3 }) {
              const t3 = (e3.media || []).find((e4) => e4.iceUfrag && 0 !== e4.port);
              if (!t3)
                throw new Error("no active media section found");
              const r3 = t3.fingerprint || e3.fingerprint;
              let n2;
              switch (t3.setup) {
                case "active":
                  n2 = "client";
                  break;
                case "passive":
                  n2 = "server";
                  break;
                case "actpass":
                  n2 = "auto";
              }
              return {
                role: n2,
                fingerprints: [{ algorithm: r3.type, value: r3.hash }]
              };
            }, t2.getCname = function({ offerMediaObject: e3 }) {
              const t3 = (e3.ssrcs || []).find((e4) => "cname" === e4.attribute);
              return t3 ? t3.value : "";
            }, t2.applyCodecParameters = function({
              offerRtpParameters: e3,
              answerMediaObject: t3
            }) {
              for (const r3 of e3.codecs) {
                const e4 = r3.mimeType.toLowerCase();
                if ("audio/opus" !== e4)
                  continue;
                if (!(t3.rtp || []).find((e5) => e5.payload === r3.payloadType))
                  continue;
                t3.fmtp = t3.fmtp || [];
                let n2 = t3.fmtp.find((e5) => e5.payload === r3.payloadType);
                n2 || (n2 = { payload: r3.payloadType, config: "" }, t3.fmtp.push(n2));
                const a2 = s.parseParams(n2.config);
                switch (e4) {
                  case "audio/opus": {
                    const e5 = r3.parameters["sprop-stereo"];
                    void 0 !== e5 && (a2.stereo = e5 ? 1 : 0);
                    break;
                  }
                }
                n2.config = "";
                for (const e5 of Object.keys(a2))
                  n2.config && (n2.config += ";"), n2.config += `${e5}=${a2[e5]}`;
              }
            };
          },
          9875: (e2, t2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.addLegacySimulcast = t2.getRtpEncodings = void 0, t2.getRtpEncodings = function({ offerMediaObject: e3, track: t3 }) {
              let r2;
              const n = /* @__PURE__ */ new Set();
              for (const a2 of e3.ssrcs || []) {
                if ("msid" !== a2.attribute)
                  continue;
                if (a2.value.split(" ")[1] === t3.id) {
                  const e4 = a2.id;
                  n.add(e4), r2 || (r2 = e4);
                }
              }
              if (0 === n.size)
                throw new Error(
                  `a=ssrc line with msid information not found [track.id:${t3.id}]`
                );
              const a = /* @__PURE__ */ new Map();
              for (const t4 of e3.ssrcGroups || []) {
                if ("FID" !== t4.semantics)
                  continue;
                let [e4, r3] = t4.ssrcs.split(/\s+/);
                e4 = Number(e4), r3 = Number(r3), n.has(e4) && (n.delete(e4), n.delete(r3), a.set(e4, r3));
              }
              for (const e4 of n)
                a.set(e4, null);
              const i = [];
              for (const [e4, t4] of a) {
                const r3 = { ssrc: e4 };
                t4 && (r3.rtx = { ssrc: t4 }), i.push(r3);
              }
              return i;
            }, t2.addLegacySimulcast = function({
              offerMediaObject: e3,
              track: t3,
              numStreams: r2
            }) {
              if (r2 <= 1)
                throw new TypeError("numStreams must be greater than 1");
              let n, a, i;
              if (!(e3.ssrcs || []).find((e4) => {
                if ("msid" !== e4.attribute)
                  return false;
                return e4.value.split(" ")[1] === t3.id && (n = e4.id, i = e4.value.split(" ")[0], true);
              }))
                throw new Error(
                  `a=ssrc line with msid information not found [track.id:${t3.id}]`
                );
              (e3.ssrcGroups || []).some((e4) => {
                if ("FID" !== e4.semantics)
                  return false;
                const t4 = e4.ssrcs.split(/\s+/);
                return Number(t4[0]) === n && (a = Number(t4[1]), true);
              });
              const s = e3.ssrcs.find(
                (e4) => "cname" === e4.attribute && e4.id === n
              );
              if (!s)
                throw new Error(
                  `a=ssrc line with cname information not found [track.id:${t3.id}]`
                );
              const o = s.value, c = [], d = [];
              for (let e4 = 0; e4 < r2; ++e4)
                c.push(n + e4), a && d.push(a + e4);
              e3.ssrcGroups = e3.ssrcGroups || [], e3.ssrcs = e3.ssrcs || [], e3.ssrcGroups.push({ semantics: "SIM", ssrcs: c.join(" ") });
              for (let r3 = 0; r3 < c.length; ++r3) {
                const n2 = c[r3];
                e3.ssrcs.push({ id: n2, attribute: "cname", value: o }), e3.ssrcs.push({
                  id: n2,
                  attribute: "msid",
                  value: `${i} ${t3.id}`
                });
              }
              for (let r3 = 0; r3 < d.length; ++r3) {
                const n2 = c[r3], a2 = d[r3];
                e3.ssrcs.push({ id: a2, attribute: "cname", value: o }), e3.ssrcs.push({
                  id: a2,
                  attribute: "msid",
                  value: `${i} ${t3.id}`
                }), e3.ssrcGroups.push({ semantics: "FID", ssrcs: `${n2} ${a2}` });
              }
            };
          },
          9072: (e2, t2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.addLegacySimulcast = t2.getRtpEncodings = void 0, t2.getRtpEncodings = function({ offerMediaObject: e3 }) {
              const t3 = /* @__PURE__ */ new Set();
              for (const r3 of e3.ssrcs || []) {
                const e4 = r3.id;
                t3.add(e4);
              }
              if (0 === t3.size)
                throw new Error("no a=ssrc lines found");
              const r2 = /* @__PURE__ */ new Map();
              for (const n2 of e3.ssrcGroups || []) {
                if ("FID" !== n2.semantics)
                  continue;
                let [e4, a] = n2.ssrcs.split(/\s+/);
                e4 = Number(e4), a = Number(a), t3.has(e4) && (t3.delete(e4), t3.delete(a), r2.set(e4, a));
              }
              for (const e4 of t3)
                r2.set(e4, null);
              const n = [];
              for (const [e4, t4] of r2) {
                const r3 = { ssrc: e4 };
                t4 && (r3.rtx = { ssrc: t4 }), n.push(r3);
              }
              return n;
            }, t2.addLegacySimulcast = function({
              offerMediaObject: e3,
              numStreams: t3
            }) {
              if (t3 <= 1)
                throw new TypeError("numStreams must be greater than 1");
              const r2 = (e3.ssrcs || []).find((e4) => "msid" === e4.attribute);
              if (!r2)
                throw new Error("a=ssrc line with msid information not found");
              const [n, a] = r2.value.split(" "), i = r2.id;
              let s;
              (e3.ssrcGroups || []).some((e4) => {
                if ("FID" !== e4.semantics)
                  return false;
                const t4 = e4.ssrcs.split(/\s+/);
                return Number(t4[0]) === i && (s = Number(t4[1]), true);
              });
              const o = e3.ssrcs.find((e4) => "cname" === e4.attribute);
              if (!o)
                throw new Error("a=ssrc line with cname information not found");
              const c = o.value, d = [], p = [];
              for (let e4 = 0; e4 < t3; ++e4)
                d.push(i + e4), s && p.push(s + e4);
              e3.ssrcGroups = [], e3.ssrcs = [], e3.ssrcGroups.push({ semantics: "SIM", ssrcs: d.join(" ") });
              for (let t4 = 0; t4 < d.length; ++t4) {
                const r3 = d[t4];
                e3.ssrcs.push({ id: r3, attribute: "cname", value: c }), e3.ssrcs.push({
                  id: r3,
                  attribute: "msid",
                  value: `${n} ${a}`
                });
              }
              for (let t4 = 0; t4 < p.length; ++t4) {
                const r3 = d[t4], i2 = p[t4];
                e3.ssrcs.push({ id: i2, attribute: "cname", value: c }), e3.ssrcs.push({
                  id: i2,
                  attribute: "msid",
                  value: `${n} ${a}`
                }), e3.ssrcGroups.push({ semantics: "FID", ssrcs: `${r3} ${i2}` });
              }
            };
          },
          960: function(e2, t2, r2) {
            "use strict";
            var n = this && this.__createBinding || (Object.create ? function(e3, t3, r3, n2) {
              void 0 === n2 && (n2 = r3);
              var a2 = Object.getOwnPropertyDescriptor(t3, r3);
              a2 && !("get" in a2 ? !t3.__esModule : a2.writable || a2.configurable) || (a2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, n2, a2);
            } : function(e3, t3, r3, n2) {
              void 0 === n2 && (n2 = r3), e3[n2] = t3[r3];
            }), a = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), i = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule)
                return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && n(t3, e3, r3);
              return a(t3, e3), t3;
            }, s = this && this.__importDefault || function(e3) {
              return e3 && e3.__esModule ? e3 : { default: e3 };
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.debug = t2.parseScalabilityMode = t2.detectDevice = t2.Device = t2.version = t2.types = void 0;
            const o = s(r2(388));
            t2.debug = o.default;
            const c = r2(3120);
            Object.defineProperty(t2, "Device", {
              enumerable: true,
              get: function() {
                return c.Device;
              }
            }), Object.defineProperty(t2, "detectDevice", {
              enumerable: true,
              get: function() {
                return c.detectDevice;
              }
            });
            const d = i(r2(53));
            t2.types = d, t2.version = "3.6.84";
            var p = r2(2770);
            Object.defineProperty(t2, "parseScalabilityMode", {
              enumerable: true,
              get: function() {
                return p.parse;
              }
            });
          },
          5280: function(e2, t2, r2) {
            "use strict";
            var n = this && this.__createBinding || (Object.create ? function(e3, t3, r3, n2) {
              void 0 === n2 && (n2 = r3);
              var a2 = Object.getOwnPropertyDescriptor(t3, r3);
              a2 && !("get" in a2 ? !t3.__esModule : a2.writable || a2.configurable) || (a2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, n2, a2);
            } : function(e3, t3, r3, n2) {
              void 0 === n2 && (n2 = r3), e3[n2] = t3[r3];
            }), a = this && this.__setModuleDefault || (Object.create ? function(e3, t3) {
              Object.defineProperty(e3, "default", {
                enumerable: true,
                value: t3
              });
            } : function(e3, t3) {
              e3.default = t3;
            }), i = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule)
                return e3;
              var t3 = {};
              if (null != e3)
                for (var r3 in e3)
                  "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && n(t3, e3, r3);
              return a(t3, e3), t3;
            };
            Object.defineProperty(t2, "__esModule", { value: true }), t2.canReceive = t2.canSend = t2.generateProbatorRtpParameters = t2.reduceCodecs = t2.getSendingRemoteRtpParameters = t2.getSendingRtpParameters = t2.getRecvRtpCapabilities = t2.getExtendedRtpCapabilities = t2.validateSctpStreamParameters = t2.validateSctpParameters = t2.validateNumSctpStreams = t2.validateSctpCapabilities = t2.validateRtcpParameters = t2.validateRtpEncodingParameters = t2.validateRtpHeaderExtensionParameters = t2.validateRtpCodecParameters = t2.validateRtpParameters = t2.validateRtpHeaderExtension = t2.validateRtcpFeedback = t2.validateRtpCodecCapability = t2.validateRtpCapabilities = void 0;
            const s = i(r2(7855)), o = i(r2(3347));
            function c(e3) {
              const t3 = new RegExp("^(audio|video)/(.+)", "i");
              if ("object" != typeof e3)
                throw new TypeError("codec is not an object");
              if (!e3.mimeType || "string" != typeof e3.mimeType)
                throw new TypeError("missing codec.mimeType");
              const r3 = t3.exec(e3.mimeType);
              if (!r3)
                throw new TypeError("invalid codec.mimeType");
              if (e3.kind = r3[1].toLowerCase(), e3.preferredPayloadType && "number" != typeof e3.preferredPayloadType)
                throw new TypeError("invalid codec.preferredPayloadType");
              if ("number" != typeof e3.clockRate)
                throw new TypeError("missing codec.clockRate");
              "audio" === e3.kind ? "number" != typeof e3.channels && (e3.channels = 1) : delete e3.channels, e3.parameters && "object" == typeof e3.parameters || (e3.parameters = {});
              for (const t4 of Object.keys(e3.parameters)) {
                let r4 = e3.parameters[t4];
                if (void 0 === r4 && (e3.parameters[t4] = "", r4 = ""), "string" != typeof r4 && "number" != typeof r4)
                  throw new TypeError(
                    `invalid codec parameter [key:${t4}s, value:${r4}]`
                  );
                if ("apt" === t4 && "number" != typeof r4)
                  throw new TypeError("invalid codec apt parameter");
              }
              e3.rtcpFeedback && Array.isArray(e3.rtcpFeedback) || (e3.rtcpFeedback = []);
              for (const t4 of e3.rtcpFeedback)
                d(t4);
            }
            function d(e3) {
              if ("object" != typeof e3)
                throw new TypeError("fb is not an object");
              if (!e3.type || "string" != typeof e3.type)
                throw new TypeError("missing fb.type");
              e3.parameter && "string" == typeof e3.parameter || (e3.parameter = "");
            }
            function p(e3) {
              if ("object" != typeof e3)
                throw new TypeError("ext is not an object");
              if ("audio" !== e3.kind && "video" !== e3.kind)
                throw new TypeError("invalid ext.kind");
              if (!e3.uri || "string" != typeof e3.uri)
                throw new TypeError("missing ext.uri");
              if ("number" != typeof e3.preferredId)
                throw new TypeError("missing ext.preferredId");
              if (e3.preferredEncrypt && "boolean" != typeof e3.preferredEncrypt)
                throw new TypeError("invalid ext.preferredEncrypt");
              if (e3.preferredEncrypt || (e3.preferredEncrypt = false), e3.direction && "string" != typeof e3.direction)
                throw new TypeError("invalid ext.direction");
              e3.direction || (e3.direction = "sendrecv");
            }
            function l(e3) {
              if ("object" != typeof e3)
                throw new TypeError("params is not an object");
              if (e3.mid && "string" != typeof e3.mid)
                throw new TypeError("params.mid is not a string");
              if (!Array.isArray(e3.codecs))
                throw new TypeError("missing params.codecs");
              for (const t3 of e3.codecs)
                u(t3);
              if (e3.headerExtensions && !Array.isArray(e3.headerExtensions))
                throw new TypeError("params.headerExtensions is not an array");
              e3.headerExtensions || (e3.headerExtensions = []);
              for (const t3 of e3.headerExtensions)
                h(t3);
              if (e3.encodings && !Array.isArray(e3.encodings))
                throw new TypeError("params.encodings is not an array");
              e3.encodings || (e3.encodings = []);
              for (const t3 of e3.encodings)
                m(t3);
              if (e3.rtcp && "object" != typeof e3.rtcp)
                throw new TypeError("params.rtcp is not an object");
              e3.rtcp || (e3.rtcp = {}), f(e3.rtcp);
            }
            function u(e3) {
              const t3 = new RegExp("^(audio|video)/(.+)", "i");
              if ("object" != typeof e3)
                throw new TypeError("codec is not an object");
              if (!e3.mimeType || "string" != typeof e3.mimeType)
                throw new TypeError("missing codec.mimeType");
              const r3 = t3.exec(e3.mimeType);
              if (!r3)
                throw new TypeError("invalid codec.mimeType");
              if ("number" != typeof e3.payloadType)
                throw new TypeError("missing codec.payloadType");
              if ("number" != typeof e3.clockRate)
                throw new TypeError("missing codec.clockRate");
              "audio" === r3[1].toLowerCase() ? "number" != typeof e3.channels && (e3.channels = 1) : delete e3.channels, e3.parameters && "object" == typeof e3.parameters || (e3.parameters = {});
              for (const t4 of Object.keys(e3.parameters)) {
                let r4 = e3.parameters[t4];
                if (void 0 === r4 && (e3.parameters[t4] = "", r4 = ""), "string" != typeof r4 && "number" != typeof r4)
                  throw new TypeError(
                    `invalid codec parameter [key:${t4}s, value:${r4}]`
                  );
                if ("apt" === t4 && "number" != typeof r4)
                  throw new TypeError("invalid codec apt parameter");
              }
              e3.rtcpFeedback && Array.isArray(e3.rtcpFeedback) || (e3.rtcpFeedback = []);
              for (const t4 of e3.rtcpFeedback)
                d(t4);
            }
            function h(e3) {
              if ("object" != typeof e3)
                throw new TypeError("ext is not an object");
              if (!e3.uri || "string" != typeof e3.uri)
                throw new TypeError("missing ext.uri");
              if ("number" != typeof e3.id)
                throw new TypeError("missing ext.id");
              if (e3.encrypt && "boolean" != typeof e3.encrypt)
                throw new TypeError("invalid ext.encrypt");
              e3.encrypt || (e3.encrypt = false), e3.parameters && "object" == typeof e3.parameters || (e3.parameters = {});
              for (const t3 of Object.keys(e3.parameters)) {
                let r3 = e3.parameters[t3];
                if (void 0 === r3 && (e3.parameters[t3] = "", r3 = ""), "string" != typeof r3 && "number" != typeof r3)
                  throw new TypeError("invalid header extension parameter");
              }
            }
            function m(e3) {
              if ("object" != typeof e3)
                throw new TypeError("encoding is not an object");
              if (e3.ssrc && "number" != typeof e3.ssrc)
                throw new TypeError("invalid encoding.ssrc");
              if (e3.rid && "string" != typeof e3.rid)
                throw new TypeError("invalid encoding.rid");
              if (e3.rtx && "object" != typeof e3.rtx)
                throw new TypeError("invalid encoding.rtx");
              if (e3.rtx && "number" != typeof e3.rtx.ssrc)
                throw new TypeError("missing encoding.rtx.ssrc");
              if (e3.dtx && "boolean" == typeof e3.dtx || (e3.dtx = false), e3.scalabilityMode && "string" != typeof e3.scalabilityMode)
                throw new TypeError("invalid encoding.scalabilityMode");
            }
            function f(e3) {
              if ("object" != typeof e3)
                throw new TypeError("rtcp is not an object");
              if (e3.cname && "string" != typeof e3.cname)
                throw new TypeError("invalid rtcp.cname");
              e3.reducedSize && "boolean" == typeof e3.reducedSize || (e3.reducedSize = true);
            }
            function _(e3) {
              if ("object" != typeof e3)
                throw new TypeError("numStreams is not an object");
              if ("number" != typeof e3.OS)
                throw new TypeError("missing numStreams.OS");
              if ("number" != typeof e3.MIS)
                throw new TypeError("missing numStreams.MIS");
            }
            function g(e3) {
              return !!e3 && /.+\/rtx$/i.test(e3.mimeType);
            }
            function v(e3, t3, { strict: r3 = false, modify: n2 = false } = {}) {
              const a2 = e3.mimeType.toLowerCase();
              if (a2 !== t3.mimeType.toLowerCase())
                return false;
              if (e3.clockRate !== t3.clockRate)
                return false;
              if (e3.channels !== t3.channels)
                return false;
              switch (a2) {
                case "video/h264":
                  if (r3) {
                    if ((e3.parameters["packetization-mode"] || 0) !== (t3.parameters["packetization-mode"] || 0))
                      return false;
                    if (!s.isSameProfile(e3.parameters, t3.parameters))
                      return false;
                    let r4;
                    try {
                      r4 = s.generateProfileLevelIdForAnswer(
                        e3.parameters,
                        t3.parameters
                      );
                    } catch (e4) {
                      return false;
                    }
                    n2 && (r4 ? (e3.parameters["profile-level-id"] = r4, t3.parameters["profile-level-id"] = r4) : (delete e3.parameters["profile-level-id"], delete t3.parameters["profile-level-id"]));
                  }
                  break;
                case "video/vp9":
                  if (r3) {
                    if ((e3.parameters["profile-id"] || 0) !== (t3.parameters["profile-id"] || 0))
                      return false;
                  }
              }
              return true;
            }
            function y(e3, t3) {
              return (!e3.kind || !t3.kind || e3.kind === t3.kind) && e3.uri === t3.uri;
            }
            function b(e3, t3) {
              const r3 = [];
              for (const n2 of e3.rtcpFeedback || []) {
                const e4 = (t3.rtcpFeedback || []).find(
                  (e5) => e5.type === n2.type && (e5.parameter === n2.parameter || !e5.parameter && !n2.parameter)
                );
                e4 && r3.push(e4);
              }
              return r3;
            }
            t2.validateRtpCapabilities = function(e3) {
              if ("object" != typeof e3)
                throw new TypeError("caps is not an object");
              if (e3.codecs && !Array.isArray(e3.codecs))
                throw new TypeError("caps.codecs is not an array");
              e3.codecs || (e3.codecs = []);
              for (const t3 of e3.codecs)
                c(t3);
              if (e3.headerExtensions && !Array.isArray(e3.headerExtensions))
                throw new TypeError("caps.headerExtensions is not an array");
              e3.headerExtensions || (e3.headerExtensions = []);
              for (const t3 of e3.headerExtensions)
                p(t3);
            }, t2.validateRtpCodecCapability = c, t2.validateRtcpFeedback = d, t2.validateRtpHeaderExtension = p, t2.validateRtpParameters = l, t2.validateRtpCodecParameters = u, t2.validateRtpHeaderExtensionParameters = h, t2.validateRtpEncodingParameters = m, t2.validateRtcpParameters = f, t2.validateSctpCapabilities = function(e3) {
              if ("object" != typeof e3)
                throw new TypeError("caps is not an object");
              if (!e3.numStreams || "object" != typeof e3.numStreams)
                throw new TypeError("missing caps.numStreams");
              _(e3.numStreams);
            }, t2.validateNumSctpStreams = _, t2.validateSctpParameters = function(e3) {
              if ("object" != typeof e3)
                throw new TypeError("params is not an object");
              if ("number" != typeof e3.port)
                throw new TypeError("missing params.port");
              if ("number" != typeof e3.OS)
                throw new TypeError("missing params.OS");
              if ("number" != typeof e3.MIS)
                throw new TypeError("missing params.MIS");
              if ("number" != typeof e3.maxMessageSize)
                throw new TypeError("missing params.maxMessageSize");
            }, t2.validateSctpStreamParameters = function(e3) {
              if ("object" != typeof e3)
                throw new TypeError("params is not an object");
              if ("number" != typeof e3.streamId)
                throw new TypeError("missing params.streamId");
              let t3 = false;
              if ("boolean" == typeof e3.ordered ? t3 = true : e3.ordered = true, e3.maxPacketLifeTime && "number" != typeof e3.maxPacketLifeTime)
                throw new TypeError("invalid params.maxPacketLifeTime");
              if (e3.maxRetransmits && "number" != typeof e3.maxRetransmits)
                throw new TypeError("invalid params.maxRetransmits");
              if (e3.maxPacketLifeTime && e3.maxRetransmits)
                throw new TypeError(
                  "cannot provide both maxPacketLifeTime and maxRetransmits"
                );
              if (t3 && e3.ordered && (e3.maxPacketLifeTime || e3.maxRetransmits))
                throw new TypeError(
                  "cannot be ordered with maxPacketLifeTime or maxRetransmits"
                );
              if (t3 || !e3.maxPacketLifeTime && !e3.maxRetransmits || (e3.ordered = false), e3.label && "string" != typeof e3.label)
                throw new TypeError("invalid params.label");
              if (e3.protocol && "string" != typeof e3.protocol)
                throw new TypeError("invalid params.protocol");
            }, t2.getExtendedRtpCapabilities = function(e3, t3) {
              const r3 = { codecs: [], headerExtensions: [] };
              for (const n2 of t3.codecs || []) {
                if (g(n2))
                  continue;
                const t4 = (e3.codecs || []).find(
                  (e4) => v(e4, n2, { strict: true, modify: true })
                );
                if (!t4)
                  continue;
                const a2 = {
                  mimeType: t4.mimeType,
                  kind: t4.kind,
                  clockRate: t4.clockRate,
                  channels: t4.channels,
                  localPayloadType: t4.preferredPayloadType,
                  localRtxPayloadType: void 0,
                  remotePayloadType: n2.preferredPayloadType,
                  remoteRtxPayloadType: void 0,
                  localParameters: t4.parameters,
                  remoteParameters: n2.parameters,
                  rtcpFeedback: b(t4, n2)
                };
                r3.codecs.push(a2);
              }
              for (const n2 of r3.codecs) {
                const r4 = e3.codecs.find(
                  (e4) => g(e4) && e4.parameters.apt === n2.localPayloadType
                ), a2 = t3.codecs.find(
                  (e4) => g(e4) && e4.parameters.apt === n2.remotePayloadType
                );
                r4 && a2 && (n2.localRtxPayloadType = r4.preferredPayloadType, n2.remoteRtxPayloadType = a2.preferredPayloadType);
              }
              for (const n2 of t3.headerExtensions) {
                const t4 = e3.headerExtensions.find((e4) => y(e4, n2));
                if (!t4)
                  continue;
                const a2 = {
                  kind: n2.kind,
                  uri: n2.uri,
                  sendId: t4.preferredId,
                  recvId: n2.preferredId,
                  encrypt: t4.preferredEncrypt,
                  direction: "sendrecv"
                };
                switch (n2.direction) {
                  case "sendrecv":
                    a2.direction = "sendrecv";
                    break;
                  case "recvonly":
                    a2.direction = "sendonly";
                    break;
                  case "sendonly":
                    a2.direction = "recvonly";
                    break;
                  case "inactive":
                    a2.direction = "inactive";
                }
                r3.headerExtensions.push(a2);
              }
              return r3;
            }, t2.getRecvRtpCapabilities = function(e3) {
              const t3 = { codecs: [], headerExtensions: [] };
              for (const r3 of e3.codecs) {
                const e4 = {
                  mimeType: r3.mimeType,
                  kind: r3.kind,
                  preferredPayloadType: r3.remotePayloadType,
                  clockRate: r3.clockRate,
                  channels: r3.channels,
                  parameters: r3.localParameters,
                  rtcpFeedback: r3.rtcpFeedback
                };
                if (t3.codecs.push(e4), !r3.remoteRtxPayloadType)
                  continue;
                const n2 = {
                  mimeType: `${r3.kind}/rtx`,
                  kind: r3.kind,
                  preferredPayloadType: r3.remoteRtxPayloadType,
                  clockRate: r3.clockRate,
                  parameters: { apt: r3.remotePayloadType },
                  rtcpFeedback: []
                };
                t3.codecs.push(n2);
              }
              for (const r3 of e3.headerExtensions) {
                if ("sendrecv" !== r3.direction && "recvonly" !== r3.direction)
                  continue;
                const e4 = {
                  kind: r3.kind,
                  uri: r3.uri,
                  preferredId: r3.recvId,
                  preferredEncrypt: r3.encrypt,
                  direction: r3.direction
                };
                t3.headerExtensions.push(e4);
              }
              return t3;
            }, t2.getSendingRtpParameters = function(e3, t3) {
              const r3 = {
                mid: void 0,
                codecs: [],
                headerExtensions: [],
                encodings: [],
                rtcp: {}
              };
              for (const n2 of t3.codecs) {
                if (n2.kind !== e3)
                  continue;
                const t4 = {
                  mimeType: n2.mimeType,
                  payloadType: n2.localPayloadType,
                  clockRate: n2.clockRate,
                  channels: n2.channels,
                  parameters: n2.localParameters,
                  rtcpFeedback: n2.rtcpFeedback
                };
                if (r3.codecs.push(t4), n2.localRtxPayloadType) {
                  const e4 = {
                    mimeType: `${n2.kind}/rtx`,
                    payloadType: n2.localRtxPayloadType,
                    clockRate: n2.clockRate,
                    parameters: { apt: n2.localPayloadType },
                    rtcpFeedback: []
                  };
                  r3.codecs.push(e4);
                }
              }
              for (const n2 of t3.headerExtensions) {
                if (n2.kind && n2.kind !== e3 || "sendrecv" !== n2.direction && "sendonly" !== n2.direction)
                  continue;
                const t4 = {
                  uri: n2.uri,
                  id: n2.sendId,
                  encrypt: n2.encrypt,
                  parameters: {}
                };
                r3.headerExtensions.push(t4);
              }
              return r3;
            }, t2.getSendingRemoteRtpParameters = function(e3, t3) {
              const r3 = {
                mid: void 0,
                codecs: [],
                headerExtensions: [],
                encodings: [],
                rtcp: {}
              };
              for (const n2 of t3.codecs) {
                if (n2.kind !== e3)
                  continue;
                const t4 = {
                  mimeType: n2.mimeType,
                  payloadType: n2.localPayloadType,
                  clockRate: n2.clockRate,
                  channels: n2.channels,
                  parameters: n2.remoteParameters,
                  rtcpFeedback: n2.rtcpFeedback
                };
                if (r3.codecs.push(t4), n2.localRtxPayloadType) {
                  const e4 = {
                    mimeType: `${n2.kind}/rtx`,
                    payloadType: n2.localRtxPayloadType,
                    clockRate: n2.clockRate,
                    parameters: { apt: n2.localPayloadType },
                    rtcpFeedback: []
                  };
                  r3.codecs.push(e4);
                }
              }
              for (const n2 of t3.headerExtensions) {
                if (n2.kind && n2.kind !== e3 || "sendrecv" !== n2.direction && "sendonly" !== n2.direction)
                  continue;
                const t4 = {
                  uri: n2.uri,
                  id: n2.sendId,
                  encrypt: n2.encrypt,
                  parameters: {}
                };
                r3.headerExtensions.push(t4);
              }
              if (r3.headerExtensions.some(
                (e4) => "http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01" === e4.uri
              ))
                for (const e4 of r3.codecs)
                  e4.rtcpFeedback = (e4.rtcpFeedback || []).filter(
                    (e5) => "goog-remb" !== e5.type
                  );
              else if (r3.headerExtensions.some(
                (e4) => "http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time" === e4.uri
              ))
                for (const e4 of r3.codecs)
                  e4.rtcpFeedback = (e4.rtcpFeedback || []).filter(
                    (e5) => "transport-cc" !== e5.type
                  );
              else
                for (const e4 of r3.codecs)
                  e4.rtcpFeedback = (e4.rtcpFeedback || []).filter(
                    (e5) => "transport-cc" !== e5.type && "goog-remb" !== e5.type
                  );
              return r3;
            }, t2.reduceCodecs = function(e3, t3) {
              const r3 = [];
              if (t3) {
                for (let n2 = 0; n2 < e3.length; ++n2)
                  if (v(e3[n2], t3)) {
                    r3.push(e3[n2]), g(e3[n2 + 1]) && r3.push(e3[n2 + 1]);
                    break;
                  }
                if (0 === r3.length)
                  throw new TypeError("no matching codec found");
              } else
                r3.push(e3[0]), g(e3[1]) && r3.push(e3[1]);
              return r3;
            }, t2.generateProbatorRtpParameters = function(e3) {
              l(e3 = o.clone(e3, {}));
              const t3 = {
                mid: "probator",
                codecs: [],
                headerExtensions: [],
                encodings: [{ ssrc: 1234 }],
                rtcp: { cname: "probator" }
              };
              return t3.codecs.push(e3.codecs[0]), t3.codecs[0].payloadType = 127, t3.headerExtensions = e3.headerExtensions, t3;
            }, t2.canSend = function(e3, t3) {
              return t3.codecs.some((t4) => t4.kind === e3);
            }, t2.canReceive = function(e3, t3) {
              if (l(e3), 0 === e3.codecs.length)
                return false;
              const r3 = e3.codecs[0];
              return t3.codecs.some(
                (e4) => e4.remotePayloadType === r3.payloadType
              );
            };
          },
          2770: (e2, t2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.parse = void 0;
            const r2 = new RegExp("^[LS]([1-9]\\d{0,1})T([1-9]\\d{0,1})");
            t2.parse = function(e3) {
              const t3 = r2.exec(e3 || "");
              return t3 ? { spatialLayers: Number(t3[1]), temporalLayers: Number(t3[2]) } : { spatialLayers: 1, temporalLayers: 1 };
            };
          },
          53: function(e2, t2, r2) {
            "use strict";
            var n = this && this.__createBinding || (Object.create ? function(e3, t3, r3, n2) {
              void 0 === n2 && (n2 = r3);
              var a2 = Object.getOwnPropertyDescriptor(t3, r3);
              a2 && !("get" in a2 ? !t3.__esModule : a2.writable || a2.configurable) || (a2 = {
                enumerable: true,
                get: function() {
                  return t3[r3];
                }
              }), Object.defineProperty(e3, n2, a2);
            } : function(e3, t3, r3, n2) {
              void 0 === n2 && (n2 = r3), e3[n2] = t3[r3];
            }), a = this && this.__exportStar || function(e3, t3) {
              for (var r3 in e3)
                "default" === r3 || Object.prototype.hasOwnProperty.call(t3, r3) || n(t3, e3, r3);
            };
            Object.defineProperty(t2, "__esModule", { value: true }), a(r2(3120), t2), a(r2(5202), t2), a(r2(6569), t2), a(r2(9514), t2), a(r2(5504), t2), a(r2(1623), t2), a(r2(4879), t2), a(r2(7669), t2), a(r2(9316), t2), a(r2(9992), t2);
          },
          3347: (e2, t2) => {
            "use strict";
            Object.defineProperty(t2, "__esModule", { value: true }), t2.generateRandomNumber = t2.clone = void 0, t2.clone = function(e3, t3) {
              return void 0 === e3 ? t3 : JSON.parse(JSON.stringify(e3));
            }, t2.generateRandomNumber = function() {
              return Math.round(1e7 * Math.random());
            };
          },
          388: (e2, t2, r2) => {
            t2.formatArgs = function(t3) {
              if (t3[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + t3[0] + (this.useColors ? "%c " : " ") + "+" + e2.exports.humanize(this.diff), !this.useColors)
                return;
              const r3 = "color: " + this.color;
              t3.splice(1, 0, r3, "color: inherit");
              let n2 = 0, a = 0;
              t3[0].replace(/%[a-zA-Z%]/g, (e3) => {
                "%%" !== e3 && (n2++, "%c" === e3 && (a = n2));
              }), t3.splice(a, 0, r3);
            }, t2.save = function(e3) {
              try {
                e3 ? t2.storage.setItem("debug", e3) : t2.storage.removeItem("debug");
              } catch (e4) {
              }
            }, t2.load = function() {
              let e3;
              try {
                e3 = t2.storage.getItem("debug");
              } catch (e4) {
              }
              !e3 && "undefined" != typeof process && "env" in process && (e3 = process.env.DEBUG);
              return e3;
            }, t2.useColors = function() {
              if ("undefined" != typeof window && window.process && ("renderer" === window.process.type || window.process.__nwjs))
                return true;
              if ("undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))
                return false;
              return "undefined" != typeof document && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || "undefined" != typeof window && window.console && (window.console.firebug || window.console.exception && window.console.table) || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
            }, t2.storage = function() {
              try {
                return localStorage;
              } catch (e3) {
              }
            }(), t2.destroy = (() => {
              let e3 = false;
              return () => {
                e3 || (e3 = true, console.warn(
                  "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."
                ));
              };
            })(), t2.colors = [
              "#0000CC",
              "#0000FF",
              "#0033CC",
              "#0033FF",
              "#0066CC",
              "#0066FF",
              "#0099CC",
              "#0099FF",
              "#00CC00",
              "#00CC33",
              "#00CC66",
              "#00CC99",
              "#00CCCC",
              "#00CCFF",
              "#3300CC",
              "#3300FF",
              "#3333CC",
              "#3333FF",
              "#3366CC",
              "#3366FF",
              "#3399CC",
              "#3399FF",
              "#33CC00",
              "#33CC33",
              "#33CC66",
              "#33CC99",
              "#33CCCC",
              "#33CCFF",
              "#6600CC",
              "#6600FF",
              "#6633CC",
              "#6633FF",
              "#66CC00",
              "#66CC33",
              "#9900CC",
              "#9900FF",
              "#9933CC",
              "#9933FF",
              "#99CC00",
              "#99CC33",
              "#CC0000",
              "#CC0033",
              "#CC0066",
              "#CC0099",
              "#CC00CC",
              "#CC00FF",
              "#CC3300",
              "#CC3333",
              "#CC3366",
              "#CC3399",
              "#CC33CC",
              "#CC33FF",
              "#CC6600",
              "#CC6633",
              "#CC9900",
              "#CC9933",
              "#CCCC00",
              "#CCCC33",
              "#FF0000",
              "#FF0033",
              "#FF0066",
              "#FF0099",
              "#FF00CC",
              "#FF00FF",
              "#FF3300",
              "#FF3333",
              "#FF3366",
              "#FF3399",
              "#FF33CC",
              "#FF33FF",
              "#FF6600",
              "#FF6633",
              "#FF9900",
              "#FF9933",
              "#FFCC00",
              "#FFCC33"
            ], t2.log = console.debug || console.log || (() => {
            }), e2.exports = r2(4455)(t2);
            const { formatters: n } = e2.exports;
            n.j = function(e3) {
              try {
                return JSON.stringify(e3);
              } catch (e4) {
                return "[UnexpectedJSONParseError]: " + e4.message;
              }
            };
          },
          4455: (e2, t2, r2) => {
            e2.exports = function(e3) {
              function t3(e4) {
                let r3, a2, i, s = null;
                function o(...e5) {
                  if (!o.enabled)
                    return;
                  const n2 = o, a3 = Number(/* @__PURE__ */ new Date()), i2 = a3 - (r3 || a3);
                  n2.diff = i2, n2.prev = r3, n2.curr = a3, r3 = a3, e5[0] = t3.coerce(e5[0]), "string" != typeof e5[0] && e5.unshift("%O");
                  let s2 = 0;
                  e5[0] = e5[0].replace(/%([a-zA-Z%])/g, (r4, a4) => {
                    if ("%%" === r4)
                      return "%";
                    s2++;
                    const i3 = t3.formatters[a4];
                    if ("function" == typeof i3) {
                      const t4 = e5[s2];
                      r4 = i3.call(n2, t4), e5.splice(s2, 1), s2--;
                    }
                    return r4;
                  }), t3.formatArgs.call(n2, e5);
                  (n2.log || t3.log).apply(n2, e5);
                }
                return o.namespace = e4, o.useColors = t3.useColors(), o.color = t3.selectColor(e4), o.extend = n, o.destroy = t3.destroy, Object.defineProperty(o, "enabled", {
                  enumerable: true,
                  configurable: false,
                  get: () => null !== s ? s : (a2 !== t3.namespaces && (a2 = t3.namespaces, i = t3.enabled(e4)), i),
                  set: (e5) => {
                    s = e5;
                  }
                }), "function" == typeof t3.init && t3.init(o), o;
              }
              function n(e4, r3) {
                const n2 = t3(this.namespace + (void 0 === r3 ? ":" : r3) + e4);
                return n2.log = this.log, n2;
              }
              function a(e4) {
                return e4.toString().substring(2, e4.toString().length - 2).replace(/\.\*\?$/, "*");
              }
              return t3.debug = t3, t3.default = t3, t3.coerce = function(e4) {
                if (e4 instanceof Error)
                  return e4.stack || e4.message;
                return e4;
              }, t3.disable = function() {
                const e4 = [
                  ...t3.names.map(a),
                  ...t3.skips.map(a).map((e5) => "-" + e5)
                ].join(",");
                return t3.enable(""), e4;
              }, t3.enable = function(e4) {
                let r3;
                t3.save(e4), t3.namespaces = e4, t3.names = [], t3.skips = [];
                const n2 = ("string" == typeof e4 ? e4 : "").split(/[\s,]+/), a2 = n2.length;
                for (r3 = 0; r3 < a2; r3++)
                  n2[r3] && ("-" === (e4 = n2[r3].replace(/\*/g, ".*?"))[0] ? t3.skips.push(new RegExp("^" + e4.slice(1) + "$")) : t3.names.push(new RegExp("^" + e4 + "$")));
              }, t3.enabled = function(e4) {
                if ("*" === e4[e4.length - 1])
                  return true;
                let r3, n2;
                for (r3 = 0, n2 = t3.skips.length; r3 < n2; r3++)
                  if (t3.skips[r3].test(e4))
                    return false;
                for (r3 = 0, n2 = t3.names.length; r3 < n2; r3++)
                  if (t3.names[r3].test(e4))
                    return true;
                return false;
              }, t3.humanize = r2(7824), t3.destroy = function() {
                console.warn(
                  "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."
                );
              }, Object.keys(e3).forEach((r3) => {
                t3[r3] = e3[r3];
              }), t3.names = [], t3.skips = [], t3.formatters = {}, t3.selectColor = function(e4) {
                let r3 = 0;
                for (let t4 = 0; t4 < e4.length; t4++)
                  r3 = (r3 << 5) - r3 + e4.charCodeAt(t4), r3 |= 0;
                return t3.colors[Math.abs(r3) % t3.colors.length];
              }, t3.enable(t3.load()), t3;
            };
          },
          7824: (e2) => {
            var t2 = 1e3, r2 = 60 * t2, n = 60 * r2, a = 24 * n, i = 7 * a, s = 365.25 * a;
            function o(e3, t3, r3, n2) {
              var a2 = t3 >= 1.5 * r3;
              return Math.round(e3 / r3) + " " + n2 + (a2 ? "s" : "");
            }
            e2.exports = function(e3, c) {
              c = c || {};
              var d = typeof e3;
              if ("string" === d && e3.length > 0)
                return function(e4) {
                  if ((e4 = String(e4)).length > 100)
                    return;
                  var o2 = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
                    e4
                  );
                  if (!o2)
                    return;
                  var c2 = parseFloat(o2[1]);
                  switch ((o2[2] || "ms").toLowerCase()) {
                    case "years":
                    case "year":
                    case "yrs":
                    case "yr":
                    case "y":
                      return c2 * s;
                    case "weeks":
                    case "week":
                    case "w":
                      return c2 * i;
                    case "days":
                    case "day":
                    case "d":
                      return c2 * a;
                    case "hours":
                    case "hour":
                    case "hrs":
                    case "hr":
                    case "h":
                      return c2 * n;
                    case "minutes":
                    case "minute":
                    case "mins":
                    case "min":
                    case "m":
                      return c2 * r2;
                    case "seconds":
                    case "second":
                    case "secs":
                    case "sec":
                    case "s":
                      return c2 * t2;
                    case "milliseconds":
                    case "millisecond":
                    case "msecs":
                    case "msec":
                    case "ms":
                      return c2;
                    default:
                      return;
                  }
                }(e3);
              if ("number" === d && isFinite(e3))
                return c.long ? function(e4) {
                  var i2 = Math.abs(e4);
                  if (i2 >= a)
                    return o(e4, i2, a, "day");
                  if (i2 >= n)
                    return o(e4, i2, n, "hour");
                  if (i2 >= r2)
                    return o(e4, i2, r2, "minute");
                  if (i2 >= t2)
                    return o(e4, i2, t2, "second");
                  return e4 + " ms";
                }(e3) : function(e4) {
                  var i2 = Math.abs(e4);
                  if (i2 >= a)
                    return Math.round(e4 / a) + "d";
                  if (i2 >= n)
                    return Math.round(e4 / n) + "h";
                  if (i2 >= r2)
                    return Math.round(e4 / r2) + "m";
                  if (i2 >= t2)
                    return Math.round(e4 / t2) + "s";
                  return e4 + "ms";
                }(e3);
              throw new Error(
                "val is not a non-empty string or a valid number. val=" + JSON.stringify(e3)
              );
            };
          },
          7576: (e2, t2, r2) => {
            const { EventEmitter: n } = r2(7187), a = r2(3417);
            e2.exports = class extends n {
              constructor(e3) {
                super(), this.setMaxListeners(1 / 0), this._logger = e3 || new a("EnhancedEventEmitter");
              }
              safeEmit(e3, ...t3) {
                try {
                  this.emit(e3, ...t3);
                } catch (t4) {
                  this._logger.error(
                    "safeEmit() | event listener threw an error [event:%s]:%o",
                    e3,
                    t4
                  );
                }
              }
              async safeEmitAsPromise(e3, ...t3) {
                return new Promise((r3, n2) => {
                  this.safeEmit(e3, ...t3, r3, n2);
                });
              }
            };
          },
          3417: (e2, t2, r2) => {
            const n = r2(1227), a = "protoo-client";
            e2.exports = class {
              constructor(e3) {
                e3 ? (this._debug = n(`${a}:${e3}`), this._warn = n(`${a}:WARN:${e3}`), this._error = n(`${a}:ERROR:${e3}`)) : (this._debug = n(a), this._warn = n(`${a}:WARN`), this._error = n(`${a}:ERROR`)), this._debug.log = console.info.bind(console), this._warn.log = console.warn.bind(console), this._error.log = console.error.bind(console);
              }
              get debug() {
                return this._debug;
              }
              get warn() {
                return this._warn;
              }
              get error() {
                return this._error;
              }
            };
          },
          6508: (e2, t2, r2) => {
            const n = r2(3417), { generateRandomNumber: a } = r2(5654), i = new n("Message");
            e2.exports = class {
              static parse(e3) {
                let t3;
                const r3 = {};
                try {
                  t3 = JSON.parse(e3);
                } catch (e4) {
                  return void i.error("parse() | invalid JSON: %s", e4);
                }
                if ("object" == typeof t3 && !Array.isArray(t3)) {
                  if (t3.request) {
                    if (r3.request = true, "string" != typeof t3.method)
                      return void i.error(
                        "parse() | missing/invalid method field"
                      );
                    if ("number" != typeof t3.id)
                      return void i.error("parse() | missing/invalid id field");
                    r3.id = t3.id, r3.method = t3.method, r3.data = t3.data || {};
                  } else if (t3.response) {
                    if (r3.response = true, "number" != typeof t3.id)
                      return void i.error("parse() | missing/invalid id field");
                    r3.id = t3.id, t3.ok ? (r3.ok = true, r3.data = t3.data || {}) : (r3.ok = false, r3.errorCode = t3.errorCode, r3.errorReason = t3.errorReason);
                  } else {
                    if (!t3.notification)
                      return void i.error(
                        "parse() | missing request/response field"
                      );
                    if (r3.notification = true, "string" != typeof t3.method)
                      return void i.error(
                        "parse() | missing/invalid method field"
                      );
                    r3.method = t3.method, r3.data = t3.data || {};
                  }
                  return r3;
                }
                i.error("parse() | not an object");
              }
              static createRequest(e3, t3) {
                return { request: true, id: a(), method: e3, data: t3 || {} };
              }
              static createSuccessResponse(e3, t3) {
                return { response: true, id: e3.id, ok: true, data: t3 || {} };
              }
              static createErrorResponse(e3, t3, r3) {
                return {
                  response: true,
                  id: e3.id,
                  ok: false,
                  errorCode: t3,
                  errorReason: r3
                };
              }
              static createNotification(e3, t3) {
                return { notification: true, method: e3, data: t3 || {} };
              }
            };
          },
          7502: (e2, t2, r2) => {
            const n = r2(3417), a = r2(7576), i = r2(6508), s = new n("Peer");
            e2.exports = class extends a {
              constructor(e3) {
                super(s), s.debug("constructor()"), this._closed = false, this._transport = e3, this._connected = false, this._data = {}, this._sents = /* @__PURE__ */ new Map(), this._handleTransport();
              }
              get closed() {
                return this._closed;
              }
              get connected() {
                return this._connected;
              }
              get data() {
                return this._data;
              }
              set data(e3) {
                throw new Error("cannot override data object");
              }
              close() {
                if (!this._closed) {
                  s.debug("close()"), this._closed = true, this._connected = false, this._transport.close();
                  for (const e3 of this._sents.values())
                    e3.close();
                  this.safeEmit("close");
                }
              }
              async request(e3, t3) {
                const r3 = i.createRequest(e3, t3);
                return this._logger.debug("request() [method:%s, id:%s]", e3, r3.id), await this._transport.send(r3), new Promise((e4, t4) => {
                  const n2 = 1500 * (15 + 0.1 * this._sents.size), a2 = {
                    id: r3.id,
                    method: r3.method,
                    resolve: (t5) => {
                      this._sents.delete(r3.id) && (clearTimeout(a2.timer), e4(t5));
                    },
                    reject: (e5) => {
                      this._sents.delete(r3.id) && (clearTimeout(a2.timer), t4(e5));
                    },
                    timer: setTimeout(() => {
                      this._sents.delete(r3.id) && t4(new Error("request timeout"));
                    }, n2),
                    close: () => {
                      clearTimeout(a2.timer), t4(new Error("peer closed"));
                    }
                  };
                  this._sents.set(r3.id, a2);
                });
              }
              async notify(e3, t3) {
                const r3 = i.createNotification(e3, t3);
                this._logger.debug("notify() [method:%s]", e3), await this._transport.send(r3);
              }
              _handleTransport() {
                if (this._transport.closed)
                  return this._closed = true, void setTimeout(() => {
                    this._closed || (this._connected = false, this.safeEmit("close"));
                  });
                this._transport.on("open", () => {
                  this._closed || (s.debug('emit "open"'), this._connected = true, this.safeEmit("open"));
                }), this._transport.on("disconnected", () => {
                  this._closed || (s.debug('emit "disconnected"'), this._connected = false, this.safeEmit("disconnected"));
                }), this._transport.on("failed", (e3) => {
                  this._closed || (s.debug('emit "failed" [currentAttempt:%s]', e3), this._connected = false, this.safeEmit("failed", e3));
                }), this._transport.on("close", () => {
                  this._closed || (this._closed = true, s.debug('emit "close"'), this._connected = false, this.safeEmit("close"));
                }), this._transport.on("message", (e3) => {
                  e3.request ? this._handleRequest(e3) : e3.response ? this._handleResponse(e3) : e3.notification && this._handleNotification(e3);
                });
              }
              _handleRequest(e3) {
                try {
                  this.emit(
                    "request",
                    e3,
                    (t3) => {
                      const r3 = i.createSuccessResponse(e3, t3);
                      this._transport.send(r3).catch(() => {
                      });
                    },
                    (t3, r3) => {
                      t3 instanceof Error ? (r3 = t3.message, t3 = 500) : "number" == typeof t3 && r3 instanceof Error && (r3 = r3.message);
                      const n2 = i.createErrorResponse(e3, t3, r3);
                      this._transport.send(n2).catch(() => {
                      });
                    }
                  );
                } catch (t3) {
                  const r3 = i.createErrorResponse(e3, 500, String(t3));
                  this._transport.send(r3).catch(() => {
                  });
                }
              }
              _handleResponse(e3) {
                const t3 = this._sents.get(e3.id);
                if (t3)
                  if (e3.ok)
                    t3.resolve(e3.data);
                  else {
                    const r3 = new Error(e3.errorReason);
                    r3.code = e3.errorCode, t3.reject(r3);
                  }
                else
                  s.error(
                    "received response does not match any sent request [id:%s]",
                    e3.id
                  );
              }
              _handleNotification(e3) {
                this.safeEmit("notification", e3);
              }
            };
          },
          9293: (e2, t2, r2) => {
            const { version: n } = r2(7002), a = r2(7502), i = r2(2165);
            t2._z = a, t2.qo = i;
          },
          2165: (e2, t2, r2) => {
            const n = r2(5840).w3cwebsocket, a = r2(9353), i = r2(3417), s = r2(7576), o = r2(6508), c = { retries: 10, factor: 2, minTimeout: 1e3, maxTimeout: 8e3 }, d = new i("WebSocketTransport");
            e2.exports = class extends s {
              constructor(e3, t3) {
                super(d), d.debug("constructor() [url:%s, options:%o]", e3, t3), this._closed = false, this._url = e3, this._options = t3 || {}, this._ws = null, this._runWebSocket();
              }
              get closed() {
                return this._closed;
              }
              close() {
                if (!this._closed) {
                  d.debug("close()"), this._closed = true, this.safeEmit("close");
                  try {
                    this._ws.onopen = null, this._ws.onclose = null, this._ws.onerror = null, this._ws.onmessage = null, this._ws.close();
                  } catch (e3) {
                    d.error("close() | error closing the WebSocket: %o", e3);
                  }
                }
              }
              async send(e3) {
                if (this._closed)
                  throw new Error("transport closed");
                try {
                  this._ws.send(JSON.stringify(e3));
                } catch (e4) {
                  throw d.warn("send() failed:%o", e4), e4;
                }
              }
              _runWebSocket() {
                const e3 = a.operation(this._options.retry || c);
                let t3 = false;
                e3.attempt((r3) => {
                  this._closed ? e3.stop() : (d.debug("_runWebSocket() [currentAttempt:%s]", r3), this._ws = new n(
                    this._url,
                    "protoo",
                    this._options.origin,
                    this._options.headers,
                    this._options.requestOptions,
                    this._options.clientConfig
                  ), this._ws.onopen = () => {
                    this._closed || (t3 = true, this.safeEmit("open"));
                  }, this._ws.onclose = (n2) => {
                    if (!this._closed) {
                      if (d.warn(
                        'WebSocket "close" event [wasClean:%s, code:%s, reason:"%s"]',
                        n2.wasClean,
                        n2.code,
                        n2.reason
                      ), 4e3 !== n2.code) {
                        if (t3) {
                          if (e3.stop(), this.safeEmit("disconnected"), this._closed)
                            return;
                          return void this._runWebSocket();
                        }
                        if (this.safeEmit("failed", r3), this._closed)
                          return;
                        if (e3.retry(true))
                          return;
                      }
                      this._closed = true, this.safeEmit("close");
                    }
                  }, this._ws.onerror = () => {
                    this._closed || d.error('WebSocket "error" event');
                  }, this._ws.onmessage = (e4) => {
                    if (this._closed)
                      return;
                    const t4 = o.parse(e4.data);
                    t4 && (0 !== this.listenerCount("message") ? this.safeEmit("message", t4) : d.error(
                      'no listeners for WebSocket "message" event, ignoring received message'
                    ));
                  });
                });
              }
            };
          },
          5654: (e2, t2) => {
            t2.generateRandomNumber = function() {
              return Math.round(1e7 * Math.random());
            };
          },
          4375: (e2, t2, r2) => {
            let n;
            e2.exports = "function" == typeof queueMicrotask ? queueMicrotask.bind("undefined" != typeof window ? window : r2.g) : (e3) => (n || (n = Promise.resolve())).then(e3).catch(
              (e4) => setTimeout(() => {
                throw e4;
              }, 0)
            );
          },
          3196: (e2) => {
            "use strict";
            e2.exports = function(e3) {
              var t2, r2, n = "", a = (e3 = function(e4) {
                return e4 || (e4 = {}), {
                  length: e4.length || 8,
                  numeric: "boolean" != typeof e4.numeric || e4.numeric,
                  letters: "boolean" != typeof e4.letters || e4.letters,
                  special: "boolean" == typeof e4.special && e4.special,
                  exclude: Array.isArray(e4.exclude) ? e4.exclude : []
                };
              }(e3)).length, i = (e3.exclude, function(e4) {
                var t3 = "";
                e4.numeric && (t3 += "0123456789"), e4.letters && (t3 += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"), e4.special && (t3 += "!$%^&*()_+|~-=`{}[]:;<>?,./");
                for (var r3 = 0; r3 <= e4.exclude.length; r3++)
                  t3 = t3.replace(e4.exclude[r3], "");
                return t3;
              }(e3));
              for (t2 = 1; t2 <= a; t2++)
                n += i.substring(
                  r2 = Math.floor(Math.random() * i.length),
                  r2 + 1
                );
              return n;
            };
          },
          5666: (e2) => {
            var t2 = function(e3) {
              "use strict";
              var t3, r2 = Object.prototype, n = r2.hasOwnProperty, a = "function" == typeof Symbol ? Symbol : {}, i = a.iterator || "@@iterator", s = a.asyncIterator || "@@asyncIterator", o = a.toStringTag || "@@toStringTag";
              function c(e4, t4, r3) {
                return Object.defineProperty(e4, t4, {
                  value: r3,
                  enumerable: true,
                  configurable: true,
                  writable: true
                }), e4[t4];
              }
              try {
                c({}, "");
              } catch (e4) {
                c = function(e5, t4, r3) {
                  return e5[t4] = r3;
                };
              }
              function d(e4, t4, r3, n2) {
                var a2 = t4 && t4.prototype instanceof _ ? t4 : _, i2 = Object.create(a2.prototype), s2 = new k(n2 || []);
                return i2._invoke = function(e5, t5, r4) {
                  var n3 = l;
                  return function(a3, i3) {
                    if (n3 === h)
                      throw new Error("Generator is already running");
                    if (n3 === m) {
                      if ("throw" === a3)
                        throw i3;
                      return x();
                    }
                    for (r4.method = a3, r4.arg = i3; ; ) {
                      var s3 = r4.delegate;
                      if (s3) {
                        var o2 = R(s3, r4);
                        if (o2) {
                          if (o2 === f)
                            continue;
                          return o2;
                        }
                      }
                      if ("next" === r4.method)
                        r4.sent = r4._sent = r4.arg;
                      else if ("throw" === r4.method) {
                        if (n3 === l)
                          throw n3 = m, r4.arg;
                        r4.dispatchException(r4.arg);
                      } else
                        "return" === r4.method && r4.abrupt("return", r4.arg);
                      n3 = h;
                      var c2 = p(e5, t5, r4);
                      if ("normal" === c2.type) {
                        if (n3 = r4.done ? m : u, c2.arg === f)
                          continue;
                        return { value: c2.arg, done: r4.done };
                      }
                      "throw" === c2.type && (n3 = m, r4.method = "throw", r4.arg = c2.arg);
                    }
                  };
                }(e4, r3, s2), i2;
              }
              function p(e4, t4, r3) {
                try {
                  return { type: "normal", arg: e4.call(t4, r3) };
                } catch (e5) {
                  return { type: "throw", arg: e5 };
                }
              }
              e3.wrap = d;
              var l = "suspendedStart", u = "suspendedYield", h = "executing", m = "completed", f = {};
              function _() {
              }
              function g() {
              }
              function v() {
              }
              var y = {};
              c(y, i, function() {
                return this;
              });
              var b = Object.getPrototypeOf, S = b && b(b(O([])));
              S && S !== r2 && n.call(S, i) && (y = S);
              var w = v.prototype = _.prototype = Object.create(y);
              function T(e4) {
                ["next", "throw", "return"].forEach(function(t4) {
                  c(e4, t4, function(e5) {
                    return this._invoke(t4, e5);
                  });
                });
              }
              function E(e4, t4) {
                function r3(a3, i2, s2, o2) {
                  var c2 = p(e4[a3], e4, i2);
                  if ("throw" !== c2.type) {
                    var d2 = c2.arg, l2 = d2.value;
                    return l2 && "object" == typeof l2 && n.call(l2, "__await") ? t4.resolve(l2.__await).then(
                      function(e5) {
                        r3("next", e5, s2, o2);
                      },
                      function(e5) {
                        r3("throw", e5, s2, o2);
                      }
                    ) : t4.resolve(l2).then(
                      function(e5) {
                        d2.value = e5, s2(d2);
                      },
                      function(e5) {
                        return r3("throw", e5, s2, o2);
                      }
                    );
                  }
                  o2(c2.arg);
                }
                var a2;
                this._invoke = function(e5, n2) {
                  function i2() {
                    return new t4(function(t5, a3) {
                      r3(e5, n2, t5, a3);
                    });
                  }
                  return a2 = a2 ? a2.then(i2, i2) : i2();
                };
              }
              function R(e4, r3) {
                var n2 = e4.iterator[r3.method];
                if (n2 === t3) {
                  if (r3.delegate = null, "throw" === r3.method) {
                    if (e4.iterator.return && (r3.method = "return", r3.arg = t3, R(e4, r3), "throw" === r3.method))
                      return f;
                    r3.method = "throw", r3.arg = new TypeError(
                      "The iterator does not provide a 'throw' method"
                    );
                  }
                  return f;
                }
                var a2 = p(n2, e4.iterator, r3.arg);
                if ("throw" === a2.type)
                  return r3.method = "throw", r3.arg = a2.arg, r3.delegate = null, f;
                var i2 = a2.arg;
                return i2 ? i2.done ? (r3[e4.resultName] = i2.value, r3.next = e4.nextLoc, "return" !== r3.method && (r3.method = "next", r3.arg = t3), r3.delegate = null, f) : i2 : (r3.method = "throw", r3.arg = new TypeError("iterator result is not an object"), r3.delegate = null, f);
              }
              function P(e4) {
                var t4 = { tryLoc: e4[0] };
                1 in e4 && (t4.catchLoc = e4[1]), 2 in e4 && (t4.finallyLoc = e4[2], t4.afterLoc = e4[3]), this.tryEntries.push(t4);
              }
              function C(e4) {
                var t4 = e4.completion || {};
                t4.type = "normal", delete t4.arg, e4.completion = t4;
              }
              function k(e4) {
                this.tryEntries = [{ tryLoc: "root" }], e4.forEach(P, this), this.reset(true);
              }
              function O(e4) {
                if (e4) {
                  var r3 = e4[i];
                  if (r3)
                    return r3.call(e4);
                  if ("function" == typeof e4.next)
                    return e4;
                  if (!isNaN(e4.length)) {
                    var a2 = -1, s2 = function r4() {
                      for (; ++a2 < e4.length; )
                        if (n.call(e4, a2))
                          return r4.value = e4[a2], r4.done = false, r4;
                      return r4.value = t3, r4.done = true, r4;
                    };
                    return s2.next = s2;
                  }
                }
                return { next: x };
              }
              function x() {
                return { value: t3, done: true };
              }
              return g.prototype = v, c(w, "constructor", v), c(v, "constructor", g), g.displayName = c(v, o, "GeneratorFunction"), e3.isGeneratorFunction = function(e4) {
                var t4 = "function" == typeof e4 && e4.constructor;
                return !!t4 && (t4 === g || "GeneratorFunction" === (t4.displayName || t4.name));
              }, e3.mark = function(e4) {
                return Object.setPrototypeOf ? Object.setPrototypeOf(e4, v) : (e4.__proto__ = v, c(e4, o, "GeneratorFunction")), e4.prototype = Object.create(w), e4;
              }, e3.awrap = function(e4) {
                return { __await: e4 };
              }, T(E.prototype), c(E.prototype, s, function() {
                return this;
              }), e3.AsyncIterator = E, e3.async = function(t4, r3, n2, a2, i2) {
                void 0 === i2 && (i2 = Promise);
                var s2 = new E(d(t4, r3, n2, a2), i2);
                return e3.isGeneratorFunction(r3) ? s2 : s2.next().then(function(e4) {
                  return e4.done ? e4.value : s2.next();
                });
              }, T(w), c(w, o, "Generator"), c(w, i, function() {
                return this;
              }), c(w, "toString", function() {
                return "[object Generator]";
              }), e3.keys = function(e4) {
                var t4 = [];
                for (var r3 in e4)
                  t4.push(r3);
                return t4.reverse(), function r4() {
                  for (; t4.length; ) {
                    var n2 = t4.pop();
                    if (n2 in e4)
                      return r4.value = n2, r4.done = false, r4;
                  }
                  return r4.done = true, r4;
                };
              }, e3.values = O, k.prototype = {
                constructor: k,
                reset: function(e4) {
                  if (this.prev = 0, this.next = 0, this.sent = this._sent = t3, this.done = false, this.delegate = null, this.method = "next", this.arg = t3, this.tryEntries.forEach(C), !e4)
                    for (var r3 in this)
                      "t" === r3.charAt(0) && n.call(this, r3) && !isNaN(+r3.slice(1)) && (this[r3] = t3);
                },
                stop: function() {
                  this.done = true;
                  var e4 = this.tryEntries[0].completion;
                  if ("throw" === e4.type)
                    throw e4.arg;
                  return this.rval;
                },
                dispatchException: function(e4) {
                  if (this.done)
                    throw e4;
                  var r3 = this;
                  function a2(n2, a3) {
                    return o2.type = "throw", o2.arg = e4, r3.next = n2, a3 && (r3.method = "next", r3.arg = t3), !!a3;
                  }
                  for (var i2 = this.tryEntries.length - 1; i2 >= 0; --i2) {
                    var s2 = this.tryEntries[i2], o2 = s2.completion;
                    if ("root" === s2.tryLoc)
                      return a2("end");
                    if (s2.tryLoc <= this.prev) {
                      var c2 = n.call(s2, "catchLoc"), d2 = n.call(s2, "finallyLoc");
                      if (c2 && d2) {
                        if (this.prev < s2.catchLoc)
                          return a2(s2.catchLoc, true);
                        if (this.prev < s2.finallyLoc)
                          return a2(s2.finallyLoc);
                      } else if (c2) {
                        if (this.prev < s2.catchLoc)
                          return a2(s2.catchLoc, true);
                      } else {
                        if (!d2)
                          throw new Error(
                            "try statement without catch or finally"
                          );
                        if (this.prev < s2.finallyLoc)
                          return a2(s2.finallyLoc);
                      }
                    }
                  }
                },
                abrupt: function(e4, t4) {
                  for (var r3 = this.tryEntries.length - 1; r3 >= 0; --r3) {
                    var a2 = this.tryEntries[r3];
                    if (a2.tryLoc <= this.prev && n.call(a2, "finallyLoc") && this.prev < a2.finallyLoc) {
                      var i2 = a2;
                      break;
                    }
                  }
                  i2 && ("break" === e4 || "continue" === e4) && i2.tryLoc <= t4 && t4 <= i2.finallyLoc && (i2 = null);
                  var s2 = i2 ? i2.completion : {};
                  return s2.type = e4, s2.arg = t4, i2 ? (this.method = "next", this.next = i2.finallyLoc, f) : this.complete(s2);
                },
                complete: function(e4, t4) {
                  if ("throw" === e4.type)
                    throw e4.arg;
                  return "break" === e4.type || "continue" === e4.type ? this.next = e4.arg : "return" === e4.type ? (this.rval = this.arg = e4.arg, this.method = "return", this.next = "end") : "normal" === e4.type && t4 && (this.next = t4), f;
                },
                finish: function(e4) {
                  for (var t4 = this.tryEntries.length - 1; t4 >= 0; --t4) {
                    var r3 = this.tryEntries[t4];
                    if (r3.finallyLoc === e4)
                      return this.complete(r3.completion, r3.afterLoc), C(r3), f;
                  }
                },
                catch: function(e4) {
                  for (var t4 = this.tryEntries.length - 1; t4 >= 0; --t4) {
                    var r3 = this.tryEntries[t4];
                    if (r3.tryLoc === e4) {
                      var n2 = r3.completion;
                      if ("throw" === n2.type) {
                        var a2 = n2.arg;
                        C(r3);
                      }
                      return a2;
                    }
                  }
                  throw new Error("illegal catch attempt");
                },
                delegateYield: function(e4, r3, n2) {
                  return this.delegate = {
                    iterator: O(e4),
                    resultName: r3,
                    nextLoc: n2
                  }, "next" === this.method && (this.arg = t3), f;
                }
              }, e3;
            }(e2.exports);
            try {
              regeneratorRuntime = t2;
            } catch (e3) {
              "object" == typeof globalThis ? globalThis.regeneratorRuntime = t2 : Function("r", "regeneratorRuntime = r")(t2);
            }
          },
          9353: (e2, t2, r2) => {
            e2.exports = r2(1846);
          },
          1846: (e2, t2, r2) => {
            var n = r2(1960);
            t2.operation = function(e3) {
              var r3 = t2.timeouts(e3);
              return new n(r3, {
                forever: e3 && e3.forever,
                unref: e3 && e3.unref,
                maxRetryTime: e3 && e3.maxRetryTime
              });
            }, t2.timeouts = function(e3) {
              if (e3 instanceof Array)
                return [].concat(e3);
              var t3 = {
                retries: 10,
                factor: 2,
                minTimeout: 1e3,
                maxTimeout: 1 / 0,
                randomize: false
              };
              for (var r3 in e3)
                t3[r3] = e3[r3];
              if (t3.minTimeout > t3.maxTimeout)
                throw new Error("minTimeout is greater than maxTimeout");
              for (var n2 = [], a = 0; a < t3.retries; a++)
                n2.push(this.createTimeout(a, t3));
              return e3 && e3.forever && !n2.length && n2.push(this.createTimeout(a, t3)), n2.sort(function(e4, t4) {
                return e4 - t4;
              }), n2;
            }, t2.createTimeout = function(e3, t3) {
              var r3 = t3.randomize ? Math.random() + 1 : 1, n2 = Math.round(r3 * t3.minTimeout * Math.pow(t3.factor, e3));
              return n2 = Math.min(n2, t3.maxTimeout);
            }, t2.wrap = function(e3, r3, n2) {
              if (r3 instanceof Array && (n2 = r3, r3 = null), !n2)
                for (var a in n2 = [], e3)
                  "function" == typeof e3[a] && n2.push(a);
              for (var i = 0; i < n2.length; i++) {
                var s = n2[i], o = e3[s];
                e3[s] = (function(n3) {
                  var a2 = t2.operation(r3), i2 = Array.prototype.slice.call(arguments, 1), s2 = i2.pop();
                  i2.push(function(e4) {
                    a2.retry(e4) || (e4 && (arguments[0] = a2.mainError()), s2.apply(this, arguments));
                  }), a2.attempt(function() {
                    n3.apply(e3, i2);
                  });
                }).bind(e3, o), e3[s].options = r3;
              }
            };
          },
          1960: (e2) => {
            function t2(e3, t3) {
              "boolean" == typeof t3 && (t3 = { forever: t3 }), this._originalTimeouts = JSON.parse(JSON.stringify(e3)), this._timeouts = e3, this._options = t3 || {}, this._maxRetryTime = t3 && t3.maxRetryTime || 1 / 0, this._fn = null, this._errors = [], this._attempts = 1, this._operationTimeout = null, this._operationTimeoutCb = null, this._timeout = null, this._operationStart = null, this._options.forever && (this._cachedTimeouts = this._timeouts.slice(0));
            }
            e2.exports = t2, t2.prototype.reset = function() {
              this._attempts = 1, this._timeouts = this._originalTimeouts;
            }, t2.prototype.stop = function() {
              this._timeout && clearTimeout(this._timeout), this._timeouts = [], this._cachedTimeouts = null;
            }, t2.prototype.retry = function(e3) {
              if (this._timeout && clearTimeout(this._timeout), !e3)
                return false;
              var t3 = (/* @__PURE__ */ new Date()).getTime();
              if (e3 && t3 - this._operationStart >= this._maxRetryTime)
                return this._errors.unshift(
                  new Error("RetryOperation timeout occurred")
                ), false;
              this._errors.push(e3);
              var r2 = this._timeouts.shift();
              if (void 0 === r2) {
                if (!this._cachedTimeouts)
                  return false;
                this._errors.splice(
                  this._errors.length - 1,
                  this._errors.length
                ), this._timeouts = this._cachedTimeouts.slice(0), r2 = this._timeouts.shift();
              }
              var n = this, a = setTimeout(function() {
                n._attempts++, n._operationTimeoutCb && (n._timeout = setTimeout(function() {
                  n._operationTimeoutCb(n._attempts);
                }, n._operationTimeout), n._options.unref && n._timeout.unref()), n._fn(n._attempts);
              }, r2);
              return this._options.unref && a.unref(), true;
            }, t2.prototype.attempt = function(e3, t3) {
              this._fn = e3, t3 && (t3.timeout && (this._operationTimeout = t3.timeout), t3.cb && (this._operationTimeoutCb = t3.cb));
              var r2 = this;
              this._operationTimeoutCb && (this._timeout = setTimeout(function() {
                r2._operationTimeoutCb();
              }, r2._operationTimeout)), this._operationStart = (/* @__PURE__ */ new Date()).getTime(), this._fn(this._attempts);
            }, t2.prototype.try = function(e3) {
              console.log("Using RetryOperation.try() is deprecated"), this.attempt(e3);
            }, t2.prototype.start = function(e3) {
              console.log("Using RetryOperation.start() is deprecated"), this.attempt(e3);
            }, t2.prototype.start = t2.prototype.try, t2.prototype.errors = function() {
              return this._errors;
            }, t2.prototype.attempts = function() {
              return this._attempts;
            }, t2.prototype.mainError = function() {
              if (0 === this._errors.length)
                return null;
              for (var e3 = {}, t3 = null, r2 = 0, n = 0; n < this._errors.length; n++) {
                var a = this._errors[n], i = a.message, s = (e3[i] || 0) + 1;
                e3[i] = s, s >= r2 && (t3 = a, r2 = s);
              }
              return t3;
            };
          },
          6692: (e2) => {
            var t2 = e2.exports = {
              v: [{ name: "version", reg: /^(\d*)$/ }],
              o: [
                {
                  name: "origin",
                  reg: /^(\S*) (\d*) (\d*) (\S*) IP(\d) (\S*)/,
                  names: [
                    "username",
                    "sessionId",
                    "sessionVersion",
                    "netType",
                    "ipVer",
                    "address"
                  ],
                  format: "%s %s %d %s IP%d %s"
                }
              ],
              s: [{ name: "name" }],
              i: [{ name: "description" }],
              u: [{ name: "uri" }],
              e: [{ name: "email" }],
              p: [{ name: "phone" }],
              z: [{ name: "timezones" }],
              r: [{ name: "repeats" }],
              t: [
                {
                  name: "timing",
                  reg: /^(\d*) (\d*)/,
                  names: ["start", "stop"],
                  format: "%d %d"
                }
              ],
              c: [
                {
                  name: "connection",
                  reg: /^IN IP(\d) (\S*)/,
                  names: ["version", "ip"],
                  format: "IN IP%d %s"
                }
              ],
              b: [
                {
                  push: "bandwidth",
                  reg: /^(TIAS|AS|CT|RR|RS):(\d*)/,
                  names: ["type", "limit"],
                  format: "%s:%s"
                }
              ],
              m: [
                {
                  reg: /^(\w*) (\d*) ([\w/]*)(?: (.*))?/,
                  names: ["type", "port", "protocol", "payloads"],
                  format: "%s %d %s %s"
                }
              ],
              a: [
                {
                  push: "rtp",
                  reg: /^rtpmap:(\d*) ([\w\-.]*)(?:\s*\/(\d*)(?:\s*\/(\S*))?)?/,
                  names: ["payload", "codec", "rate", "encoding"],
                  format: function(e3) {
                    return e3.encoding ? "rtpmap:%d %s/%s/%s" : e3.rate ? "rtpmap:%d %s/%s" : "rtpmap:%d %s";
                  }
                },
                {
                  push: "fmtp",
                  reg: /^fmtp:(\d*) ([\S| ]*)/,
                  names: ["payload", "config"],
                  format: "fmtp:%d %s"
                },
                { name: "control", reg: /^control:(.*)/, format: "control:%s" },
                {
                  name: "rtcp",
                  reg: /^rtcp:(\d*)(?: (\S*) IP(\d) (\S*))?/,
                  names: ["port", "netType", "ipVer", "address"],
                  format: function(e3) {
                    return null != e3.address ? "rtcp:%d %s IP%d %s" : "rtcp:%d";
                  }
                },
                {
                  push: "rtcpFbTrrInt",
                  reg: /^rtcp-fb:(\*|\d*) trr-int (\d*)/,
                  names: ["payload", "value"],
                  format: "rtcp-fb:%s trr-int %d"
                },
                {
                  push: "rtcpFb",
                  reg: /^rtcp-fb:(\*|\d*) ([\w-_]*)(?: ([\w-_]*))?/,
                  names: ["payload", "type", "subtype"],
                  format: function(e3) {
                    return null != e3.subtype ? "rtcp-fb:%s %s %s" : "rtcp-fb:%s %s";
                  }
                },
                {
                  push: "ext",
                  reg: /^extmap:(\d+)(?:\/(\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\S*)(?: (\S*))?/,
                  names: ["value", "direction", "encrypt-uri", "uri", "config"],
                  format: function(e3) {
                    return "extmap:%d" + (e3.direction ? "/%s" : "%v") + (e3["encrypt-uri"] ? " %s" : "%v") + " %s" + (e3.config ? " %s" : "");
                  }
                },
                { name: "extmapAllowMixed", reg: /^(extmap-allow-mixed)/ },
                {
                  push: "crypto",
                  reg: /^crypto:(\d*) ([\w_]*) (\S*)(?: (\S*))?/,
                  names: ["id", "suite", "config", "sessionConfig"],
                  format: function(e3) {
                    return null != e3.sessionConfig ? "crypto:%d %s %s %s" : "crypto:%d %s %s";
                  }
                },
                { name: "setup", reg: /^setup:(\w*)/, format: "setup:%s" },
                {
                  name: "connectionType",
                  reg: /^connection:(new|existing)/,
                  format: "connection:%s"
                },
                { name: "mid", reg: /^mid:([^\s]*)/, format: "mid:%s" },
                { name: "msid", reg: /^msid:(.*)/, format: "msid:%s" },
                {
                  name: "ptime",
                  reg: /^ptime:(\d*(?:\.\d*)*)/,
                  format: "ptime:%d"
                },
                {
                  name: "maxptime",
                  reg: /^maxptime:(\d*(?:\.\d*)*)/,
                  format: "maxptime:%d"
                },
                {
                  name: "direction",
                  reg: /^(sendrecv|recvonly|sendonly|inactive)/
                },
                { name: "icelite", reg: /^(ice-lite)/ },
                {
                  name: "iceUfrag",
                  reg: /^ice-ufrag:(\S*)/,
                  format: "ice-ufrag:%s"
                },
                { name: "icePwd", reg: /^ice-pwd:(\S*)/, format: "ice-pwd:%s" },
                {
                  name: "fingerprint",
                  reg: /^fingerprint:(\S*) (\S*)/,
                  names: ["type", "hash"],
                  format: "fingerprint:%s %s"
                },
                {
                  push: "candidates",
                  reg: /^candidate:(\S*) (\d*) (\S*) (\d*) (\S*) (\d*) typ (\S*)(?: raddr (\S*) rport (\d*))?(?: tcptype (\S*))?(?: generation (\d*))?(?: network-id (\d*))?(?: network-cost (\d*))?/,
                  names: [
                    "foundation",
                    "component",
                    "transport",
                    "priority",
                    "ip",
                    "port",
                    "type",
                    "raddr",
                    "rport",
                    "tcptype",
                    "generation",
                    "network-id",
                    "network-cost"
                  ],
                  format: function(e3) {
                    var t3 = "candidate:%s %d %s %d %s %d typ %s";
                    return t3 += null != e3.raddr ? " raddr %s rport %d" : "%v%v", t3 += null != e3.tcptype ? " tcptype %s" : "%v", null != e3.generation && (t3 += " generation %d"), t3 += null != e3["network-id"] ? " network-id %d" : "%v", t3 += null != e3["network-cost"] ? " network-cost %d" : "%v";
                  }
                },
                { name: "endOfCandidates", reg: /^(end-of-candidates)/ },
                {
                  name: "remoteCandidates",
                  reg: /^remote-candidates:(.*)/,
                  format: "remote-candidates:%s"
                },
                {
                  name: "iceOptions",
                  reg: /^ice-options:(\S*)/,
                  format: "ice-options:%s"
                },
                {
                  push: "ssrcs",
                  reg: /^ssrc:(\d*) ([\w_-]*)(?::(.*))?/,
                  names: ["id", "attribute", "value"],
                  format: function(e3) {
                    var t3 = "ssrc:%d";
                    return null != e3.attribute && (t3 += " %s", null != e3.value && (t3 += ":%s")), t3;
                  }
                },
                {
                  push: "ssrcGroups",
                  reg: /^ssrc-group:([\x21\x23\x24\x25\x26\x27\x2A\x2B\x2D\x2E\w]*) (.*)/,
                  names: ["semantics", "ssrcs"],
                  format: "ssrc-group:%s %s"
                },
                {
                  name: "msidSemantic",
                  reg: /^msid-semantic:\s?(\w*) (\S*)/,
                  names: ["semantic", "token"],
                  format: "msid-semantic: %s %s"
                },
                {
                  push: "groups",
                  reg: /^group:(\w*) (.*)/,
                  names: ["type", "mids"],
                  format: "group:%s %s"
                },
                { name: "rtcpMux", reg: /^(rtcp-mux)/ },
                { name: "rtcpRsize", reg: /^(rtcp-rsize)/ },
                {
                  name: "sctpmap",
                  reg: /^sctpmap:([\w_/]*) (\S*)(?: (\S*))?/,
                  names: ["sctpmapNumber", "app", "maxMessageSize"],
                  format: function(e3) {
                    return null != e3.maxMessageSize ? "sctpmap:%s %s %s" : "sctpmap:%s %s";
                  }
                },
                {
                  name: "xGoogleFlag",
                  reg: /^x-google-flag:([^\s]*)/,
                  format: "x-google-flag:%s"
                },
                {
                  push: "rids",
                  reg: /^rid:([\d\w]+) (\w+)(?: ([\S| ]*))?/,
                  names: ["id", "direction", "params"],
                  format: function(e3) {
                    return e3.params ? "rid:%s %s %s" : "rid:%s %s";
                  }
                },
                {
                  push: "imageattrs",
                  reg: new RegExp(
                    "^imageattr:(\\d+|\\*)[\\s\\t]+(send|recv)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*)(?:[\\s\\t]+(recv|send)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*))?"
                  ),
                  names: ["pt", "dir1", "attrs1", "dir2", "attrs2"],
                  format: function(e3) {
                    return "imageattr:%s %s %s" + (e3.dir2 ? " %s %s" : "");
                  }
                },
                {
                  name: "simulcast",
                  reg: new RegExp(
                    "^simulcast:(send|recv) ([a-zA-Z0-9\\-_~;,]+)(?:\\s?(send|recv) ([a-zA-Z0-9\\-_~;,]+))?$"
                  ),
                  names: ["dir1", "list1", "dir2", "list2"],
                  format: function(e3) {
                    return "simulcast:%s %s" + (e3.dir2 ? " %s %s" : "");
                  }
                },
                {
                  name: "simulcast_03",
                  reg: /^simulcast:[\s\t]+([\S+\s\t]+)$/,
                  names: ["value"],
                  format: "simulcast: %s"
                },
                {
                  name: "framerate",
                  reg: /^framerate:(\d+(?:$|\.\d+))/,
                  format: "framerate:%s"
                },
                {
                  name: "sourceFilter",
                  reg: /^source-filter: *(excl|incl) (\S*) (IP4|IP6|\*) (\S*) (.*)/,
                  names: [
                    "filterMode",
                    "netType",
                    "addressTypes",
                    "destAddress",
                    "srcList"
                  ],
                  format: "source-filter: %s %s %s %s %s"
                },
                { name: "bundleOnly", reg: /^(bundle-only)/ },
                { name: "label", reg: /^label:(.+)/, format: "label:%s" },
                {
                  name: "sctpPort",
                  reg: /^sctp-port:(\d+)$/,
                  format: "sctp-port:%s"
                },
                {
                  name: "maxMessageSize",
                  reg: /^max-message-size:(\d+)$/,
                  format: "max-message-size:%s"
                },
                {
                  push: "tsRefClocks",
                  reg: /^ts-refclk:([^\s=]*)(?:=(\S*))?/,
                  names: ["clksrc", "clksrcExt"],
                  format: function(e3) {
                    return "ts-refclk:%s" + (null != e3.clksrcExt ? "=%s" : "");
                  }
                },
                {
                  name: "mediaClk",
                  reg: /^mediaclk:(?:id=(\S*))? *([^\s=]*)(?:=(\S*))?(?: *rate=(\d+)\/(\d+))?/,
                  names: [
                    "id",
                    "mediaClockName",
                    "mediaClockValue",
                    "rateNumerator",
                    "rateDenominator"
                  ],
                  format: function(e3) {
                    var t3 = "mediaclk:";
                    return t3 += null != e3.id ? "id=%s %s" : "%v%s", t3 += null != e3.mediaClockValue ? "=%s" : "", t3 += null != e3.rateNumerator ? " rate=%s" : "", t3 += null != e3.rateDenominator ? "/%s" : "";
                  }
                },
                { name: "keywords", reg: /^keywds:(.+)$/, format: "keywds:%s" },
                { name: "content", reg: /^content:(.+)/, format: "content:%s" },
                {
                  name: "bfcpFloorCtrl",
                  reg: /^floorctrl:(c-only|s-only|c-s)/,
                  format: "floorctrl:%s"
                },
                { name: "bfcpConfId", reg: /^confid:(\d+)/, format: "confid:%s" },
                { name: "bfcpUserId", reg: /^userid:(\d+)/, format: "userid:%s" },
                {
                  name: "bfcpFloorId",
                  reg: /^floorid:(.+) (?:m-stream|mstrm):(.+)/,
                  names: ["id", "mStream"],
                  format: "floorid:%s mstrm:%s"
                },
                { push: "invalid", names: ["value"] }
              ]
            };
            Object.keys(t2).forEach(function(e3) {
              t2[e3].forEach(function(e4) {
                e4.reg || (e4.reg = /(.*)/), e4.format || (e4.format = "%s");
              });
            });
          },
          766: (e2, t2, r2) => {
            var n = r2(962), a = r2(5776);
            t2.write = a, t2.parse = n.parse, t2.parseParams = n.parseParams, t2.parseFmtpConfig = n.parseFmtpConfig, t2.parsePayloads = n.parsePayloads, t2.parseRemoteCandidates = n.parseRemoteCandidates, t2.parseImageAttributes = n.parseImageAttributes, t2.parseSimulcastStreamList = n.parseSimulcastStreamList;
          },
          962: (e2, t2, r2) => {
            var n = function(e3) {
              return String(Number(e3)) === e3 ? Number(e3) : e3;
            }, a = function(e3, t3, r3) {
              var a2 = e3.name && e3.names;
              e3.push && !t3[e3.push] ? t3[e3.push] = [] : a2 && !t3[e3.name] && (t3[e3.name] = {});
              var i2 = e3.push ? {} : a2 ? t3[e3.name] : t3;
              !function(e4, t4, r4, a3) {
                if (a3 && !r4)
                  t4[a3] = n(e4[1]);
                else
                  for (var i3 = 0; i3 < r4.length; i3 += 1)
                    null != e4[i3 + 1] && (t4[r4[i3]] = n(e4[i3 + 1]));
              }(r3.match(e3.reg), i2, e3.names, e3.name), e3.push && t3[e3.push].push(i2);
            }, i = r2(6692), s = RegExp.prototype.test.bind(/^([a-z])=(.*)/);
            t2.parse = function(e3) {
              var t3 = {}, r3 = [], n2 = t3;
              return e3.split(/(\r\n|\r|\n)/).filter(s).forEach(function(e4) {
                var t4 = e4[0], s2 = e4.slice(2);
                "m" === t4 && (r3.push({ rtp: [], fmtp: [] }), n2 = r3[r3.length - 1]);
                for (var o2 = 0; o2 < (i[t4] || []).length; o2 += 1) {
                  var c = i[t4][o2];
                  if (c.reg.test(s2))
                    return a(c, n2, s2);
                }
              }), t3.media = r3, t3;
            };
            var o = function(e3, t3) {
              var r3 = t3.split(/=(.+)/, 2);
              return 2 === r3.length ? e3[r3[0]] = n(r3[1]) : 1 === r3.length && t3.length > 1 && (e3[r3[0]] = void 0), e3;
            };
            t2.parseParams = function(e3) {
              return e3.split(/;\s?/).reduce(o, {});
            }, t2.parseFmtpConfig = t2.parseParams, t2.parsePayloads = function(e3) {
              return e3.toString().split(" ").map(Number);
            }, t2.parseRemoteCandidates = function(e3) {
              for (var t3 = [], r3 = e3.split(" ").map(n), a2 = 0; a2 < r3.length; a2 += 3)
                t3.push({ component: r3[a2], ip: r3[a2 + 1], port: r3[a2 + 2] });
              return t3;
            }, t2.parseImageAttributes = function(e3) {
              return e3.split(" ").map(function(e4) {
                return e4.substring(1, e4.length - 1).split(",").reduce(o, {});
              });
            }, t2.parseSimulcastStreamList = function(e3) {
              return e3.split(";").map(function(e4) {
                return e4.split(",").map(function(e5) {
                  var t3, r3 = false;
                  return "~" !== e5[0] ? t3 = n(e5) : (t3 = n(e5.substring(1, e5.length)), r3 = true), { scid: t3, paused: r3 };
                });
              });
            };
          },
          5776: (e2, t2, r2) => {
            var n = r2(6692), a = /%[sdv%]/g, i = function(e3) {
              var t3 = 1, r3 = arguments, n2 = r3.length;
              return e3.replace(a, function(e4) {
                if (t3 >= n2)
                  return e4;
                var a2 = r3[t3];
                switch (t3 += 1, e4) {
                  case "%%":
                    return "%";
                  case "%s":
                    return String(a2);
                  case "%d":
                    return Number(a2);
                  case "%v":
                    return "";
                }
              });
            }, s = function(e3, t3, r3) {
              var n2 = [
                e3 + "=" + (t3.format instanceof Function ? t3.format(t3.push ? r3 : r3[t3.name]) : t3.format)
              ];
              if (t3.names)
                for (var a2 = 0; a2 < t3.names.length; a2 += 1) {
                  var s2 = t3.names[a2];
                  t3.name ? n2.push(r3[t3.name][s2]) : n2.push(r3[t3.names[a2]]);
                }
              else
                n2.push(r3[t3.name]);
              return i.apply(null, n2);
            }, o = [
              "v",
              "o",
              "s",
              "i",
              "u",
              "e",
              "p",
              "c",
              "b",
              "t",
              "r",
              "z",
              "a"
            ], c = ["i", "c", "b", "a"];
            e2.exports = function(e3, t3) {
              t3 = t3 || {}, null == e3.version && (e3.version = 0), null == e3.name && (e3.name = " "), e3.media.forEach(function(e4) {
                null == e4.payloads && (e4.payloads = "");
              });
              var r3 = t3.outerOrder || o, a2 = t3.innerOrder || c, i2 = [];
              return r3.forEach(function(t4) {
                n[t4].forEach(function(r4) {
                  r4.name in e3 && null != e3[r4.name] ? i2.push(s(t4, r4, e3)) : r4.push in e3 && null != e3[r4.push] && e3[r4.push].forEach(function(e4) {
                    i2.push(s(t4, r4, e4));
                  });
                });
              }), e3.media.forEach(function(e4) {
                i2.push(s("m", n.m[0], e4)), a2.forEach(function(t4) {
                  n[t4].forEach(function(r4) {
                    r4.name in e4 && null != e4[r4.name] ? i2.push(s(t4, r4, e4)) : r4.push in e4 && null != e4[r4.push] && e4[r4.push].forEach(function(e5) {
                      i2.push(s(t4, r4, e5));
                    });
                  });
                });
              }), i2.join("\r\n") + "\r\n";
            };
          },
          5840: (e2, t2, r2) => {
            var n;
            if ("object" == typeof globalThis)
              n = globalThis;
            else
              try {
                n = r2(284);
              } catch (e3) {
              } finally {
                if (n || "undefined" == typeof window || (n = window), !n)
                  throw new Error("Could not determine global this");
              }
            var a = n.WebSocket || n.MozWebSocket, i = r2(9387);
            function s(e3, t3) {
              return t3 ? new a(e3, t3) : new a(e3);
            }
            a && ["CONNECTING", "OPEN", "CLOSING", "CLOSED"].forEach(function(e3) {
              Object.defineProperty(s, e3, {
                get: function() {
                  return a[e3];
                }
              });
            }), e2.exports = { w3cwebsocket: a ? s : null, version: i };
          },
          9387: (e2, t2, r2) => {
            e2.exports = r2(9794).version;
          },
          6037: (e2, t2, r2) => {
            "use strict";
            !function(e3) {
              const t3 = e3.performance;
              function r3(e4) {
                t3 && t3.mark && t3.mark(e4);
              }
              function n2(e4, r4) {
                t3 && t3.measure && t3.measure(e4, r4);
              }
              r3("Zone");
              const a2 = e3.__Zone_symbol_prefix || "__zone_symbol__";
              function i2(e4) {
                return a2 + e4;
              }
              const s2 = true === e3[i2("forceDuplicateZoneCheck")];
              if (e3.Zone) {
                if (s2 || "function" != typeof e3.Zone.__symbol__)
                  throw new Error("Zone already loaded.");
                return e3.Zone;
              }
              class o2 {
                constructor(e4, t4) {
                  this._parent = e4, this._name = t4 ? t4.name || "unnamed" : "<root>", this._properties = t4 && t4.properties || {}, this._zoneDelegate = new d2(
                    this,
                    this._parent && this._parent._zoneDelegate,
                    t4
                  );
                }
                static assertZonePatched() {
                  if (e3.Promise !== x2.ZoneAwarePromise)
                    throw new Error(
                      "Zone.js has detected that ZoneAwarePromise `(window|global).Promise` has been overwritten.\nMost likely cause is that a Promise polyfill has been loaded after Zone.js (Polyfilling Promise api is not necessary when zone.js is loaded. If you must load one, do so before loading zone.js.)"
                    );
                }
                static get root() {
                  let e4 = o2.current;
                  for (; e4.parent; )
                    e4 = e4.parent;
                  return e4;
                }
                static get current() {
                  return I2.zone;
                }
                static get currentTask() {
                  return L2;
                }
                static __load_patch(t4, a3, i3 = false) {
                  if (x2.hasOwnProperty(t4)) {
                    if (!i3 && s2)
                      throw Error("Already loaded patch: " + t4);
                  } else if (!e3["__Zone_disable_" + t4]) {
                    const i4 = "Zone:" + t4;
                    r3(i4), x2[t4] = a3(e3, o2, D2), n2(i4, i4);
                  }
                }
                get parent() {
                  return this._parent;
                }
                get name() {
                  return this._name;
                }
                get(e4) {
                  const t4 = this.getZoneWith(e4);
                  if (t4)
                    return t4._properties[e4];
                }
                getZoneWith(e4) {
                  let t4 = this;
                  for (; t4; ) {
                    if (t4._properties.hasOwnProperty(e4))
                      return t4;
                    t4 = t4._parent;
                  }
                  return null;
                }
                fork(e4) {
                  if (!e4)
                    throw new Error("ZoneSpec required!");
                  return this._zoneDelegate.fork(this, e4);
                }
                wrap(e4, t4) {
                  if ("function" != typeof e4)
                    throw new Error("Expecting function got: " + e4);
                  const r4 = this._zoneDelegate.intercept(this, e4, t4), n3 = this;
                  return function() {
                    return n3.runGuarded(r4, this, arguments, t4);
                  };
                }
                run(e4, t4, r4, n3) {
                  I2 = { parent: I2, zone: this };
                  try {
                    return this._zoneDelegate.invoke(this, e4, t4, r4, n3);
                  } finally {
                    I2 = I2.parent;
                  }
                }
                runGuarded(e4, t4 = null, r4, n3) {
                  I2 = { parent: I2, zone: this };
                  try {
                    try {
                      return this._zoneDelegate.invoke(this, e4, t4, r4, n3);
                    } catch (e5) {
                      if (this._zoneDelegate.handleError(this, e5))
                        throw e5;
                    }
                  } finally {
                    I2 = I2.parent;
                  }
                }
                runTask(e4, t4, r4) {
                  if (e4.zone != this)
                    throw new Error(
                      "A task can only be run in the zone of creation! (Creation: " + (e4.zone || b2).name + "; Execution: " + this.name + ")"
                    );
                  if (e4.state === S2 && (e4.type === O2 || e4.type === k2))
                    return;
                  const n3 = e4.state != E2;
                  n3 && e4._transitionTo(E2, T2), e4.runCount++;
                  const a3 = L2;
                  L2 = e4, I2 = { parent: I2, zone: this };
                  try {
                    e4.type == k2 && e4.data && !e4.data.isPeriodic && (e4.cancelFn = void 0);
                    try {
                      return this._zoneDelegate.invokeTask(this, e4, t4, r4);
                    } catch (e5) {
                      if (this._zoneDelegate.handleError(this, e5))
                        throw e5;
                    }
                  } finally {
                    e4.state !== S2 && e4.state !== P2 && (e4.type == O2 || e4.data && e4.data.isPeriodic ? n3 && e4._transitionTo(T2, E2) : (e4.runCount = 0, this._updateTaskCount(e4, -1), n3 && e4._transitionTo(S2, E2, S2))), I2 = I2.parent, L2 = a3;
                  }
                }
                scheduleTask(e4) {
                  if (e4.zone && e4.zone !== this) {
                    let t5 = this;
                    for (; t5; ) {
                      if (t5 === e4.zone)
                        throw Error(
                          `can not reschedule task to ${this.name} which is descendants of the original zone ${e4.zone.name}`
                        );
                      t5 = t5.parent;
                    }
                  }
                  e4._transitionTo(w2, S2);
                  const t4 = [];
                  e4._zoneDelegates = t4, e4._zone = this;
                  try {
                    e4 = this._zoneDelegate.scheduleTask(this, e4);
                  } catch (t5) {
                    throw e4._transitionTo(P2, w2, S2), this._zoneDelegate.handleError(this, t5), t5;
                  }
                  return e4._zoneDelegates === t4 && this._updateTaskCount(e4, 1), e4.state == w2 && e4._transitionTo(T2, w2), e4;
                }
                scheduleMicroTask(e4, t4, r4, n3) {
                  return this.scheduleTask(new p2(C2, e4, t4, r4, n3, void 0));
                }
                scheduleMacroTask(e4, t4, r4, n3, a3) {
                  return this.scheduleTask(new p2(k2, e4, t4, r4, n3, a3));
                }
                scheduleEventTask(e4, t4, r4, n3, a3) {
                  return this.scheduleTask(new p2(O2, e4, t4, r4, n3, a3));
                }
                cancelTask(e4) {
                  if (e4.zone != this)
                    throw new Error(
                      "A task can only be cancelled in the zone of creation! (Creation: " + (e4.zone || b2).name + "; Execution: " + this.name + ")"
                    );
                  e4._transitionTo(R2, T2, E2);
                  try {
                    this._zoneDelegate.cancelTask(this, e4);
                  } catch (t4) {
                    throw e4._transitionTo(P2, R2), this._zoneDelegate.handleError(this, t4), t4;
                  }
                  return this._updateTaskCount(e4, -1), e4._transitionTo(S2, R2), e4.runCount = 0, e4;
                }
                _updateTaskCount(e4, t4) {
                  const r4 = e4._zoneDelegates;
                  -1 == t4 && (e4._zoneDelegates = null);
                  for (let n3 = 0; n3 < r4.length; n3++)
                    r4[n3]._updateTaskCount(e4.type, t4);
                }
              }
              o2.__symbol__ = i2;
              const c2 = {
                name: "",
                onHasTask: (e4, t4, r4, n3) => e4.hasTask(r4, n3),
                onScheduleTask: (e4, t4, r4, n3) => e4.scheduleTask(r4, n3),
                onInvokeTask: (e4, t4, r4, n3, a3, i3) => e4.invokeTask(r4, n3, a3, i3),
                onCancelTask: (e4, t4, r4, n3) => e4.cancelTask(r4, n3)
              };
              class d2 {
                constructor(e4, t4, r4) {
                  this._taskCounts = {
                    microTask: 0,
                    macroTask: 0,
                    eventTask: 0
                  }, this.zone = e4, this._parentDelegate = t4, this._forkZS = r4 && (r4 && r4.onFork ? r4 : t4._forkZS), this._forkDlgt = r4 && (r4.onFork ? t4 : t4._forkDlgt), this._forkCurrZone = r4 && (r4.onFork ? this.zone : t4._forkCurrZone), this._interceptZS = r4 && (r4.onIntercept ? r4 : t4._interceptZS), this._interceptDlgt = r4 && (r4.onIntercept ? t4 : t4._interceptDlgt), this._interceptCurrZone = r4 && (r4.onIntercept ? this.zone : t4._interceptCurrZone), this._invokeZS = r4 && (r4.onInvoke ? r4 : t4._invokeZS), this._invokeDlgt = r4 && (r4.onInvoke ? t4 : t4._invokeDlgt), this._invokeCurrZone = r4 && (r4.onInvoke ? this.zone : t4._invokeCurrZone), this._handleErrorZS = r4 && (r4.onHandleError ? r4 : t4._handleErrorZS), this._handleErrorDlgt = r4 && (r4.onHandleError ? t4 : t4._handleErrorDlgt), this._handleErrorCurrZone = r4 && (r4.onHandleError ? this.zone : t4._handleErrorCurrZone), this._scheduleTaskZS = r4 && (r4.onScheduleTask ? r4 : t4._scheduleTaskZS), this._scheduleTaskDlgt = r4 && (r4.onScheduleTask ? t4 : t4._scheduleTaskDlgt), this._scheduleTaskCurrZone = r4 && (r4.onScheduleTask ? this.zone : t4._scheduleTaskCurrZone), this._invokeTaskZS = r4 && (r4.onInvokeTask ? r4 : t4._invokeTaskZS), this._invokeTaskDlgt = r4 && (r4.onInvokeTask ? t4 : t4._invokeTaskDlgt), this._invokeTaskCurrZone = r4 && (r4.onInvokeTask ? this.zone : t4._invokeTaskCurrZone), this._cancelTaskZS = r4 && (r4.onCancelTask ? r4 : t4._cancelTaskZS), this._cancelTaskDlgt = r4 && (r4.onCancelTask ? t4 : t4._cancelTaskDlgt), this._cancelTaskCurrZone = r4 && (r4.onCancelTask ? this.zone : t4._cancelTaskCurrZone), this._hasTaskZS = null, this._hasTaskDlgt = null, this._hasTaskDlgtOwner = null, this._hasTaskCurrZone = null;
                  const n3 = r4 && r4.onHasTask, a3 = t4 && t4._hasTaskZS;
                  (n3 || a3) && (this._hasTaskZS = n3 ? r4 : c2, this._hasTaskDlgt = t4, this._hasTaskDlgtOwner = this, this._hasTaskCurrZone = e4, r4.onScheduleTask || (this._scheduleTaskZS = c2, this._scheduleTaskDlgt = t4, this._scheduleTaskCurrZone = this.zone), r4.onInvokeTask || (this._invokeTaskZS = c2, this._invokeTaskDlgt = t4, this._invokeTaskCurrZone = this.zone), r4.onCancelTask || (this._cancelTaskZS = c2, this._cancelTaskDlgt = t4, this._cancelTaskCurrZone = this.zone));
                }
                fork(e4, t4) {
                  return this._forkZS ? this._forkZS.onFork(this._forkDlgt, this.zone, e4, t4) : new o2(e4, t4);
                }
                intercept(e4, t4, r4) {
                  return this._interceptZS ? this._interceptZS.onIntercept(
                    this._interceptDlgt,
                    this._interceptCurrZone,
                    e4,
                    t4,
                    r4
                  ) : t4;
                }
                invoke(e4, t4, r4, n3, a3) {
                  return this._invokeZS ? this._invokeZS.onInvoke(
                    this._invokeDlgt,
                    this._invokeCurrZone,
                    e4,
                    t4,
                    r4,
                    n3,
                    a3
                  ) : t4.apply(r4, n3);
                }
                handleError(e4, t4) {
                  return !this._handleErrorZS || this._handleErrorZS.onHandleError(
                    this._handleErrorDlgt,
                    this._handleErrorCurrZone,
                    e4,
                    t4
                  );
                }
                scheduleTask(e4, t4) {
                  let r4 = t4;
                  if (this._scheduleTaskZS)
                    this._hasTaskZS && r4._zoneDelegates.push(this._hasTaskDlgtOwner), r4 = this._scheduleTaskZS.onScheduleTask(
                      this._scheduleTaskDlgt,
                      this._scheduleTaskCurrZone,
                      e4,
                      t4
                    ), r4 || (r4 = t4);
                  else if (t4.scheduleFn)
                    t4.scheduleFn(t4);
                  else {
                    if (t4.type != C2)
                      throw new Error("Task is missing scheduleFn.");
                    v2(t4);
                  }
                  return r4;
                }
                invokeTask(e4, t4, r4, n3) {
                  return this._invokeTaskZS ? this._invokeTaskZS.onInvokeTask(
                    this._invokeTaskDlgt,
                    this._invokeTaskCurrZone,
                    e4,
                    t4,
                    r4,
                    n3
                  ) : t4.callback.apply(r4, n3);
                }
                cancelTask(e4, t4) {
                  let r4;
                  if (this._cancelTaskZS)
                    r4 = this._cancelTaskZS.onCancelTask(
                      this._cancelTaskDlgt,
                      this._cancelTaskCurrZone,
                      e4,
                      t4
                    );
                  else {
                    if (!t4.cancelFn)
                      throw Error("Task is not cancelable");
                    r4 = t4.cancelFn(t4);
                  }
                  return r4;
                }
                hasTask(e4, t4) {
                  try {
                    this._hasTaskZS && this._hasTaskZS.onHasTask(
                      this._hasTaskDlgt,
                      this._hasTaskCurrZone,
                      e4,
                      t4
                    );
                  } catch (t5) {
                    this.handleError(e4, t5);
                  }
                }
                _updateTaskCount(e4, t4) {
                  const r4 = this._taskCounts, n3 = r4[e4], a3 = r4[e4] = n3 + t4;
                  if (a3 < 0)
                    throw new Error("More tasks executed then were scheduled.");
                  if (0 == n3 || 0 == a3) {
                    const t5 = {
                      microTask: r4.microTask > 0,
                      macroTask: r4.macroTask > 0,
                      eventTask: r4.eventTask > 0,
                      change: e4
                    };
                    this.hasTask(this.zone, t5);
                  }
                }
              }
              class p2 {
                constructor(t4, r4, n3, a3, i3, s3) {
                  if (this._zone = null, this.runCount = 0, this._zoneDelegates = null, this._state = "notScheduled", this.type = t4, this.source = r4, this.data = a3, this.scheduleFn = i3, this.cancelFn = s3, !n3)
                    throw new Error("callback is not defined");
                  this.callback = n3;
                  const o3 = this;
                  t4 === O2 && a3 && a3.useG ? this.invoke = p2.invokeTask : this.invoke = function() {
                    return p2.invokeTask.call(e3, o3, this, arguments);
                  };
                }
                static invokeTask(e4, t4, r4) {
                  e4 || (e4 = this), M2++;
                  try {
                    return e4.runCount++, e4.zone.runTask(e4, t4, r4);
                  } finally {
                    1 == M2 && y2(), M2--;
                  }
                }
                get zone() {
                  return this._zone;
                }
                get state() {
                  return this._state;
                }
                cancelScheduleRequest() {
                  this._transitionTo(S2, w2);
                }
                _transitionTo(e4, t4, r4) {
                  if (this._state !== t4 && this._state !== r4)
                    throw new Error(
                      `${this.type} '${this.source}': can not transition to '${e4}', expecting state '${t4}'${r4 ? " or '" + r4 + "'" : ""}, was '${this._state}'.`
                    );
                  this._state = e4, e4 == S2 && (this._zoneDelegates = null);
                }
                toString() {
                  return this.data && void 0 !== this.data.handleId ? this.data.handleId.toString() : Object.prototype.toString.call(this);
                }
                toJSON() {
                  return {
                    type: this.type,
                    state: this.state,
                    source: this.source,
                    zone: this.zone.name,
                    runCount: this.runCount
                  };
                }
              }
              const l2 = i2("setTimeout"), u2 = i2("Promise"), h2 = i2("then");
              let m2, f2 = [], _2 = false;
              function g2(t4) {
                if (m2 || e3[u2] && (m2 = e3[u2].resolve(0)), m2) {
                  let e4 = m2[h2];
                  e4 || (e4 = m2.then), e4.call(m2, t4);
                } else
                  e3[l2](t4, 0);
              }
              function v2(e4) {
                0 === M2 && 0 === f2.length && g2(y2), e4 && f2.push(e4);
              }
              function y2() {
                if (!_2) {
                  for (_2 = true; f2.length; ) {
                    const e4 = f2;
                    f2 = [];
                    for (let t4 = 0; t4 < e4.length; t4++) {
                      const r4 = e4[t4];
                      try {
                        r4.zone.runTask(r4, null, null);
                      } catch (e5) {
                        D2.onUnhandledError(e5);
                      }
                    }
                  }
                  D2.microtaskDrainDone(), _2 = false;
                }
              }
              const b2 = { name: "NO ZONE" }, S2 = "notScheduled", w2 = "scheduling", T2 = "scheduled", E2 = "running", R2 = "canceling", P2 = "unknown", C2 = "microTask", k2 = "macroTask", O2 = "eventTask", x2 = {}, D2 = {
                symbol: i2,
                currentZoneFrame: () => I2,
                onUnhandledError: A2,
                microtaskDrainDone: A2,
                scheduleMicroTask: v2,
                showUncaughtError: () => !o2[i2("ignoreConsoleErrorUncaughtError")],
                patchEventTarget: () => [],
                patchOnProperties: A2,
                patchMethod: () => A2,
                bindArguments: () => [],
                patchThen: () => A2,
                patchMacroTask: () => A2,
                patchEventPrototype: () => A2,
                isIEOrEdge: () => false,
                getGlobalObjects: () => {
                },
                ObjectDefineProperty: () => A2,
                ObjectGetOwnPropertyDescriptor: () => {
                },
                ObjectCreate: () => {
                },
                ArraySlice: () => [],
                patchClass: () => A2,
                wrapWithCurrentZone: () => A2,
                filterProperties: () => [],
                attachOriginToPatched: () => A2,
                _redefineProperty: () => A2,
                patchCallbacks: () => A2,
                nativeScheduleMicroTask: g2
              };
              let I2 = { parent: null, zone: new o2(null, null) }, L2 = null, M2 = 0;
              function A2() {
              }
              n2("Zone", "Zone"), e3.Zone = o2;
            }(
              "undefined" != typeof window && window || "undefined" != typeof self && self || r2.g
            );
            const n = Object.getOwnPropertyDescriptor, a = Object.defineProperty, i = Object.getPrototypeOf, s = Object.create, o = Array.prototype.slice, c = "addEventListener", d = "removeEventListener", p = Zone.__symbol__(c), l = Zone.__symbol__(d), u = "true", h = "false", m = Zone.__symbol__("");
            function f(e3, t3) {
              return Zone.current.wrap(e3, t3);
            }
            function _(e3, t3, r3, n2, a2) {
              return Zone.current.scheduleMacroTask(e3, t3, r3, n2, a2);
            }
            const g = Zone.__symbol__, v = "undefined" != typeof window, y = v ? window : void 0, b = v && y || "object" == typeof self && self || r2.g;
            function S(e3, t3) {
              for (let r3 = e3.length - 1; r3 >= 0; r3--)
                "function" == typeof e3[r3] && (e3[r3] = f(e3[r3], t3 + "_" + r3));
              return e3;
            }
            function w(e3) {
              return !e3 || false !== e3.writable && !("function" == typeof e3.get && void 0 === e3.set);
            }
            const T = "undefined" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope, E = !("nw" in b) && void 0 !== b.process && "[object process]" === {}.toString.call(b.process), R = !E && !T && !(!v || !y.HTMLElement), P = void 0 !== b.process && "[object process]" === {}.toString.call(b.process) && !T && !(!v || !y.HTMLElement), C = {}, k = function(e3) {
              if (!(e3 = e3 || b.event))
                return;
              let t3 = C[e3.type];
              t3 || (t3 = C[e3.type] = g("ON_PROPERTY" + e3.type));
              const r3 = this || e3.target || b, n2 = r3[t3];
              let a2;
              if (R && r3 === y && "error" === e3.type) {
                const t4 = e3;
                a2 = n2 && n2.call(
                  this,
                  t4.message,
                  t4.filename,
                  t4.lineno,
                  t4.colno,
                  t4.error
                ), true === a2 && e3.preventDefault();
              } else
                a2 = n2 && n2.apply(this, arguments), null == a2 || a2 || e3.preventDefault();
              return a2;
            };
            function O(e3, t3, r3) {
              let i2 = n(e3, t3);
              if (!i2 && r3) {
                n(r3, t3) && (i2 = { enumerable: true, configurable: true });
              }
              if (!i2 || !i2.configurable)
                return;
              const s2 = g("on" + t3 + "patched");
              if (e3.hasOwnProperty(s2) && e3[s2])
                return;
              delete i2.writable, delete i2.value;
              const o2 = i2.get, c2 = i2.set, d2 = t3.slice(2);
              let p2 = C[d2];
              p2 || (p2 = C[d2] = g("ON_PROPERTY" + d2)), i2.set = function(t4) {
                let r4 = this;
                if (r4 || e3 !== b || (r4 = b), !r4)
                  return;
                "function" == typeof r4[p2] && r4.removeEventListener(d2, k), c2 && c2.call(r4, null), r4[p2] = t4, "function" == typeof t4 && r4.addEventListener(d2, k, false);
              }, i2.get = function() {
                let r4 = this;
                if (r4 || e3 !== b || (r4 = b), !r4)
                  return null;
                const n2 = r4[p2];
                if (n2)
                  return n2;
                if (o2) {
                  let e4 = o2.call(this);
                  if (e4)
                    return i2.set.call(this, e4), "function" == typeof r4.removeAttribute && r4.removeAttribute(t3), e4;
                }
                return null;
              }, a(e3, t3, i2), e3[s2] = true;
            }
            function x(e3, t3, r3) {
              if (t3)
                for (let n2 = 0; n2 < t3.length; n2++)
                  O(e3, "on" + t3[n2], r3);
              else {
                const t4 = [];
                for (const r4 in e3)
                  "on" == r4.slice(0, 2) && t4.push(r4);
                for (let n2 = 0; n2 < t4.length; n2++)
                  O(e3, t4[n2], r3);
              }
            }
            const D = g("originalInstance");
            function I(e3) {
              const t3 = b[e3];
              if (!t3)
                return;
              b[g(e3)] = t3, b[e3] = function() {
                const r4 = S(arguments, e3);
                switch (r4.length) {
                  case 0:
                    this[D] = new t3();
                    break;
                  case 1:
                    this[D] = new t3(r4[0]);
                    break;
                  case 2:
                    this[D] = new t3(r4[0], r4[1]);
                    break;
                  case 3:
                    this[D] = new t3(r4[0], r4[1], r4[2]);
                    break;
                  case 4:
                    this[D] = new t3(r4[0], r4[1], r4[2], r4[3]);
                    break;
                  default:
                    throw new Error("Arg list too long.");
                }
              }, A(b[e3], t3);
              const r3 = new t3(function() {
              });
              let n2;
              for (n2 in r3)
                "XMLHttpRequest" === e3 && "responseBlob" === n2 || function(t4) {
                  "function" == typeof r3[t4] ? b[e3].prototype[t4] = function() {
                    return this[D][t4].apply(this[D], arguments);
                  } : a(b[e3].prototype, t4, {
                    set: function(r4) {
                      "function" == typeof r4 ? (this[D][t4] = f(r4, e3 + "." + t4), A(this[D][t4], r4)) : this[D][t4] = r4;
                    },
                    get: function() {
                      return this[D][t4];
                    }
                  });
                }(n2);
              for (n2 in t3)
                "prototype" !== n2 && t3.hasOwnProperty(n2) && (b[e3][n2] = t3[n2]);
            }
            function L(e3, t3, r3) {
              let a2 = e3;
              for (; a2 && !a2.hasOwnProperty(t3); )
                a2 = i(a2);
              !a2 && e3[t3] && (a2 = e3);
              const s2 = g(t3);
              let o2 = null;
              if (a2 && (!(o2 = a2[s2]) || !a2.hasOwnProperty(s2))) {
                o2 = a2[s2] = a2[t3];
                if (w(a2 && n(a2, t3))) {
                  const e4 = r3(o2, s2, t3);
                  a2[t3] = function() {
                    return e4(this, arguments);
                  }, A(a2[t3], o2);
                }
              }
              return o2;
            }
            function M(e3, t3, r3) {
              let n2 = null;
              function a2(e4) {
                const t4 = e4.data;
                return t4.args[t4.cbIdx] = function() {
                  e4.invoke.apply(this, arguments);
                }, n2.apply(t4.target, t4.args), e4;
              }
              n2 = L(
                e3,
                t3,
                (e4) => function(t4, n3) {
                  const i2 = r3(t4, n3);
                  return i2.cbIdx >= 0 && "function" == typeof n3[i2.cbIdx] ? _(i2.name, n3[i2.cbIdx], i2, a2) : e4.apply(t4, n3);
                }
              );
            }
            function A(e3, t3) {
              e3[g("OriginalDelegate")] = t3;
            }
            let N = false, j = false;
            function F() {
              try {
                const e3 = y.navigator.userAgent;
                if (-1 !== e3.indexOf("MSIE ") || -1 !== e3.indexOf("Trident/"))
                  return true;
              } catch (e3) {
              }
              return false;
            }
            function B() {
              if (N)
                return j;
              N = true;
              try {
                const e3 = y.navigator.userAgent;
                -1 === e3.indexOf("MSIE ") && -1 === e3.indexOf("Trident/") && -1 === e3.indexOf("Edge/") || (j = true);
              } catch (e3) {
              }
              return j;
            }
            Zone.__load_patch("ZoneAwarePromise", (e3, t3, r3) => {
              const n2 = Object.getOwnPropertyDescriptor, a2 = Object.defineProperty;
              const i2 = r3.symbol, s2 = [], o2 = true === e3[i2("DISABLE_WRAPPING_UNCAUGHT_PROMISE_REJECTION")], c2 = i2("Promise"), d2 = i2("then");
              r3.onUnhandledError = (e4) => {
                if (r3.showUncaughtError()) {
                  const t4 = e4 && e4.rejection;
                  t4 ? console.error(
                    "Unhandled Promise rejection:",
                    t4 instanceof Error ? t4.message : t4,
                    "; Zone:",
                    e4.zone.name,
                    "; Task:",
                    e4.task && e4.task.source,
                    "; Value:",
                    t4,
                    t4 instanceof Error ? t4.stack : void 0
                  ) : console.error(e4);
                }
              }, r3.microtaskDrainDone = () => {
                for (; s2.length; ) {
                  const e4 = s2.shift();
                  try {
                    e4.zone.runGuarded(() => {
                      if (e4.throwOriginal)
                        throw e4.rejection;
                      throw e4;
                    });
                  } catch (e5) {
                    l2(e5);
                  }
                }
              };
              const p2 = i2("unhandledPromiseRejectionHandler");
              function l2(e4) {
                r3.onUnhandledError(e4);
                try {
                  const r4 = t3[p2];
                  "function" == typeof r4 && r4.call(this, e4);
                } catch (e5) {
                }
              }
              function u2(e4) {
                return e4 && e4.then;
              }
              function h2(e4) {
                return e4;
              }
              function m2(e4) {
                return I2.reject(e4);
              }
              const f2 = i2("state"), _2 = i2("value"), g2 = i2("finally"), v2 = i2("parentPromiseValue"), y2 = i2("parentPromiseState"), b2 = null, S2 = true, w2 = false;
              function T2(e4, t4) {
                return (r4) => {
                  try {
                    P2(e4, t4, r4);
                  } catch (t5) {
                    P2(e4, false, t5);
                  }
                };
              }
              const E2 = function() {
                let e4 = false;
                return function(t4) {
                  return function() {
                    e4 || (e4 = true, t4.apply(null, arguments));
                  };
                };
              }, R2 = i2("currentTaskTrace");
              function P2(e4, n3, i3) {
                const c3 = E2();
                if (e4 === i3)
                  throw new TypeError("Promise resolved with itself");
                if (e4[f2] === b2) {
                  let d3 = null;
                  try {
                    "object" != typeof i3 && "function" != typeof i3 || (d3 = i3 && i3.then);
                  } catch (t4) {
                    return c3(() => {
                      P2(e4, false, t4);
                    })(), e4;
                  }
                  if (n3 !== w2 && i3 instanceof I2 && i3.hasOwnProperty(f2) && i3.hasOwnProperty(_2) && i3[f2] !== b2)
                    k2(i3), P2(e4, i3[f2], i3[_2]);
                  else if (n3 !== w2 && "function" == typeof d3)
                    try {
                      d3.call(i3, c3(T2(e4, n3)), c3(T2(e4, false)));
                    } catch (t4) {
                      c3(() => {
                        P2(e4, false, t4);
                      })();
                    }
                  else {
                    e4[f2] = n3;
                    const c4 = e4[_2];
                    if (e4[_2] = i3, e4[g2] === g2 && n3 === S2 && (e4[f2] = e4[y2], e4[_2] = e4[v2]), n3 === w2 && i3 instanceof Error) {
                      const e5 = t3.currentTask && t3.currentTask.data && t3.currentTask.data.__creationTrace__;
                      e5 && a2(i3, R2, {
                        configurable: true,
                        enumerable: false,
                        writable: true,
                        value: e5
                      });
                    }
                    for (let t4 = 0; t4 < c4.length; )
                      O2(e4, c4[t4++], c4[t4++], c4[t4++], c4[t4++]);
                    if (0 == c4.length && n3 == w2) {
                      e4[f2] = 0;
                      let n4 = i3;
                      try {
                        throw new Error(
                          "Uncaught (in promise): " + function(e5) {
                            if (e5 && e5.toString === Object.prototype.toString) {
                              return (e5.constructor && e5.constructor.name || "") + ": " + JSON.stringify(e5);
                            }
                            return e5 ? e5.toString() : Object.prototype.toString.call(e5);
                          }(i3) + (i3 && i3.stack ? "\n" + i3.stack : "")
                        );
                      } catch (e5) {
                        n4 = e5;
                      }
                      o2 && (n4.throwOriginal = true), n4.rejection = i3, n4.promise = e4, n4.zone = t3.current, n4.task = t3.currentTask, s2.push(n4), r3.scheduleMicroTask();
                    }
                  }
                }
                return e4;
              }
              const C2 = i2("rejectionHandledHandler");
              function k2(e4) {
                if (0 === e4[f2]) {
                  try {
                    const r4 = t3[C2];
                    r4 && "function" == typeof r4 && r4.call(this, { rejection: e4[_2], promise: e4 });
                  } catch (e5) {
                  }
                  e4[f2] = w2;
                  for (let t4 = 0; t4 < s2.length; t4++)
                    e4 === s2[t4].promise && s2.splice(t4, 1);
                }
              }
              function O2(e4, t4, r4, n3, a3) {
                k2(e4);
                const i3 = e4[f2], s3 = i3 ? "function" == typeof n3 ? n3 : h2 : "function" == typeof a3 ? a3 : m2;
                t4.scheduleMicroTask(
                  "Promise.then",
                  () => {
                    try {
                      const n4 = e4[_2], a4 = !!r4 && g2 === r4[g2];
                      a4 && (r4[v2] = n4, r4[y2] = i3);
                      const o3 = t4.run(
                        s3,
                        void 0,
                        a4 && s3 !== m2 && s3 !== h2 ? [] : [n4]
                      );
                      P2(r4, true, o3);
                    } catch (e5) {
                      P2(r4, false, e5);
                    }
                  },
                  r4
                );
              }
              const x2 = function() {
              }, D2 = e3.AggregateError;
              class I2 {
                static toString() {
                  return "function ZoneAwarePromise() { [native code] }";
                }
                static resolve(e4) {
                  return P2(new this(null), S2, e4);
                }
                static reject(e4) {
                  return P2(new this(null), w2, e4);
                }
                static any(e4) {
                  if (!e4 || "function" != typeof e4[Symbol.iterator])
                    return Promise.reject(
                      new D2([], "All promises were rejected")
                    );
                  const t4 = [];
                  let r4 = 0;
                  try {
                    for (let n4 of e4)
                      r4++, t4.push(I2.resolve(n4));
                  } catch (e5) {
                    return Promise.reject(
                      new D2([], "All promises were rejected")
                    );
                  }
                  if (0 === r4)
                    return Promise.reject(
                      new D2([], "All promises were rejected")
                    );
                  let n3 = false;
                  const a3 = [];
                  return new I2((e5, i3) => {
                    for (let s3 = 0; s3 < t4.length; s3++)
                      t4[s3].then(
                        (t5) => {
                          n3 || (n3 = true, e5(t5));
                        },
                        (e6) => {
                          a3.push(e6), r4--, 0 === r4 && (n3 = true, i3(new D2(a3, "All promises were rejected")));
                        }
                      );
                  });
                }
                static race(e4) {
                  let t4, r4, n3 = new this((e5, n4) => {
                    t4 = e5, r4 = n4;
                  });
                  function a3(e5) {
                    t4(e5);
                  }
                  function i3(e5) {
                    r4(e5);
                  }
                  for (let t5 of e4)
                    u2(t5) || (t5 = this.resolve(t5)), t5.then(a3, i3);
                  return n3;
                }
                static all(e4) {
                  return I2.allWithCallback(e4);
                }
                static allSettled(e4) {
                  return (this && this.prototype instanceof I2 ? this : I2).allWithCallback(e4, {
                    thenCallback: (e5) => ({ status: "fulfilled", value: e5 }),
                    errorCallback: (e5) => ({ status: "rejected", reason: e5 })
                  });
                }
                static allWithCallback(e4, t4) {
                  let r4, n3, a3 = new this((e5, t5) => {
                    r4 = e5, n3 = t5;
                  }), i3 = 2, s3 = 0;
                  const o3 = [];
                  for (let a4 of e4) {
                    u2(a4) || (a4 = this.resolve(a4));
                    const e5 = s3;
                    try {
                      a4.then(
                        (n4) => {
                          o3[e5] = t4 ? t4.thenCallback(n4) : n4, i3--, 0 === i3 && r4(o3);
                        },
                        (a5) => {
                          t4 ? (o3[e5] = t4.errorCallback(a5), i3--, 0 === i3 && r4(o3)) : n3(a5);
                        }
                      );
                    } catch (e6) {
                      n3(e6);
                    }
                    i3++, s3++;
                  }
                  return i3 -= 2, 0 === i3 && r4(o3), a3;
                }
                constructor(e4) {
                  const t4 = this;
                  if (!(t4 instanceof I2))
                    throw new Error("Must be an instanceof Promise.");
                  t4[f2] = b2, t4[_2] = [];
                  try {
                    const r4 = E2();
                    e4 && e4(r4(T2(t4, S2)), r4(T2(t4, w2)));
                  } catch (e5) {
                    P2(t4, false, e5);
                  }
                }
                get [Symbol.toStringTag]() {
                  return "Promise";
                }
                get [Symbol.species]() {
                  return I2;
                }
                then(e4, r4) {
                  var n3;
                  let a3 = null === (n3 = this.constructor) || void 0 === n3 ? void 0 : n3[Symbol.species];
                  a3 && "function" == typeof a3 || (a3 = this.constructor || I2);
                  const i3 = new a3(x2), s3 = t3.current;
                  return this[f2] == b2 ? this[_2].push(s3, i3, e4, r4) : O2(this, s3, i3, e4, r4), i3;
                }
                catch(e4) {
                  return this.then(null, e4);
                }
                finally(e4) {
                  var r4;
                  let n3 = null === (r4 = this.constructor) || void 0 === r4 ? void 0 : r4[Symbol.species];
                  n3 && "function" == typeof n3 || (n3 = I2);
                  const a3 = new n3(x2);
                  a3[g2] = g2;
                  const i3 = t3.current;
                  return this[f2] == b2 ? this[_2].push(i3, a3, e4, e4) : O2(this, i3, a3, e4, e4), a3;
                }
              }
              I2.resolve = I2.resolve, I2.reject = I2.reject, I2.race = I2.race, I2.all = I2.all;
              const M2 = e3[c2] = e3.Promise;
              e3.Promise = I2;
              const A2 = i2("thenPatched");
              function N2(e4) {
                const t4 = e4.prototype, r4 = n2(t4, "then");
                if (r4 && (false === r4.writable || !r4.configurable))
                  return;
                const a3 = t4.then;
                t4[d2] = a3, e4.prototype.then = function(e5, t5) {
                  return new I2((e6, t6) => {
                    a3.call(this, e6, t6);
                  }).then(e5, t5);
                }, e4[A2] = true;
              }
              return r3.patchThen = N2, M2 && (N2(M2), L(e3, "fetch", (e4) => {
                return t4 = e4, function(e5, r4) {
                  let n3 = t4.apply(e5, r4);
                  if (n3 instanceof I2)
                    return n3;
                  let a3 = n3.constructor;
                  return a3[A2] || N2(a3), n3;
                };
                var t4;
              })), Promise[t3.__symbol__("uncaughtPromiseErrors")] = s2, I2;
            }), Zone.__load_patch("toString", (e3) => {
              const t3 = Function.prototype.toString, r3 = g("OriginalDelegate"), n2 = g("Promise"), a2 = g("Error"), i2 = function() {
                if ("function" == typeof this) {
                  const i3 = this[r3];
                  if (i3)
                    return "function" == typeof i3 ? t3.call(i3) : Object.prototype.toString.call(i3);
                  if (this === Promise) {
                    const r4 = e3[n2];
                    if (r4)
                      return t3.call(r4);
                  }
                  if (this === Error) {
                    const r4 = e3[a2];
                    if (r4)
                      return t3.call(r4);
                  }
                }
                return t3.call(this);
              };
              i2[r3] = t3, Function.prototype.toString = i2;
              const s2 = Object.prototype.toString;
              Object.prototype.toString = function() {
                return "function" == typeof Promise && this instanceof Promise ? "[object Promise]" : s2.call(this);
              };
            });
            let U = false;
            if ("undefined" != typeof window)
              try {
                const e3 = Object.defineProperty({}, "passive", {
                  get: function() {
                    U = true;
                  }
                });
                window.addEventListener("test", e3, e3), window.removeEventListener("test", e3, e3);
              } catch (e3) {
                U = false;
              }
            const Z = { useG: true }, H = {}, z = {}, V = new RegExp("^" + m + "(\\w+)(true|false)$"), W = g("propagationStopped");
            function G(e3, t3) {
              const r3 = (t3 ? t3(e3) : e3) + h, n2 = (t3 ? t3(e3) : e3) + u, a2 = m + r3, i2 = m + n2;
              H[e3] = {}, H[e3].false = a2, H[e3].true = i2;
            }
            function q(e3, t3, r3, n2) {
              const a2 = n2 && n2.add || c, s2 = n2 && n2.rm || d, o2 = n2 && n2.listeners || "eventListeners", p2 = n2 && n2.rmAll || "removeAllListeners", l2 = g(a2), f2 = "." + a2 + ":", _2 = function(e4, t4, r4) {
                if (e4.isRemoved)
                  return;
                const n3 = e4.callback;
                let a3;
                "object" == typeof n3 && n3.handleEvent && (e4.callback = (e5) => n3.handleEvent(e5), e4.originalDelegate = n3);
                try {
                  e4.invoke(e4, t4, [r4]);
                } catch (e5) {
                  a3 = e5;
                }
                const i2 = e4.options;
                if (i2 && "object" == typeof i2 && i2.once) {
                  const n4 = e4.originalDelegate ? e4.originalDelegate : e4.callback;
                  t4[s2].call(t4, r4.type, n4, i2);
                }
                return a3;
              };
              function v2(r4, n3, a3) {
                if (!(n3 = n3 || e3.event))
                  return;
                const i2 = r4 || n3.target || e3, s3 = i2[H[n3.type][a3 ? u : h]];
                if (s3) {
                  const e4 = [];
                  if (1 === s3.length) {
                    const t4 = _2(s3[0], i2, n3);
                    t4 && e4.push(t4);
                  } else {
                    const t4 = s3.slice();
                    for (let r5 = 0; r5 < t4.length && (!n3 || true !== n3[W]); r5++) {
                      const a4 = _2(t4[r5], i2, n3);
                      a4 && e4.push(a4);
                    }
                  }
                  if (1 === e4.length)
                    throw e4[0];
                  for (let r5 = 0; r5 < e4.length; r5++) {
                    const n4 = e4[r5];
                    t3.nativeScheduleMicroTask(() => {
                      throw n4;
                    });
                  }
                }
              }
              const y2 = function(e4) {
                return v2(this, e4, false);
              }, b2 = function(e4) {
                return v2(this, e4, true);
              };
              function S2(t4, r4) {
                if (!t4)
                  return false;
                let n3 = true;
                r4 && void 0 !== r4.useG && (n3 = r4.useG);
                const c2 = r4 && r4.vh;
                let d2 = true;
                r4 && void 0 !== r4.chkDup && (d2 = r4.chkDup);
                let _3 = false;
                r4 && void 0 !== r4.rt && (_3 = r4.rt);
                let v3 = t4;
                for (; v3 && !v3.hasOwnProperty(a2); )
                  v3 = i(v3);
                if (!v3 && t4[a2] && (v3 = t4), !v3)
                  return false;
                if (v3[l2])
                  return false;
                const S3 = r4 && r4.eventNameToString, w3 = {}, T2 = v3[l2] = v3[a2], R2 = v3[g(s2)] = v3[s2], P2 = v3[g(o2)] = v3[o2], C2 = v3[g(p2)] = v3[p2];
                let k2;
                function O2(e4, t5) {
                  return !U && "object" == typeof e4 && e4 ? !!e4.capture : U && t5 ? "boolean" == typeof e4 ? { capture: e4, passive: true } : e4 ? "object" == typeof e4 && false !== e4.passive ? Object.assign(Object.assign({}, e4), { passive: true }) : e4 : { passive: true } : e4;
                }
                r4 && r4.prepend && (k2 = v3[g(r4.prepend)] = v3[r4.prepend]);
                const x2 = function(e4) {
                  return k2.call(w3.target, w3.eventName, e4.invoke, w3.options);
                }, D2 = n3 ? function(e4) {
                  if (!w3.isExisting)
                    return T2.call(
                      w3.target,
                      w3.eventName,
                      w3.capture ? b2 : y2,
                      w3.options
                    );
                } : function(e4) {
                  return T2.call(w3.target, w3.eventName, e4.invoke, w3.options);
                }, I2 = n3 ? function(e4) {
                  if (!e4.isRemoved) {
                    const t5 = H[e4.eventName];
                    let r5;
                    t5 && (r5 = t5[e4.capture ? u : h]);
                    const n4 = r5 && e4.target[r5];
                    if (n4)
                      for (let t6 = 0; t6 < n4.length; t6++) {
                        if (n4[t6] === e4) {
                          n4.splice(t6, 1), e4.isRemoved = true, 0 === n4.length && (e4.allRemoved = true, e4.target[r5] = null);
                          break;
                        }
                      }
                  }
                  if (e4.allRemoved)
                    return R2.call(
                      e4.target,
                      e4.eventName,
                      e4.capture ? b2 : y2,
                      e4.options
                    );
                } : function(e4) {
                  return R2.call(e4.target, e4.eventName, e4.invoke, e4.options);
                }, L2 = r4 && r4.diff ? r4.diff : function(e4, t5) {
                  const r5 = typeof t5;
                  return "function" === r5 && e4.callback === t5 || "object" === r5 && e4.originalDelegate === t5;
                }, M2 = Zone[g("UNPATCHED_EVENTS")], N2 = e3[g("PASSIVE_EVENTS")], j2 = function(t5, a3, i2, s3, o3 = false, p3 = false) {
                  return function() {
                    const l3 = this || e3;
                    let m2 = arguments[0];
                    r4 && r4.transferEventName && (m2 = r4.transferEventName(m2));
                    let f3 = arguments[1];
                    if (!f3)
                      return t5.apply(this, arguments);
                    if (E && "uncaughtException" === m2)
                      return t5.apply(this, arguments);
                    let _4 = false;
                    if ("function" != typeof f3) {
                      if (!f3.handleEvent)
                        return t5.apply(this, arguments);
                      _4 = true;
                    }
                    if (c2 && !c2(t5, f3, l3, arguments))
                      return;
                    const g2 = U && !!N2 && -1 !== N2.indexOf(m2), v4 = O2(arguments[2], g2);
                    if (M2) {
                      for (let e4 = 0; e4 < M2.length; e4++)
                        if (m2 === M2[e4])
                          return g2 ? t5.call(l3, m2, f3, v4) : t5.apply(this, arguments);
                    }
                    const y3 = !!v4 && ("boolean" == typeof v4 || v4.capture), b3 = !(!v4 || "object" != typeof v4) && v4.once, T3 = Zone.current;
                    let R3 = H[m2];
                    R3 || (G(m2, S3), R3 = H[m2]);
                    const P3 = R3[y3 ? u : h];
                    let C3, k3 = l3[P3], x3 = false;
                    if (k3) {
                      if (x3 = true, d2) {
                        for (let e4 = 0; e4 < k3.length; e4++)
                          if (L2(k3[e4], f3))
                            return;
                      }
                    } else
                      k3 = l3[P3] = [];
                    const D3 = l3.constructor.name, I3 = z[D3];
                    I3 && (C3 = I3[m2]), C3 || (C3 = D3 + a3 + (S3 ? S3(m2) : m2)), w3.options = v4, b3 && (w3.options.once = false), w3.target = l3, w3.capture = y3, w3.eventName = m2, w3.isExisting = x3;
                    const A2 = n3 ? Z : void 0;
                    A2 && (A2.taskData = w3);
                    const j3 = T3.scheduleEventTask(C3, f3, A2, i2, s3);
                    return w3.target = null, A2 && (A2.taskData = null), b3 && (v4.once = true), (U || "boolean" != typeof j3.options) && (j3.options = v4), j3.target = l3, j3.capture = y3, j3.eventName = m2, _4 && (j3.originalDelegate = f3), p3 ? k3.unshift(j3) : k3.push(j3), o3 ? l3 : void 0;
                  };
                };
                return v3[a2] = j2(T2, f2, D2, I2, _3), k2 && (v3.prependListener = j2(k2, ".prependListener:", x2, I2, _3, true)), v3[s2] = function() {
                  const t5 = this || e3;
                  let n4 = arguments[0];
                  r4 && r4.transferEventName && (n4 = r4.transferEventName(n4));
                  const a3 = arguments[2], i2 = !!a3 && ("boolean" == typeof a3 || a3.capture), s3 = arguments[1];
                  if (!s3)
                    return R2.apply(this, arguments);
                  if (c2 && !c2(R2, s3, t5, arguments))
                    return;
                  const o3 = H[n4];
                  let d3;
                  o3 && (d3 = o3[i2 ? u : h]);
                  const p3 = d3 && t5[d3];
                  if (p3)
                    for (let e4 = 0; e4 < p3.length; e4++) {
                      const r5 = p3[e4];
                      if (L2(r5, s3)) {
                        if (p3.splice(e4, 1), r5.isRemoved = true, 0 === p3.length && (r5.allRemoved = true, t5[d3] = null, "string" == typeof n4)) {
                          t5[m + "ON_PROPERTY" + n4] = null;
                        }
                        return r5.zone.cancelTask(r5), _3 ? t5 : void 0;
                      }
                    }
                  return R2.apply(this, arguments);
                }, v3[o2] = function() {
                  const t5 = this || e3;
                  let n4 = arguments[0];
                  r4 && r4.transferEventName && (n4 = r4.transferEventName(n4));
                  const a3 = [], i2 = K(t5, S3 ? S3(n4) : n4);
                  for (let e4 = 0; e4 < i2.length; e4++) {
                    const t6 = i2[e4];
                    let r5 = t6.originalDelegate ? t6.originalDelegate : t6.callback;
                    a3.push(r5);
                  }
                  return a3;
                }, v3[p2] = function() {
                  const t5 = this || e3;
                  let n4 = arguments[0];
                  if (n4) {
                    r4 && r4.transferEventName && (n4 = r4.transferEventName(n4));
                    const e4 = H[n4];
                    if (e4) {
                      const r5 = e4.false, a3 = e4.true, i2 = t5[r5], o3 = t5[a3];
                      if (i2) {
                        const e5 = i2.slice();
                        for (let t6 = 0; t6 < e5.length; t6++) {
                          const r6 = e5[t6];
                          let a4 = r6.originalDelegate ? r6.originalDelegate : r6.callback;
                          this[s2].call(this, n4, a4, r6.options);
                        }
                      }
                      if (o3) {
                        const e5 = o3.slice();
                        for (let t6 = 0; t6 < e5.length; t6++) {
                          const r6 = e5[t6];
                          let a4 = r6.originalDelegate ? r6.originalDelegate : r6.callback;
                          this[s2].call(this, n4, a4, r6.options);
                        }
                      }
                    }
                  } else {
                    const e4 = Object.keys(t5);
                    for (let t6 = 0; t6 < e4.length; t6++) {
                      const r5 = e4[t6], n5 = V.exec(r5);
                      let a3 = n5 && n5[1];
                      a3 && "removeListener" !== a3 && this[p2].call(this, a3);
                    }
                    this[p2].call(this, "removeListener");
                  }
                  if (_3)
                    return this;
                }, A(v3[a2], T2), A(v3[s2], R2), C2 && A(v3[p2], C2), P2 && A(v3[o2], P2), true;
              }
              let w2 = [];
              for (let e4 = 0; e4 < r3.length; e4++)
                w2[e4] = S2(r3[e4], n2);
              return w2;
            }
            function K(e3, t3) {
              if (!t3) {
                const r4 = [];
                for (let n3 in e3) {
                  const a3 = V.exec(n3);
                  let i2 = a3 && a3[1];
                  if (i2 && (!t3 || i2 === t3)) {
                    const t4 = e3[n3];
                    if (t4)
                      for (let e4 = 0; e4 < t4.length; e4++)
                        r4.push(t4[e4]);
                  }
                }
                return r4;
              }
              let r3 = H[t3];
              r3 || (G(t3), r3 = H[t3]);
              const n2 = e3[r3.false], a2 = e3[r3.true];
              return n2 ? a2 ? n2.concat(a2) : n2.slice() : a2 ? a2.slice() : [];
            }
            function $(e3, t3) {
              const r3 = e3.Event;
              r3 && r3.prototype && t3.patchMethod(
                r3.prototype,
                "stopImmediatePropagation",
                (e4) => function(t4, r4) {
                  t4[W] = true, e4 && e4.apply(t4, r4);
                }
              );
            }
            function X(e3, t3, r3, n2, a2) {
              const i2 = Zone.__symbol__(n2);
              if (t3[i2])
                return;
              const s2 = t3[i2] = t3[n2];
              t3[n2] = function(i3, o2, c2) {
                return o2 && o2.prototype && a2.forEach(function(t4) {
                  const a3 = `${r3}.${n2}::` + t4, i4 = o2.prototype;
                  try {
                    if (i4.hasOwnProperty(t4)) {
                      const r4 = e3.ObjectGetOwnPropertyDescriptor(i4, t4);
                      r4 && r4.value ? (r4.value = e3.wrapWithCurrentZone(r4.value, a3), e3._redefineProperty(o2.prototype, t4, r4)) : i4[t4] && (i4[t4] = e3.wrapWithCurrentZone(i4[t4], a3));
                    } else
                      i4[t4] && (i4[t4] = e3.wrapWithCurrentZone(i4[t4], a3));
                  } catch (e4) {
                  }
                }), s2.call(t3, i3, o2, c2);
              }, e3.attachOriginToPatched(t3[n2], s2);
            }
            function J(e3, t3, r3) {
              if (!r3 || 0 === r3.length)
                return t3;
              const n2 = r3.filter((t4) => t4.target === e3);
              if (!n2 || 0 === n2.length)
                return t3;
              const a2 = n2[0].ignoreProperties;
              return t3.filter((e4) => -1 === a2.indexOf(e4));
            }
            function Q(e3, t3, r3, n2) {
              if (!e3)
                return;
              x(e3, J(e3, t3, r3), n2);
            }
            function Y(e3) {
              return Object.getOwnPropertyNames(e3).filter((e4) => e4.startsWith("on") && e4.length > 2).map((e4) => e4.substring(2));
            }
            function ee(e3, t3) {
              if (E && !P)
                return;
              if (Zone[e3.symbol("patchEvents")])
                return;
              const r3 = t3.__Zone_ignore_on_properties;
              let n2 = [];
              if (R) {
                const e4 = window;
                n2 = n2.concat([
                  "Document",
                  "SVGElement",
                  "Element",
                  "HTMLElement",
                  "HTMLBodyElement",
                  "HTMLMediaElement",
                  "HTMLFrameSetElement",
                  "HTMLFrameElement",
                  "HTMLIFrameElement",
                  "HTMLMarqueeElement",
                  "Worker"
                ]);
                const t4 = F() ? [{ target: e4, ignoreProperties: ["error"] }] : [];
                Q(e4, Y(e4), r3 ? r3.concat(t4) : r3, i(e4));
              }
              n2 = n2.concat([
                "XMLHttpRequest",
                "XMLHttpRequestEventTarget",
                "IDBIndex",
                "IDBRequest",
                "IDBOpenDBRequest",
                "IDBDatabase",
                "IDBTransaction",
                "IDBCursor",
                "WebSocket"
              ]);
              for (let e4 = 0; e4 < n2.length; e4++) {
                const a2 = t3[n2[e4]];
                a2 && a2.prototype && Q(a2.prototype, Y(a2.prototype), r3);
              }
            }
            Zone.__load_patch("util", (e3, t3, r3) => {
              const i2 = Y(e3);
              r3.patchOnProperties = x, r3.patchMethod = L, r3.bindArguments = S, r3.patchMacroTask = M;
              const p2 = t3.__symbol__("BLACK_LISTED_EVENTS"), l2 = t3.__symbol__("UNPATCHED_EVENTS");
              e3[l2] && (e3[p2] = e3[l2]), e3[p2] && (t3[p2] = t3[l2] = e3[p2]), r3.patchEventPrototype = $, r3.patchEventTarget = q, r3.isIEOrEdge = B, r3.ObjectDefineProperty = a, r3.ObjectGetOwnPropertyDescriptor = n, r3.ObjectCreate = s, r3.ArraySlice = o, r3.patchClass = I, r3.wrapWithCurrentZone = f, r3.filterProperties = J, r3.attachOriginToPatched = A, r3._redefineProperty = Object.defineProperty, r3.patchCallbacks = X, r3.getGlobalObjects = () => ({
                globalSources: z,
                zoneSymbolEventNames: H,
                eventNames: i2,
                isBrowser: R,
                isMix: P,
                isNode: E,
                TRUE_STR: u,
                FALSE_STR: h,
                ZONE_SYMBOL_PREFIX: m,
                ADD_EVENT_LISTENER_STR: c,
                REMOVE_EVENT_LISTENER_STR: d
              });
            });
            const te = g("zoneTask");
            function re(e3, t3, r3, n2) {
              let a2 = null, i2 = null;
              r3 += n2;
              const s2 = {};
              function o2(t4) {
                const r4 = t4.data;
                return r4.args[0] = function() {
                  return t4.invoke.apply(this, arguments);
                }, r4.handleId = a2.apply(e3, r4.args), t4;
              }
              function c2(t4) {
                return i2.call(e3, t4.data.handleId);
              }
              a2 = L(
                e3,
                t3 += n2,
                (r4) => function(a3, i3) {
                  if ("function" == typeof i3[0]) {
                    const e4 = {
                      isPeriodic: "Interval" === n2,
                      delay: "Timeout" === n2 || "Interval" === n2 ? i3[1] || 0 : void 0,
                      args: i3
                    }, r5 = i3[0];
                    i3[0] = function() {
                      try {
                        return r5.apply(this, arguments);
                      } finally {
                        e4.isPeriodic || ("number" == typeof e4.handleId ? delete s2[e4.handleId] : e4.handleId && (e4.handleId[te] = null));
                      }
                    };
                    const a4 = _(t3, i3[0], e4, o2, c2);
                    if (!a4)
                      return a4;
                    const d2 = a4.data.handleId;
                    return "number" == typeof d2 ? s2[d2] = a4 : d2 && (d2[te] = a4), d2 && d2.ref && d2.unref && "function" == typeof d2.ref && "function" == typeof d2.unref && (a4.ref = d2.ref.bind(d2), a4.unref = d2.unref.bind(d2)), "number" == typeof d2 || d2 ? d2 : a4;
                  }
                  return r4.apply(e3, i3);
                }
              ), i2 = L(
                e3,
                r3,
                (t4) => function(r4, n3) {
                  const a3 = n3[0];
                  let i3;
                  "number" == typeof a3 ? i3 = s2[a3] : (i3 = a3 && a3[te], i3 || (i3 = a3)), i3 && "string" == typeof i3.type ? "notScheduled" !== i3.state && (i3.cancelFn && i3.data.isPeriodic || 0 === i3.runCount) && ("number" == typeof a3 ? delete s2[a3] : a3 && (a3[te] = null), i3.zone.cancelTask(i3)) : t4.apply(e3, n3);
                }
              );
            }
            function ne(e3, t3) {
              if (Zone[t3.symbol("patchEventTarget")])
                return;
              const {
                eventNames: r3,
                zoneSymbolEventNames: n2,
                TRUE_STR: a2,
                FALSE_STR: i2,
                ZONE_SYMBOL_PREFIX: s2
              } = t3.getGlobalObjects();
              for (let e4 = 0; e4 < r3.length; e4++) {
                const t4 = r3[e4], o3 = s2 + (t4 + i2), c2 = s2 + (t4 + a2);
                n2[t4] = {}, n2[t4][i2] = o3, n2[t4][a2] = c2;
              }
              const o2 = e3.EventTarget;
              return o2 && o2.prototype ? (t3.patchEventTarget(e3, t3, [o2 && o2.prototype]), true) : void 0;
            }
            Zone.__load_patch("legacy", (e3) => {
              const t3 = e3[Zone.__symbol__("legacyPatch")];
              t3 && t3();
            }), Zone.__load_patch("queueMicrotask", (e3, t3, r3) => {
              r3.patchMethod(
                e3,
                "queueMicrotask",
                (e4) => function(e5, r4) {
                  t3.current.scheduleMicroTask("queueMicrotask", r4[0]);
                }
              );
            }), Zone.__load_patch("timers", (e3) => {
              const t3 = "set", r3 = "clear";
              re(e3, t3, r3, "Timeout"), re(e3, t3, r3, "Interval"), re(e3, t3, r3, "Immediate");
            }), Zone.__load_patch("requestAnimationFrame", (e3) => {
              re(e3, "request", "cancel", "AnimationFrame"), re(e3, "mozRequest", "mozCancel", "AnimationFrame"), re(e3, "webkitRequest", "webkitCancel", "AnimationFrame");
            }), Zone.__load_patch("blocking", (e3, t3) => {
              const r3 = ["alert", "prompt", "confirm"];
              for (let n2 = 0; n2 < r3.length; n2++) {
                L(
                  e3,
                  r3[n2],
                  (r4, n3, a2) => function(n4, i2) {
                    return t3.current.run(r4, e3, i2, a2);
                  }
                );
              }
            }), Zone.__load_patch("EventTarget", (e3, t3, r3) => {
              !function(e4, t4) {
                t4.patchEventPrototype(e4, t4);
              }(e3, r3), ne(e3, r3);
              const n2 = e3.XMLHttpRequestEventTarget;
              n2 && n2.prototype && r3.patchEventTarget(e3, r3, [n2.prototype]);
            }), Zone.__load_patch("MutationObserver", (e3, t3, r3) => {
              I("MutationObserver"), I("WebKitMutationObserver");
            }), Zone.__load_patch("IntersectionObserver", (e3, t3, r3) => {
              I("IntersectionObserver");
            }), Zone.__load_patch("FileReader", (e3, t3, r3) => {
              I("FileReader");
            }), Zone.__load_patch("on_property", (e3, t3, r3) => {
              ee(r3, e3);
            }), Zone.__load_patch("customElements", (e3, t3, r3) => {
              !function(e4, t4) {
                const { isBrowser: r4, isMix: n2 } = t4.getGlobalObjects();
                if (!r4 && !n2 || !e4.customElements || !("customElements" in e4))
                  return;
                t4.patchCallbacks(
                  t4,
                  e4.customElements,
                  "customElements",
                  "define",
                  [
                    "connectedCallback",
                    "disconnectedCallback",
                    "adoptedCallback",
                    "attributeChangedCallback"
                  ]
                );
              }(e3, r3);
            }), Zone.__load_patch("XHR", (e3, t3) => {
              !function(e4) {
                const c2 = e4.XMLHttpRequest;
                if (!c2)
                  return;
                const d2 = c2.prototype;
                let u2 = d2[p], h2 = d2[l];
                if (!u2) {
                  const t4 = e4.XMLHttpRequestEventTarget;
                  if (t4) {
                    const e5 = t4.prototype;
                    u2 = e5[p], h2 = e5[l];
                  }
                }
                const m2 = "readystatechange", f2 = "scheduled";
                function v2(e5) {
                  const n3 = e5.data, s3 = n3.target;
                  s3[i2] = false, s3[o2] = false;
                  const c3 = s3[a2];
                  u2 || (u2 = s3[p], h2 = s3[l]), c3 && h2.call(s3, m2, c3);
                  const d3 = s3[a2] = () => {
                    if (s3.readyState === s3.DONE)
                      if (!n3.aborted && s3[i2] && e5.state === f2) {
                        const r4 = s3[t3.__symbol__("loadfalse")];
                        if (0 !== s3.status && r4 && r4.length > 0) {
                          const a3 = e5.invoke;
                          e5.invoke = function() {
                            const r5 = s3[t3.__symbol__("loadfalse")];
                            for (let t4 = 0; t4 < r5.length; t4++)
                              r5[t4] === e5 && r5.splice(t4, 1);
                            n3.aborted || e5.state !== f2 || a3.call(e5);
                          }, r4.push(e5);
                        } else
                          e5.invoke();
                      } else
                        n3.aborted || false !== s3[i2] || (s3[o2] = true);
                  };
                  u2.call(s3, m2, d3);
                  return s3[r3] || (s3[r3] = e5), E2.apply(s3, n3.args), s3[i2] = true, e5;
                }
                function y2() {
                }
                function b2(e5) {
                  const t4 = e5.data;
                  return t4.aborted = true, R2.apply(t4.target, t4.args);
                }
                const S2 = L(
                  d2,
                  "open",
                  () => function(e5, t4) {
                    return e5[n2] = 0 == t4[2], e5[s2] = t4[1], S2.apply(e5, t4);
                  }
                ), w2 = g("fetchTaskAborting"), T2 = g("fetchTaskScheduling"), E2 = L(
                  d2,
                  "send",
                  () => function(e5, r4) {
                    if (true === t3.current[T2])
                      return E2.apply(e5, r4);
                    if (e5[n2])
                      return E2.apply(e5, r4);
                    {
                      const t4 = {
                        target: e5,
                        url: e5[s2],
                        isPeriodic: false,
                        args: r4,
                        aborted: false
                      }, n3 = _("XMLHttpRequest.send", y2, t4, v2, b2);
                      e5 && true === e5[o2] && !t4.aborted && n3.state === f2 && n3.invoke();
                    }
                  }
                ), R2 = L(
                  d2,
                  "abort",
                  () => function(e5, n3) {
                    const a3 = e5[r3];
                    if (a3 && "string" == typeof a3.type) {
                      if (null == a3.cancelFn || a3.data && a3.data.aborted)
                        return;
                      a3.zone.cancelTask(a3);
                    } else if (true === t3.current[w2])
                      return R2.apply(e5, n3);
                  }
                );
              }(e3);
              const r3 = g("xhrTask"), n2 = g("xhrSync"), a2 = g("xhrListener"), i2 = g("xhrScheduled"), s2 = g("xhrURL"), o2 = g("xhrErrorBeforeScheduled");
            }), Zone.__load_patch("geolocation", (e3) => {
              e3.navigator && e3.navigator.geolocation && function(e4, t3) {
                const r3 = e4.constructor.name;
                for (let a2 = 0; a2 < t3.length; a2++) {
                  const i2 = t3[a2], s2 = e4[i2];
                  if (s2) {
                    if (!w(n(e4, i2)))
                      continue;
                    e4[i2] = ((e5) => {
                      const t4 = function() {
                        return e5.apply(this, S(arguments, r3 + "." + i2));
                      };
                      return A(t4, e5), t4;
                    })(s2);
                  }
                }
              }(e3.navigator.geolocation, [
                "getCurrentPosition",
                "watchPosition"
              ]);
            }), Zone.__load_patch("PromiseRejectionEvent", (e3, t3) => {
              function r3(t4) {
                return function(r4) {
                  K(e3, t4).forEach((n2) => {
                    const a2 = e3.PromiseRejectionEvent;
                    if (a2) {
                      const e4 = new a2(t4, {
                        promise: r4.promise,
                        reason: r4.rejection
                      });
                      n2.invoke(e4);
                    }
                  });
                };
              }
              e3.PromiseRejectionEvent && (t3[g("unhandledPromiseRejectionHandler")] = r3("unhandledrejection"), t3[g("rejectionHandledHandler")] = r3("rejectionhandled"));
            });
          },
          2480: () => {
          },
          907: (e2, t2, r2) => {
            "use strict";
            function n(e3, t3) {
              (null == t3 || t3 > e3.length) && (t3 = e3.length);
              for (var r3 = 0, n2 = new Array(t3); r3 < t3; r3++)
                n2[r3] = e3[r3];
              return n2;
            }
            r2.d(t2, { Z: () => n });
          },
          5861: (e2, t2, r2) => {
            "use strict";
            function n(e3, t3, r3, n2, a2, i, s) {
              try {
                var o = e3[i](s), c = o.value;
              } catch (e4) {
                return void r3(e4);
              }
              o.done ? t3(c) : Promise.resolve(c).then(n2, a2);
            }
            function a(e3) {
              return function() {
                var t3 = this, r3 = arguments;
                return new Promise(function(a2, i) {
                  var s = e3.apply(t3, r3);
                  function o(e4) {
                    n(s, a2, i, o, c, "next", e4);
                  }
                  function c(e4) {
                    n(s, a2, i, o, c, "throw", e4);
                  }
                  o(void 0);
                });
              };
            }
            r2.d(t2, { Z: () => a });
          },
          5671: (e2, t2, r2) => {
            "use strict";
            function n(e3, t3) {
              if (!(e3 instanceof t3))
                throw new TypeError("Cannot call a class as a function");
            }
            r2.d(t2, { Z: () => n });
          },
          3144: (e2, t2, r2) => {
            "use strict";
            function n(e3, t3) {
              for (var r3 = 0; r3 < t3.length; r3++) {
                var n2 = t3[r3];
                n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e3, n2.key, n2);
              }
            }
            function a(e3, t3, r3) {
              return t3 && n(e3.prototype, t3), r3 && n(e3, r3), Object.defineProperty(e3, "prototype", { writable: false }), e3;
            }
            r2.d(t2, { Z: () => a });
          },
          4942: (e2, t2, r2) => {
            "use strict";
            function n(e3, t3, r3) {
              return t3 in e3 ? Object.defineProperty(e3, t3, {
                value: r3,
                enumerable: true,
                configurable: true,
                writable: true
              }) : e3[t3] = r3, e3;
            }
            r2.d(t2, { Z: () => n });
          },
          885: (e2, t2, r2) => {
            "use strict";
            r2.d(t2, { Z: () => a });
            var n = r2(181);
            function a(e3, t3) {
              return function(e4) {
                if (Array.isArray(e4))
                  return e4;
              }(e3) || function(e4, t4) {
                var r3 = null == e4 ? null : "undefined" != typeof Symbol && e4[Symbol.iterator] || e4["@@iterator"];
                if (null != r3) {
                  var n2, a2, i = [], s = true, o = false;
                  try {
                    for (r3 = r3.call(e4); !(s = (n2 = r3.next()).done) && (i.push(n2.value), !t4 || i.length !== t4); s = true)
                      ;
                  } catch (e5) {
                    o = true, a2 = e5;
                  } finally {
                    try {
                      s || null == r3.return || r3.return();
                    } finally {
                      if (o)
                        throw a2;
                    }
                  }
                  return i;
                }
              }(e3, t3) || (0, n.Z)(e3, t3) || function() {
                throw new TypeError(
                  "Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
                );
              }();
            }
          },
          181: (e2, t2, r2) => {
            "use strict";
            r2.d(t2, { Z: () => a });
            var n = r2(907);
            function a(e3, t3) {
              if (e3) {
                if ("string" == typeof e3)
                  return (0, n.Z)(e3, t3);
                var r3 = Object.prototype.toString.call(e3).slice(8, -1);
                return "Object" === r3 && e3.constructor && (r3 = e3.constructor.name), "Map" === r3 || "Set" === r3 ? Array.from(e3) : "Arguments" === r3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r3) ? (0, n.Z)(e3, t3) : void 0;
              }
            }
          },
          7002: (e2) => {
            "use strict";
            e2.exports = JSON.parse(
              '{"name":"protoo-client","version":"4.0.6","description":"protoo JavaScript client module","author":"Iñaki Baz Castillo <ibc@aliax.net>","homepage":"https://protoo.versatica.com","license":"MIT","repository":{"type":"git","url":"https://github.com/ibc/protoo.git"},"main":"lib/index.js","keywords":["nodejs","browser","websocket"],"engines":{"node":">=8.0.0"},"scripts":{"lint":"eslint -c .eslintrc.js lib"},"dependencies":{"debug":"^4.3.1","events":"^3.2.0","retry":"^0.12.0"},"devDependencies":{"eslint":"^5.16.0"},"optionalDependencies":{"websocket":"^1.0.33"}}'
            );
          },
          9794: (e2) => {
            "use strict";
            e2.exports = { version: "1.0.34" };
          }
        }, t = {};
        function r(n) {
          var a = t[n];
          if (void 0 !== a)
            return a.exports;
          var i = t[n] = { exports: {} };
          return e[n].call(i.exports, i, i.exports, r), i.exports;
        }
        return r.n = (e2) => {
          var t2 = e2 && e2.__esModule ? () => e2.default : () => e2;
          return r.d(t2, { a: t2 }), t2;
        }, r.d = (e2, t2) => {
          for (var n in t2)
            r.o(t2, n) && !r.o(e2, n) && Object.defineProperty(e2, n, { enumerable: true, get: t2[n] });
        }, r.g = function() {
          if ("object" == typeof globalThis)
            return globalThis;
          try {
            return this || new Function("return this")();
          } catch (e2) {
            if ("object" == typeof window)
              return window;
          }
        }(), r.o = (e2, t2) => Object.prototype.hasOwnProperty.call(e2, t2), r.r = (e2) => {
          "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
        }, r(710);
      })()
    );
  }
});

// node_modules/@videosdk.live/react-sdk/dist/index.modern.js
var import_react = __toESM(require_react());
var import_events = __toESM(require_events());
var import_js_sdk = __toESM(require_videosdk());
var eventPrifix = "videosdk-live-react-sdk";
var events = {
  "participant-joined": eventPrifix + "-participant-joined",
  "participant-left": eventPrifix + "-participant-left",
  "speaker-changed": eventPrifix + "-speaker-changed",
  "presenter-changed": eventPrifix + "-presenter-changed",
  "main-participant-changed": eventPrifix + "-main-participant-changed",
  "entry-requested": eventPrifix + "-entry-requested",
  "entry-responded": eventPrifix + "-entry-responded",
  "recording-started": eventPrifix + "-recording-started",
  "recording-stopped": eventPrifix + "-recording-stopped",
  "chat-message": eventPrifix + "-chat-message",
  "meeting-joined": eventPrifix + "-meeting-joined",
  "meeting-left": eventPrifix + "-meeting-left",
  "live-stream-started": eventPrifix + "-live-stream-started",
  "live-stream-stopped": eventPrifix + "-live-stream-stopped",
  "video-state-changed": eventPrifix + "-video-state-changed",
  "video-seeked": eventPrifix + "-video-seeked",
  "webcam-requested": eventPrifix + "-webcam-requested",
  "mic-requested": eventPrifix + "-mic-requested",
  "pin-state-changed": eventPrifix + "-pin-state-changed",
  "connection-open": eventPrifix + "-connection-open",
  "connection-close": eventPrifix + "-connection-close",
  "switch-meeting": eventPrifix + "-switch-meeting",
  error: eventPrifix + "-error",
  "hls-started": eventPrifix + "-hls-started",
  "hls-stopped": eventPrifix + "-hls-stopped",
  "hls-state-changed": eventPrifix + "-hls-state-changed",
  "hls-playable-state-changed": eventPrifix + "-hls-playable-state-changed",
  "recording-state-changed": eventPrifix + "-recording-state-changed",
  "livestream-state-changed": eventPrifix + "-livestream-state-changed",
  "meeting-state-changed": eventPrifix + "-meeting-state-changed",
  "participant-mode-changed": eventPrifix + "-participant-mode-changed"
};
var eventEmitter = new import_events.default();
eventEmitter.setMaxListeners(9999);
var MeetingProviderContex = (0, import_react.createContext)();
var useMeeting = function useMeeting2(_temp) {
  var _ref = _temp === void 0 ? {} : _temp, _ref$onParticipantJoi = _ref.onParticipantJoined, onParticipantJoined = _ref$onParticipantJoi === void 0 ? function() {
  } : _ref$onParticipantJoi, _ref$onParticipantLef = _ref.onParticipantLeft, onParticipantLeft = _ref$onParticipantLef === void 0 ? function() {
  } : _ref$onParticipantLef, _ref$onSpeakerChanged = _ref.onSpeakerChanged, onSpeakerChanged = _ref$onSpeakerChanged === void 0 ? function() {
  } : _ref$onSpeakerChanged, _ref$onPresenterChang = _ref.onPresenterChanged, onPresenterChanged = _ref$onPresenterChang === void 0 ? function() {
  } : _ref$onPresenterChang, _ref$onMainParticipan = _ref.onMainParticipantChanged, onMainParticipantChanged = _ref$onMainParticipan === void 0 ? function() {
  } : _ref$onMainParticipan, _ref$onEntryRequested = _ref.onEntryRequested, onEntryRequested = _ref$onEntryRequested === void 0 ? function() {
  } : _ref$onEntryRequested, _ref$onEntryResponded = _ref.onEntryResponded, onEntryResponded = _ref$onEntryResponded === void 0 ? function() {
  } : _ref$onEntryResponded, _ref$onRecordingStart = _ref.onRecordingStarted, onRecordingStarted = _ref$onRecordingStart === void 0 ? function() {
  } : _ref$onRecordingStart, _ref$onRecordingStopp = _ref.onRecordingStopped, onRecordingStopped = _ref$onRecordingStopp === void 0 ? function() {
  } : _ref$onRecordingStopp, _ref$onChatMessage = _ref.onChatMessage, onChatMessage = _ref$onChatMessage === void 0 ? function() {
  } : _ref$onChatMessage, _ref$onMeetingJoined = _ref.onMeetingJoined, onMeetingJoined = _ref$onMeetingJoined === void 0 ? function() {
  } : _ref$onMeetingJoined, _ref$onMeetingLeft = _ref.onMeetingLeft, onMeetingLeft = _ref$onMeetingLeft === void 0 ? function() {
  } : _ref$onMeetingLeft, _ref$onLiveStreamStar = _ref.onLiveStreamStarted, onLiveStreamStarted = _ref$onLiveStreamStar === void 0 ? function() {
  } : _ref$onLiveStreamStar, _ref$onLiveStreamStop = _ref.onLiveStreamStopped, onLiveStreamStopped = _ref$onLiveStreamStop === void 0 ? function() {
  } : _ref$onLiveStreamStop, _ref$onVideoStateChan = _ref.onVideoStateChanged, onVideoStateChanged = _ref$onVideoStateChan === void 0 ? function() {
  } : _ref$onVideoStateChan, _ref$onVideoSeeked = _ref.onVideoSeeked, onVideoSeeked = _ref$onVideoSeeked === void 0 ? function() {
  } : _ref$onVideoSeeked, _ref$onWebcamRequeste = _ref.onWebcamRequested, onWebcamRequested = _ref$onWebcamRequeste === void 0 ? function() {
  } : _ref$onWebcamRequeste, _ref$onMicRequested = _ref.onMicRequested, onMicRequested = _ref$onMicRequested === void 0 ? function() {
  } : _ref$onMicRequested, _ref$onPinStateChange = _ref.onPinStateChanged, onPinStateChanged = _ref$onPinStateChange === void 0 ? function() {
  } : _ref$onPinStateChange, _ref$onConnectionOpen = _ref.onConnectionOpen, onConnectionOpen = _ref$onConnectionOpen === void 0 ? function() {
  } : _ref$onConnectionOpen, _ref$onConnetionClose = _ref.onConnetionClose, onConnetionClose = _ref$onConnetionClose === void 0 ? function() {
  } : _ref$onConnetionClose, _ref$onSwitchMeeting = _ref.onSwitchMeeting, onSwitchMeeting = _ref$onSwitchMeeting === void 0 ? function() {
  } : _ref$onSwitchMeeting, _ref$onError = _ref.onError, onError = _ref$onError === void 0 ? function() {
  } : _ref$onError, _ref$onHlsStarted = _ref.onHlsStarted, onHlsStarted = _ref$onHlsStarted === void 0 ? function() {
  } : _ref$onHlsStarted, _ref$onHlsStopped = _ref.onHlsStopped, onHlsStopped = _ref$onHlsStopped === void 0 ? function() {
  } : _ref$onHlsStopped, _ref$onHlsStateChange = _ref.onHlsStateChanged, onHlsStateChanged = _ref$onHlsStateChange === void 0 ? function() {
  } : _ref$onHlsStateChange, _ref$onRecordingState = _ref.onRecordingStateChanged, onRecordingStateChanged = _ref$onRecordingState === void 0 ? function() {
  } : _ref$onRecordingState, _ref$onLivestreamStat = _ref.onLivestreamStateChanged, onLivestreamStateChanged = _ref$onLivestreamStat === void 0 ? function() {
  } : _ref$onLivestreamStat, _ref$onMeetingStateCh = _ref.onMeetingStateChanged, onMeetingStateChanged = _ref$onMeetingStateCh === void 0 ? function() {
  } : _ref$onMeetingStateCh, _ref$onParticipantMod = _ref.onParticipantModeChanged, onParticipantModeChanged = _ref$onParticipantMod === void 0 ? function() {
  } : _ref$onParticipantMod;
  (0, import_react.useEffect)(function() {
    eventEmitter.on(events["participant-joined"], onParticipantJoined);
    eventEmitter.on(events["participant-left"], onParticipantLeft);
    eventEmitter.on(events["speaker-changed"], onSpeakerChanged);
    eventEmitter.on(events["presenter-changed"], onPresenterChanged);
    eventEmitter.on(events["main-participant-changed"], onMainParticipantChanged);
    eventEmitter.on(events["entry-requested"], onEntryRequested);
    eventEmitter.on(events["entry-responded"], onEntryResponded);
    eventEmitter.on(events["recording-started"], onRecordingStarted);
    eventEmitter.on(events["recording-stopped"], onRecordingStopped);
    eventEmitter.on(events["chat-message"], onChatMessage);
    eventEmitter.on(events["meeting-joined"], onMeetingJoined);
    eventEmitter.on(events["meeting-left"], onMeetingLeft);
    eventEmitter.on(events["live-stream-started"], onLiveStreamStarted);
    eventEmitter.on(events["live-stream-stopped"], onLiveStreamStopped);
    eventEmitter.on(events["video-state-changed"], onVideoStateChanged);
    eventEmitter.on(events["video-seeked"], onVideoSeeked);
    eventEmitter.on(events["webcam-requested"], onWebcamRequested);
    eventEmitter.on(events["mic-requested"], onMicRequested);
    eventEmitter.on(events["pin-state-changed"], onPinStateChanged);
    eventEmitter.on(events["connection-open"], onConnectionOpen);
    eventEmitter.on(events["connection-close"], onConnetionClose);
    eventEmitter.on(events["switch-meeting"], onSwitchMeeting);
    eventEmitter.on(events["error"], onError);
    eventEmitter.on(events["hls-started"], onHlsStarted);
    eventEmitter.on(events["hls-stopped"], onHlsStopped);
    eventEmitter.on(events["hls-state-changed"], onHlsStateChanged);
    eventEmitter.on(events["recording-state-changed"], onRecordingStateChanged);
    eventEmitter.on(events["livestream-state-changed"], onLivestreamStateChanged);
    eventEmitter.on(events["meeting-state-changed"], onMeetingStateChanged);
    eventEmitter.on(events["participant-mode-changed"], onParticipantModeChanged);
    return function() {
      eventEmitter.off(events["meeting-state-changed"], onMeetingStateChanged);
      eventEmitter.off(events["participant-joined"], onParticipantJoined);
      eventEmitter.off(events["participant-left"], onParticipantLeft);
      eventEmitter.off(events["speaker-changed"], onSpeakerChanged);
      eventEmitter.off(events["presenter-changed"], onPresenterChanged);
      eventEmitter.off(events["main-participant-changed"], onMainParticipantChanged);
      eventEmitter.off(events["entry-requested"], onEntryRequested);
      eventEmitter.off(events["entry-responded"], onEntryResponded);
      eventEmitter.off(events["recording-started"], onRecordingStarted);
      eventEmitter.off(events["recording-stopped"], onRecordingStopped);
      eventEmitter.off(events["chat-message"], onChatMessage);
      eventEmitter.off(events["meeting-joined"], onMeetingJoined);
      eventEmitter.off(events["meeting-left"], onMeetingLeft);
      eventEmitter.off(events["live-stream-started"], onLiveStreamStarted);
      eventEmitter.off(events["live-stream-stopped"], onLiveStreamStopped);
      eventEmitter.off(events["video-state-changed"], onVideoStateChanged);
      eventEmitter.off(events["video-seeked"], onVideoSeeked);
      eventEmitter.off(events["webcam-requested"], onWebcamRequested);
      eventEmitter.off(events["mic-requested"], onMicRequested);
      eventEmitter.off(events["pin-state-changed"], onPinStateChanged);
      eventEmitter.off(events["connection-open"], onConnectionOpen);
      eventEmitter.off(events["connection-close"], onConnetionClose);
      eventEmitter.off(events["switch-meeting"], onSwitchMeeting);
      eventEmitter.off(events["error"], onError);
      eventEmitter.off(events["hls-started"], onHlsStarted);
      eventEmitter.off(events["hls-stopped"], onHlsStopped);
      eventEmitter.off(events["hls-state-changed"], onHlsStateChanged);
      eventEmitter.off(events["recording-state-changed"], onRecordingStateChanged);
      eventEmitter.off(events["livestream-state-changed"], onLivestreamStateChanged);
      eventEmitter.off(events["participant-mode-changed"], onParticipantModeChanged);
    };
  }, []);
  return (0, import_react.useContext)(MeetingProviderContex);
};
var MeetingConsumer = function MeetingConsumer2(_ref2) {
  var children = _ref2.children, _ref2$onParticipantJo = _ref2.onParticipantJoined, onParticipantJoined = _ref2$onParticipantJo === void 0 ? function() {
  } : _ref2$onParticipantJo, _ref2$onParticipantLe = _ref2.onParticipantLeft, onParticipantLeft = _ref2$onParticipantLe === void 0 ? function() {
  } : _ref2$onParticipantLe, _ref2$onSpeakerChange = _ref2.onSpeakerChanged, onSpeakerChanged = _ref2$onSpeakerChange === void 0 ? function() {
  } : _ref2$onSpeakerChange, _ref2$onPresenterChan = _ref2.onPresenterChanged, onPresenterChanged = _ref2$onPresenterChan === void 0 ? function() {
  } : _ref2$onPresenterChan, _ref2$onMainParticipa = _ref2.onMainParticipantChanged, onMainParticipantChanged = _ref2$onMainParticipa === void 0 ? function() {
  } : _ref2$onMainParticipa, _ref2$onEntryRequeste = _ref2.onEntryRequested, onEntryRequested = _ref2$onEntryRequeste === void 0 ? function() {
  } : _ref2$onEntryRequeste, _ref2$onEntryResponde = _ref2.onEntryResponded, onEntryResponded = _ref2$onEntryResponde === void 0 ? function() {
  } : _ref2$onEntryResponde, _ref2$onRecordingStar = _ref2.onRecordingStarted, onRecordingStarted = _ref2$onRecordingStar === void 0 ? function() {
  } : _ref2$onRecordingStar, _ref2$onRecordingStop = _ref2.onRecordingStopped, onRecordingStopped = _ref2$onRecordingStop === void 0 ? function() {
  } : _ref2$onRecordingStop, _ref2$onChatMessage = _ref2.onChatMessage, onChatMessage = _ref2$onChatMessage === void 0 ? function() {
  } : _ref2$onChatMessage, _ref2$onMeetingJoined = _ref2.onMeetingJoined, onMeetingJoined = _ref2$onMeetingJoined === void 0 ? function() {
  } : _ref2$onMeetingJoined, _ref2$onMeetingLeft = _ref2.onMeetingLeft, onMeetingLeft = _ref2$onMeetingLeft === void 0 ? function() {
  } : _ref2$onMeetingLeft, _ref2$onLiveStreamSta = _ref2.onLiveStreamStarted, onLiveStreamStarted = _ref2$onLiveStreamSta === void 0 ? function() {
  } : _ref2$onLiveStreamSta, _ref2$onLiveStreamSto = _ref2.onLiveStreamStopped, onLiveStreamStopped = _ref2$onLiveStreamSto === void 0 ? function() {
  } : _ref2$onLiveStreamSto, _ref2$onVideoStateCha = _ref2.onVideoStateChanged, onVideoStateChanged = _ref2$onVideoStateCha === void 0 ? function() {
  } : _ref2$onVideoStateCha, _ref2$onVideoSeeked = _ref2.onVideoSeeked, onVideoSeeked = _ref2$onVideoSeeked === void 0 ? function() {
  } : _ref2$onVideoSeeked, _ref2$onWebcamRequest = _ref2.onWebcamRequested, onWebcamRequested = _ref2$onWebcamRequest === void 0 ? function() {
  } : _ref2$onWebcamRequest, _ref2$onMicRequested = _ref2.onMicRequested, onMicRequested = _ref2$onMicRequested === void 0 ? function() {
  } : _ref2$onMicRequested, _ref2$onPinStateChang = _ref2.onPinStateChanged, onPinStateChanged = _ref2$onPinStateChang === void 0 ? function() {
  } : _ref2$onPinStateChang, _ref2$onConnectionOpe = _ref2.onConnectionOpen, onConnectionOpen = _ref2$onConnectionOpe === void 0 ? function() {
  } : _ref2$onConnectionOpe, _ref2$onConnetionClos = _ref2.onConnetionClose, onConnetionClose = _ref2$onConnetionClos === void 0 ? function() {
  } : _ref2$onConnetionClos, _ref2$onSwitchMeeting = _ref2.onSwitchMeeting, onSwitchMeeting = _ref2$onSwitchMeeting === void 0 ? function() {
  } : _ref2$onSwitchMeeting, _ref2$onError = _ref2.onError, onError = _ref2$onError === void 0 ? function() {
  } : _ref2$onError, _ref2$onHlsStarted = _ref2.onHlsStarted, onHlsStarted = _ref2$onHlsStarted === void 0 ? function() {
  } : _ref2$onHlsStarted, _ref2$onHlsStopped = _ref2.onHlsStopped, onHlsStopped = _ref2$onHlsStopped === void 0 ? function() {
  } : _ref2$onHlsStopped, _ref2$onHlsStateChang = _ref2.onHlsStateChanged, onHlsStateChanged = _ref2$onHlsStateChang === void 0 ? function() {
  } : _ref2$onHlsStateChang, _ref2$onRecordingStat = _ref2.onRecordingStateChanged, onRecordingStateChanged = _ref2$onRecordingStat === void 0 ? function() {
  } : _ref2$onRecordingStat, _ref2$onLivestreamSta = _ref2.onLivestreamStateChanged, onLivestreamStateChanged = _ref2$onLivestreamSta === void 0 ? function() {
  } : _ref2$onLivestreamSta, _ref2$onMeetingStateC = _ref2.onMeetingStateChanged, onMeetingStateChanged = _ref2$onMeetingStateC === void 0 ? function() {
  } : _ref2$onMeetingStateC, _ref2$onParticipantMo = _ref2.onParticipantModeChanged, onParticipantModeChanged = _ref2$onParticipantMo === void 0 ? function() {
  } : _ref2$onParticipantMo;
  (0, import_react.useEffect)(function() {
    eventEmitter.on(events["meeting-state-changed"], onMeetingStateChanged);
    eventEmitter.on(events["participant-joined"], onParticipantJoined);
    eventEmitter.on(events["participant-left"], onParticipantLeft);
    eventEmitter.on(events["speaker-changed"], onSpeakerChanged);
    eventEmitter.on(events["presenter-changed"], onPresenterChanged);
    eventEmitter.on(events["main-participant-changed"], onMainParticipantChanged);
    eventEmitter.on(events["entry-requested"], onEntryRequested);
    eventEmitter.on(events["entry-responded"], onEntryResponded);
    eventEmitter.on(events["recording-started"], onRecordingStarted);
    eventEmitter.on(events["recording-stopped"], onRecordingStopped);
    eventEmitter.on(events["chat-message"], onChatMessage);
    eventEmitter.on(events["meeting-joined"], onMeetingJoined);
    eventEmitter.on(events["meeting-left"], onMeetingLeft);
    eventEmitter.on(events["live-stream-enabled"], onLiveStreamStarted);
    eventEmitter.on(events["live-stream-disabled"], onLiveStreamStopped);
    eventEmitter.on(events["video-state-changed"], onVideoStateChanged);
    eventEmitter.on(events["video-seeked"], onVideoSeeked);
    eventEmitter.on(events["webcam-requested"], onWebcamRequested);
    eventEmitter.on(events["mic-requested"], onMicRequested);
    eventEmitter.on(events["pin-state-changed"], onPinStateChanged);
    eventEmitter.on(events["connection-open"], onConnectionOpen);
    eventEmitter.on(events["connection-close"], onConnetionClose);
    eventEmitter.on(events["switch-meeting"], onSwitchMeeting);
    eventEmitter.on(events["error"], onError);
    eventEmitter.on(events["hls-started"], onHlsStarted);
    eventEmitter.on(events["hls-stopped"], onHlsStopped);
    eventEmitter.on(events["hls-state-changed"], onHlsStateChanged);
    eventEmitter.on(events["recording-state-changed"], onRecordingStateChanged);
    eventEmitter.on(events["livestream-state-changed"], onLivestreamStateChanged);
    eventEmitter.on(events["participant-mode-changed"], onParticipantModeChanged);
    return function() {
      eventEmitter.off(events["meeting-state-changed"], onMeetingStateChanged);
      eventEmitter.off(events["participant-joined"], onParticipantJoined);
      eventEmitter.off(events["participant-left"], onParticipantLeft);
      eventEmitter.off(events["speaker-changed"], onSpeakerChanged);
      eventEmitter.off(events["presenter-changed"], onPresenterChanged);
      eventEmitter.off(events["main-participant-changed"], onMainParticipantChanged);
      eventEmitter.off(events["entry-requested"], onEntryRequested);
      eventEmitter.off(events["entry-responded"], onEntryResponded);
      eventEmitter.off(events["recording-started"], onRecordingStarted);
      eventEmitter.off(events["recording-stopped"], onRecordingStopped);
      eventEmitter.off(events["chat-message"], onChatMessage);
      eventEmitter.off(events["meeting-joined"], onMeetingJoined);
      eventEmitter.off(events["meeting-left"], onMeetingLeft);
      eventEmitter.off(events["live-stream-enabled"], onLiveStreamStarted);
      eventEmitter.off(events["live-stream-disabled"], onLiveStreamStopped);
      eventEmitter.off(events["video-state-changed"], onVideoStateChanged);
      eventEmitter.off(events["video-seeked"], onVideoSeeked);
      eventEmitter.off(events["webcam-requested"], onWebcamRequested);
      eventEmitter.off(events["mic-requested"], onMicRequested);
      eventEmitter.off(events["pin-state-changed"], onPinStateChanged);
      eventEmitter.off(events["connection-open"], onConnectionOpen);
      eventEmitter.off(events["connection-close"], onConnetionClose);
      eventEmitter.off(events["switch-meeting"], onSwitchMeeting);
      eventEmitter.off(events["error"], onError);
      eventEmitter.off(events["hls-started"], onHlsStarted);
      eventEmitter.off(events["hls-stopped"], onHlsStopped);
      eventEmitter.off(events["hls-state-changed"], onHlsStateChanged);
      eventEmitter.off(events["recording-state-changed"], onRecordingStateChanged);
      eventEmitter.off(events["livestream-state-changed"], onLivestreamStateChanged);
      eventEmitter.off(events["participant-mode-changed"], onParticipantModeChanged);
    };
  }, []);
  return import_react.default.createElement(import_react.default.Fragment, null, import_react.default.createElement(MeetingProviderContex.Consumer, null, children));
};
var version = "0.1.75";
var MeetingProvider = function MeetingProvider2(_ref) {
  var children = _ref.children, config = _ref.config, token = _ref.token, joinWithoutUserInteraction = _ref.joinWithoutUserInteraction, _reinitialiseMeetingOnConfigChange = _ref.reinitialiseMeetingOnConfigChange, deviceInfo = _ref.deviceInfo;
  var _useState = (0, import_react.useState)(null), meeting = _useState[0], setMeeting = _useState[1];
  var _useState2 = (0, import_react.useState)(null), localParticipant = _useState2[0], setLocalParticipant = _useState2[1];
  var _useState3 = (0, import_react.useState)(null), mainParticipant = _useState3[0], setMainParticipant = _useState3[1];
  var _useState4 = (0, import_react.useState)(null), activeSpeakerId = _useState4[0], setActiveSpeakerId = _useState4[1];
  var _useState5 = (0, import_react.useState)(null), presenterId = _useState5[0], setPresenterId = _useState5[1];
  var _useState6 = (0, import_react.useState)(false), localMicOn = _useState6[0], setLocalMicOn = _useState6[1];
  var _useState7 = (0, import_react.useState)(false), localWebcamOn = _useState7[0], setLocalWebcamOn = _useState7[1];
  var _useState8 = (0, import_react.useState)(false), localScreenShareOn = _useState8[0], setLocalScreenShareOn = _useState8[1];
  var _useState9 = (0, import_react.useState)(false), isRecording = _useState9[0], setIsRecording = _useState9[1];
  var _useState10 = (0, import_react.useState)([]), messages = _useState10[0], setMessages = _useState10[1];
  var _useState11 = (0, import_react.useState)(/* @__PURE__ */ new Map()), participants = _useState11[0], setParticipants = _useState11[1];
  var _useState12 = (0, import_react.useState)(/* @__PURE__ */ new Map()), pinnedParticipants = _useState12[0], setPinnedParticipants = _useState12[1];
  var _useState13 = (0, import_react.useState)(false), isLiveStreaming = _useState13[0], setIsLiveStreaming = _useState13[1];
  var _useState14 = (0, import_react.useState)(/* @__PURE__ */ new Map()), connections = _useState14[0], setConnections = _useState14[1];
  var _useState15 = (0, import_react.useState)(false), isMeetingJoined = _useState15[0], setIsMeetingJoined = _useState15[1];
  var _useState16 = (0, import_react.useState)(false), isHls = _useState16[0], setIsHls = _useState16[1];
  var _useState17 = (0, import_react.useState)("RECORDING_STOPPED"), recordingState = _useState17[0], setRecordingState = _useState17[1];
  var _useState18 = (0, import_react.useState)("LIVESTREAM_STOPPED"), livestreamState = _useState18[0], setLivestreamState = _useState18[1];
  var _useState19 = (0, import_react.useState)("HLS_STOPPED"), hlsState = _useState19[0], setHlsState = _useState19[1];
  var _useState20 = (0, import_react.useState)({
    downstreamUrl: null,
    playbackHlsUrl: null,
    livestreamUrl: null
  }), hlsUrls = _useState20[0], setHlsUrls = _useState20[1];
  var meetingRef = (0, import_react.useRef)();
  var localMicOnRef = (0, import_react.useRef)();
  var localWebcamOnRef = (0, import_react.useRef)();
  var localScreenShareOnRef = (0, import_react.useRef)();
  var isRecordingRef = (0, import_react.useRef)();
  var configRef = (0, import_react.useRef)(config);
  var tokenRef = (0, import_react.useRef)(token);
  var joinedOnFirstRender = (0, import_react.useRef)(false);
  var isHlsRef = (0, import_react.useRef)();
  var reinitialiseMeetingOnConfigChange = (0, import_react.useMemo)(function() {
    return _reinitialiseMeetingOnConfigChange;
  }, []);
  (0, import_react.useEffect)(function() {
    meetingRef.current = meeting;
  }, [meeting]);
  (0, import_react.useEffect)(function() {
    localMicOnRef.current = localMicOn;
  }, [localMicOn]);
  (0, import_react.useEffect)(function() {
    localWebcamOnRef.current = localWebcamOn;
  }, [localWebcamOn]);
  (0, import_react.useEffect)(function() {
    localScreenShareOnRef.current = localScreenShareOn;
  }, [localScreenShareOn]);
  (0, import_react.useEffect)(function() {
    isRecordingRef.current = isRecording;
  }, [isRecording]);
  (0, import_react.useEffect)(function() {
    configRef.current = config;
  }, [config]);
  (0, import_react.useEffect)(function() {
    tokenRef.current = token;
  }, [token]);
  (0, import_react.useEffect)(function() {
    isHlsRef.current = isHls;
  }, [isHls]);
  var resetStates = function resetStates2() {
    setMeeting(null);
    setLocalParticipant(null);
    setMainParticipant(null);
    setActiveSpeakerId(null);
    setPresenterId(null);
    setLocalMicOn(false);
    setLocalWebcamOn(false);
    setLocalScreenShareOn(false);
    setIsRecording(false);
    setMessages([]);
    setIsLiveStreaming(false);
    setParticipants(/* @__PURE__ */ new Map());
    setPinnedParticipants(/* @__PURE__ */ new Map());
    setConnections(/* @__PURE__ */ new Map());
    setIsMeetingJoined(false);
    setIsHls(false);
    setRecordingState("RECORDING_STOPPED");
    setLivestreamState("LIVESTREAM_STOPPED");
    setHlsState("HLS_STOPPED");
    setHlsUrls({
      downstreamUrl: null,
      playbackHlsUrl: null,
      livestreamUrl: null
    });
  };
  var _handle_participant_joined = function _handle_participant_joined2(participant) {
    setParticipants(function(participants2) {
      participants2.set(participant.id, participant);
      var participantsToSet = new Map(participants2);
      return participantsToSet;
    });
    eventEmitter.emit(events["participant-joined"], participant);
  };
  var _handle_participant_left = function _handle_participant_left2(participant) {
    setParticipants(function(participants2) {
      participants2["delete"](participant.id);
      var newParticipants = new Map(participants2);
      return newParticipants;
    });
    eventEmitter.emit(events["participant-left"], participant);
  };
  var _handle_presenter_changed = function _handle_presenter_changed2(presenterId2) {
    var _meetingRef$current, _meetingRef$current$l;
    setPresenterId(presenterId2);
    setLocalScreenShareOn(presenterId2 === (meetingRef === null || meetingRef === void 0 ? void 0 : (_meetingRef$current = meetingRef.current) === null || _meetingRef$current === void 0 ? void 0 : (_meetingRef$current$l = _meetingRef$current.localParticipant) === null || _meetingRef$current$l === void 0 ? void 0 : _meetingRef$current$l.id));
    eventEmitter.emit(events["presenter-changed"], presenterId2);
  };
  var _handle_main_participant_changed = function _handle_main_participant_changed2(participant) {
    setMainParticipant(participant);
    eventEmitter.emit(events["main-participant-changed"], participant);
  };
  var _handle_speaker_changed = function _handle_speaker_changed2(activeSpeakerId2) {
    setActiveSpeakerId(activeSpeakerId2);
    eventEmitter.emit(events["speaker-changed"], activeSpeakerId2);
  };
  var _handle_chat_message = function _handle_chat_message2(data) {
    setMessages(function(s) {
      return [].concat(s, [data]);
    });
    eventEmitter.emit(events["chat-message"], data);
  };
  var _handle_entry_requested = function _handle_entry_requested2(data) {
    eventEmitter.emit(events["entry-requested"], data);
  };
  var _handle_entry_responded = function _handle_entry_responded2(participantId, decision) {
    eventEmitter.emit(events["entry-responded"], participantId, decision);
  };
  var _handle_recording_started = function _handle_recording_started2() {
    setIsRecording(true);
    eventEmitter.emit(events["recording-started"]);
  };
  var _handle_recording_stopped = function _handle_recording_stopped2() {
    setIsRecording(false);
    eventEmitter.emit(events["recording-stopped"]);
  };
  var _handle_localParticipant_stream_enabled = function _handle_localParticipant_stream_enabled2(stream) {
    if (stream.track.readyState === "live") {
      if (stream.kind === "video") {
        setLocalWebcamOn(true);
      } else if (stream.kind === "audio") {
        setLocalMicOn(true);
      }
    }
  };
  var _handle_localParticipant_stream_disabled = function _handle_localParticipant_stream_disabled2(stream) {
    if (stream.kind === "video") {
      setLocalWebcamOn(false);
    } else if (stream.kind === "audio") {
      setLocalMicOn(false);
    }
  };
  var _handle_live_stream_started = function _handle_live_stream_started2(data) {
    setIsLiveStreaming(true);
    eventEmitter.emit(events["live-stream-started"], data);
  };
  var _handle_live_stream_stopped = function _handle_live_stream_stopped2() {
    setIsLiveStreaming(false);
    eventEmitter.emit(events["live-stream-stopped"]);
  };
  var _handle_hls_started = function _handle_hls_started2(data) {
    setIsHls(true);
    eventEmitter.emit(events["hls-started"], data);
  };
  var _handle_hls_stopped = function _handle_hls_stopped2() {
    setIsHls(false);
    eventEmitter.emit(events["hls-stopped"]);
  };
  var _handle_video_state_changed = function _handle_video_state_changed2(data) {
    eventEmitter.emit(events["video-state-changed"], data);
  };
  var _handle_video_seeked = function _handle_video_seeked2(data) {
    eventEmitter.emit(events["video-seeked"], data);
  };
  var _handle_webcam_requested = function _handle_webcam_requested2(data) {
    eventEmitter.emit(events["webcam-requested"], data);
  };
  var _handle_mic_requested = function _handle_mic_requested2(data) {
    eventEmitter.emit(events["mic-requested"], data);
  };
  var _handle_meeting_joined = function _handle_meeting_joined2(data) {
    joinedOnFirstRender.current = true;
    setMessages(function(s) {
      return [].concat(s, data.messages);
    });
    eventEmitter.emit(events["meeting-joined"], data);
    setIsMeetingJoined(true);
  };
  var _handle_meeting_left = function _handle_meeting_left2() {
    eventEmitter.emit(events["meeting-left"]);
    var meeting2 = meetingRef.current;
    if (meeting2) {
      var _meeting$localPartici;
      if (typeof (meeting2 === null || meeting2 === void 0 ? void 0 : meeting2.off) === "function") {
        meeting2.off("meeting-state-changed", _handle_meeting_state_changed);
        meeting2.off("participant-joined", _handle_participant_joined);
        meeting2.off("participant-left", _handle_participant_left);
        meeting2.off("presenter-changed", _handle_presenter_changed);
        meeting2.off("main-participant-changed", _handle_main_participant_changed);
        meeting2.off("speaker-changed", _handle_speaker_changed);
        meeting2.off("entry-requested", _handle_entry_requested);
        meeting2.off("entry-responded", _handle_entry_responded);
        meeting2.off("chat-message", _handle_chat_message);
        meeting2.off("recording-started", _handle_recording_started);
        meeting2.off("recording-stopped", _handle_recording_stopped);
        meeting2.off("meeting-joined", _handle_meeting_joined);
        meeting2.off("meeting-left", _handle_meeting_left2);
        meeting2.off("livestream-started", _handle_live_stream_started);
        meeting2.off("livestream-stopped", _handle_live_stream_stopped);
        meeting2.off("video-state-changed", _handle_video_state_changed);
        meeting2.off("video-seeked", _handle_video_seeked);
        meeting2.off("webcam-requested", _handle_webcam_requested);
        meeting2.off("mic-requested", _handle_mic_requested);
        meeting2.off("pin-state-changed", _handle_pin_state_changed);
        meeting2.off("connection-open", _handle_connection_open);
        meeting2.off("connection-close", _handle_connection_close);
        meeting2.off("switch-meeting", _handle_switch_meeting);
        meeting2.off("error", _handle_error);
        meeting2.off("hls-started", _handle_hls_started);
        meeting2.off("hls-stopped", _handle_hls_stopped);
        meeting2.off("recording-state-changed", _handle_recording_state_changed);
        meeting2.off("livestream-state-changed", _handle_livestream_state_changed);
        meeting2.off("hls-state-changed", _handle_hls_state_changed);
        meeting2.off("participant-mode-changed", _handel_participant_mode_changed);
      }
      if (typeof (meeting2 === null || meeting2 === void 0 ? void 0 : (_meeting$localPartici = meeting2.localParticipant) === null || _meeting$localPartici === void 0 ? void 0 : _meeting$localPartici.off) === "function") {
        meeting2.localParticipant.off("stream-enabled", _handle_localParticipant_stream_enabled);
        meeting2.localParticipant.off("stream-disabled", _handle_localParticipant_stream_disabled);
      }
      resetStates();
    }
  };
  var _handle_pin_state_changed = function _handle_pin_state_changed2(_ref2) {
    var participantId = _ref2.participantId, state = _ref2.state, pinnedBy = _ref2.pinnedBy;
    setPinnedParticipants(function(pinnedParticipants2) {
      if (!state.cam && !state.share) {
        pinnedParticipants2["delete"](participantId);
      } else {
        pinnedParticipants2.set(participantId, state);
      }
      var pinnedParticipantsToSet = new Map(pinnedParticipants2);
      return pinnedParticipantsToSet;
    });
    eventEmitter.emit(events["pin-state-changed"], {
      participantId,
      state,
      pinnedBy
    });
  };
  var _handle_connection_open = function _handle_connection_open2(connection) {
    setConnections(function(s) {
      s.set(connection.id, connection);
      var connectionsToSet = new Map(s);
      return connectionsToSet;
    });
    eventEmitter.emit(events["connection-open"], connection);
  };
  var _handle_connection_close = function _handle_connection_close2(connectionId) {
    setConnections(function(s) {
      s["delete"](connectionId);
      var newConnections = new Map(s);
      return newConnections;
    });
    eventEmitter.emit(events["connection-close"], connectionId);
  };
  var _handle_switch_meeting = function _handle_switch_meeting2(d) {
    eventEmitter.emit(events["switch-meeting"], d);
  };
  var _handle_error = function _handle_error2(data) {
    eventEmitter.emit(events["error"], data);
  };
  var _handle_recording_state_changed = function _handle_recording_state_changed2(data) {
    setRecordingState(data === null || data === void 0 ? void 0 : data.status);
    eventEmitter.emit(events["recording-state-changed"], data);
  };
  var _handle_livestream_state_changed = function _handle_livestream_state_changed2(data) {
    setLivestreamState(data === null || data === void 0 ? void 0 : data.status);
    eventEmitter.emit(events["livestream-state-changed"], data);
  };
  var _handle_hls_state_changed = function _handle_hls_state_changed2(data) {
    setHlsState(data === null || data === void 0 ? void 0 : data.status);
    if ((data === null || data === void 0 ? void 0 : data.status) == "HLS_PLAYABLE") {
      setHlsUrls({
        downstreamUrl: data === null || data === void 0 ? void 0 : data.downstreamUrl,
        playbackHlsUrl: data === null || data === void 0 ? void 0 : data.playbackHlsUrl,
        livestreamUrl: data === null || data === void 0 ? void 0 : data.livestreamUrl
      });
    } else if ((data === null || data === void 0 ? void 0 : data.status) == "HLS_STOPPED") {
      setHlsUrls({
        downstreamUrl: null,
        playbackHlsUrl: null,
        livestreamUrl: null
      });
    }
    eventEmitter.emit(events["hls-state-changed"], data);
  };
  var _handle_meeting_state_changed = function _handle_meeting_state_changed2(data) {
    eventEmitter.emit(events["meeting-state-changed"], data);
  };
  var _handel_participant_mode_changed = function _handel_participant_mode_changed2(data) {
    var _meetingRef$current2, _meetingRef$current2$;
    setParticipants(function(participants2) {
      var part = participants2.get(data.participantId);
      part.mode = data.mode;
      participants2.set(part.id, part);
      return participants2;
    });
    if (data.participantId === (meetingRef === null || meetingRef === void 0 ? void 0 : (_meetingRef$current2 = meetingRef.current) === null || _meetingRef$current2 === void 0 ? void 0 : (_meetingRef$current2$ = _meetingRef$current2.localParticipant) === null || _meetingRef$current2$ === void 0 ? void 0 : _meetingRef$current2$.id)) {
      setLocalParticipant(function(participant) {
        participant.mode = data.mode;
        return participant;
      });
    }
    eventEmitter.emit(events["participant-mode-changed"], data);
  };
  var join = function join2() {
    var meeting2 = import_js_sdk.VideoSDK && import_js_sdk.VideoSDK.initMeeting(configRef.current);
    setMeeting(meeting2);
    var localParticipant2 = meeting2.localParticipant, participants2 = meeting2.participants;
    participants2.set(localParticipant2.id, localParticipant2);
    setParticipants(participants2);
    setLocalParticipant(localParticipant2);
    meeting2.on("meeting-state-changed", _handle_meeting_state_changed);
    meeting2.on("participant-joined", _handle_participant_joined);
    meeting2.on("participant-left", _handle_participant_left);
    meeting2.on("presenter-changed", _handle_presenter_changed);
    meeting2.on("main-participant-changed", _handle_main_participant_changed);
    meeting2.on("speaker-changed", _handle_speaker_changed);
    meeting2.on("entry-requested", _handle_entry_requested);
    meeting2.on("entry-responded", _handle_entry_responded);
    meeting2.on("chat-message", _handle_chat_message);
    meeting2.on("recording-started", _handle_recording_started);
    meeting2.on("recording-stopped", _handle_recording_stopped);
    meeting2.on("meeting-joined", _handle_meeting_joined);
    meeting2.on("meeting-left", _handle_meeting_left);
    meeting2.on("livestream-started", _handle_live_stream_started);
    meeting2.on("livestream-stopped", _handle_live_stream_stopped);
    meeting2.on("video-state-changed", _handle_video_state_changed);
    meeting2.on("video-seeked", _handle_video_seeked);
    meeting2.on("webcam-requested", _handle_webcam_requested);
    meeting2.on("mic-requested", _handle_mic_requested);
    meeting2.on("pin-state-changed", _handle_pin_state_changed);
    meeting2.on("connection-open", _handle_connection_open);
    meeting2.on("connection-close", _handle_connection_close);
    meeting2.on("switch-meeting", _handle_switch_meeting);
    meeting2.on("error", _handle_error);
    meeting2.on("hls-started", _handle_hls_started);
    meeting2.on("hls-stopped", _handle_hls_stopped);
    meeting2.on("recording-state-changed", _handle_recording_state_changed);
    meeting2.on("livestream-state-changed", _handle_livestream_state_changed);
    meeting2.on("hls-state-changed", _handle_hls_state_changed);
    meeting2.on("participant-mode-changed", _handel_participant_mode_changed);
    meeting2.localParticipant.on("stream-enabled", _handle_localParticipant_stream_enabled);
    meeting2.localParticipant.on("stream-disabled", _handle_localParticipant_stream_disabled);
    meeting2.join();
  };
  var leave = function leave2() {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.leave();
    }
  };
  var end = function end2() {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.end();
    }
  };
  var startRecording = function startRecording2(webhookUrl, awsDirPath, config2) {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.startRecording(webhookUrl, awsDirPath, config2);
    }
  };
  var stopRecording = function stopRecording2() {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      var _isRecording = isRecordingRef.current;
      if (_isRecording) {
        meeting2.stopRecording();
      }
    }
  };
  var unmuteMic = function unmuteMic2(customAudioTrack) {
    if (customAudioTrack === void 0) {
      customAudioTrack = void 0;
    }
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.unmuteMic(customAudioTrack);
    }
  };
  var muteMic = function muteMic2() {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.muteMic();
    }
  };
  var toggleMic = function toggleMic2(customAudioTrack) {
    if (customAudioTrack === void 0) {
      customAudioTrack = void 0;
    }
    var localMicOn2 = localMicOnRef.current;
    if (localMicOn2) {
      muteMic();
    } else {
      unmuteMic(customAudioTrack);
    }
  };
  var disableWebcam = function disableWebcam2() {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.disableWebcam();
    }
  };
  var enableWebcam = function enableWebcam2(customVideoTrack) {
    if (customVideoTrack === void 0) {
      customVideoTrack = void 0;
    }
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.enableWebcam(customVideoTrack);
    }
  };
  var toggleWebcam = function toggleWebcam2(customVideoTrack) {
    if (customVideoTrack === void 0) {
      customVideoTrack = void 0;
    }
    var localWebcamOn2 = localWebcamOnRef.current;
    if (localWebcamOn2) {
      disableWebcam();
    } else {
      enableWebcam(customVideoTrack);
    }
  };
  var disableScreenShare = function disableScreenShare2() {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.disableScreenShare();
    }
  };
  var enableScreenShare = function enableScreenShare2(customScreenShareTrack) {
    if (customScreenShareTrack === void 0) {
      customScreenShareTrack = void 0;
    }
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.enableScreenShare(customScreenShareTrack);
    }
  };
  var toggleScreenShare = function toggleScreenShare2(customScreenShareTrack) {
    if (customScreenShareTrack === void 0) {
      customScreenShareTrack = void 0;
    }
    var localScreenShareOn2 = localScreenShareOnRef.current;
    if (localScreenShareOn2) {
      disableScreenShare();
    } else {
      enableScreenShare(customScreenShareTrack);
    }
  };
  var changeMode = function changeMode2(mode) {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.changeMode(mode);
    }
  };
  var sendChatMessage = function sendChatMessage2(text) {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.sendChatMessage(text);
    }
  };
  var respondEntry = function respondEntry2(participantId, decision) {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.respondEntry(participantId, decision);
    }
  };
  var getMics = function getMics2() {
    try {
      var _meeting = meetingRef.current;
      return Promise.resolve(function() {
        if (_meeting) {
          return Promise.resolve(_meeting.getMics());
        }
      }());
    } catch (e) {
      return Promise.reject(e);
    }
  };
  var getWebcams = function getWebcams2() {
    try {
      var _meeting2 = meetingRef.current;
      return Promise.resolve(function() {
        if (_meeting2) {
          return Promise.resolve(_meeting2.getWebcams());
        }
      }());
    } catch (e) {
      return Promise.reject(e);
    }
  };
  var changeWebcam = function changeWebcam2(obj) {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.changeWebcam(obj);
    }
  };
  var replaceWebcamStream = function replaceWebcamStream2(stream) {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.replaceWebcamStream(stream);
    }
  };
  var changeMic = function changeMic2(obj) {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.changeMic(obj);
    }
  };
  var startVideo = function startVideo2(_ref3) {
    var link = _ref3.link;
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.startVideo({
        link
      });
    }
  };
  var stopVideo = function stopVideo2() {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.stopVideo();
    }
  };
  var resumeVideo = function resumeVideo2() {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.resumeVideo();
    }
  };
  var pauseVideo = function pauseVideo2(_ref4) {
    var currentTime = _ref4.currentTime;
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.pauseVideo({
        currentTime
      });
    }
  };
  var seekVideo = function seekVideo2(_ref5) {
    var currentTime = _ref5.currentTime;
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.seekVideo({
        currentTime
      });
    }
  };
  var startLivestream = function startLivestream2(streamInfo, config2) {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.startLivestream(streamInfo, config2);
    }
  };
  var stopLivestream = function stopLivestream2() {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.stopLivestream();
    }
  };
  var connectTo = function connectTo2(_ref6) {
    var meetingId = _ref6.meetingId, payload = _ref6.payload;
    try {
      var _meeting3 = meetingRef.current;
      var _temp = function() {
        if (_meeting3) {
          return Promise.resolve(_meeting3.connectTo({
            meetingId,
            payload
          })).then(function() {
          });
        }
      }();
      return Promise.resolve(_temp && _temp.then ? _temp.then(function() {
      }) : void 0);
    } catch (e) {
      return Promise.reject(e);
    }
  };
  var startHls = function startHls2(config2) {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.startHls(config2);
    }
  };
  var stopHls = function stopHls2() {
    var meeting2 = meetingRef.current;
    if (meeting2) {
      meeting2.stopHls();
    }
  };
  var initSDK = function initSDK2() {
    import_js_sdk.VideoSDK.config(tokenRef.current);
    if (deviceInfo) {
      import_js_sdk.VideoSDK.analytics(deviceInfo);
    } else {
      import_js_sdk.VideoSDK.analytics({
        sdkType: "react-web",
        sdkVersion: version
      });
    }
    if (joinWithoutUserInteraction) {
      join();
    }
  };
  (0, import_react.useEffect)(function() {
    initSDK();
  }, []);
  (0, import_react.useEffect)(function() {
    if (reinitialiseMeetingOnConfigChange && joinedOnFirstRender.current) {
      leave();
      initSDK();
      !joinWithoutUserInteraction && join();
    }
  }, [config.meetingId, token, reinitialiseMeetingOnConfigChange]);
  return import_react.default.createElement(MeetingProviderContex.Provider, {
    value: {
      meetingId: meeting === null || meeting === void 0 ? void 0 : meeting.id,
      meeting,
      baseUrl: meeting === null || meeting === void 0 ? void 0 : meeting.baseUrl,
      localParticipant,
      mainParticipant,
      activeSpeakerId,
      participants,
      presenterId,
      localMicOn,
      localWebcamOn,
      localScreenShareOn,
      messages,
      isRecording,
      isLiveStreaming,
      pinnedParticipants,
      connections,
      isHls,
      recordingState,
      livestreamState,
      hlsState,
      hlsUrls,
      isMeetingJoined,
      join,
      leave,
      end,
      startRecording,
      stopRecording,
      sendChatMessage,
      respondEntry,
      muteMic,
      unmuteMic,
      toggleMic,
      disableWebcam,
      enableWebcam,
      toggleWebcam,
      disableScreenShare,
      enableScreenShare,
      toggleScreenShare,
      getMics,
      getWebcams,
      changeWebcam,
      replaceWebcamStream,
      changeMic,
      changeMode,
      startVideo,
      stopVideo,
      resumeVideo,
      pauseVideo,
      seekVideo,
      startLivestream,
      stopLivestream,
      connectTo,
      startHls,
      stopHls
    }
  }, children);
};
var useParticipant = function useParticipant2(participantId, _temp) {
  var _ref = _temp === void 0 ? {} : _temp, _ref$onStreamEnabled = _ref.onStreamEnabled, onStreamEnabled = _ref$onStreamEnabled === void 0 ? function() {
  } : _ref$onStreamEnabled, _ref$onStreamDisabled = _ref.onStreamDisabled, onStreamDisabled = _ref$onStreamDisabled === void 0 ? function() {
  } : _ref$onStreamDisabled, _ref$onMediaStatusCha = _ref.onMediaStatusChanged, onMediaStatusChanged = _ref$onMediaStatusCha === void 0 ? function() {
  } : _ref$onMediaStatusCha, _ref$onVideoQualityCh = _ref.onVideoQualityChanged, onVideoQualityChanged = _ref$onVideoQualityCh === void 0 ? function() {
  } : _ref$onVideoQualityCh;
  var _useState = (0, import_react.useState)(null), webcamStream = _useState[0], setwebcamStream = _useState[1];
  var _useState2 = (0, import_react.useState)(null), micStream = _useState2[0], setMicStream = _useState2[1];
  var _useState3 = (0, import_react.useState)(null), screenShareStream = _useState3[0], setScreenShareStream = _useState3[1];
  var _useState4 = (0, import_react.useState)(null), screenShareAudioStream = _useState4[0], setScreenShareAudioStream = _useState4[1];
  var meeting = useMeeting();
  var _useMemo = (0, import_react.useMemo)(function() {
    var _meeting$pinnedPartic;
    var participants2 = meeting === null || meeting === void 0 ? void 0 : meeting.participants;
    var localParticipant2 = meeting === null || meeting === void 0 ? void 0 : meeting.localParticipant;
    var activeSpeakerId2 = meeting === null || meeting === void 0 ? void 0 : meeting.activeSpeakerId;
    var mainParticipant2 = meeting === null || meeting === void 0 ? void 0 : meeting.mainParticipant;
    var pinState2 = (meeting === null || meeting === void 0 ? void 0 : (_meeting$pinnedPartic = meeting.pinnedParticipants) === null || _meeting$pinnedPartic === void 0 ? void 0 : _meeting$pinnedPartic.get(participantId)) || {
      cam: false,
      share: false
    };
    return {
      participants: participants2,
      localParticipant: localParticipant2,
      activeSpeakerId: activeSpeakerId2,
      mainParticipant: mainParticipant2,
      pinState: pinState2
    };
  }, [meeting]), participants = _useMemo.participants, localParticipant = _useMemo.localParticipant, activeSpeakerId = _useMemo.activeSpeakerId, mainParticipant = _useMemo.mainParticipant, pinState = _useMemo.pinState;
  var participant = participants === null || participants === void 0 ? void 0 : participants.get(participantId);
  var _useState5 = (0, import_react.useState)(participant === null || participant === void 0 ? void 0 : participant.webcamOn), webcamOn = _useState5[0], setWebcamOn = _useState5[1];
  var _useState6 = (0, import_react.useState)(participant === null || participant === void 0 ? void 0 : participant.micOn), micOn = _useState6[0], setMicOn = _useState6[1];
  var _useState7 = (0, import_react.useState)(participant === null || participant === void 0 ? void 0 : participant.mode), mode = _useState7[0], setMode = _useState7[1];
  var setTrack = function setTrack2(stream) {
    if (stream.track.readyState === "live") {
      switch (stream.kind) {
        case "video":
          if (webcamStream != null) {
            setwebcamStream(null);
          }
          setwebcamStream(stream);
          break;
        case "audio":
          if (micStream != null) {
            setMicStream(null);
          }
          setMicStream(stream);
          break;
        case "share":
          if (screenShareStream != null) {
            setScreenShareStream(null);
          }
          setScreenShareStream(stream);
          break;
        case "shareAudio":
          if (screenShareAudioStream != null) {
            setScreenShareAudioStream(null);
          }
          setScreenShareAudioStream(stream);
          break;
      }
    }
  };
  var unSetTrack = function unSetTrack2(stream) {
    switch (stream.kind) {
      case "video":
        setwebcamStream(null);
        break;
      case "audio":
        setMicStream(null);
        break;
      case "share":
        setScreenShareStream(null);
        break;
      case "shareAudio":
        setScreenShareAudioStream(null);
        break;
    }
  };
  var _handleStreamEnabled = function _handleStreamEnabled2(stream) {
    setTrack(stream);
    onStreamEnabled(stream);
  };
  var _handleParticipantModeChanged = function _handleParticipantModeChanged2(data) {
    if (participantId === data.participantId) {
      setMode(data.mode);
    }
  };
  var _handleStreamDisabled = function _handleStreamDisabled2(stream) {
    unSetTrack(stream);
    onStreamDisabled(stream);
  };
  var _handleVideoQualityChanged = function _handleVideoQualityChanged2(data) {
    var peerId = data.peerId, prevQuality = data.prevQuality, currentQuality = data.currentQuality;
    onVideoQualityChanged({
      peerId,
      prevQuality,
      currentQuality
    });
  };
  var _handleMediaStatusChanged = function _handleMediaStatusChanged2(data) {
    var kind = data.kind, peerId = data.peerId, newStatus = data.newStatus;
    if (kind == "audio") {
      setMicOn(newStatus);
    } else if (kind == "video") {
      setWebcamOn(newStatus);
    }
    onMediaStatusChanged({
      kind,
      peerId,
      newStatus
    });
  };
  var setQuality = function setQuality2(quality) {
    participant === null || participant === void 0 ? void 0 : participant.setQuality(quality);
  };
  var setViewPort = function setViewPort2(width, height) {
    participant === null || participant === void 0 ? void 0 : participant.setViewPort(width, height);
  };
  var enableMic = function enableMic2() {
    participant === null || participant === void 0 ? void 0 : participant.enableMic();
  };
  var disableMic = function disableMic2() {
    participant === null || participant === void 0 ? void 0 : participant.disableMic();
  };
  var enableWebcam = function enableWebcam2() {
    participant === null || participant === void 0 ? void 0 : participant.enableWebcam();
  };
  var disableWebcam = function disableWebcam2() {
    participant === null || participant === void 0 ? void 0 : participant.disableWebcam();
  };
  var pin = function pin2(data) {
    participant === null || participant === void 0 ? void 0 : participant.pin(data);
  };
  var unpin = function unpin2(data) {
    participant === null || participant === void 0 ? void 0 : participant.unpin(data);
  };
  var remove = function remove2() {
    participant === null || participant === void 0 ? void 0 : participant.remove();
  };
  var getAudioStats = function getAudioStats2() {
    return Promise.resolve(participant === null || participant === void 0 ? void 0 : participant.getAudioStats());
  };
  var getVideoStats = function getVideoStats2() {
    return Promise.resolve(participant === null || participant === void 0 ? void 0 : participant.getVideoStats());
  };
  var getShareStats = function getShareStats2() {
    return Promise.resolve(participant === null || participant === void 0 ? void 0 : participant.getShareStats());
  };
  var consumeWebcamStreams = function consumeWebcamStreams2() {
    participant === null || participant === void 0 ? void 0 : participant.consumeWebcamStreams();
  };
  var consumeMicStreams = function consumeMicStreams2() {
    participant === null || participant === void 0 ? void 0 : participant.consumeMicStreams();
  };
  var stopConsumingWebcamStreams = function stopConsumingWebcamStreams2() {
    participant === null || participant === void 0 ? void 0 : participant.stopConsumingWebcamStreams();
  };
  var stopConsumingMicStreams = function stopConsumingMicStreams2() {
    participant === null || participant === void 0 ? void 0 : participant.stopConsumingMicStreams();
  };
  var switchTo = function switchTo2(data) {
    return Promise.resolve(participant === null || participant === void 0 ? void 0 : participant.switchTo(data)).then(function() {
    });
  };
  (0, import_react.useEffect)(function() {
    var streams = participant === null || participant === void 0 ? void 0 : participant.streams;
    if (streams) {
      streams.forEach(function(stream) {
        setTrack(stream);
      });
    }
    if (participant !== null && participant !== void 0 && participant.micOn) {
      setMicOn(micOn);
    }
    if (participant !== null && participant !== void 0 && participant.webcamOn) {
      setWebcamOn(webcamOn);
    }
    participant === null || participant === void 0 ? void 0 : participant.on("stream-enabled", _handleStreamEnabled);
    participant === null || participant === void 0 ? void 0 : participant.on("stream-disabled", _handleStreamDisabled);
    participant === null || participant === void 0 ? void 0 : participant.on("media-status-changed", _handleMediaStatusChanged);
    participant === null || participant === void 0 ? void 0 : participant.on("video-quality-changed", _handleVideoQualityChanged);
    eventEmitter.on(events["participant-mode-changed"], _handleParticipantModeChanged);
    return function() {
      participant === null || participant === void 0 ? void 0 : participant.off("stream-enabled", _handleStreamEnabled);
      participant === null || participant === void 0 ? void 0 : participant.off("stream-disabled", _handleStreamDisabled);
      participant === null || participant === void 0 ? void 0 : participant.off("media-status-changed", _handleMediaStatusChanged);
      participant === null || participant === void 0 ? void 0 : participant.off("video-quality-changed", _handleVideoQualityChanged);
      eventEmitter.off(events["participant-mode-changed"], _handleParticipantModeChanged);
    };
  }, [participant]);
  return {
    displayName: participant === null || participant === void 0 ? void 0 : participant.displayName,
    participant,
    webcamStream,
    micStream,
    screenShareStream,
    screenShareAudioStream,
    webcamOn: webcamOn || !!webcamStream,
    micOn: micOn || !!micStream,
    mode,
    screenShareOn: !!screenShareStream,
    isLocal: (localParticipant === null || localParticipant === void 0 ? void 0 : localParticipant.id) === participantId,
    isActiveSpeaker: activeSpeakerId === participantId,
    isMainParticipant: (mainParticipant === null || mainParticipant === void 0 ? void 0 : mainParticipant.id) === participantId,
    pinState,
    consumeMicStreams,
    consumeWebcamStreams,
    stopConsumingMicStreams,
    stopConsumingWebcamStreams,
    setQuality,
    setViewPort,
    enableMic,
    disableMic,
    enableWebcam,
    disableWebcam,
    pin,
    unpin,
    remove,
    switchTo,
    getAudioStats,
    getVideoStats,
    getShareStats
  };
};
var useConnection = function useConnection2(connectionId, _temp) {
  var _ref = _temp === void 0 ? {
    onMeeting: {
      onParticipantJoined: function onParticipantJoined2() {
      },
      onParticipantLeft: function onParticipantLeft2() {
      },
      onChatMessage: function onChatMessage2() {
      }
    }
  } : _temp, onMeeting = _ref.onMeeting;
  var onParticipantJoined = onMeeting === null || onMeeting === void 0 ? void 0 : onMeeting.onParticipantJoined;
  var onParticipantLeft = onMeeting === null || onMeeting === void 0 ? void 0 : onMeeting.onParticipantLeft;
  var onChatMessage = onMeeting === null || onMeeting === void 0 ? void 0 : onMeeting.onChatMessage;
  var meeting = useMeeting();
  var _useMemo = (0, import_react.useMemo)(function() {
    var connection2 = meeting === null || meeting === void 0 ? void 0 : meeting.connections.get(connectionId);
    if (!connection2) {
      throw new Error("connectionId not found");
    }
    var connectionParticipants2 = new Map(connection2.meeting.participants);
    return {
      connection: connection2,
      connectionParticipants: connectionParticipants2
    };
  }, [meeting]), connection = _useMemo.connection, connectionParticipants = _useMemo.connectionParticipants;
  var _useState = (0, import_react.useState)(new Map(connectionParticipants)), _connectionParticipants = _useState[0], setConnectionParticipants = _useState[1];
  var _handleParticipantJoined = function _handleParticipantJoined2(participant) {
    setConnectionParticipants(function(s) {
      s.set(participant.id, participant);
      var participantsToSet = new Map(s);
      return participantsToSet;
    });
    onParticipantJoined(participant);
  };
  var _handleParticipantLeft = function _handleParticipantLeft2(participantId) {
    setConnectionParticipants(function(s) {
      s["delete"](participantId);
      var newParticipants = new Map(s);
      return newParticipants;
    });
    onParticipantLeft(participantId);
  };
  var _handleChatMessage = function _handleChatMessage2(data) {
    onChatMessage(data);
  };
  (0, import_react.useEffect)(function() {
    connection === null || connection === void 0 ? void 0 : connection.meeting.on("participant-joined", _handleParticipantJoined);
    connection === null || connection === void 0 ? void 0 : connection.meeting.on("participant-left", _handleParticipantLeft);
    connection === null || connection === void 0 ? void 0 : connection.meeting.on("chat-message", _handleChatMessage);
    return function() {
      connection === null || connection === void 0 ? void 0 : connection.meeting.off("participant-joined", _handleParticipantJoined);
      connection === null || connection === void 0 ? void 0 : connection.meeting.off("participant-left", _handleParticipantLeft);
      connection === null || connection === void 0 ? void 0 : connection.meeting.off("chat-message", _handleChatMessage);
    };
  }, [connection]);
  return {
    connection: {
      id: connection.id,
      close: connection.close,
      payload: connection.payload,
      meeting: {
        id: connection.meeting.id,
        sendChatMessage: connection.meeting.sendChatMessage,
        end: connection.meeting.end,
        participants: _connectionParticipants
      }
    }
  };
};
var usePubSub = function usePubSub2(topic, _temp) {
  var _ref = _temp === void 0 ? {} : _temp, _ref$onMessageReceive = _ref.onMessageReceived, onMessageReceived = _ref$onMessageReceive === void 0 ? function() {
  } : _ref$onMessageReceive, _ref$onOldMessagesRec = _ref.onOldMessagesReceived, onOldMessagesReceived = _ref$onOldMessagesRec === void 0 ? function() {
  } : _ref$onOldMessagesRec;
  var _useMeeting = useMeeting(), meeting = _useMeeting.meeting, isMeetingJoined = _useMeeting.isMeetingJoined;
  var _useState = (0, import_react.useState)([]), messages = _useState[0], setMessages = _useState[1];
  var isSubscribed = (0, import_react.useRef)(false);
  var publish = function publish2(message, options) {
    if (meeting) {
      meeting.pubSub.publish(topic, message, options);
    }
  };
  var _handlePubSub = function _handlePubSub2(data) {
    setMessages(function(s) {
      return [].concat(s, [data]);
    });
    onMessageReceived(data);
  };
  var subscribeToPubsub = function subscribeToPubsub2(meeting2) {
    try {
      var _meeting$pubSub;
      return Promise.resolve(meeting2 === null || meeting2 === void 0 ? void 0 : (_meeting$pubSub = meeting2.pubSub) === null || _meeting$pubSub === void 0 ? void 0 : _meeting$pubSub.subscribe(topic, _handlePubSub)).then(function(data) {
        if (data) {
          onOldMessagesReceived(data.messages);
          setMessages(data.messages);
        }
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };
  (0, import_react.useEffect)(function() {
    if (meeting && !isSubscribed.current && isMeetingJoined) {
      isSubscribed.current = true;
      subscribeToPubsub(meeting);
      return function() {
        var _meeting$pubSub2;
        meeting === null || meeting === void 0 ? void 0 : (_meeting$pubSub2 = meeting.pubSub) === null || _meeting$pubSub2 === void 0 ? void 0 : _meeting$pubSub2.unsubscribe(topic, _handlePubSub);
      };
    }
  }, [meeting, isMeetingJoined]);
  return {
    publish,
    messages
  };
};
var Constants = import_js_sdk.VideoSDK.Constants;
var createCameraVideoTrack = function createCameraVideoTrack2(_ref) {
  var _ref$cameraId = _ref.cameraId, cameraId = _ref$cameraId === void 0 ? void 0 : _ref$cameraId, _ref$encoderConfig = _ref.encoderConfig, encoderConfig = _ref$encoderConfig === void 0 ? void 0 : _ref$encoderConfig, _ref$facingMode = _ref.facingMode, facingMode = _ref$facingMode === void 0 ? void 0 : _ref$facingMode, _ref$optimizationMode = _ref.optimizationMode, optimizationMode = _ref$optimizationMode === void 0 ? void 0 : _ref$optimizationMode, _ref$multiStream = _ref.multiStream, multiStream = _ref$multiStream === void 0 ? true : _ref$multiStream;
  try {
    return Promise.resolve(import_js_sdk.VideoSDK.createCameraVideoTrack({
      cameraId,
      encoderConfig,
      facingMode,
      optimizationMode,
      multiStream
    }));
  } catch (e) {
    return Promise.reject(e);
  }
};
var createScreenShareVideoTrack = function createScreenShareVideoTrack2(_ref2) {
  var _ref2$encoderConfig = _ref2.encoderConfig, encoderConfig = _ref2$encoderConfig === void 0 ? void 0 : _ref2$encoderConfig, _ref2$optimizationMod = _ref2.optimizationMode, optimizationMode = _ref2$optimizationMod === void 0 ? void 0 : _ref2$optimizationMod, _ref2$withAudio = _ref2.withAudio, withAudio = _ref2$withAudio === void 0 ? "enable" : _ref2$withAudio;
  try {
    return Promise.resolve(import_js_sdk.VideoSDK.createScreenShareVideoTrack({
      encoderConfig,
      optimizationMode,
      withAudio
    }));
  } catch (e) {
    return Promise.reject(e);
  }
};
var createMicrophoneAudioTrack = function createMicrophoneAudioTrack2(_ref3) {
  var _ref3$noiseConfig = _ref3.noiseConfig, noiseConfig = _ref3$noiseConfig === void 0 ? void 0 : _ref3$noiseConfig, _ref3$encoderConfig = _ref3.encoderConfig, encoderConfig = _ref3$encoderConfig === void 0 ? void 0 : _ref3$encoderConfig, _ref3$microphoneId = _ref3.microphoneId, microphoneId = _ref3$microphoneId === void 0 ? void 0 : _ref3$microphoneId;
  try {
    return Promise.resolve(import_js_sdk.VideoSDK.createMicrophoneAudioTrack({
      noiseConfig,
      encoderConfig,
      microphoneId
    }));
  } catch (e) {
    return Promise.reject(e);
  }
};
export {
  Constants,
  MeetingConsumer,
  MeetingProvider,
  createCameraVideoTrack,
  createMicrophoneAudioTrack,
  createScreenShareVideoTrack,
  useConnection,
  useMeeting,
  useParticipant,
  usePubSub
};
/*! Bundled license information:

@videosdk.live/js-sdk/videosdk.js:
  (*! For license information please see videosdk.js.LICENSE.txt *)
*/
//# sourceMappingURL=@videosdk__live_react-sdk.js.map
